
C2V1_OutDoorWeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092bc  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08009374  08009374  00019374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009484  08009484  0002053c  2**0
                  CONTENTS
  4 .ARM          00000008  08009484  08009484  00019484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800948c  0800948c  0002053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800948c  0800948c  0001948c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009494  08009494  00019494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000053c  20000000  08009498  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  2000053c  080099d4  0002053c  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20000c5c  080099d4  00020c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002053c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf1d  00000000  00000000  00020564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000442b  00000000  00000000  0003d481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  000418b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  00043028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015a1f  00000000  00000000  000445a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000071e6  00000000  00000000  00059fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000611ad  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000054ec  00000000  00000000  00061200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000053c 	.word	0x2000053c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800935c 	.word	0x0800935c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000540 	.word	0x20000540
 80000fc:	0800935c 	.word	0x0800935c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_uldivmod>:
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d111      	bne.n	8000414 <__aeabi_uldivmod+0x28>
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	d10f      	bne.n	8000414 <__aeabi_uldivmod+0x28>
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d100      	bne.n	80003fa <__aeabi_uldivmod+0xe>
 80003f8:	2800      	cmp	r0, #0
 80003fa:	d002      	beq.n	8000402 <__aeabi_uldivmod+0x16>
 80003fc:	2100      	movs	r1, #0
 80003fe:	43c9      	mvns	r1, r1
 8000400:	0008      	movs	r0, r1
 8000402:	b407      	push	{r0, r1, r2}
 8000404:	4802      	ldr	r0, [pc, #8]	; (8000410 <__aeabi_uldivmod+0x24>)
 8000406:	a102      	add	r1, pc, #8	; (adr r1, 8000410 <__aeabi_uldivmod+0x24>)
 8000408:	1840      	adds	r0, r0, r1
 800040a:	9002      	str	r0, [sp, #8]
 800040c:	bd03      	pop	{r0, r1, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	ffffffd9 	.word	0xffffffd9
 8000414:	b403      	push	{r0, r1}
 8000416:	4668      	mov	r0, sp
 8000418:	b501      	push	{r0, lr}
 800041a:	9802      	ldr	r0, [sp, #8]
 800041c:	f000 f806 	bl	800042c <__udivmoddi4>
 8000420:	9b01      	ldr	r3, [sp, #4]
 8000422:	469e      	mov	lr, r3
 8000424:	b002      	add	sp, #8
 8000426:	bc0c      	pop	{r2, r3}
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__udivmoddi4>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	4657      	mov	r7, sl
 8000430:	464e      	mov	r6, r9
 8000432:	4645      	mov	r5, r8
 8000434:	46de      	mov	lr, fp
 8000436:	b5e0      	push	{r5, r6, r7, lr}
 8000438:	0004      	movs	r4, r0
 800043a:	000d      	movs	r5, r1
 800043c:	4692      	mov	sl, r2
 800043e:	4699      	mov	r9, r3
 8000440:	b083      	sub	sp, #12
 8000442:	428b      	cmp	r3, r1
 8000444:	d830      	bhi.n	80004a8 <__udivmoddi4+0x7c>
 8000446:	d02d      	beq.n	80004a4 <__udivmoddi4+0x78>
 8000448:	4649      	mov	r1, r9
 800044a:	4650      	mov	r0, sl
 800044c:	f001 fa7a 	bl	8001944 <__clzdi2>
 8000450:	0029      	movs	r1, r5
 8000452:	0006      	movs	r6, r0
 8000454:	0020      	movs	r0, r4
 8000456:	f001 fa75 	bl	8001944 <__clzdi2>
 800045a:	1a33      	subs	r3, r6, r0
 800045c:	4698      	mov	r8, r3
 800045e:	3b20      	subs	r3, #32
 8000460:	469b      	mov	fp, r3
 8000462:	d433      	bmi.n	80004cc <__udivmoddi4+0xa0>
 8000464:	465a      	mov	r2, fp
 8000466:	4653      	mov	r3, sl
 8000468:	4093      	lsls	r3, r2
 800046a:	4642      	mov	r2, r8
 800046c:	001f      	movs	r7, r3
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001e      	movs	r6, r3
 8000474:	42af      	cmp	r7, r5
 8000476:	d83a      	bhi.n	80004ee <__udivmoddi4+0xc2>
 8000478:	42af      	cmp	r7, r5
 800047a:	d100      	bne.n	800047e <__udivmoddi4+0x52>
 800047c:	e078      	b.n	8000570 <__udivmoddi4+0x144>
 800047e:	465b      	mov	r3, fp
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5e>
 8000488:	e075      	b.n	8000576 <__udivmoddi4+0x14a>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	465a      	mov	r2, fp
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4642      	mov	r2, r8
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e028      	b.n	80004f6 <__udivmoddi4+0xca>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9cf      	bls.n	8000448 <__udivmoddi4+0x1c>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8e>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b003      	add	sp, #12
 80004c0:	bcf0      	pop	{r4, r5, r6, r7}
 80004c2:	46bb      	mov	fp, r7
 80004c4:	46b2      	mov	sl, r6
 80004c6:	46a9      	mov	r9, r5
 80004c8:	46a0      	mov	r8, r4
 80004ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004cc:	4642      	mov	r2, r8
 80004ce:	2320      	movs	r3, #32
 80004d0:	1a9b      	subs	r3, r3, r2
 80004d2:	4652      	mov	r2, sl
 80004d4:	40da      	lsrs	r2, r3
 80004d6:	4641      	mov	r1, r8
 80004d8:	0013      	movs	r3, r2
 80004da:	464a      	mov	r2, r9
 80004dc:	408a      	lsls	r2, r1
 80004de:	0017      	movs	r7, r2
 80004e0:	4642      	mov	r2, r8
 80004e2:	431f      	orrs	r7, r3
 80004e4:	4653      	mov	r3, sl
 80004e6:	4093      	lsls	r3, r2
 80004e8:	001e      	movs	r6, r3
 80004ea:	42af      	cmp	r7, r5
 80004ec:	d9c4      	bls.n	8000478 <__udivmoddi4+0x4c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	4643      	mov	r3, r8
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0d9      	beq.n	80004b0 <__udivmoddi4+0x84>
 80004fc:	07fb      	lsls	r3, r7, #31
 80004fe:	0872      	lsrs	r2, r6, #1
 8000500:	431a      	orrs	r2, r3
 8000502:	4646      	mov	r6, r8
 8000504:	087b      	lsrs	r3, r7, #1
 8000506:	e00e      	b.n	8000526 <__udivmoddi4+0xfa>
 8000508:	42ab      	cmp	r3, r5
 800050a:	d101      	bne.n	8000510 <__udivmoddi4+0xe4>
 800050c:	42a2      	cmp	r2, r4
 800050e:	d80c      	bhi.n	800052a <__udivmoddi4+0xfe>
 8000510:	1aa4      	subs	r4, r4, r2
 8000512:	419d      	sbcs	r5, r3
 8000514:	2001      	movs	r0, #1
 8000516:	1924      	adds	r4, r4, r4
 8000518:	416d      	adcs	r5, r5
 800051a:	2100      	movs	r1, #0
 800051c:	3e01      	subs	r6, #1
 800051e:	1824      	adds	r4, r4, r0
 8000520:	414d      	adcs	r5, r1
 8000522:	2e00      	cmp	r6, #0
 8000524:	d006      	beq.n	8000534 <__udivmoddi4+0x108>
 8000526:	42ab      	cmp	r3, r5
 8000528:	d9ee      	bls.n	8000508 <__udivmoddi4+0xdc>
 800052a:	3e01      	subs	r6, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2e00      	cmp	r6, #0
 8000532:	d1f8      	bne.n	8000526 <__udivmoddi4+0xfa>
 8000534:	9800      	ldr	r0, [sp, #0]
 8000536:	9901      	ldr	r1, [sp, #4]
 8000538:	465b      	mov	r3, fp
 800053a:	1900      	adds	r0, r0, r4
 800053c:	4169      	adcs	r1, r5
 800053e:	2b00      	cmp	r3, #0
 8000540:	db24      	blt.n	800058c <__udivmoddi4+0x160>
 8000542:	002b      	movs	r3, r5
 8000544:	465a      	mov	r2, fp
 8000546:	4644      	mov	r4, r8
 8000548:	40d3      	lsrs	r3, r2
 800054a:	002a      	movs	r2, r5
 800054c:	40e2      	lsrs	r2, r4
 800054e:	001c      	movs	r4, r3
 8000550:	465b      	mov	r3, fp
 8000552:	0015      	movs	r5, r2
 8000554:	2b00      	cmp	r3, #0
 8000556:	db2a      	blt.n	80005ae <__udivmoddi4+0x182>
 8000558:	0026      	movs	r6, r4
 800055a:	409e      	lsls	r6, r3
 800055c:	0033      	movs	r3, r6
 800055e:	0026      	movs	r6, r4
 8000560:	4647      	mov	r7, r8
 8000562:	40be      	lsls	r6, r7
 8000564:	0032      	movs	r2, r6
 8000566:	1a80      	subs	r0, r0, r2
 8000568:	4199      	sbcs	r1, r3
 800056a:	9000      	str	r0, [sp, #0]
 800056c:	9101      	str	r1, [sp, #4]
 800056e:	e79f      	b.n	80004b0 <__udivmoddi4+0x84>
 8000570:	42a3      	cmp	r3, r4
 8000572:	d8bc      	bhi.n	80004ee <__udivmoddi4+0xc2>
 8000574:	e783      	b.n	800047e <__udivmoddi4+0x52>
 8000576:	4642      	mov	r2, r8
 8000578:	2320      	movs	r3, #32
 800057a:	2100      	movs	r1, #0
 800057c:	1a9b      	subs	r3, r3, r2
 800057e:	2200      	movs	r2, #0
 8000580:	9100      	str	r1, [sp, #0]
 8000582:	9201      	str	r2, [sp, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	40da      	lsrs	r2, r3
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	e786      	b.n	800049a <__udivmoddi4+0x6e>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	002a      	movs	r2, r5
 8000594:	4646      	mov	r6, r8
 8000596:	409a      	lsls	r2, r3
 8000598:	0023      	movs	r3, r4
 800059a:	40f3      	lsrs	r3, r6
 800059c:	4644      	mov	r4, r8
 800059e:	4313      	orrs	r3, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	40e2      	lsrs	r2, r4
 80005a4:	001c      	movs	r4, r3
 80005a6:	465b      	mov	r3, fp
 80005a8:	0015      	movs	r5, r2
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	dad4      	bge.n	8000558 <__udivmoddi4+0x12c>
 80005ae:	4642      	mov	r2, r8
 80005b0:	002f      	movs	r7, r5
 80005b2:	2320      	movs	r3, #32
 80005b4:	0026      	movs	r6, r4
 80005b6:	4097      	lsls	r7, r2
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	40de      	lsrs	r6, r3
 80005bc:	003b      	movs	r3, r7
 80005be:	4333      	orrs	r3, r6
 80005c0:	e7cd      	b.n	800055e <__udivmoddi4+0x132>
 80005c2:	46c0      	nop			; (mov r8, r8)

080005c4 <__aeabi_ddiv>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	4657      	mov	r7, sl
 80005c8:	464e      	mov	r6, r9
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	b5e0      	push	{r5, r6, r7, lr}
 80005d0:	4681      	mov	r9, r0
 80005d2:	0005      	movs	r5, r0
 80005d4:	030c      	lsls	r4, r1, #12
 80005d6:	0048      	lsls	r0, r1, #1
 80005d8:	4692      	mov	sl, r2
 80005da:	001f      	movs	r7, r3
 80005dc:	b085      	sub	sp, #20
 80005de:	0b24      	lsrs	r4, r4, #12
 80005e0:	0d40      	lsrs	r0, r0, #21
 80005e2:	0fce      	lsrs	r6, r1, #31
 80005e4:	2800      	cmp	r0, #0
 80005e6:	d100      	bne.n	80005ea <__aeabi_ddiv+0x26>
 80005e8:	e156      	b.n	8000898 <__aeabi_ddiv+0x2d4>
 80005ea:	4bd4      	ldr	r3, [pc, #848]	; (800093c <__aeabi_ddiv+0x378>)
 80005ec:	4298      	cmp	r0, r3
 80005ee:	d100      	bne.n	80005f2 <__aeabi_ddiv+0x2e>
 80005f0:	e172      	b.n	80008d8 <__aeabi_ddiv+0x314>
 80005f2:	0f6b      	lsrs	r3, r5, #29
 80005f4:	00e4      	lsls	r4, r4, #3
 80005f6:	431c      	orrs	r4, r3
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	041b      	lsls	r3, r3, #16
 80005fc:	4323      	orrs	r3, r4
 80005fe:	4698      	mov	r8, r3
 8000600:	4bcf      	ldr	r3, [pc, #828]	; (8000940 <__aeabi_ddiv+0x37c>)
 8000602:	00ed      	lsls	r5, r5, #3
 8000604:	469b      	mov	fp, r3
 8000606:	2300      	movs	r3, #0
 8000608:	4699      	mov	r9, r3
 800060a:	4483      	add	fp, r0
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	033c      	lsls	r4, r7, #12
 8000610:	007b      	lsls	r3, r7, #1
 8000612:	4650      	mov	r0, sl
 8000614:	0b24      	lsrs	r4, r4, #12
 8000616:	0d5b      	lsrs	r3, r3, #21
 8000618:	0fff      	lsrs	r7, r7, #31
 800061a:	2b00      	cmp	r3, #0
 800061c:	d100      	bne.n	8000620 <__aeabi_ddiv+0x5c>
 800061e:	e11f      	b.n	8000860 <__aeabi_ddiv+0x29c>
 8000620:	4ac6      	ldr	r2, [pc, #792]	; (800093c <__aeabi_ddiv+0x378>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d100      	bne.n	8000628 <__aeabi_ddiv+0x64>
 8000626:	e162      	b.n	80008ee <__aeabi_ddiv+0x32a>
 8000628:	49c5      	ldr	r1, [pc, #788]	; (8000940 <__aeabi_ddiv+0x37c>)
 800062a:	0f42      	lsrs	r2, r0, #29
 800062c:	468c      	mov	ip, r1
 800062e:	00e4      	lsls	r4, r4, #3
 8000630:	4659      	mov	r1, fp
 8000632:	4314      	orrs	r4, r2
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	4463      	add	r3, ip
 8000638:	0412      	lsls	r2, r2, #16
 800063a:	1acb      	subs	r3, r1, r3
 800063c:	4314      	orrs	r4, r2
 800063e:	469b      	mov	fp, r3
 8000640:	00c2      	lsls	r2, r0, #3
 8000642:	2000      	movs	r0, #0
 8000644:	0033      	movs	r3, r6
 8000646:	407b      	eors	r3, r7
 8000648:	469a      	mov	sl, r3
 800064a:	464b      	mov	r3, r9
 800064c:	2b0f      	cmp	r3, #15
 800064e:	d827      	bhi.n	80006a0 <__aeabi_ddiv+0xdc>
 8000650:	49bc      	ldr	r1, [pc, #752]	; (8000944 <__aeabi_ddiv+0x380>)
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	58cb      	ldr	r3, [r1, r3]
 8000656:	469f      	mov	pc, r3
 8000658:	46b2      	mov	sl, r6
 800065a:	9b00      	ldr	r3, [sp, #0]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d016      	beq.n	800068e <__aeabi_ddiv+0xca>
 8000660:	2b03      	cmp	r3, #3
 8000662:	d100      	bne.n	8000666 <__aeabi_ddiv+0xa2>
 8000664:	e28e      	b.n	8000b84 <__aeabi_ddiv+0x5c0>
 8000666:	2b01      	cmp	r3, #1
 8000668:	d000      	beq.n	800066c <__aeabi_ddiv+0xa8>
 800066a:	e0d9      	b.n	8000820 <__aeabi_ddiv+0x25c>
 800066c:	2300      	movs	r3, #0
 800066e:	2400      	movs	r4, #0
 8000670:	2500      	movs	r5, #0
 8000672:	4652      	mov	r2, sl
 8000674:	051b      	lsls	r3, r3, #20
 8000676:	4323      	orrs	r3, r4
 8000678:	07d2      	lsls	r2, r2, #31
 800067a:	4313      	orrs	r3, r2
 800067c:	0028      	movs	r0, r5
 800067e:	0019      	movs	r1, r3
 8000680:	b005      	add	sp, #20
 8000682:	bcf0      	pop	{r4, r5, r6, r7}
 8000684:	46bb      	mov	fp, r7
 8000686:	46b2      	mov	sl, r6
 8000688:	46a9      	mov	r9, r5
 800068a:	46a0      	mov	r8, r4
 800068c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800068e:	2400      	movs	r4, #0
 8000690:	2500      	movs	r5, #0
 8000692:	4baa      	ldr	r3, [pc, #680]	; (800093c <__aeabi_ddiv+0x378>)
 8000694:	e7ed      	b.n	8000672 <__aeabi_ddiv+0xae>
 8000696:	46ba      	mov	sl, r7
 8000698:	46a0      	mov	r8, r4
 800069a:	0015      	movs	r5, r2
 800069c:	9000      	str	r0, [sp, #0]
 800069e:	e7dc      	b.n	800065a <__aeabi_ddiv+0x96>
 80006a0:	4544      	cmp	r4, r8
 80006a2:	d200      	bcs.n	80006a6 <__aeabi_ddiv+0xe2>
 80006a4:	e1c7      	b.n	8000a36 <__aeabi_ddiv+0x472>
 80006a6:	d100      	bne.n	80006aa <__aeabi_ddiv+0xe6>
 80006a8:	e1c2      	b.n	8000a30 <__aeabi_ddiv+0x46c>
 80006aa:	2301      	movs	r3, #1
 80006ac:	425b      	negs	r3, r3
 80006ae:	469c      	mov	ip, r3
 80006b0:	002e      	movs	r6, r5
 80006b2:	4640      	mov	r0, r8
 80006b4:	2500      	movs	r5, #0
 80006b6:	44e3      	add	fp, ip
 80006b8:	0223      	lsls	r3, r4, #8
 80006ba:	0e14      	lsrs	r4, r2, #24
 80006bc:	431c      	orrs	r4, r3
 80006be:	0c1b      	lsrs	r3, r3, #16
 80006c0:	4699      	mov	r9, r3
 80006c2:	0423      	lsls	r3, r4, #16
 80006c4:	0c1f      	lsrs	r7, r3, #16
 80006c6:	0212      	lsls	r2, r2, #8
 80006c8:	4649      	mov	r1, r9
 80006ca:	9200      	str	r2, [sp, #0]
 80006cc:	9701      	str	r7, [sp, #4]
 80006ce:	f7ff fd9d 	bl	800020c <__aeabi_uidivmod>
 80006d2:	0002      	movs	r2, r0
 80006d4:	437a      	muls	r2, r7
 80006d6:	040b      	lsls	r3, r1, #16
 80006d8:	0c31      	lsrs	r1, r6, #16
 80006da:	4680      	mov	r8, r0
 80006dc:	4319      	orrs	r1, r3
 80006de:	428a      	cmp	r2, r1
 80006e0:	d907      	bls.n	80006f2 <__aeabi_ddiv+0x12e>
 80006e2:	2301      	movs	r3, #1
 80006e4:	425b      	negs	r3, r3
 80006e6:	469c      	mov	ip, r3
 80006e8:	1909      	adds	r1, r1, r4
 80006ea:	44e0      	add	r8, ip
 80006ec:	428c      	cmp	r4, r1
 80006ee:	d800      	bhi.n	80006f2 <__aeabi_ddiv+0x12e>
 80006f0:	e207      	b.n	8000b02 <__aeabi_ddiv+0x53e>
 80006f2:	1a88      	subs	r0, r1, r2
 80006f4:	4649      	mov	r1, r9
 80006f6:	f7ff fd89 	bl	800020c <__aeabi_uidivmod>
 80006fa:	0409      	lsls	r1, r1, #16
 80006fc:	468c      	mov	ip, r1
 80006fe:	0431      	lsls	r1, r6, #16
 8000700:	4666      	mov	r6, ip
 8000702:	9a01      	ldr	r2, [sp, #4]
 8000704:	0c09      	lsrs	r1, r1, #16
 8000706:	4342      	muls	r2, r0
 8000708:	0003      	movs	r3, r0
 800070a:	4331      	orrs	r1, r6
 800070c:	428a      	cmp	r2, r1
 800070e:	d904      	bls.n	800071a <__aeabi_ddiv+0x156>
 8000710:	1909      	adds	r1, r1, r4
 8000712:	3b01      	subs	r3, #1
 8000714:	428c      	cmp	r4, r1
 8000716:	d800      	bhi.n	800071a <__aeabi_ddiv+0x156>
 8000718:	e1ed      	b.n	8000af6 <__aeabi_ddiv+0x532>
 800071a:	1a88      	subs	r0, r1, r2
 800071c:	4642      	mov	r2, r8
 800071e:	0412      	lsls	r2, r2, #16
 8000720:	431a      	orrs	r2, r3
 8000722:	4690      	mov	r8, r2
 8000724:	4641      	mov	r1, r8
 8000726:	9b00      	ldr	r3, [sp, #0]
 8000728:	040e      	lsls	r6, r1, #16
 800072a:	0c1b      	lsrs	r3, r3, #16
 800072c:	001f      	movs	r7, r3
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	9b00      	ldr	r3, [sp, #0]
 8000732:	0c36      	lsrs	r6, r6, #16
 8000734:	041b      	lsls	r3, r3, #16
 8000736:	0c19      	lsrs	r1, r3, #16
 8000738:	000b      	movs	r3, r1
 800073a:	4373      	muls	r3, r6
 800073c:	0c12      	lsrs	r2, r2, #16
 800073e:	437e      	muls	r6, r7
 8000740:	9103      	str	r1, [sp, #12]
 8000742:	4351      	muls	r1, r2
 8000744:	437a      	muls	r2, r7
 8000746:	0c1f      	lsrs	r7, r3, #16
 8000748:	46bc      	mov	ip, r7
 800074a:	1876      	adds	r6, r6, r1
 800074c:	4466      	add	r6, ip
 800074e:	42b1      	cmp	r1, r6
 8000750:	d903      	bls.n	800075a <__aeabi_ddiv+0x196>
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	0249      	lsls	r1, r1, #9
 8000756:	468c      	mov	ip, r1
 8000758:	4462      	add	r2, ip
 800075a:	0c31      	lsrs	r1, r6, #16
 800075c:	188a      	adds	r2, r1, r2
 800075e:	0431      	lsls	r1, r6, #16
 8000760:	041e      	lsls	r6, r3, #16
 8000762:	0c36      	lsrs	r6, r6, #16
 8000764:	198e      	adds	r6, r1, r6
 8000766:	4290      	cmp	r0, r2
 8000768:	d302      	bcc.n	8000770 <__aeabi_ddiv+0x1ac>
 800076a:	d112      	bne.n	8000792 <__aeabi_ddiv+0x1ce>
 800076c:	42b5      	cmp	r5, r6
 800076e:	d210      	bcs.n	8000792 <__aeabi_ddiv+0x1ce>
 8000770:	4643      	mov	r3, r8
 8000772:	1e59      	subs	r1, r3, #1
 8000774:	9b00      	ldr	r3, [sp, #0]
 8000776:	469c      	mov	ip, r3
 8000778:	4465      	add	r5, ip
 800077a:	001f      	movs	r7, r3
 800077c:	429d      	cmp	r5, r3
 800077e:	419b      	sbcs	r3, r3
 8000780:	425b      	negs	r3, r3
 8000782:	191b      	adds	r3, r3, r4
 8000784:	18c0      	adds	r0, r0, r3
 8000786:	4284      	cmp	r4, r0
 8000788:	d200      	bcs.n	800078c <__aeabi_ddiv+0x1c8>
 800078a:	e1a0      	b.n	8000ace <__aeabi_ddiv+0x50a>
 800078c:	d100      	bne.n	8000790 <__aeabi_ddiv+0x1cc>
 800078e:	e19b      	b.n	8000ac8 <__aeabi_ddiv+0x504>
 8000790:	4688      	mov	r8, r1
 8000792:	1bae      	subs	r6, r5, r6
 8000794:	42b5      	cmp	r5, r6
 8000796:	41ad      	sbcs	r5, r5
 8000798:	1a80      	subs	r0, r0, r2
 800079a:	426d      	negs	r5, r5
 800079c:	1b40      	subs	r0, r0, r5
 800079e:	4284      	cmp	r4, r0
 80007a0:	d100      	bne.n	80007a4 <__aeabi_ddiv+0x1e0>
 80007a2:	e1d5      	b.n	8000b50 <__aeabi_ddiv+0x58c>
 80007a4:	4649      	mov	r1, r9
 80007a6:	f7ff fd31 	bl	800020c <__aeabi_uidivmod>
 80007aa:	9a01      	ldr	r2, [sp, #4]
 80007ac:	040b      	lsls	r3, r1, #16
 80007ae:	4342      	muls	r2, r0
 80007b0:	0c31      	lsrs	r1, r6, #16
 80007b2:	0005      	movs	r5, r0
 80007b4:	4319      	orrs	r1, r3
 80007b6:	428a      	cmp	r2, r1
 80007b8:	d900      	bls.n	80007bc <__aeabi_ddiv+0x1f8>
 80007ba:	e16c      	b.n	8000a96 <__aeabi_ddiv+0x4d2>
 80007bc:	1a88      	subs	r0, r1, r2
 80007be:	4649      	mov	r1, r9
 80007c0:	f7ff fd24 	bl	800020c <__aeabi_uidivmod>
 80007c4:	9a01      	ldr	r2, [sp, #4]
 80007c6:	0436      	lsls	r6, r6, #16
 80007c8:	4342      	muls	r2, r0
 80007ca:	0409      	lsls	r1, r1, #16
 80007cc:	0c36      	lsrs	r6, r6, #16
 80007ce:	0003      	movs	r3, r0
 80007d0:	430e      	orrs	r6, r1
 80007d2:	42b2      	cmp	r2, r6
 80007d4:	d900      	bls.n	80007d8 <__aeabi_ddiv+0x214>
 80007d6:	e153      	b.n	8000a80 <__aeabi_ddiv+0x4bc>
 80007d8:	9803      	ldr	r0, [sp, #12]
 80007da:	1ab6      	subs	r6, r6, r2
 80007dc:	0002      	movs	r2, r0
 80007de:	042d      	lsls	r5, r5, #16
 80007e0:	431d      	orrs	r5, r3
 80007e2:	9f02      	ldr	r7, [sp, #8]
 80007e4:	042b      	lsls	r3, r5, #16
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	435a      	muls	r2, r3
 80007ea:	437b      	muls	r3, r7
 80007ec:	469c      	mov	ip, r3
 80007ee:	0c29      	lsrs	r1, r5, #16
 80007f0:	4348      	muls	r0, r1
 80007f2:	0c13      	lsrs	r3, r2, #16
 80007f4:	4484      	add	ip, r0
 80007f6:	4463      	add	r3, ip
 80007f8:	4379      	muls	r1, r7
 80007fa:	4298      	cmp	r0, r3
 80007fc:	d903      	bls.n	8000806 <__aeabi_ddiv+0x242>
 80007fe:	2080      	movs	r0, #128	; 0x80
 8000800:	0240      	lsls	r0, r0, #9
 8000802:	4684      	mov	ip, r0
 8000804:	4461      	add	r1, ip
 8000806:	0c18      	lsrs	r0, r3, #16
 8000808:	0412      	lsls	r2, r2, #16
 800080a:	041b      	lsls	r3, r3, #16
 800080c:	0c12      	lsrs	r2, r2, #16
 800080e:	1841      	adds	r1, r0, r1
 8000810:	189b      	adds	r3, r3, r2
 8000812:	428e      	cmp	r6, r1
 8000814:	d200      	bcs.n	8000818 <__aeabi_ddiv+0x254>
 8000816:	e0ff      	b.n	8000a18 <__aeabi_ddiv+0x454>
 8000818:	d100      	bne.n	800081c <__aeabi_ddiv+0x258>
 800081a:	e0fa      	b.n	8000a12 <__aeabi_ddiv+0x44e>
 800081c:	2301      	movs	r3, #1
 800081e:	431d      	orrs	r5, r3
 8000820:	4a49      	ldr	r2, [pc, #292]	; (8000948 <__aeabi_ddiv+0x384>)
 8000822:	445a      	add	r2, fp
 8000824:	2a00      	cmp	r2, #0
 8000826:	dc00      	bgt.n	800082a <__aeabi_ddiv+0x266>
 8000828:	e0aa      	b.n	8000980 <__aeabi_ddiv+0x3bc>
 800082a:	076b      	lsls	r3, r5, #29
 800082c:	d000      	beq.n	8000830 <__aeabi_ddiv+0x26c>
 800082e:	e13d      	b.n	8000aac <__aeabi_ddiv+0x4e8>
 8000830:	08ed      	lsrs	r5, r5, #3
 8000832:	4643      	mov	r3, r8
 8000834:	01db      	lsls	r3, r3, #7
 8000836:	d506      	bpl.n	8000846 <__aeabi_ddiv+0x282>
 8000838:	4642      	mov	r2, r8
 800083a:	4b44      	ldr	r3, [pc, #272]	; (800094c <__aeabi_ddiv+0x388>)
 800083c:	401a      	ands	r2, r3
 800083e:	4690      	mov	r8, r2
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	00d2      	lsls	r2, r2, #3
 8000844:	445a      	add	r2, fp
 8000846:	4b42      	ldr	r3, [pc, #264]	; (8000950 <__aeabi_ddiv+0x38c>)
 8000848:	429a      	cmp	r2, r3
 800084a:	dd00      	ble.n	800084e <__aeabi_ddiv+0x28a>
 800084c:	e71f      	b.n	800068e <__aeabi_ddiv+0xca>
 800084e:	4643      	mov	r3, r8
 8000850:	075b      	lsls	r3, r3, #29
 8000852:	431d      	orrs	r5, r3
 8000854:	4643      	mov	r3, r8
 8000856:	0552      	lsls	r2, r2, #21
 8000858:	025c      	lsls	r4, r3, #9
 800085a:	0b24      	lsrs	r4, r4, #12
 800085c:	0d53      	lsrs	r3, r2, #21
 800085e:	e708      	b.n	8000672 <__aeabi_ddiv+0xae>
 8000860:	4652      	mov	r2, sl
 8000862:	4322      	orrs	r2, r4
 8000864:	d100      	bne.n	8000868 <__aeabi_ddiv+0x2a4>
 8000866:	e07b      	b.n	8000960 <__aeabi_ddiv+0x39c>
 8000868:	2c00      	cmp	r4, #0
 800086a:	d100      	bne.n	800086e <__aeabi_ddiv+0x2aa>
 800086c:	e0fa      	b.n	8000a64 <__aeabi_ddiv+0x4a0>
 800086e:	0020      	movs	r0, r4
 8000870:	f001 f84a 	bl	8001908 <__clzsi2>
 8000874:	0002      	movs	r2, r0
 8000876:	3a0b      	subs	r2, #11
 8000878:	231d      	movs	r3, #29
 800087a:	0001      	movs	r1, r0
 800087c:	1a9b      	subs	r3, r3, r2
 800087e:	4652      	mov	r2, sl
 8000880:	3908      	subs	r1, #8
 8000882:	40da      	lsrs	r2, r3
 8000884:	408c      	lsls	r4, r1
 8000886:	4314      	orrs	r4, r2
 8000888:	4652      	mov	r2, sl
 800088a:	408a      	lsls	r2, r1
 800088c:	4b31      	ldr	r3, [pc, #196]	; (8000954 <__aeabi_ddiv+0x390>)
 800088e:	4458      	add	r0, fp
 8000890:	469b      	mov	fp, r3
 8000892:	4483      	add	fp, r0
 8000894:	2000      	movs	r0, #0
 8000896:	e6d5      	b.n	8000644 <__aeabi_ddiv+0x80>
 8000898:	464b      	mov	r3, r9
 800089a:	4323      	orrs	r3, r4
 800089c:	4698      	mov	r8, r3
 800089e:	d044      	beq.n	800092a <__aeabi_ddiv+0x366>
 80008a0:	2c00      	cmp	r4, #0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_ddiv+0x2e2>
 80008a4:	e0ce      	b.n	8000a44 <__aeabi_ddiv+0x480>
 80008a6:	0020      	movs	r0, r4
 80008a8:	f001 f82e 	bl	8001908 <__clzsi2>
 80008ac:	0001      	movs	r1, r0
 80008ae:	0002      	movs	r2, r0
 80008b0:	390b      	subs	r1, #11
 80008b2:	231d      	movs	r3, #29
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	4649      	mov	r1, r9
 80008b8:	0010      	movs	r0, r2
 80008ba:	40d9      	lsrs	r1, r3
 80008bc:	3808      	subs	r0, #8
 80008be:	4084      	lsls	r4, r0
 80008c0:	000b      	movs	r3, r1
 80008c2:	464d      	mov	r5, r9
 80008c4:	4323      	orrs	r3, r4
 80008c6:	4698      	mov	r8, r3
 80008c8:	4085      	lsls	r5, r0
 80008ca:	4823      	ldr	r0, [pc, #140]	; (8000958 <__aeabi_ddiv+0x394>)
 80008cc:	1a83      	subs	r3, r0, r2
 80008ce:	469b      	mov	fp, r3
 80008d0:	2300      	movs	r3, #0
 80008d2:	4699      	mov	r9, r3
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	e69a      	b.n	800060e <__aeabi_ddiv+0x4a>
 80008d8:	464b      	mov	r3, r9
 80008da:	4323      	orrs	r3, r4
 80008dc:	4698      	mov	r8, r3
 80008de:	d11d      	bne.n	800091c <__aeabi_ddiv+0x358>
 80008e0:	2308      	movs	r3, #8
 80008e2:	4699      	mov	r9, r3
 80008e4:	3b06      	subs	r3, #6
 80008e6:	2500      	movs	r5, #0
 80008e8:	4683      	mov	fp, r0
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	e68f      	b.n	800060e <__aeabi_ddiv+0x4a>
 80008ee:	4652      	mov	r2, sl
 80008f0:	4322      	orrs	r2, r4
 80008f2:	d109      	bne.n	8000908 <__aeabi_ddiv+0x344>
 80008f4:	2302      	movs	r3, #2
 80008f6:	4649      	mov	r1, r9
 80008f8:	4319      	orrs	r1, r3
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <__aeabi_ddiv+0x398>)
 80008fc:	4689      	mov	r9, r1
 80008fe:	469c      	mov	ip, r3
 8000900:	2400      	movs	r4, #0
 8000902:	2002      	movs	r0, #2
 8000904:	44e3      	add	fp, ip
 8000906:	e69d      	b.n	8000644 <__aeabi_ddiv+0x80>
 8000908:	2303      	movs	r3, #3
 800090a:	464a      	mov	r2, r9
 800090c:	431a      	orrs	r2, r3
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <__aeabi_ddiv+0x398>)
 8000910:	4691      	mov	r9, r2
 8000912:	469c      	mov	ip, r3
 8000914:	4652      	mov	r2, sl
 8000916:	2003      	movs	r0, #3
 8000918:	44e3      	add	fp, ip
 800091a:	e693      	b.n	8000644 <__aeabi_ddiv+0x80>
 800091c:	230c      	movs	r3, #12
 800091e:	4699      	mov	r9, r3
 8000920:	3b09      	subs	r3, #9
 8000922:	46a0      	mov	r8, r4
 8000924:	4683      	mov	fp, r0
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	e671      	b.n	800060e <__aeabi_ddiv+0x4a>
 800092a:	2304      	movs	r3, #4
 800092c:	4699      	mov	r9, r3
 800092e:	2300      	movs	r3, #0
 8000930:	469b      	mov	fp, r3
 8000932:	3301      	adds	r3, #1
 8000934:	2500      	movs	r5, #0
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	e669      	b.n	800060e <__aeabi_ddiv+0x4a>
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	000007ff 	.word	0x000007ff
 8000940:	fffffc01 	.word	0xfffffc01
 8000944:	08009378 	.word	0x08009378
 8000948:	000003ff 	.word	0x000003ff
 800094c:	feffffff 	.word	0xfeffffff
 8000950:	000007fe 	.word	0x000007fe
 8000954:	000003f3 	.word	0x000003f3
 8000958:	fffffc0d 	.word	0xfffffc0d
 800095c:	fffff801 	.word	0xfffff801
 8000960:	4649      	mov	r1, r9
 8000962:	2301      	movs	r3, #1
 8000964:	4319      	orrs	r1, r3
 8000966:	4689      	mov	r9, r1
 8000968:	2400      	movs	r4, #0
 800096a:	2001      	movs	r0, #1
 800096c:	e66a      	b.n	8000644 <__aeabi_ddiv+0x80>
 800096e:	2300      	movs	r3, #0
 8000970:	2480      	movs	r4, #128	; 0x80
 8000972:	469a      	mov	sl, r3
 8000974:	2500      	movs	r5, #0
 8000976:	4b8a      	ldr	r3, [pc, #552]	; (8000ba0 <__aeabi_ddiv+0x5dc>)
 8000978:	0324      	lsls	r4, r4, #12
 800097a:	e67a      	b.n	8000672 <__aeabi_ddiv+0xae>
 800097c:	2501      	movs	r5, #1
 800097e:	426d      	negs	r5, r5
 8000980:	2301      	movs	r3, #1
 8000982:	1a9b      	subs	r3, r3, r2
 8000984:	2b38      	cmp	r3, #56	; 0x38
 8000986:	dd00      	ble.n	800098a <__aeabi_ddiv+0x3c6>
 8000988:	e670      	b.n	800066c <__aeabi_ddiv+0xa8>
 800098a:	2b1f      	cmp	r3, #31
 800098c:	dc00      	bgt.n	8000990 <__aeabi_ddiv+0x3cc>
 800098e:	e0bf      	b.n	8000b10 <__aeabi_ddiv+0x54c>
 8000990:	211f      	movs	r1, #31
 8000992:	4249      	negs	r1, r1
 8000994:	1a8a      	subs	r2, r1, r2
 8000996:	4641      	mov	r1, r8
 8000998:	40d1      	lsrs	r1, r2
 800099a:	000a      	movs	r2, r1
 800099c:	2b20      	cmp	r3, #32
 800099e:	d004      	beq.n	80009aa <__aeabi_ddiv+0x3e6>
 80009a0:	4641      	mov	r1, r8
 80009a2:	4b80      	ldr	r3, [pc, #512]	; (8000ba4 <__aeabi_ddiv+0x5e0>)
 80009a4:	445b      	add	r3, fp
 80009a6:	4099      	lsls	r1, r3
 80009a8:	430d      	orrs	r5, r1
 80009aa:	1e6b      	subs	r3, r5, #1
 80009ac:	419d      	sbcs	r5, r3
 80009ae:	2307      	movs	r3, #7
 80009b0:	432a      	orrs	r2, r5
 80009b2:	001d      	movs	r5, r3
 80009b4:	2400      	movs	r4, #0
 80009b6:	4015      	ands	r5, r2
 80009b8:	4213      	tst	r3, r2
 80009ba:	d100      	bne.n	80009be <__aeabi_ddiv+0x3fa>
 80009bc:	e0d4      	b.n	8000b68 <__aeabi_ddiv+0x5a4>
 80009be:	210f      	movs	r1, #15
 80009c0:	2300      	movs	r3, #0
 80009c2:	4011      	ands	r1, r2
 80009c4:	2904      	cmp	r1, #4
 80009c6:	d100      	bne.n	80009ca <__aeabi_ddiv+0x406>
 80009c8:	e0cb      	b.n	8000b62 <__aeabi_ddiv+0x59e>
 80009ca:	1d11      	adds	r1, r2, #4
 80009cc:	4291      	cmp	r1, r2
 80009ce:	4192      	sbcs	r2, r2
 80009d0:	4252      	negs	r2, r2
 80009d2:	189b      	adds	r3, r3, r2
 80009d4:	000a      	movs	r2, r1
 80009d6:	0219      	lsls	r1, r3, #8
 80009d8:	d400      	bmi.n	80009dc <__aeabi_ddiv+0x418>
 80009da:	e0c2      	b.n	8000b62 <__aeabi_ddiv+0x59e>
 80009dc:	2301      	movs	r3, #1
 80009de:	2400      	movs	r4, #0
 80009e0:	2500      	movs	r5, #0
 80009e2:	e646      	b.n	8000672 <__aeabi_ddiv+0xae>
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	4641      	mov	r1, r8
 80009e8:	031b      	lsls	r3, r3, #12
 80009ea:	4219      	tst	r1, r3
 80009ec:	d008      	beq.n	8000a00 <__aeabi_ddiv+0x43c>
 80009ee:	421c      	tst	r4, r3
 80009f0:	d106      	bne.n	8000a00 <__aeabi_ddiv+0x43c>
 80009f2:	431c      	orrs	r4, r3
 80009f4:	0324      	lsls	r4, r4, #12
 80009f6:	46ba      	mov	sl, r7
 80009f8:	0015      	movs	r5, r2
 80009fa:	4b69      	ldr	r3, [pc, #420]	; (8000ba0 <__aeabi_ddiv+0x5dc>)
 80009fc:	0b24      	lsrs	r4, r4, #12
 80009fe:	e638      	b.n	8000672 <__aeabi_ddiv+0xae>
 8000a00:	2480      	movs	r4, #128	; 0x80
 8000a02:	4643      	mov	r3, r8
 8000a04:	0324      	lsls	r4, r4, #12
 8000a06:	431c      	orrs	r4, r3
 8000a08:	0324      	lsls	r4, r4, #12
 8000a0a:	46b2      	mov	sl, r6
 8000a0c:	4b64      	ldr	r3, [pc, #400]	; (8000ba0 <__aeabi_ddiv+0x5dc>)
 8000a0e:	0b24      	lsrs	r4, r4, #12
 8000a10:	e62f      	b.n	8000672 <__aeabi_ddiv+0xae>
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d100      	bne.n	8000a18 <__aeabi_ddiv+0x454>
 8000a16:	e703      	b.n	8000820 <__aeabi_ddiv+0x25c>
 8000a18:	19a6      	adds	r6, r4, r6
 8000a1a:	1e68      	subs	r0, r5, #1
 8000a1c:	42a6      	cmp	r6, r4
 8000a1e:	d200      	bcs.n	8000a22 <__aeabi_ddiv+0x45e>
 8000a20:	e08d      	b.n	8000b3e <__aeabi_ddiv+0x57a>
 8000a22:	428e      	cmp	r6, r1
 8000a24:	d200      	bcs.n	8000a28 <__aeabi_ddiv+0x464>
 8000a26:	e0a3      	b.n	8000b70 <__aeabi_ddiv+0x5ac>
 8000a28:	d100      	bne.n	8000a2c <__aeabi_ddiv+0x468>
 8000a2a:	e0b3      	b.n	8000b94 <__aeabi_ddiv+0x5d0>
 8000a2c:	0005      	movs	r5, r0
 8000a2e:	e6f5      	b.n	800081c <__aeabi_ddiv+0x258>
 8000a30:	42aa      	cmp	r2, r5
 8000a32:	d900      	bls.n	8000a36 <__aeabi_ddiv+0x472>
 8000a34:	e639      	b.n	80006aa <__aeabi_ddiv+0xe6>
 8000a36:	4643      	mov	r3, r8
 8000a38:	07de      	lsls	r6, r3, #31
 8000a3a:	0858      	lsrs	r0, r3, #1
 8000a3c:	086b      	lsrs	r3, r5, #1
 8000a3e:	431e      	orrs	r6, r3
 8000a40:	07ed      	lsls	r5, r5, #31
 8000a42:	e639      	b.n	80006b8 <__aeabi_ddiv+0xf4>
 8000a44:	4648      	mov	r0, r9
 8000a46:	f000 ff5f 	bl	8001908 <__clzsi2>
 8000a4a:	0001      	movs	r1, r0
 8000a4c:	0002      	movs	r2, r0
 8000a4e:	3115      	adds	r1, #21
 8000a50:	3220      	adds	r2, #32
 8000a52:	291c      	cmp	r1, #28
 8000a54:	dc00      	bgt.n	8000a58 <__aeabi_ddiv+0x494>
 8000a56:	e72c      	b.n	80008b2 <__aeabi_ddiv+0x2ee>
 8000a58:	464b      	mov	r3, r9
 8000a5a:	3808      	subs	r0, #8
 8000a5c:	4083      	lsls	r3, r0
 8000a5e:	2500      	movs	r5, #0
 8000a60:	4698      	mov	r8, r3
 8000a62:	e732      	b.n	80008ca <__aeabi_ddiv+0x306>
 8000a64:	f000 ff50 	bl	8001908 <__clzsi2>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	3215      	adds	r2, #21
 8000a6e:	3020      	adds	r0, #32
 8000a70:	2a1c      	cmp	r2, #28
 8000a72:	dc00      	bgt.n	8000a76 <__aeabi_ddiv+0x4b2>
 8000a74:	e700      	b.n	8000878 <__aeabi_ddiv+0x2b4>
 8000a76:	4654      	mov	r4, sl
 8000a78:	3b08      	subs	r3, #8
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	409c      	lsls	r4, r3
 8000a7e:	e705      	b.n	800088c <__aeabi_ddiv+0x2c8>
 8000a80:	1936      	adds	r6, r6, r4
 8000a82:	3b01      	subs	r3, #1
 8000a84:	42b4      	cmp	r4, r6
 8000a86:	d900      	bls.n	8000a8a <__aeabi_ddiv+0x4c6>
 8000a88:	e6a6      	b.n	80007d8 <__aeabi_ddiv+0x214>
 8000a8a:	42b2      	cmp	r2, r6
 8000a8c:	d800      	bhi.n	8000a90 <__aeabi_ddiv+0x4cc>
 8000a8e:	e6a3      	b.n	80007d8 <__aeabi_ddiv+0x214>
 8000a90:	1e83      	subs	r3, r0, #2
 8000a92:	1936      	adds	r6, r6, r4
 8000a94:	e6a0      	b.n	80007d8 <__aeabi_ddiv+0x214>
 8000a96:	1909      	adds	r1, r1, r4
 8000a98:	3d01      	subs	r5, #1
 8000a9a:	428c      	cmp	r4, r1
 8000a9c:	d900      	bls.n	8000aa0 <__aeabi_ddiv+0x4dc>
 8000a9e:	e68d      	b.n	80007bc <__aeabi_ddiv+0x1f8>
 8000aa0:	428a      	cmp	r2, r1
 8000aa2:	d800      	bhi.n	8000aa6 <__aeabi_ddiv+0x4e2>
 8000aa4:	e68a      	b.n	80007bc <__aeabi_ddiv+0x1f8>
 8000aa6:	1e85      	subs	r5, r0, #2
 8000aa8:	1909      	adds	r1, r1, r4
 8000aaa:	e687      	b.n	80007bc <__aeabi_ddiv+0x1f8>
 8000aac:	230f      	movs	r3, #15
 8000aae:	402b      	ands	r3, r5
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_ddiv+0x4f2>
 8000ab4:	e6bc      	b.n	8000830 <__aeabi_ddiv+0x26c>
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	425b      	negs	r3, r3
 8000aba:	42ab      	cmp	r3, r5
 8000abc:	419b      	sbcs	r3, r3
 8000abe:	3504      	adds	r5, #4
 8000ac0:	425b      	negs	r3, r3
 8000ac2:	08ed      	lsrs	r5, r5, #3
 8000ac4:	4498      	add	r8, r3
 8000ac6:	e6b4      	b.n	8000832 <__aeabi_ddiv+0x26e>
 8000ac8:	42af      	cmp	r7, r5
 8000aca:	d900      	bls.n	8000ace <__aeabi_ddiv+0x50a>
 8000acc:	e660      	b.n	8000790 <__aeabi_ddiv+0x1cc>
 8000ace:	4282      	cmp	r2, r0
 8000ad0:	d804      	bhi.n	8000adc <__aeabi_ddiv+0x518>
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_ddiv+0x512>
 8000ad4:	e65c      	b.n	8000790 <__aeabi_ddiv+0x1cc>
 8000ad6:	42ae      	cmp	r6, r5
 8000ad8:	d800      	bhi.n	8000adc <__aeabi_ddiv+0x518>
 8000ada:	e659      	b.n	8000790 <__aeabi_ddiv+0x1cc>
 8000adc:	2302      	movs	r3, #2
 8000ade:	425b      	negs	r3, r3
 8000ae0:	469c      	mov	ip, r3
 8000ae2:	9b00      	ldr	r3, [sp, #0]
 8000ae4:	44e0      	add	r8, ip
 8000ae6:	469c      	mov	ip, r3
 8000ae8:	4465      	add	r5, ip
 8000aea:	429d      	cmp	r5, r3
 8000aec:	419b      	sbcs	r3, r3
 8000aee:	425b      	negs	r3, r3
 8000af0:	191b      	adds	r3, r3, r4
 8000af2:	18c0      	adds	r0, r0, r3
 8000af4:	e64d      	b.n	8000792 <__aeabi_ddiv+0x1ce>
 8000af6:	428a      	cmp	r2, r1
 8000af8:	d800      	bhi.n	8000afc <__aeabi_ddiv+0x538>
 8000afa:	e60e      	b.n	800071a <__aeabi_ddiv+0x156>
 8000afc:	1e83      	subs	r3, r0, #2
 8000afe:	1909      	adds	r1, r1, r4
 8000b00:	e60b      	b.n	800071a <__aeabi_ddiv+0x156>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	d800      	bhi.n	8000b08 <__aeabi_ddiv+0x544>
 8000b06:	e5f4      	b.n	80006f2 <__aeabi_ddiv+0x12e>
 8000b08:	1e83      	subs	r3, r0, #2
 8000b0a:	4698      	mov	r8, r3
 8000b0c:	1909      	adds	r1, r1, r4
 8000b0e:	e5f0      	b.n	80006f2 <__aeabi_ddiv+0x12e>
 8000b10:	4925      	ldr	r1, [pc, #148]	; (8000ba8 <__aeabi_ddiv+0x5e4>)
 8000b12:	0028      	movs	r0, r5
 8000b14:	4459      	add	r1, fp
 8000b16:	408d      	lsls	r5, r1
 8000b18:	4642      	mov	r2, r8
 8000b1a:	408a      	lsls	r2, r1
 8000b1c:	1e69      	subs	r1, r5, #1
 8000b1e:	418d      	sbcs	r5, r1
 8000b20:	4641      	mov	r1, r8
 8000b22:	40d8      	lsrs	r0, r3
 8000b24:	40d9      	lsrs	r1, r3
 8000b26:	4302      	orrs	r2, r0
 8000b28:	432a      	orrs	r2, r5
 8000b2a:	000b      	movs	r3, r1
 8000b2c:	0751      	lsls	r1, r2, #29
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_ddiv+0x56e>
 8000b30:	e751      	b.n	80009d6 <__aeabi_ddiv+0x412>
 8000b32:	210f      	movs	r1, #15
 8000b34:	4011      	ands	r1, r2
 8000b36:	2904      	cmp	r1, #4
 8000b38:	d000      	beq.n	8000b3c <__aeabi_ddiv+0x578>
 8000b3a:	e746      	b.n	80009ca <__aeabi_ddiv+0x406>
 8000b3c:	e74b      	b.n	80009d6 <__aeabi_ddiv+0x412>
 8000b3e:	0005      	movs	r5, r0
 8000b40:	428e      	cmp	r6, r1
 8000b42:	d000      	beq.n	8000b46 <__aeabi_ddiv+0x582>
 8000b44:	e66a      	b.n	800081c <__aeabi_ddiv+0x258>
 8000b46:	9a00      	ldr	r2, [sp, #0]
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_ddiv+0x58a>
 8000b4c:	e666      	b.n	800081c <__aeabi_ddiv+0x258>
 8000b4e:	e667      	b.n	8000820 <__aeabi_ddiv+0x25c>
 8000b50:	4a16      	ldr	r2, [pc, #88]	; (8000bac <__aeabi_ddiv+0x5e8>)
 8000b52:	445a      	add	r2, fp
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	dc00      	bgt.n	8000b5a <__aeabi_ddiv+0x596>
 8000b58:	e710      	b.n	800097c <__aeabi_ddiv+0x3b8>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	4498      	add	r8, r3
 8000b60:	e667      	b.n	8000832 <__aeabi_ddiv+0x26e>
 8000b62:	075d      	lsls	r5, r3, #29
 8000b64:	025b      	lsls	r3, r3, #9
 8000b66:	0b1c      	lsrs	r4, r3, #12
 8000b68:	08d2      	lsrs	r2, r2, #3
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	4315      	orrs	r5, r2
 8000b6e:	e580      	b.n	8000672 <__aeabi_ddiv+0xae>
 8000b70:	9800      	ldr	r0, [sp, #0]
 8000b72:	3d02      	subs	r5, #2
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	4282      	cmp	r2, r0
 8000b78:	41bf      	sbcs	r7, r7
 8000b7a:	427f      	negs	r7, r7
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	1936      	adds	r6, r6, r4
 8000b80:	9200      	str	r2, [sp, #0]
 8000b82:	e7dd      	b.n	8000b40 <__aeabi_ddiv+0x57c>
 8000b84:	2480      	movs	r4, #128	; 0x80
 8000b86:	4643      	mov	r3, r8
 8000b88:	0324      	lsls	r4, r4, #12
 8000b8a:	431c      	orrs	r4, r3
 8000b8c:	0324      	lsls	r4, r4, #12
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__aeabi_ddiv+0x5dc>)
 8000b90:	0b24      	lsrs	r4, r4, #12
 8000b92:	e56e      	b.n	8000672 <__aeabi_ddiv+0xae>
 8000b94:	9a00      	ldr	r2, [sp, #0]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d3ea      	bcc.n	8000b70 <__aeabi_ddiv+0x5ac>
 8000b9a:	0005      	movs	r5, r0
 8000b9c:	e7d3      	b.n	8000b46 <__aeabi_ddiv+0x582>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	000007ff 	.word	0x000007ff
 8000ba4:	0000043e 	.word	0x0000043e
 8000ba8:	0000041e 	.word	0x0000041e
 8000bac:	000003ff 	.word	0x000003ff

08000bb0 <__aeabi_dmul>:
 8000bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb2:	4657      	mov	r7, sl
 8000bb4:	464e      	mov	r6, r9
 8000bb6:	4645      	mov	r5, r8
 8000bb8:	46de      	mov	lr, fp
 8000bba:	b5e0      	push	{r5, r6, r7, lr}
 8000bbc:	4698      	mov	r8, r3
 8000bbe:	030c      	lsls	r4, r1, #12
 8000bc0:	004b      	lsls	r3, r1, #1
 8000bc2:	0006      	movs	r6, r0
 8000bc4:	4692      	mov	sl, r2
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	0b24      	lsrs	r4, r4, #12
 8000bca:	0d5b      	lsrs	r3, r3, #21
 8000bcc:	0fcf      	lsrs	r7, r1, #31
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dmul+0x24>
 8000bd2:	e15c      	b.n	8000e8e <__aeabi_dmul+0x2de>
 8000bd4:	4ad9      	ldr	r2, [pc, #868]	; (8000f3c <__aeabi_dmul+0x38c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_dmul+0x2c>
 8000bda:	e175      	b.n	8000ec8 <__aeabi_dmul+0x318>
 8000bdc:	0f42      	lsrs	r2, r0, #29
 8000bde:	00e4      	lsls	r4, r4, #3
 8000be0:	4314      	orrs	r4, r2
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	0412      	lsls	r2, r2, #16
 8000be6:	4314      	orrs	r4, r2
 8000be8:	4ad5      	ldr	r2, [pc, #852]	; (8000f40 <__aeabi_dmul+0x390>)
 8000bea:	00c5      	lsls	r5, r0, #3
 8000bec:	4694      	mov	ip, r2
 8000bee:	4463      	add	r3, ip
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	4699      	mov	r9, r3
 8000bf6:	469b      	mov	fp, r3
 8000bf8:	4643      	mov	r3, r8
 8000bfa:	4642      	mov	r2, r8
 8000bfc:	031e      	lsls	r6, r3, #12
 8000bfe:	0fd2      	lsrs	r2, r2, #31
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4650      	mov	r0, sl
 8000c04:	4690      	mov	r8, r2
 8000c06:	0b36      	lsrs	r6, r6, #12
 8000c08:	0d5b      	lsrs	r3, r3, #21
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dmul+0x5e>
 8000c0c:	e120      	b.n	8000e50 <__aeabi_dmul+0x2a0>
 8000c0e:	4acb      	ldr	r2, [pc, #812]	; (8000f3c <__aeabi_dmul+0x38c>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dmul+0x66>
 8000c14:	e162      	b.n	8000edc <__aeabi_dmul+0x32c>
 8000c16:	49ca      	ldr	r1, [pc, #808]	; (8000f40 <__aeabi_dmul+0x390>)
 8000c18:	0f42      	lsrs	r2, r0, #29
 8000c1a:	468c      	mov	ip, r1
 8000c1c:	9900      	ldr	r1, [sp, #0]
 8000c1e:	4463      	add	r3, ip
 8000c20:	00f6      	lsls	r6, r6, #3
 8000c22:	468c      	mov	ip, r1
 8000c24:	4316      	orrs	r6, r2
 8000c26:	2280      	movs	r2, #128	; 0x80
 8000c28:	449c      	add	ip, r3
 8000c2a:	0412      	lsls	r2, r2, #16
 8000c2c:	4663      	mov	r3, ip
 8000c2e:	4316      	orrs	r6, r2
 8000c30:	00c2      	lsls	r2, r0, #3
 8000c32:	2000      	movs	r0, #0
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	9900      	ldr	r1, [sp, #0]
 8000c38:	4643      	mov	r3, r8
 8000c3a:	3101      	adds	r1, #1
 8000c3c:	468c      	mov	ip, r1
 8000c3e:	4649      	mov	r1, r9
 8000c40:	407b      	eors	r3, r7
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	290f      	cmp	r1, #15
 8000c46:	d826      	bhi.n	8000c96 <__aeabi_dmul+0xe6>
 8000c48:	4bbe      	ldr	r3, [pc, #760]	; (8000f44 <__aeabi_dmul+0x394>)
 8000c4a:	0089      	lsls	r1, r1, #2
 8000c4c:	5859      	ldr	r1, [r3, r1]
 8000c4e:	468f      	mov	pc, r1
 8000c50:	4643      	mov	r3, r8
 8000c52:	9301      	str	r3, [sp, #4]
 8000c54:	0034      	movs	r4, r6
 8000c56:	0015      	movs	r5, r2
 8000c58:	4683      	mov	fp, r0
 8000c5a:	465b      	mov	r3, fp
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d016      	beq.n	8000c8e <__aeabi_dmul+0xde>
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dmul+0xb6>
 8000c64:	e203      	b.n	800106e <__aeabi_dmul+0x4be>
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d000      	beq.n	8000c6c <__aeabi_dmul+0xbc>
 8000c6a:	e0cd      	b.n	8000e08 <__aeabi_dmul+0x258>
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2400      	movs	r4, #0
 8000c70:	2500      	movs	r5, #0
 8000c72:	9b01      	ldr	r3, [sp, #4]
 8000c74:	0512      	lsls	r2, r2, #20
 8000c76:	4322      	orrs	r2, r4
 8000c78:	07db      	lsls	r3, r3, #31
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	0028      	movs	r0, r5
 8000c7e:	0011      	movs	r1, r2
 8000c80:	b007      	add	sp, #28
 8000c82:	bcf0      	pop	{r4, r5, r6, r7}
 8000c84:	46bb      	mov	fp, r7
 8000c86:	46b2      	mov	sl, r6
 8000c88:	46a9      	mov	r9, r5
 8000c8a:	46a0      	mov	r8, r4
 8000c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c8e:	2400      	movs	r4, #0
 8000c90:	2500      	movs	r5, #0
 8000c92:	4aaa      	ldr	r2, [pc, #680]	; (8000f3c <__aeabi_dmul+0x38c>)
 8000c94:	e7ed      	b.n	8000c72 <__aeabi_dmul+0xc2>
 8000c96:	0c28      	lsrs	r0, r5, #16
 8000c98:	042d      	lsls	r5, r5, #16
 8000c9a:	0c2d      	lsrs	r5, r5, #16
 8000c9c:	002b      	movs	r3, r5
 8000c9e:	0c11      	lsrs	r1, r2, #16
 8000ca0:	0412      	lsls	r2, r2, #16
 8000ca2:	0c12      	lsrs	r2, r2, #16
 8000ca4:	4353      	muls	r3, r2
 8000ca6:	4698      	mov	r8, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	002f      	movs	r7, r5
 8000cac:	4343      	muls	r3, r0
 8000cae:	4699      	mov	r9, r3
 8000cb0:	434f      	muls	r7, r1
 8000cb2:	444f      	add	r7, r9
 8000cb4:	46bb      	mov	fp, r7
 8000cb6:	4647      	mov	r7, r8
 8000cb8:	000b      	movs	r3, r1
 8000cba:	0c3f      	lsrs	r7, r7, #16
 8000cbc:	46ba      	mov	sl, r7
 8000cbe:	4343      	muls	r3, r0
 8000cc0:	44da      	add	sl, fp
 8000cc2:	9302      	str	r3, [sp, #8]
 8000cc4:	45d1      	cmp	r9, sl
 8000cc6:	d904      	bls.n	8000cd2 <__aeabi_dmul+0x122>
 8000cc8:	2780      	movs	r7, #128	; 0x80
 8000cca:	027f      	lsls	r7, r7, #9
 8000ccc:	46b9      	mov	r9, r7
 8000cce:	444b      	add	r3, r9
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	4653      	mov	r3, sl
 8000cd4:	0c1b      	lsrs	r3, r3, #16
 8000cd6:	469b      	mov	fp, r3
 8000cd8:	4653      	mov	r3, sl
 8000cda:	041f      	lsls	r7, r3, #16
 8000cdc:	4643      	mov	r3, r8
 8000cde:	041b      	lsls	r3, r3, #16
 8000ce0:	0c1b      	lsrs	r3, r3, #16
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	003b      	movs	r3, r7
 8000ce6:	4443      	add	r3, r8
 8000ce8:	9304      	str	r3, [sp, #16]
 8000cea:	0c33      	lsrs	r3, r6, #16
 8000cec:	0436      	lsls	r6, r6, #16
 8000cee:	0c36      	lsrs	r6, r6, #16
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	0033      	movs	r3, r6
 8000cf4:	4343      	muls	r3, r0
 8000cf6:	4699      	mov	r9, r3
 8000cf8:	4643      	mov	r3, r8
 8000cfa:	4343      	muls	r3, r0
 8000cfc:	002f      	movs	r7, r5
 8000cfe:	469a      	mov	sl, r3
 8000d00:	4643      	mov	r3, r8
 8000d02:	4377      	muls	r7, r6
 8000d04:	435d      	muls	r5, r3
 8000d06:	0c38      	lsrs	r0, r7, #16
 8000d08:	444d      	add	r5, r9
 8000d0a:	1945      	adds	r5, r0, r5
 8000d0c:	45a9      	cmp	r9, r5
 8000d0e:	d903      	bls.n	8000d18 <__aeabi_dmul+0x168>
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	025b      	lsls	r3, r3, #9
 8000d14:	4699      	mov	r9, r3
 8000d16:	44ca      	add	sl, r9
 8000d18:	043f      	lsls	r7, r7, #16
 8000d1a:	0c28      	lsrs	r0, r5, #16
 8000d1c:	0c3f      	lsrs	r7, r7, #16
 8000d1e:	042d      	lsls	r5, r5, #16
 8000d20:	19ed      	adds	r5, r5, r7
 8000d22:	0c27      	lsrs	r7, r4, #16
 8000d24:	0424      	lsls	r4, r4, #16
 8000d26:	0c24      	lsrs	r4, r4, #16
 8000d28:	0003      	movs	r3, r0
 8000d2a:	0020      	movs	r0, r4
 8000d2c:	4350      	muls	r0, r2
 8000d2e:	437a      	muls	r2, r7
 8000d30:	4691      	mov	r9, r2
 8000d32:	003a      	movs	r2, r7
 8000d34:	4453      	add	r3, sl
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	0c03      	lsrs	r3, r0, #16
 8000d3a:	469a      	mov	sl, r3
 8000d3c:	434a      	muls	r2, r1
 8000d3e:	4361      	muls	r1, r4
 8000d40:	4449      	add	r1, r9
 8000d42:	4451      	add	r1, sl
 8000d44:	44ab      	add	fp, r5
 8000d46:	4589      	cmp	r9, r1
 8000d48:	d903      	bls.n	8000d52 <__aeabi_dmul+0x1a2>
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	4699      	mov	r9, r3
 8000d50:	444a      	add	r2, r9
 8000d52:	0400      	lsls	r0, r0, #16
 8000d54:	0c0b      	lsrs	r3, r1, #16
 8000d56:	0c00      	lsrs	r0, r0, #16
 8000d58:	0409      	lsls	r1, r1, #16
 8000d5a:	1809      	adds	r1, r1, r0
 8000d5c:	0020      	movs	r0, r4
 8000d5e:	4699      	mov	r9, r3
 8000d60:	4643      	mov	r3, r8
 8000d62:	4370      	muls	r0, r6
 8000d64:	435c      	muls	r4, r3
 8000d66:	437e      	muls	r6, r7
 8000d68:	435f      	muls	r7, r3
 8000d6a:	0c03      	lsrs	r3, r0, #16
 8000d6c:	4698      	mov	r8, r3
 8000d6e:	19a4      	adds	r4, r4, r6
 8000d70:	4444      	add	r4, r8
 8000d72:	444a      	add	r2, r9
 8000d74:	9703      	str	r7, [sp, #12]
 8000d76:	42a6      	cmp	r6, r4
 8000d78:	d904      	bls.n	8000d84 <__aeabi_dmul+0x1d4>
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	025b      	lsls	r3, r3, #9
 8000d7e:	4698      	mov	r8, r3
 8000d80:	4447      	add	r7, r8
 8000d82:	9703      	str	r7, [sp, #12]
 8000d84:	0423      	lsls	r3, r4, #16
 8000d86:	9e02      	ldr	r6, [sp, #8]
 8000d88:	469a      	mov	sl, r3
 8000d8a:	9b05      	ldr	r3, [sp, #20]
 8000d8c:	445e      	add	r6, fp
 8000d8e:	4698      	mov	r8, r3
 8000d90:	42ae      	cmp	r6, r5
 8000d92:	41ad      	sbcs	r5, r5
 8000d94:	1876      	adds	r6, r6, r1
 8000d96:	428e      	cmp	r6, r1
 8000d98:	4189      	sbcs	r1, r1
 8000d9a:	0400      	lsls	r0, r0, #16
 8000d9c:	0c00      	lsrs	r0, r0, #16
 8000d9e:	4450      	add	r0, sl
 8000da0:	4440      	add	r0, r8
 8000da2:	426d      	negs	r5, r5
 8000da4:	1947      	adds	r7, r0, r5
 8000da6:	46b8      	mov	r8, r7
 8000da8:	4693      	mov	fp, r2
 8000daa:	4249      	negs	r1, r1
 8000dac:	4689      	mov	r9, r1
 8000dae:	44c3      	add	fp, r8
 8000db0:	44d9      	add	r9, fp
 8000db2:	4298      	cmp	r0, r3
 8000db4:	4180      	sbcs	r0, r0
 8000db6:	45a8      	cmp	r8, r5
 8000db8:	41ad      	sbcs	r5, r5
 8000dba:	4593      	cmp	fp, r2
 8000dbc:	4192      	sbcs	r2, r2
 8000dbe:	4589      	cmp	r9, r1
 8000dc0:	4189      	sbcs	r1, r1
 8000dc2:	426d      	negs	r5, r5
 8000dc4:	4240      	negs	r0, r0
 8000dc6:	4328      	orrs	r0, r5
 8000dc8:	0c24      	lsrs	r4, r4, #16
 8000dca:	4252      	negs	r2, r2
 8000dcc:	4249      	negs	r1, r1
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	9b03      	ldr	r3, [sp, #12]
 8000dd2:	1900      	adds	r0, r0, r4
 8000dd4:	1880      	adds	r0, r0, r2
 8000dd6:	18c7      	adds	r7, r0, r3
 8000dd8:	464b      	mov	r3, r9
 8000dda:	0ddc      	lsrs	r4, r3, #23
 8000ddc:	9b04      	ldr	r3, [sp, #16]
 8000dde:	0275      	lsls	r5, r6, #9
 8000de0:	431d      	orrs	r5, r3
 8000de2:	1e6a      	subs	r2, r5, #1
 8000de4:	4195      	sbcs	r5, r2
 8000de6:	464b      	mov	r3, r9
 8000de8:	0df6      	lsrs	r6, r6, #23
 8000dea:	027f      	lsls	r7, r7, #9
 8000dec:	4335      	orrs	r5, r6
 8000dee:	025a      	lsls	r2, r3, #9
 8000df0:	433c      	orrs	r4, r7
 8000df2:	4315      	orrs	r5, r2
 8000df4:	01fb      	lsls	r3, r7, #7
 8000df6:	d400      	bmi.n	8000dfa <__aeabi_dmul+0x24a>
 8000df8:	e11c      	b.n	8001034 <__aeabi_dmul+0x484>
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	086a      	lsrs	r2, r5, #1
 8000dfe:	400d      	ands	r5, r1
 8000e00:	4315      	orrs	r5, r2
 8000e02:	07e2      	lsls	r2, r4, #31
 8000e04:	4315      	orrs	r5, r2
 8000e06:	0864      	lsrs	r4, r4, #1
 8000e08:	494f      	ldr	r1, [pc, #316]	; (8000f48 <__aeabi_dmul+0x398>)
 8000e0a:	4461      	add	r1, ip
 8000e0c:	2900      	cmp	r1, #0
 8000e0e:	dc00      	bgt.n	8000e12 <__aeabi_dmul+0x262>
 8000e10:	e0b0      	b.n	8000f74 <__aeabi_dmul+0x3c4>
 8000e12:	076b      	lsls	r3, r5, #29
 8000e14:	d009      	beq.n	8000e2a <__aeabi_dmul+0x27a>
 8000e16:	220f      	movs	r2, #15
 8000e18:	402a      	ands	r2, r5
 8000e1a:	2a04      	cmp	r2, #4
 8000e1c:	d005      	beq.n	8000e2a <__aeabi_dmul+0x27a>
 8000e1e:	1d2a      	adds	r2, r5, #4
 8000e20:	42aa      	cmp	r2, r5
 8000e22:	41ad      	sbcs	r5, r5
 8000e24:	426d      	negs	r5, r5
 8000e26:	1964      	adds	r4, r4, r5
 8000e28:	0015      	movs	r5, r2
 8000e2a:	01e3      	lsls	r3, r4, #7
 8000e2c:	d504      	bpl.n	8000e38 <__aeabi_dmul+0x288>
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	4a46      	ldr	r2, [pc, #280]	; (8000f4c <__aeabi_dmul+0x39c>)
 8000e32:	00c9      	lsls	r1, r1, #3
 8000e34:	4014      	ands	r4, r2
 8000e36:	4461      	add	r1, ip
 8000e38:	4a45      	ldr	r2, [pc, #276]	; (8000f50 <__aeabi_dmul+0x3a0>)
 8000e3a:	4291      	cmp	r1, r2
 8000e3c:	dd00      	ble.n	8000e40 <__aeabi_dmul+0x290>
 8000e3e:	e726      	b.n	8000c8e <__aeabi_dmul+0xde>
 8000e40:	0762      	lsls	r2, r4, #29
 8000e42:	08ed      	lsrs	r5, r5, #3
 8000e44:	0264      	lsls	r4, r4, #9
 8000e46:	0549      	lsls	r1, r1, #21
 8000e48:	4315      	orrs	r5, r2
 8000e4a:	0b24      	lsrs	r4, r4, #12
 8000e4c:	0d4a      	lsrs	r2, r1, #21
 8000e4e:	e710      	b.n	8000c72 <__aeabi_dmul+0xc2>
 8000e50:	4652      	mov	r2, sl
 8000e52:	4332      	orrs	r2, r6
 8000e54:	d100      	bne.n	8000e58 <__aeabi_dmul+0x2a8>
 8000e56:	e07f      	b.n	8000f58 <__aeabi_dmul+0x3a8>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_dmul+0x2ae>
 8000e5c:	e0dc      	b.n	8001018 <__aeabi_dmul+0x468>
 8000e5e:	0030      	movs	r0, r6
 8000e60:	f000 fd52 	bl	8001908 <__clzsi2>
 8000e64:	0002      	movs	r2, r0
 8000e66:	3a0b      	subs	r2, #11
 8000e68:	231d      	movs	r3, #29
 8000e6a:	0001      	movs	r1, r0
 8000e6c:	1a9b      	subs	r3, r3, r2
 8000e6e:	4652      	mov	r2, sl
 8000e70:	3908      	subs	r1, #8
 8000e72:	40da      	lsrs	r2, r3
 8000e74:	408e      	lsls	r6, r1
 8000e76:	4316      	orrs	r6, r2
 8000e78:	4652      	mov	r2, sl
 8000e7a:	408a      	lsls	r2, r1
 8000e7c:	9b00      	ldr	r3, [sp, #0]
 8000e7e:	4935      	ldr	r1, [pc, #212]	; (8000f54 <__aeabi_dmul+0x3a4>)
 8000e80:	1a18      	subs	r0, r3, r0
 8000e82:	0003      	movs	r3, r0
 8000e84:	468c      	mov	ip, r1
 8000e86:	4463      	add	r3, ip
 8000e88:	2000      	movs	r0, #0
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	e6d3      	b.n	8000c36 <__aeabi_dmul+0x86>
 8000e8e:	0025      	movs	r5, r4
 8000e90:	4305      	orrs	r5, r0
 8000e92:	d04a      	beq.n	8000f2a <__aeabi_dmul+0x37a>
 8000e94:	2c00      	cmp	r4, #0
 8000e96:	d100      	bne.n	8000e9a <__aeabi_dmul+0x2ea>
 8000e98:	e0b0      	b.n	8000ffc <__aeabi_dmul+0x44c>
 8000e9a:	0020      	movs	r0, r4
 8000e9c:	f000 fd34 	bl	8001908 <__clzsi2>
 8000ea0:	0001      	movs	r1, r0
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	390b      	subs	r1, #11
 8000ea6:	231d      	movs	r3, #29
 8000ea8:	0010      	movs	r0, r2
 8000eaa:	1a5b      	subs	r3, r3, r1
 8000eac:	0031      	movs	r1, r6
 8000eae:	0035      	movs	r5, r6
 8000eb0:	3808      	subs	r0, #8
 8000eb2:	4084      	lsls	r4, r0
 8000eb4:	40d9      	lsrs	r1, r3
 8000eb6:	4085      	lsls	r5, r0
 8000eb8:	430c      	orrs	r4, r1
 8000eba:	4826      	ldr	r0, [pc, #152]	; (8000f54 <__aeabi_dmul+0x3a4>)
 8000ebc:	1a83      	subs	r3, r0, r2
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	469b      	mov	fp, r3
 8000ec6:	e697      	b.n	8000bf8 <__aeabi_dmul+0x48>
 8000ec8:	0005      	movs	r5, r0
 8000eca:	4325      	orrs	r5, r4
 8000ecc:	d126      	bne.n	8000f1c <__aeabi_dmul+0x36c>
 8000ece:	2208      	movs	r2, #8
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	2400      	movs	r4, #0
 8000ed6:	4691      	mov	r9, r2
 8000ed8:	469b      	mov	fp, r3
 8000eda:	e68d      	b.n	8000bf8 <__aeabi_dmul+0x48>
 8000edc:	4652      	mov	r2, sl
 8000ede:	9b00      	ldr	r3, [sp, #0]
 8000ee0:	4332      	orrs	r2, r6
 8000ee2:	d110      	bne.n	8000f06 <__aeabi_dmul+0x356>
 8000ee4:	4915      	ldr	r1, [pc, #84]	; (8000f3c <__aeabi_dmul+0x38c>)
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	468c      	mov	ip, r1
 8000eea:	4463      	add	r3, ip
 8000eec:	4649      	mov	r1, r9
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	4319      	orrs	r1, r3
 8000ef4:	4689      	mov	r9, r1
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	e69d      	b.n	8000c36 <__aeabi_dmul+0x86>
 8000efa:	465b      	mov	r3, fp
 8000efc:	9701      	str	r7, [sp, #4]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d000      	beq.n	8000f04 <__aeabi_dmul+0x354>
 8000f02:	e6ad      	b.n	8000c60 <__aeabi_dmul+0xb0>
 8000f04:	e6c3      	b.n	8000c8e <__aeabi_dmul+0xde>
 8000f06:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <__aeabi_dmul+0x38c>)
 8000f08:	2003      	movs	r0, #3
 8000f0a:	4694      	mov	ip, r2
 8000f0c:	4463      	add	r3, ip
 8000f0e:	464a      	mov	r2, r9
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2303      	movs	r3, #3
 8000f14:	431a      	orrs	r2, r3
 8000f16:	4691      	mov	r9, r2
 8000f18:	4652      	mov	r2, sl
 8000f1a:	e68c      	b.n	8000c36 <__aeabi_dmul+0x86>
 8000f1c:	220c      	movs	r2, #12
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2303      	movs	r3, #3
 8000f22:	0005      	movs	r5, r0
 8000f24:	4691      	mov	r9, r2
 8000f26:	469b      	mov	fp, r3
 8000f28:	e666      	b.n	8000bf8 <__aeabi_dmul+0x48>
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	4699      	mov	r9, r3
 8000f2e:	2300      	movs	r3, #0
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	2400      	movs	r4, #0
 8000f36:	469b      	mov	fp, r3
 8000f38:	e65e      	b.n	8000bf8 <__aeabi_dmul+0x48>
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	000007ff 	.word	0x000007ff
 8000f40:	fffffc01 	.word	0xfffffc01
 8000f44:	080093b8 	.word	0x080093b8
 8000f48:	000003ff 	.word	0x000003ff
 8000f4c:	feffffff 	.word	0xfeffffff
 8000f50:	000007fe 	.word	0x000007fe
 8000f54:	fffffc0d 	.word	0xfffffc0d
 8000f58:	4649      	mov	r1, r9
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	4319      	orrs	r1, r3
 8000f5e:	4689      	mov	r9, r1
 8000f60:	2600      	movs	r6, #0
 8000f62:	2001      	movs	r0, #1
 8000f64:	e667      	b.n	8000c36 <__aeabi_dmul+0x86>
 8000f66:	2300      	movs	r3, #0
 8000f68:	2480      	movs	r4, #128	; 0x80
 8000f6a:	2500      	movs	r5, #0
 8000f6c:	4a43      	ldr	r2, [pc, #268]	; (800107c <__aeabi_dmul+0x4cc>)
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	0324      	lsls	r4, r4, #12
 8000f72:	e67e      	b.n	8000c72 <__aeabi_dmul+0xc2>
 8000f74:	2001      	movs	r0, #1
 8000f76:	1a40      	subs	r0, r0, r1
 8000f78:	2838      	cmp	r0, #56	; 0x38
 8000f7a:	dd00      	ble.n	8000f7e <__aeabi_dmul+0x3ce>
 8000f7c:	e676      	b.n	8000c6c <__aeabi_dmul+0xbc>
 8000f7e:	281f      	cmp	r0, #31
 8000f80:	dd5b      	ble.n	800103a <__aeabi_dmul+0x48a>
 8000f82:	221f      	movs	r2, #31
 8000f84:	0023      	movs	r3, r4
 8000f86:	4252      	negs	r2, r2
 8000f88:	1a51      	subs	r1, r2, r1
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	2820      	cmp	r0, #32
 8000f90:	d003      	beq.n	8000f9a <__aeabi_dmul+0x3ea>
 8000f92:	4a3b      	ldr	r2, [pc, #236]	; (8001080 <__aeabi_dmul+0x4d0>)
 8000f94:	4462      	add	r2, ip
 8000f96:	4094      	lsls	r4, r2
 8000f98:	4325      	orrs	r5, r4
 8000f9a:	1e6a      	subs	r2, r5, #1
 8000f9c:	4195      	sbcs	r5, r2
 8000f9e:	002a      	movs	r2, r5
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	2107      	movs	r1, #7
 8000fa4:	000d      	movs	r5, r1
 8000fa6:	2400      	movs	r4, #0
 8000fa8:	4015      	ands	r5, r2
 8000faa:	4211      	tst	r1, r2
 8000fac:	d05b      	beq.n	8001066 <__aeabi_dmul+0x4b6>
 8000fae:	210f      	movs	r1, #15
 8000fb0:	2400      	movs	r4, #0
 8000fb2:	4011      	ands	r1, r2
 8000fb4:	2904      	cmp	r1, #4
 8000fb6:	d053      	beq.n	8001060 <__aeabi_dmul+0x4b0>
 8000fb8:	1d11      	adds	r1, r2, #4
 8000fba:	4291      	cmp	r1, r2
 8000fbc:	4192      	sbcs	r2, r2
 8000fbe:	4252      	negs	r2, r2
 8000fc0:	18a4      	adds	r4, r4, r2
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	0223      	lsls	r3, r4, #8
 8000fc6:	d54b      	bpl.n	8001060 <__aeabi_dmul+0x4b0>
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2400      	movs	r4, #0
 8000fcc:	2500      	movs	r5, #0
 8000fce:	e650      	b.n	8000c72 <__aeabi_dmul+0xc2>
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	031b      	lsls	r3, r3, #12
 8000fd4:	421c      	tst	r4, r3
 8000fd6:	d009      	beq.n	8000fec <__aeabi_dmul+0x43c>
 8000fd8:	421e      	tst	r6, r3
 8000fda:	d107      	bne.n	8000fec <__aeabi_dmul+0x43c>
 8000fdc:	4333      	orrs	r3, r6
 8000fde:	031c      	lsls	r4, r3, #12
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	0015      	movs	r5, r2
 8000fe4:	0b24      	lsrs	r4, r4, #12
 8000fe6:	4a25      	ldr	r2, [pc, #148]	; (800107c <__aeabi_dmul+0x4cc>)
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	e642      	b.n	8000c72 <__aeabi_dmul+0xc2>
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	0312      	lsls	r2, r2, #12
 8000ff0:	4314      	orrs	r4, r2
 8000ff2:	0324      	lsls	r4, r4, #12
 8000ff4:	4a21      	ldr	r2, [pc, #132]	; (800107c <__aeabi_dmul+0x4cc>)
 8000ff6:	0b24      	lsrs	r4, r4, #12
 8000ff8:	9701      	str	r7, [sp, #4]
 8000ffa:	e63a      	b.n	8000c72 <__aeabi_dmul+0xc2>
 8000ffc:	f000 fc84 	bl	8001908 <__clzsi2>
 8001000:	0001      	movs	r1, r0
 8001002:	0002      	movs	r2, r0
 8001004:	3115      	adds	r1, #21
 8001006:	3220      	adds	r2, #32
 8001008:	291c      	cmp	r1, #28
 800100a:	dc00      	bgt.n	800100e <__aeabi_dmul+0x45e>
 800100c:	e74b      	b.n	8000ea6 <__aeabi_dmul+0x2f6>
 800100e:	0034      	movs	r4, r6
 8001010:	3808      	subs	r0, #8
 8001012:	2500      	movs	r5, #0
 8001014:	4084      	lsls	r4, r0
 8001016:	e750      	b.n	8000eba <__aeabi_dmul+0x30a>
 8001018:	f000 fc76 	bl	8001908 <__clzsi2>
 800101c:	0003      	movs	r3, r0
 800101e:	001a      	movs	r2, r3
 8001020:	3215      	adds	r2, #21
 8001022:	3020      	adds	r0, #32
 8001024:	2a1c      	cmp	r2, #28
 8001026:	dc00      	bgt.n	800102a <__aeabi_dmul+0x47a>
 8001028:	e71e      	b.n	8000e68 <__aeabi_dmul+0x2b8>
 800102a:	4656      	mov	r6, sl
 800102c:	3b08      	subs	r3, #8
 800102e:	2200      	movs	r2, #0
 8001030:	409e      	lsls	r6, r3
 8001032:	e723      	b.n	8000e7c <__aeabi_dmul+0x2cc>
 8001034:	9b00      	ldr	r3, [sp, #0]
 8001036:	469c      	mov	ip, r3
 8001038:	e6e6      	b.n	8000e08 <__aeabi_dmul+0x258>
 800103a:	4912      	ldr	r1, [pc, #72]	; (8001084 <__aeabi_dmul+0x4d4>)
 800103c:	0022      	movs	r2, r4
 800103e:	4461      	add	r1, ip
 8001040:	002e      	movs	r6, r5
 8001042:	408d      	lsls	r5, r1
 8001044:	408a      	lsls	r2, r1
 8001046:	40c6      	lsrs	r6, r0
 8001048:	1e69      	subs	r1, r5, #1
 800104a:	418d      	sbcs	r5, r1
 800104c:	4332      	orrs	r2, r6
 800104e:	432a      	orrs	r2, r5
 8001050:	40c4      	lsrs	r4, r0
 8001052:	0753      	lsls	r3, r2, #29
 8001054:	d0b6      	beq.n	8000fc4 <__aeabi_dmul+0x414>
 8001056:	210f      	movs	r1, #15
 8001058:	4011      	ands	r1, r2
 800105a:	2904      	cmp	r1, #4
 800105c:	d1ac      	bne.n	8000fb8 <__aeabi_dmul+0x408>
 800105e:	e7b1      	b.n	8000fc4 <__aeabi_dmul+0x414>
 8001060:	0765      	lsls	r5, r4, #29
 8001062:	0264      	lsls	r4, r4, #9
 8001064:	0b24      	lsrs	r4, r4, #12
 8001066:	08d2      	lsrs	r2, r2, #3
 8001068:	4315      	orrs	r5, r2
 800106a:	2200      	movs	r2, #0
 800106c:	e601      	b.n	8000c72 <__aeabi_dmul+0xc2>
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	0312      	lsls	r2, r2, #12
 8001072:	4314      	orrs	r4, r2
 8001074:	0324      	lsls	r4, r4, #12
 8001076:	4a01      	ldr	r2, [pc, #4]	; (800107c <__aeabi_dmul+0x4cc>)
 8001078:	0b24      	lsrs	r4, r4, #12
 800107a:	e5fa      	b.n	8000c72 <__aeabi_dmul+0xc2>
 800107c:	000007ff 	.word	0x000007ff
 8001080:	0000043e 	.word	0x0000043e
 8001084:	0000041e 	.word	0x0000041e

08001088 <__aeabi_dsub>:
 8001088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108a:	4657      	mov	r7, sl
 800108c:	464e      	mov	r6, r9
 800108e:	4645      	mov	r5, r8
 8001090:	46de      	mov	lr, fp
 8001092:	b5e0      	push	{r5, r6, r7, lr}
 8001094:	001e      	movs	r6, r3
 8001096:	0017      	movs	r7, r2
 8001098:	004a      	lsls	r2, r1, #1
 800109a:	030b      	lsls	r3, r1, #12
 800109c:	0d52      	lsrs	r2, r2, #21
 800109e:	0a5b      	lsrs	r3, r3, #9
 80010a0:	4690      	mov	r8, r2
 80010a2:	0f42      	lsrs	r2, r0, #29
 80010a4:	431a      	orrs	r2, r3
 80010a6:	0fcd      	lsrs	r5, r1, #31
 80010a8:	4ccd      	ldr	r4, [pc, #820]	; (80013e0 <__aeabi_dsub+0x358>)
 80010aa:	0331      	lsls	r1, r6, #12
 80010ac:	00c3      	lsls	r3, r0, #3
 80010ae:	4694      	mov	ip, r2
 80010b0:	0070      	lsls	r0, r6, #1
 80010b2:	0f7a      	lsrs	r2, r7, #29
 80010b4:	0a49      	lsrs	r1, r1, #9
 80010b6:	00ff      	lsls	r7, r7, #3
 80010b8:	469a      	mov	sl, r3
 80010ba:	46b9      	mov	r9, r7
 80010bc:	0d40      	lsrs	r0, r0, #21
 80010be:	0ff6      	lsrs	r6, r6, #31
 80010c0:	4311      	orrs	r1, r2
 80010c2:	42a0      	cmp	r0, r4
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dsub+0x40>
 80010c6:	e0b1      	b.n	800122c <__aeabi_dsub+0x1a4>
 80010c8:	2201      	movs	r2, #1
 80010ca:	4056      	eors	r6, r2
 80010cc:	46b3      	mov	fp, r6
 80010ce:	42b5      	cmp	r5, r6
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dsub+0x4c>
 80010d2:	e088      	b.n	80011e6 <__aeabi_dsub+0x15e>
 80010d4:	4642      	mov	r2, r8
 80010d6:	1a12      	subs	r2, r2, r0
 80010d8:	2a00      	cmp	r2, #0
 80010da:	dc00      	bgt.n	80010de <__aeabi_dsub+0x56>
 80010dc:	e0ae      	b.n	800123c <__aeabi_dsub+0x1b4>
 80010de:	2800      	cmp	r0, #0
 80010e0:	d100      	bne.n	80010e4 <__aeabi_dsub+0x5c>
 80010e2:	e0c1      	b.n	8001268 <__aeabi_dsub+0x1e0>
 80010e4:	48be      	ldr	r0, [pc, #760]	; (80013e0 <__aeabi_dsub+0x358>)
 80010e6:	4580      	cmp	r8, r0
 80010e8:	d100      	bne.n	80010ec <__aeabi_dsub+0x64>
 80010ea:	e151      	b.n	8001390 <__aeabi_dsub+0x308>
 80010ec:	2080      	movs	r0, #128	; 0x80
 80010ee:	0400      	lsls	r0, r0, #16
 80010f0:	4301      	orrs	r1, r0
 80010f2:	2a38      	cmp	r2, #56	; 0x38
 80010f4:	dd00      	ble.n	80010f8 <__aeabi_dsub+0x70>
 80010f6:	e17b      	b.n	80013f0 <__aeabi_dsub+0x368>
 80010f8:	2a1f      	cmp	r2, #31
 80010fa:	dd00      	ble.n	80010fe <__aeabi_dsub+0x76>
 80010fc:	e1ee      	b.n	80014dc <__aeabi_dsub+0x454>
 80010fe:	2020      	movs	r0, #32
 8001100:	003e      	movs	r6, r7
 8001102:	1a80      	subs	r0, r0, r2
 8001104:	000c      	movs	r4, r1
 8001106:	40d6      	lsrs	r6, r2
 8001108:	40d1      	lsrs	r1, r2
 800110a:	4087      	lsls	r7, r0
 800110c:	4662      	mov	r2, ip
 800110e:	4084      	lsls	r4, r0
 8001110:	1a52      	subs	r2, r2, r1
 8001112:	1e78      	subs	r0, r7, #1
 8001114:	4187      	sbcs	r7, r0
 8001116:	4694      	mov	ip, r2
 8001118:	4334      	orrs	r4, r6
 800111a:	4327      	orrs	r7, r4
 800111c:	1bdc      	subs	r4, r3, r7
 800111e:	42a3      	cmp	r3, r4
 8001120:	419b      	sbcs	r3, r3
 8001122:	4662      	mov	r2, ip
 8001124:	425b      	negs	r3, r3
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	4699      	mov	r9, r3
 800112a:	464b      	mov	r3, r9
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	d400      	bmi.n	8001132 <__aeabi_dsub+0xaa>
 8001130:	e118      	b.n	8001364 <__aeabi_dsub+0x2dc>
 8001132:	464b      	mov	r3, r9
 8001134:	0258      	lsls	r0, r3, #9
 8001136:	0a43      	lsrs	r3, r0, #9
 8001138:	4699      	mov	r9, r3
 800113a:	464b      	mov	r3, r9
 800113c:	2b00      	cmp	r3, #0
 800113e:	d100      	bne.n	8001142 <__aeabi_dsub+0xba>
 8001140:	e137      	b.n	80013b2 <__aeabi_dsub+0x32a>
 8001142:	4648      	mov	r0, r9
 8001144:	f000 fbe0 	bl	8001908 <__clzsi2>
 8001148:	0001      	movs	r1, r0
 800114a:	3908      	subs	r1, #8
 800114c:	2320      	movs	r3, #32
 800114e:	0022      	movs	r2, r4
 8001150:	4648      	mov	r0, r9
 8001152:	1a5b      	subs	r3, r3, r1
 8001154:	40da      	lsrs	r2, r3
 8001156:	4088      	lsls	r0, r1
 8001158:	408c      	lsls	r4, r1
 800115a:	4643      	mov	r3, r8
 800115c:	4310      	orrs	r0, r2
 800115e:	4588      	cmp	r8, r1
 8001160:	dd00      	ble.n	8001164 <__aeabi_dsub+0xdc>
 8001162:	e136      	b.n	80013d2 <__aeabi_dsub+0x34a>
 8001164:	1ac9      	subs	r1, r1, r3
 8001166:	1c4b      	adds	r3, r1, #1
 8001168:	2b1f      	cmp	r3, #31
 800116a:	dd00      	ble.n	800116e <__aeabi_dsub+0xe6>
 800116c:	e0ea      	b.n	8001344 <__aeabi_dsub+0x2bc>
 800116e:	2220      	movs	r2, #32
 8001170:	0026      	movs	r6, r4
 8001172:	1ad2      	subs	r2, r2, r3
 8001174:	0001      	movs	r1, r0
 8001176:	4094      	lsls	r4, r2
 8001178:	40de      	lsrs	r6, r3
 800117a:	40d8      	lsrs	r0, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4091      	lsls	r1, r2
 8001180:	1e62      	subs	r2, r4, #1
 8001182:	4194      	sbcs	r4, r2
 8001184:	4681      	mov	r9, r0
 8001186:	4698      	mov	r8, r3
 8001188:	4331      	orrs	r1, r6
 800118a:	430c      	orrs	r4, r1
 800118c:	0763      	lsls	r3, r4, #29
 800118e:	d009      	beq.n	80011a4 <__aeabi_dsub+0x11c>
 8001190:	230f      	movs	r3, #15
 8001192:	4023      	ands	r3, r4
 8001194:	2b04      	cmp	r3, #4
 8001196:	d005      	beq.n	80011a4 <__aeabi_dsub+0x11c>
 8001198:	1d23      	adds	r3, r4, #4
 800119a:	42a3      	cmp	r3, r4
 800119c:	41a4      	sbcs	r4, r4
 800119e:	4264      	negs	r4, r4
 80011a0:	44a1      	add	r9, r4
 80011a2:	001c      	movs	r4, r3
 80011a4:	464b      	mov	r3, r9
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	d400      	bmi.n	80011ac <__aeabi_dsub+0x124>
 80011aa:	e0de      	b.n	800136a <__aeabi_dsub+0x2e2>
 80011ac:	4641      	mov	r1, r8
 80011ae:	4b8c      	ldr	r3, [pc, #560]	; (80013e0 <__aeabi_dsub+0x358>)
 80011b0:	3101      	adds	r1, #1
 80011b2:	4299      	cmp	r1, r3
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dsub+0x130>
 80011b6:	e0e7      	b.n	8001388 <__aeabi_dsub+0x300>
 80011b8:	464b      	mov	r3, r9
 80011ba:	488a      	ldr	r0, [pc, #552]	; (80013e4 <__aeabi_dsub+0x35c>)
 80011bc:	08e4      	lsrs	r4, r4, #3
 80011be:	4003      	ands	r3, r0
 80011c0:	0018      	movs	r0, r3
 80011c2:	0549      	lsls	r1, r1, #21
 80011c4:	075b      	lsls	r3, r3, #29
 80011c6:	0240      	lsls	r0, r0, #9
 80011c8:	4323      	orrs	r3, r4
 80011ca:	0d4a      	lsrs	r2, r1, #21
 80011cc:	0b04      	lsrs	r4, r0, #12
 80011ce:	0512      	lsls	r2, r2, #20
 80011d0:	07ed      	lsls	r5, r5, #31
 80011d2:	4322      	orrs	r2, r4
 80011d4:	432a      	orrs	r2, r5
 80011d6:	0018      	movs	r0, r3
 80011d8:	0011      	movs	r1, r2
 80011da:	bcf0      	pop	{r4, r5, r6, r7}
 80011dc:	46bb      	mov	fp, r7
 80011de:	46b2      	mov	sl, r6
 80011e0:	46a9      	mov	r9, r5
 80011e2:	46a0      	mov	r8, r4
 80011e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011e6:	4642      	mov	r2, r8
 80011e8:	1a12      	subs	r2, r2, r0
 80011ea:	2a00      	cmp	r2, #0
 80011ec:	dd52      	ble.n	8001294 <__aeabi_dsub+0x20c>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d100      	bne.n	80011f4 <__aeabi_dsub+0x16c>
 80011f2:	e09c      	b.n	800132e <__aeabi_dsub+0x2a6>
 80011f4:	45a0      	cmp	r8, r4
 80011f6:	d100      	bne.n	80011fa <__aeabi_dsub+0x172>
 80011f8:	e0ca      	b.n	8001390 <__aeabi_dsub+0x308>
 80011fa:	2080      	movs	r0, #128	; 0x80
 80011fc:	0400      	lsls	r0, r0, #16
 80011fe:	4301      	orrs	r1, r0
 8001200:	2a38      	cmp	r2, #56	; 0x38
 8001202:	dd00      	ble.n	8001206 <__aeabi_dsub+0x17e>
 8001204:	e149      	b.n	800149a <__aeabi_dsub+0x412>
 8001206:	2a1f      	cmp	r2, #31
 8001208:	dc00      	bgt.n	800120c <__aeabi_dsub+0x184>
 800120a:	e197      	b.n	800153c <__aeabi_dsub+0x4b4>
 800120c:	0010      	movs	r0, r2
 800120e:	000e      	movs	r6, r1
 8001210:	3820      	subs	r0, #32
 8001212:	40c6      	lsrs	r6, r0
 8001214:	2a20      	cmp	r2, #32
 8001216:	d004      	beq.n	8001222 <__aeabi_dsub+0x19a>
 8001218:	2040      	movs	r0, #64	; 0x40
 800121a:	1a82      	subs	r2, r0, r2
 800121c:	4091      	lsls	r1, r2
 800121e:	430f      	orrs	r7, r1
 8001220:	46b9      	mov	r9, r7
 8001222:	464c      	mov	r4, r9
 8001224:	1e62      	subs	r2, r4, #1
 8001226:	4194      	sbcs	r4, r2
 8001228:	4334      	orrs	r4, r6
 800122a:	e13a      	b.n	80014a2 <__aeabi_dsub+0x41a>
 800122c:	000a      	movs	r2, r1
 800122e:	433a      	orrs	r2, r7
 8001230:	d028      	beq.n	8001284 <__aeabi_dsub+0x1fc>
 8001232:	46b3      	mov	fp, r6
 8001234:	42b5      	cmp	r5, r6
 8001236:	d02b      	beq.n	8001290 <__aeabi_dsub+0x208>
 8001238:	4a6b      	ldr	r2, [pc, #428]	; (80013e8 <__aeabi_dsub+0x360>)
 800123a:	4442      	add	r2, r8
 800123c:	2a00      	cmp	r2, #0
 800123e:	d05d      	beq.n	80012fc <__aeabi_dsub+0x274>
 8001240:	4642      	mov	r2, r8
 8001242:	4644      	mov	r4, r8
 8001244:	1a82      	subs	r2, r0, r2
 8001246:	2c00      	cmp	r4, #0
 8001248:	d000      	beq.n	800124c <__aeabi_dsub+0x1c4>
 800124a:	e0f5      	b.n	8001438 <__aeabi_dsub+0x3b0>
 800124c:	4665      	mov	r5, ip
 800124e:	431d      	orrs	r5, r3
 8001250:	d100      	bne.n	8001254 <__aeabi_dsub+0x1cc>
 8001252:	e19c      	b.n	800158e <__aeabi_dsub+0x506>
 8001254:	1e55      	subs	r5, r2, #1
 8001256:	2a01      	cmp	r2, #1
 8001258:	d100      	bne.n	800125c <__aeabi_dsub+0x1d4>
 800125a:	e1fb      	b.n	8001654 <__aeabi_dsub+0x5cc>
 800125c:	4c60      	ldr	r4, [pc, #384]	; (80013e0 <__aeabi_dsub+0x358>)
 800125e:	42a2      	cmp	r2, r4
 8001260:	d100      	bne.n	8001264 <__aeabi_dsub+0x1dc>
 8001262:	e1bd      	b.n	80015e0 <__aeabi_dsub+0x558>
 8001264:	002a      	movs	r2, r5
 8001266:	e0f0      	b.n	800144a <__aeabi_dsub+0x3c2>
 8001268:	0008      	movs	r0, r1
 800126a:	4338      	orrs	r0, r7
 800126c:	d100      	bne.n	8001270 <__aeabi_dsub+0x1e8>
 800126e:	e0c3      	b.n	80013f8 <__aeabi_dsub+0x370>
 8001270:	1e50      	subs	r0, r2, #1
 8001272:	2a01      	cmp	r2, #1
 8001274:	d100      	bne.n	8001278 <__aeabi_dsub+0x1f0>
 8001276:	e1a8      	b.n	80015ca <__aeabi_dsub+0x542>
 8001278:	4c59      	ldr	r4, [pc, #356]	; (80013e0 <__aeabi_dsub+0x358>)
 800127a:	42a2      	cmp	r2, r4
 800127c:	d100      	bne.n	8001280 <__aeabi_dsub+0x1f8>
 800127e:	e087      	b.n	8001390 <__aeabi_dsub+0x308>
 8001280:	0002      	movs	r2, r0
 8001282:	e736      	b.n	80010f2 <__aeabi_dsub+0x6a>
 8001284:	2201      	movs	r2, #1
 8001286:	4056      	eors	r6, r2
 8001288:	46b3      	mov	fp, r6
 800128a:	42b5      	cmp	r5, r6
 800128c:	d000      	beq.n	8001290 <__aeabi_dsub+0x208>
 800128e:	e721      	b.n	80010d4 <__aeabi_dsub+0x4c>
 8001290:	4a55      	ldr	r2, [pc, #340]	; (80013e8 <__aeabi_dsub+0x360>)
 8001292:	4442      	add	r2, r8
 8001294:	2a00      	cmp	r2, #0
 8001296:	d100      	bne.n	800129a <__aeabi_dsub+0x212>
 8001298:	e0b5      	b.n	8001406 <__aeabi_dsub+0x37e>
 800129a:	4642      	mov	r2, r8
 800129c:	4644      	mov	r4, r8
 800129e:	1a82      	subs	r2, r0, r2
 80012a0:	2c00      	cmp	r4, #0
 80012a2:	d100      	bne.n	80012a6 <__aeabi_dsub+0x21e>
 80012a4:	e138      	b.n	8001518 <__aeabi_dsub+0x490>
 80012a6:	4e4e      	ldr	r6, [pc, #312]	; (80013e0 <__aeabi_dsub+0x358>)
 80012a8:	42b0      	cmp	r0, r6
 80012aa:	d100      	bne.n	80012ae <__aeabi_dsub+0x226>
 80012ac:	e1de      	b.n	800166c <__aeabi_dsub+0x5e4>
 80012ae:	2680      	movs	r6, #128	; 0x80
 80012b0:	4664      	mov	r4, ip
 80012b2:	0436      	lsls	r6, r6, #16
 80012b4:	4334      	orrs	r4, r6
 80012b6:	46a4      	mov	ip, r4
 80012b8:	2a38      	cmp	r2, #56	; 0x38
 80012ba:	dd00      	ble.n	80012be <__aeabi_dsub+0x236>
 80012bc:	e196      	b.n	80015ec <__aeabi_dsub+0x564>
 80012be:	2a1f      	cmp	r2, #31
 80012c0:	dd00      	ble.n	80012c4 <__aeabi_dsub+0x23c>
 80012c2:	e224      	b.n	800170e <__aeabi_dsub+0x686>
 80012c4:	2620      	movs	r6, #32
 80012c6:	1ab4      	subs	r4, r6, r2
 80012c8:	46a2      	mov	sl, r4
 80012ca:	4664      	mov	r4, ip
 80012cc:	4656      	mov	r6, sl
 80012ce:	40b4      	lsls	r4, r6
 80012d0:	46a1      	mov	r9, r4
 80012d2:	001c      	movs	r4, r3
 80012d4:	464e      	mov	r6, r9
 80012d6:	40d4      	lsrs	r4, r2
 80012d8:	4326      	orrs	r6, r4
 80012da:	0034      	movs	r4, r6
 80012dc:	4656      	mov	r6, sl
 80012de:	40b3      	lsls	r3, r6
 80012e0:	1e5e      	subs	r6, r3, #1
 80012e2:	41b3      	sbcs	r3, r6
 80012e4:	431c      	orrs	r4, r3
 80012e6:	4663      	mov	r3, ip
 80012e8:	40d3      	lsrs	r3, r2
 80012ea:	18c9      	adds	r1, r1, r3
 80012ec:	19e4      	adds	r4, r4, r7
 80012ee:	42bc      	cmp	r4, r7
 80012f0:	41bf      	sbcs	r7, r7
 80012f2:	427f      	negs	r7, r7
 80012f4:	46b9      	mov	r9, r7
 80012f6:	4680      	mov	r8, r0
 80012f8:	4489      	add	r9, r1
 80012fa:	e0d8      	b.n	80014ae <__aeabi_dsub+0x426>
 80012fc:	4640      	mov	r0, r8
 80012fe:	4c3b      	ldr	r4, [pc, #236]	; (80013ec <__aeabi_dsub+0x364>)
 8001300:	3001      	adds	r0, #1
 8001302:	4220      	tst	r0, r4
 8001304:	d000      	beq.n	8001308 <__aeabi_dsub+0x280>
 8001306:	e0b4      	b.n	8001472 <__aeabi_dsub+0x3ea>
 8001308:	4640      	mov	r0, r8
 800130a:	2800      	cmp	r0, #0
 800130c:	d000      	beq.n	8001310 <__aeabi_dsub+0x288>
 800130e:	e144      	b.n	800159a <__aeabi_dsub+0x512>
 8001310:	4660      	mov	r0, ip
 8001312:	4318      	orrs	r0, r3
 8001314:	d100      	bne.n	8001318 <__aeabi_dsub+0x290>
 8001316:	e190      	b.n	800163a <__aeabi_dsub+0x5b2>
 8001318:	0008      	movs	r0, r1
 800131a:	4338      	orrs	r0, r7
 800131c:	d000      	beq.n	8001320 <__aeabi_dsub+0x298>
 800131e:	e1aa      	b.n	8001676 <__aeabi_dsub+0x5ee>
 8001320:	4661      	mov	r1, ip
 8001322:	08db      	lsrs	r3, r3, #3
 8001324:	0749      	lsls	r1, r1, #29
 8001326:	430b      	orrs	r3, r1
 8001328:	4661      	mov	r1, ip
 800132a:	08cc      	lsrs	r4, r1, #3
 800132c:	e027      	b.n	800137e <__aeabi_dsub+0x2f6>
 800132e:	0008      	movs	r0, r1
 8001330:	4338      	orrs	r0, r7
 8001332:	d061      	beq.n	80013f8 <__aeabi_dsub+0x370>
 8001334:	1e50      	subs	r0, r2, #1
 8001336:	2a01      	cmp	r2, #1
 8001338:	d100      	bne.n	800133c <__aeabi_dsub+0x2b4>
 800133a:	e139      	b.n	80015b0 <__aeabi_dsub+0x528>
 800133c:	42a2      	cmp	r2, r4
 800133e:	d027      	beq.n	8001390 <__aeabi_dsub+0x308>
 8001340:	0002      	movs	r2, r0
 8001342:	e75d      	b.n	8001200 <__aeabi_dsub+0x178>
 8001344:	0002      	movs	r2, r0
 8001346:	391f      	subs	r1, #31
 8001348:	40ca      	lsrs	r2, r1
 800134a:	0011      	movs	r1, r2
 800134c:	2b20      	cmp	r3, #32
 800134e:	d003      	beq.n	8001358 <__aeabi_dsub+0x2d0>
 8001350:	2240      	movs	r2, #64	; 0x40
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	4098      	lsls	r0, r3
 8001356:	4304      	orrs	r4, r0
 8001358:	1e63      	subs	r3, r4, #1
 800135a:	419c      	sbcs	r4, r3
 800135c:	2300      	movs	r3, #0
 800135e:	4699      	mov	r9, r3
 8001360:	4698      	mov	r8, r3
 8001362:	430c      	orrs	r4, r1
 8001364:	0763      	lsls	r3, r4, #29
 8001366:	d000      	beq.n	800136a <__aeabi_dsub+0x2e2>
 8001368:	e712      	b.n	8001190 <__aeabi_dsub+0x108>
 800136a:	464b      	mov	r3, r9
 800136c:	464a      	mov	r2, r9
 800136e:	08e4      	lsrs	r4, r4, #3
 8001370:	075b      	lsls	r3, r3, #29
 8001372:	4323      	orrs	r3, r4
 8001374:	08d4      	lsrs	r4, r2, #3
 8001376:	4642      	mov	r2, r8
 8001378:	4919      	ldr	r1, [pc, #100]	; (80013e0 <__aeabi_dsub+0x358>)
 800137a:	428a      	cmp	r2, r1
 800137c:	d00e      	beq.n	800139c <__aeabi_dsub+0x314>
 800137e:	0324      	lsls	r4, r4, #12
 8001380:	0552      	lsls	r2, r2, #21
 8001382:	0b24      	lsrs	r4, r4, #12
 8001384:	0d52      	lsrs	r2, r2, #21
 8001386:	e722      	b.n	80011ce <__aeabi_dsub+0x146>
 8001388:	000a      	movs	r2, r1
 800138a:	2400      	movs	r4, #0
 800138c:	2300      	movs	r3, #0
 800138e:	e71e      	b.n	80011ce <__aeabi_dsub+0x146>
 8001390:	08db      	lsrs	r3, r3, #3
 8001392:	4662      	mov	r2, ip
 8001394:	0752      	lsls	r2, r2, #29
 8001396:	4313      	orrs	r3, r2
 8001398:	4662      	mov	r2, ip
 800139a:	08d4      	lsrs	r4, r2, #3
 800139c:	001a      	movs	r2, r3
 800139e:	4322      	orrs	r2, r4
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dsub+0x31c>
 80013a2:	e1fc      	b.n	800179e <__aeabi_dsub+0x716>
 80013a4:	2280      	movs	r2, #128	; 0x80
 80013a6:	0312      	lsls	r2, r2, #12
 80013a8:	4314      	orrs	r4, r2
 80013aa:	0324      	lsls	r4, r4, #12
 80013ac:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <__aeabi_dsub+0x358>)
 80013ae:	0b24      	lsrs	r4, r4, #12
 80013b0:	e70d      	b.n	80011ce <__aeabi_dsub+0x146>
 80013b2:	0020      	movs	r0, r4
 80013b4:	f000 faa8 	bl	8001908 <__clzsi2>
 80013b8:	0001      	movs	r1, r0
 80013ba:	3118      	adds	r1, #24
 80013bc:	291f      	cmp	r1, #31
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_dsub+0x33a>
 80013c0:	e6c4      	b.n	800114c <__aeabi_dsub+0xc4>
 80013c2:	3808      	subs	r0, #8
 80013c4:	4084      	lsls	r4, r0
 80013c6:	4643      	mov	r3, r8
 80013c8:	0020      	movs	r0, r4
 80013ca:	2400      	movs	r4, #0
 80013cc:	4588      	cmp	r8, r1
 80013ce:	dc00      	bgt.n	80013d2 <__aeabi_dsub+0x34a>
 80013d0:	e6c8      	b.n	8001164 <__aeabi_dsub+0xdc>
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <__aeabi_dsub+0x35c>)
 80013d4:	1a5b      	subs	r3, r3, r1
 80013d6:	4010      	ands	r0, r2
 80013d8:	4698      	mov	r8, r3
 80013da:	4681      	mov	r9, r0
 80013dc:	e6d6      	b.n	800118c <__aeabi_dsub+0x104>
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	000007ff 	.word	0x000007ff
 80013e4:	ff7fffff 	.word	0xff7fffff
 80013e8:	fffff801 	.word	0xfffff801
 80013ec:	000007fe 	.word	0x000007fe
 80013f0:	430f      	orrs	r7, r1
 80013f2:	1e7a      	subs	r2, r7, #1
 80013f4:	4197      	sbcs	r7, r2
 80013f6:	e691      	b.n	800111c <__aeabi_dsub+0x94>
 80013f8:	4661      	mov	r1, ip
 80013fa:	08db      	lsrs	r3, r3, #3
 80013fc:	0749      	lsls	r1, r1, #29
 80013fe:	430b      	orrs	r3, r1
 8001400:	4661      	mov	r1, ip
 8001402:	08cc      	lsrs	r4, r1, #3
 8001404:	e7b8      	b.n	8001378 <__aeabi_dsub+0x2f0>
 8001406:	4640      	mov	r0, r8
 8001408:	4cd3      	ldr	r4, [pc, #844]	; (8001758 <__aeabi_dsub+0x6d0>)
 800140a:	3001      	adds	r0, #1
 800140c:	4220      	tst	r0, r4
 800140e:	d000      	beq.n	8001412 <__aeabi_dsub+0x38a>
 8001410:	e0a2      	b.n	8001558 <__aeabi_dsub+0x4d0>
 8001412:	4640      	mov	r0, r8
 8001414:	2800      	cmp	r0, #0
 8001416:	d000      	beq.n	800141a <__aeabi_dsub+0x392>
 8001418:	e101      	b.n	800161e <__aeabi_dsub+0x596>
 800141a:	4660      	mov	r0, ip
 800141c:	4318      	orrs	r0, r3
 800141e:	d100      	bne.n	8001422 <__aeabi_dsub+0x39a>
 8001420:	e15e      	b.n	80016e0 <__aeabi_dsub+0x658>
 8001422:	0008      	movs	r0, r1
 8001424:	4338      	orrs	r0, r7
 8001426:	d000      	beq.n	800142a <__aeabi_dsub+0x3a2>
 8001428:	e15f      	b.n	80016ea <__aeabi_dsub+0x662>
 800142a:	4661      	mov	r1, ip
 800142c:	08db      	lsrs	r3, r3, #3
 800142e:	0749      	lsls	r1, r1, #29
 8001430:	430b      	orrs	r3, r1
 8001432:	4661      	mov	r1, ip
 8001434:	08cc      	lsrs	r4, r1, #3
 8001436:	e7a2      	b.n	800137e <__aeabi_dsub+0x2f6>
 8001438:	4dc8      	ldr	r5, [pc, #800]	; (800175c <__aeabi_dsub+0x6d4>)
 800143a:	42a8      	cmp	r0, r5
 800143c:	d100      	bne.n	8001440 <__aeabi_dsub+0x3b8>
 800143e:	e0cf      	b.n	80015e0 <__aeabi_dsub+0x558>
 8001440:	2580      	movs	r5, #128	; 0x80
 8001442:	4664      	mov	r4, ip
 8001444:	042d      	lsls	r5, r5, #16
 8001446:	432c      	orrs	r4, r5
 8001448:	46a4      	mov	ip, r4
 800144a:	2a38      	cmp	r2, #56	; 0x38
 800144c:	dc56      	bgt.n	80014fc <__aeabi_dsub+0x474>
 800144e:	2a1f      	cmp	r2, #31
 8001450:	dd00      	ble.n	8001454 <__aeabi_dsub+0x3cc>
 8001452:	e0d1      	b.n	80015f8 <__aeabi_dsub+0x570>
 8001454:	2520      	movs	r5, #32
 8001456:	001e      	movs	r6, r3
 8001458:	1aad      	subs	r5, r5, r2
 800145a:	4664      	mov	r4, ip
 800145c:	40ab      	lsls	r3, r5
 800145e:	40ac      	lsls	r4, r5
 8001460:	40d6      	lsrs	r6, r2
 8001462:	1e5d      	subs	r5, r3, #1
 8001464:	41ab      	sbcs	r3, r5
 8001466:	4334      	orrs	r4, r6
 8001468:	4323      	orrs	r3, r4
 800146a:	4664      	mov	r4, ip
 800146c:	40d4      	lsrs	r4, r2
 800146e:	1b09      	subs	r1, r1, r4
 8001470:	e049      	b.n	8001506 <__aeabi_dsub+0x47e>
 8001472:	4660      	mov	r0, ip
 8001474:	1bdc      	subs	r4, r3, r7
 8001476:	1a46      	subs	r6, r0, r1
 8001478:	42a3      	cmp	r3, r4
 800147a:	4180      	sbcs	r0, r0
 800147c:	4240      	negs	r0, r0
 800147e:	4681      	mov	r9, r0
 8001480:	0030      	movs	r0, r6
 8001482:	464e      	mov	r6, r9
 8001484:	1b80      	subs	r0, r0, r6
 8001486:	4681      	mov	r9, r0
 8001488:	0200      	lsls	r0, r0, #8
 800148a:	d476      	bmi.n	800157a <__aeabi_dsub+0x4f2>
 800148c:	464b      	mov	r3, r9
 800148e:	4323      	orrs	r3, r4
 8001490:	d000      	beq.n	8001494 <__aeabi_dsub+0x40c>
 8001492:	e652      	b.n	800113a <__aeabi_dsub+0xb2>
 8001494:	2400      	movs	r4, #0
 8001496:	2500      	movs	r5, #0
 8001498:	e771      	b.n	800137e <__aeabi_dsub+0x2f6>
 800149a:	4339      	orrs	r1, r7
 800149c:	000c      	movs	r4, r1
 800149e:	1e62      	subs	r2, r4, #1
 80014a0:	4194      	sbcs	r4, r2
 80014a2:	18e4      	adds	r4, r4, r3
 80014a4:	429c      	cmp	r4, r3
 80014a6:	419b      	sbcs	r3, r3
 80014a8:	425b      	negs	r3, r3
 80014aa:	4463      	add	r3, ip
 80014ac:	4699      	mov	r9, r3
 80014ae:	464b      	mov	r3, r9
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	d400      	bmi.n	80014b6 <__aeabi_dsub+0x42e>
 80014b4:	e756      	b.n	8001364 <__aeabi_dsub+0x2dc>
 80014b6:	2301      	movs	r3, #1
 80014b8:	469c      	mov	ip, r3
 80014ba:	4ba8      	ldr	r3, [pc, #672]	; (800175c <__aeabi_dsub+0x6d4>)
 80014bc:	44e0      	add	r8, ip
 80014be:	4598      	cmp	r8, r3
 80014c0:	d038      	beq.n	8001534 <__aeabi_dsub+0x4ac>
 80014c2:	464b      	mov	r3, r9
 80014c4:	48a6      	ldr	r0, [pc, #664]	; (8001760 <__aeabi_dsub+0x6d8>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	4003      	ands	r3, r0
 80014ca:	0018      	movs	r0, r3
 80014cc:	0863      	lsrs	r3, r4, #1
 80014ce:	4014      	ands	r4, r2
 80014d0:	431c      	orrs	r4, r3
 80014d2:	07c3      	lsls	r3, r0, #31
 80014d4:	431c      	orrs	r4, r3
 80014d6:	0843      	lsrs	r3, r0, #1
 80014d8:	4699      	mov	r9, r3
 80014da:	e657      	b.n	800118c <__aeabi_dsub+0x104>
 80014dc:	0010      	movs	r0, r2
 80014de:	000e      	movs	r6, r1
 80014e0:	3820      	subs	r0, #32
 80014e2:	40c6      	lsrs	r6, r0
 80014e4:	2a20      	cmp	r2, #32
 80014e6:	d004      	beq.n	80014f2 <__aeabi_dsub+0x46a>
 80014e8:	2040      	movs	r0, #64	; 0x40
 80014ea:	1a82      	subs	r2, r0, r2
 80014ec:	4091      	lsls	r1, r2
 80014ee:	430f      	orrs	r7, r1
 80014f0:	46b9      	mov	r9, r7
 80014f2:	464f      	mov	r7, r9
 80014f4:	1e7a      	subs	r2, r7, #1
 80014f6:	4197      	sbcs	r7, r2
 80014f8:	4337      	orrs	r7, r6
 80014fa:	e60f      	b.n	800111c <__aeabi_dsub+0x94>
 80014fc:	4662      	mov	r2, ip
 80014fe:	431a      	orrs	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	1e5a      	subs	r2, r3, #1
 8001504:	4193      	sbcs	r3, r2
 8001506:	1afc      	subs	r4, r7, r3
 8001508:	42a7      	cmp	r7, r4
 800150a:	41bf      	sbcs	r7, r7
 800150c:	427f      	negs	r7, r7
 800150e:	1bcb      	subs	r3, r1, r7
 8001510:	4699      	mov	r9, r3
 8001512:	465d      	mov	r5, fp
 8001514:	4680      	mov	r8, r0
 8001516:	e608      	b.n	800112a <__aeabi_dsub+0xa2>
 8001518:	4666      	mov	r6, ip
 800151a:	431e      	orrs	r6, r3
 800151c:	d100      	bne.n	8001520 <__aeabi_dsub+0x498>
 800151e:	e0be      	b.n	800169e <__aeabi_dsub+0x616>
 8001520:	1e56      	subs	r6, r2, #1
 8001522:	2a01      	cmp	r2, #1
 8001524:	d100      	bne.n	8001528 <__aeabi_dsub+0x4a0>
 8001526:	e109      	b.n	800173c <__aeabi_dsub+0x6b4>
 8001528:	4c8c      	ldr	r4, [pc, #560]	; (800175c <__aeabi_dsub+0x6d4>)
 800152a:	42a2      	cmp	r2, r4
 800152c:	d100      	bne.n	8001530 <__aeabi_dsub+0x4a8>
 800152e:	e119      	b.n	8001764 <__aeabi_dsub+0x6dc>
 8001530:	0032      	movs	r2, r6
 8001532:	e6c1      	b.n	80012b8 <__aeabi_dsub+0x230>
 8001534:	4642      	mov	r2, r8
 8001536:	2400      	movs	r4, #0
 8001538:	2300      	movs	r3, #0
 800153a:	e648      	b.n	80011ce <__aeabi_dsub+0x146>
 800153c:	2020      	movs	r0, #32
 800153e:	000c      	movs	r4, r1
 8001540:	1a80      	subs	r0, r0, r2
 8001542:	003e      	movs	r6, r7
 8001544:	4087      	lsls	r7, r0
 8001546:	4084      	lsls	r4, r0
 8001548:	40d6      	lsrs	r6, r2
 800154a:	1e78      	subs	r0, r7, #1
 800154c:	4187      	sbcs	r7, r0
 800154e:	40d1      	lsrs	r1, r2
 8001550:	4334      	orrs	r4, r6
 8001552:	433c      	orrs	r4, r7
 8001554:	448c      	add	ip, r1
 8001556:	e7a4      	b.n	80014a2 <__aeabi_dsub+0x41a>
 8001558:	4a80      	ldr	r2, [pc, #512]	; (800175c <__aeabi_dsub+0x6d4>)
 800155a:	4290      	cmp	r0, r2
 800155c:	d100      	bne.n	8001560 <__aeabi_dsub+0x4d8>
 800155e:	e0e9      	b.n	8001734 <__aeabi_dsub+0x6ac>
 8001560:	19df      	adds	r7, r3, r7
 8001562:	429f      	cmp	r7, r3
 8001564:	419b      	sbcs	r3, r3
 8001566:	4461      	add	r1, ip
 8001568:	425b      	negs	r3, r3
 800156a:	18c9      	adds	r1, r1, r3
 800156c:	07cc      	lsls	r4, r1, #31
 800156e:	087f      	lsrs	r7, r7, #1
 8001570:	084b      	lsrs	r3, r1, #1
 8001572:	4699      	mov	r9, r3
 8001574:	4680      	mov	r8, r0
 8001576:	433c      	orrs	r4, r7
 8001578:	e6f4      	b.n	8001364 <__aeabi_dsub+0x2dc>
 800157a:	1afc      	subs	r4, r7, r3
 800157c:	42a7      	cmp	r7, r4
 800157e:	41bf      	sbcs	r7, r7
 8001580:	4663      	mov	r3, ip
 8001582:	427f      	negs	r7, r7
 8001584:	1ac9      	subs	r1, r1, r3
 8001586:	1bcb      	subs	r3, r1, r7
 8001588:	4699      	mov	r9, r3
 800158a:	465d      	mov	r5, fp
 800158c:	e5d5      	b.n	800113a <__aeabi_dsub+0xb2>
 800158e:	08ff      	lsrs	r7, r7, #3
 8001590:	074b      	lsls	r3, r1, #29
 8001592:	465d      	mov	r5, fp
 8001594:	433b      	orrs	r3, r7
 8001596:	08cc      	lsrs	r4, r1, #3
 8001598:	e6ee      	b.n	8001378 <__aeabi_dsub+0x2f0>
 800159a:	4662      	mov	r2, ip
 800159c:	431a      	orrs	r2, r3
 800159e:	d000      	beq.n	80015a2 <__aeabi_dsub+0x51a>
 80015a0:	e082      	b.n	80016a8 <__aeabi_dsub+0x620>
 80015a2:	000b      	movs	r3, r1
 80015a4:	433b      	orrs	r3, r7
 80015a6:	d11b      	bne.n	80015e0 <__aeabi_dsub+0x558>
 80015a8:	2480      	movs	r4, #128	; 0x80
 80015aa:	2500      	movs	r5, #0
 80015ac:	0324      	lsls	r4, r4, #12
 80015ae:	e6f9      	b.n	80013a4 <__aeabi_dsub+0x31c>
 80015b0:	19dc      	adds	r4, r3, r7
 80015b2:	429c      	cmp	r4, r3
 80015b4:	419b      	sbcs	r3, r3
 80015b6:	4461      	add	r1, ip
 80015b8:	4689      	mov	r9, r1
 80015ba:	425b      	negs	r3, r3
 80015bc:	4499      	add	r9, r3
 80015be:	464b      	mov	r3, r9
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	d444      	bmi.n	800164e <__aeabi_dsub+0x5c6>
 80015c4:	2301      	movs	r3, #1
 80015c6:	4698      	mov	r8, r3
 80015c8:	e6cc      	b.n	8001364 <__aeabi_dsub+0x2dc>
 80015ca:	1bdc      	subs	r4, r3, r7
 80015cc:	4662      	mov	r2, ip
 80015ce:	42a3      	cmp	r3, r4
 80015d0:	419b      	sbcs	r3, r3
 80015d2:	1a51      	subs	r1, r2, r1
 80015d4:	425b      	negs	r3, r3
 80015d6:	1acb      	subs	r3, r1, r3
 80015d8:	4699      	mov	r9, r3
 80015da:	2301      	movs	r3, #1
 80015dc:	4698      	mov	r8, r3
 80015de:	e5a4      	b.n	800112a <__aeabi_dsub+0xa2>
 80015e0:	08ff      	lsrs	r7, r7, #3
 80015e2:	074b      	lsls	r3, r1, #29
 80015e4:	465d      	mov	r5, fp
 80015e6:	433b      	orrs	r3, r7
 80015e8:	08cc      	lsrs	r4, r1, #3
 80015ea:	e6d7      	b.n	800139c <__aeabi_dsub+0x314>
 80015ec:	4662      	mov	r2, ip
 80015ee:	431a      	orrs	r2, r3
 80015f0:	0014      	movs	r4, r2
 80015f2:	1e63      	subs	r3, r4, #1
 80015f4:	419c      	sbcs	r4, r3
 80015f6:	e679      	b.n	80012ec <__aeabi_dsub+0x264>
 80015f8:	0015      	movs	r5, r2
 80015fa:	4664      	mov	r4, ip
 80015fc:	3d20      	subs	r5, #32
 80015fe:	40ec      	lsrs	r4, r5
 8001600:	46a0      	mov	r8, r4
 8001602:	2a20      	cmp	r2, #32
 8001604:	d005      	beq.n	8001612 <__aeabi_dsub+0x58a>
 8001606:	2540      	movs	r5, #64	; 0x40
 8001608:	4664      	mov	r4, ip
 800160a:	1aaa      	subs	r2, r5, r2
 800160c:	4094      	lsls	r4, r2
 800160e:	4323      	orrs	r3, r4
 8001610:	469a      	mov	sl, r3
 8001612:	4654      	mov	r4, sl
 8001614:	1e63      	subs	r3, r4, #1
 8001616:	419c      	sbcs	r4, r3
 8001618:	4643      	mov	r3, r8
 800161a:	4323      	orrs	r3, r4
 800161c:	e773      	b.n	8001506 <__aeabi_dsub+0x47e>
 800161e:	4662      	mov	r2, ip
 8001620:	431a      	orrs	r2, r3
 8001622:	d023      	beq.n	800166c <__aeabi_dsub+0x5e4>
 8001624:	000a      	movs	r2, r1
 8001626:	433a      	orrs	r2, r7
 8001628:	d000      	beq.n	800162c <__aeabi_dsub+0x5a4>
 800162a:	e0a0      	b.n	800176e <__aeabi_dsub+0x6e6>
 800162c:	4662      	mov	r2, ip
 800162e:	08db      	lsrs	r3, r3, #3
 8001630:	0752      	lsls	r2, r2, #29
 8001632:	4313      	orrs	r3, r2
 8001634:	4662      	mov	r2, ip
 8001636:	08d4      	lsrs	r4, r2, #3
 8001638:	e6b0      	b.n	800139c <__aeabi_dsub+0x314>
 800163a:	000b      	movs	r3, r1
 800163c:	433b      	orrs	r3, r7
 800163e:	d100      	bne.n	8001642 <__aeabi_dsub+0x5ba>
 8001640:	e728      	b.n	8001494 <__aeabi_dsub+0x40c>
 8001642:	08ff      	lsrs	r7, r7, #3
 8001644:	074b      	lsls	r3, r1, #29
 8001646:	465d      	mov	r5, fp
 8001648:	433b      	orrs	r3, r7
 800164a:	08cc      	lsrs	r4, r1, #3
 800164c:	e697      	b.n	800137e <__aeabi_dsub+0x2f6>
 800164e:	2302      	movs	r3, #2
 8001650:	4698      	mov	r8, r3
 8001652:	e736      	b.n	80014c2 <__aeabi_dsub+0x43a>
 8001654:	1afc      	subs	r4, r7, r3
 8001656:	42a7      	cmp	r7, r4
 8001658:	41bf      	sbcs	r7, r7
 800165a:	4663      	mov	r3, ip
 800165c:	427f      	negs	r7, r7
 800165e:	1ac9      	subs	r1, r1, r3
 8001660:	1bcb      	subs	r3, r1, r7
 8001662:	4699      	mov	r9, r3
 8001664:	2301      	movs	r3, #1
 8001666:	465d      	mov	r5, fp
 8001668:	4698      	mov	r8, r3
 800166a:	e55e      	b.n	800112a <__aeabi_dsub+0xa2>
 800166c:	074b      	lsls	r3, r1, #29
 800166e:	08ff      	lsrs	r7, r7, #3
 8001670:	433b      	orrs	r3, r7
 8001672:	08cc      	lsrs	r4, r1, #3
 8001674:	e692      	b.n	800139c <__aeabi_dsub+0x314>
 8001676:	1bdc      	subs	r4, r3, r7
 8001678:	4660      	mov	r0, ip
 800167a:	42a3      	cmp	r3, r4
 800167c:	41b6      	sbcs	r6, r6
 800167e:	1a40      	subs	r0, r0, r1
 8001680:	4276      	negs	r6, r6
 8001682:	1b80      	subs	r0, r0, r6
 8001684:	4681      	mov	r9, r0
 8001686:	0200      	lsls	r0, r0, #8
 8001688:	d560      	bpl.n	800174c <__aeabi_dsub+0x6c4>
 800168a:	1afc      	subs	r4, r7, r3
 800168c:	42a7      	cmp	r7, r4
 800168e:	41bf      	sbcs	r7, r7
 8001690:	4663      	mov	r3, ip
 8001692:	427f      	negs	r7, r7
 8001694:	1ac9      	subs	r1, r1, r3
 8001696:	1bcb      	subs	r3, r1, r7
 8001698:	4699      	mov	r9, r3
 800169a:	465d      	mov	r5, fp
 800169c:	e576      	b.n	800118c <__aeabi_dsub+0x104>
 800169e:	08ff      	lsrs	r7, r7, #3
 80016a0:	074b      	lsls	r3, r1, #29
 80016a2:	433b      	orrs	r3, r7
 80016a4:	08cc      	lsrs	r4, r1, #3
 80016a6:	e667      	b.n	8001378 <__aeabi_dsub+0x2f0>
 80016a8:	000a      	movs	r2, r1
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	433a      	orrs	r2, r7
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dsub+0x62a>
 80016b0:	e66f      	b.n	8001392 <__aeabi_dsub+0x30a>
 80016b2:	4662      	mov	r2, ip
 80016b4:	0752      	lsls	r2, r2, #29
 80016b6:	4313      	orrs	r3, r2
 80016b8:	4662      	mov	r2, ip
 80016ba:	08d4      	lsrs	r4, r2, #3
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	0312      	lsls	r2, r2, #12
 80016c0:	4214      	tst	r4, r2
 80016c2:	d007      	beq.n	80016d4 <__aeabi_dsub+0x64c>
 80016c4:	08c8      	lsrs	r0, r1, #3
 80016c6:	4210      	tst	r0, r2
 80016c8:	d104      	bne.n	80016d4 <__aeabi_dsub+0x64c>
 80016ca:	465d      	mov	r5, fp
 80016cc:	0004      	movs	r4, r0
 80016ce:	08fb      	lsrs	r3, r7, #3
 80016d0:	0749      	lsls	r1, r1, #29
 80016d2:	430b      	orrs	r3, r1
 80016d4:	0f5a      	lsrs	r2, r3, #29
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	0752      	lsls	r2, r2, #29
 80016dc:	4313      	orrs	r3, r2
 80016de:	e65d      	b.n	800139c <__aeabi_dsub+0x314>
 80016e0:	074b      	lsls	r3, r1, #29
 80016e2:	08ff      	lsrs	r7, r7, #3
 80016e4:	433b      	orrs	r3, r7
 80016e6:	08cc      	lsrs	r4, r1, #3
 80016e8:	e649      	b.n	800137e <__aeabi_dsub+0x2f6>
 80016ea:	19dc      	adds	r4, r3, r7
 80016ec:	429c      	cmp	r4, r3
 80016ee:	419b      	sbcs	r3, r3
 80016f0:	4461      	add	r1, ip
 80016f2:	4689      	mov	r9, r1
 80016f4:	425b      	negs	r3, r3
 80016f6:	4499      	add	r9, r3
 80016f8:	464b      	mov	r3, r9
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	d400      	bmi.n	8001700 <__aeabi_dsub+0x678>
 80016fe:	e631      	b.n	8001364 <__aeabi_dsub+0x2dc>
 8001700:	464a      	mov	r2, r9
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <__aeabi_dsub+0x6d8>)
 8001704:	401a      	ands	r2, r3
 8001706:	2301      	movs	r3, #1
 8001708:	4691      	mov	r9, r2
 800170a:	4698      	mov	r8, r3
 800170c:	e62a      	b.n	8001364 <__aeabi_dsub+0x2dc>
 800170e:	0016      	movs	r6, r2
 8001710:	4664      	mov	r4, ip
 8001712:	3e20      	subs	r6, #32
 8001714:	40f4      	lsrs	r4, r6
 8001716:	46a0      	mov	r8, r4
 8001718:	2a20      	cmp	r2, #32
 800171a:	d005      	beq.n	8001728 <__aeabi_dsub+0x6a0>
 800171c:	2640      	movs	r6, #64	; 0x40
 800171e:	4664      	mov	r4, ip
 8001720:	1ab2      	subs	r2, r6, r2
 8001722:	4094      	lsls	r4, r2
 8001724:	4323      	orrs	r3, r4
 8001726:	469a      	mov	sl, r3
 8001728:	4654      	mov	r4, sl
 800172a:	1e63      	subs	r3, r4, #1
 800172c:	419c      	sbcs	r4, r3
 800172e:	4643      	mov	r3, r8
 8001730:	431c      	orrs	r4, r3
 8001732:	e5db      	b.n	80012ec <__aeabi_dsub+0x264>
 8001734:	0002      	movs	r2, r0
 8001736:	2400      	movs	r4, #0
 8001738:	2300      	movs	r3, #0
 800173a:	e548      	b.n	80011ce <__aeabi_dsub+0x146>
 800173c:	19dc      	adds	r4, r3, r7
 800173e:	42bc      	cmp	r4, r7
 8001740:	41bf      	sbcs	r7, r7
 8001742:	4461      	add	r1, ip
 8001744:	4689      	mov	r9, r1
 8001746:	427f      	negs	r7, r7
 8001748:	44b9      	add	r9, r7
 800174a:	e738      	b.n	80015be <__aeabi_dsub+0x536>
 800174c:	464b      	mov	r3, r9
 800174e:	4323      	orrs	r3, r4
 8001750:	d100      	bne.n	8001754 <__aeabi_dsub+0x6cc>
 8001752:	e69f      	b.n	8001494 <__aeabi_dsub+0x40c>
 8001754:	e606      	b.n	8001364 <__aeabi_dsub+0x2dc>
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	000007fe 	.word	0x000007fe
 800175c:	000007ff 	.word	0x000007ff
 8001760:	ff7fffff 	.word	0xff7fffff
 8001764:	08ff      	lsrs	r7, r7, #3
 8001766:	074b      	lsls	r3, r1, #29
 8001768:	433b      	orrs	r3, r7
 800176a:	08cc      	lsrs	r4, r1, #3
 800176c:	e616      	b.n	800139c <__aeabi_dsub+0x314>
 800176e:	4662      	mov	r2, ip
 8001770:	08db      	lsrs	r3, r3, #3
 8001772:	0752      	lsls	r2, r2, #29
 8001774:	4313      	orrs	r3, r2
 8001776:	4662      	mov	r2, ip
 8001778:	08d4      	lsrs	r4, r2, #3
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	0312      	lsls	r2, r2, #12
 800177e:	4214      	tst	r4, r2
 8001780:	d007      	beq.n	8001792 <__aeabi_dsub+0x70a>
 8001782:	08c8      	lsrs	r0, r1, #3
 8001784:	4210      	tst	r0, r2
 8001786:	d104      	bne.n	8001792 <__aeabi_dsub+0x70a>
 8001788:	465d      	mov	r5, fp
 800178a:	0004      	movs	r4, r0
 800178c:	08fb      	lsrs	r3, r7, #3
 800178e:	0749      	lsls	r1, r1, #29
 8001790:	430b      	orrs	r3, r1
 8001792:	0f5a      	lsrs	r2, r3, #29
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	0752      	lsls	r2, r2, #29
 8001798:	08db      	lsrs	r3, r3, #3
 800179a:	4313      	orrs	r3, r2
 800179c:	e5fe      	b.n	800139c <__aeabi_dsub+0x314>
 800179e:	2300      	movs	r3, #0
 80017a0:	4a01      	ldr	r2, [pc, #4]	; (80017a8 <__aeabi_dsub+0x720>)
 80017a2:	001c      	movs	r4, r3
 80017a4:	e513      	b.n	80011ce <__aeabi_dsub+0x146>
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	000007ff 	.word	0x000007ff

080017ac <__aeabi_ui2d>:
 80017ac:	b510      	push	{r4, lr}
 80017ae:	1e04      	subs	r4, r0, #0
 80017b0:	d010      	beq.n	80017d4 <__aeabi_ui2d+0x28>
 80017b2:	f000 f8a9 	bl	8001908 <__clzsi2>
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <__aeabi_ui2d+0x48>)
 80017b8:	1a1b      	subs	r3, r3, r0
 80017ba:	280a      	cmp	r0, #10
 80017bc:	dc11      	bgt.n	80017e2 <__aeabi_ui2d+0x36>
 80017be:	220b      	movs	r2, #11
 80017c0:	0021      	movs	r1, r4
 80017c2:	1a12      	subs	r2, r2, r0
 80017c4:	40d1      	lsrs	r1, r2
 80017c6:	3015      	adds	r0, #21
 80017c8:	030a      	lsls	r2, r1, #12
 80017ca:	055b      	lsls	r3, r3, #21
 80017cc:	4084      	lsls	r4, r0
 80017ce:	0b12      	lsrs	r2, r2, #12
 80017d0:	0d5b      	lsrs	r3, r3, #21
 80017d2:	e001      	b.n	80017d8 <__aeabi_ui2d+0x2c>
 80017d4:	2300      	movs	r3, #0
 80017d6:	2200      	movs	r2, #0
 80017d8:	051b      	lsls	r3, r3, #20
 80017da:	4313      	orrs	r3, r2
 80017dc:	0020      	movs	r0, r4
 80017de:	0019      	movs	r1, r3
 80017e0:	bd10      	pop	{r4, pc}
 80017e2:	0022      	movs	r2, r4
 80017e4:	380b      	subs	r0, #11
 80017e6:	4082      	lsls	r2, r0
 80017e8:	055b      	lsls	r3, r3, #21
 80017ea:	0312      	lsls	r2, r2, #12
 80017ec:	2400      	movs	r4, #0
 80017ee:	0b12      	lsrs	r2, r2, #12
 80017f0:	0d5b      	lsrs	r3, r3, #21
 80017f2:	e7f1      	b.n	80017d8 <__aeabi_ui2d+0x2c>
 80017f4:	0000041e 	.word	0x0000041e

080017f8 <__aeabi_d2f>:
 80017f8:	0002      	movs	r2, r0
 80017fa:	004b      	lsls	r3, r1, #1
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	0d5b      	lsrs	r3, r3, #21
 8001800:	030c      	lsls	r4, r1, #12
 8001802:	4e3d      	ldr	r6, [pc, #244]	; (80018f8 <__aeabi_d2f+0x100>)
 8001804:	0a64      	lsrs	r4, r4, #9
 8001806:	0f40      	lsrs	r0, r0, #29
 8001808:	1c5f      	adds	r7, r3, #1
 800180a:	0fc9      	lsrs	r1, r1, #31
 800180c:	4304      	orrs	r4, r0
 800180e:	00d5      	lsls	r5, r2, #3
 8001810:	4237      	tst	r7, r6
 8001812:	d00a      	beq.n	800182a <__aeabi_d2f+0x32>
 8001814:	4839      	ldr	r0, [pc, #228]	; (80018fc <__aeabi_d2f+0x104>)
 8001816:	181e      	adds	r6, r3, r0
 8001818:	2efe      	cmp	r6, #254	; 0xfe
 800181a:	dd16      	ble.n	800184a <__aeabi_d2f+0x52>
 800181c:	20ff      	movs	r0, #255	; 0xff
 800181e:	2400      	movs	r4, #0
 8001820:	05c0      	lsls	r0, r0, #23
 8001822:	4320      	orrs	r0, r4
 8001824:	07c9      	lsls	r1, r1, #31
 8001826:	4308      	orrs	r0, r1
 8001828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182a:	2b00      	cmp	r3, #0
 800182c:	d106      	bne.n	800183c <__aeabi_d2f+0x44>
 800182e:	432c      	orrs	r4, r5
 8001830:	d026      	beq.n	8001880 <__aeabi_d2f+0x88>
 8001832:	2205      	movs	r2, #5
 8001834:	0192      	lsls	r2, r2, #6
 8001836:	0a54      	lsrs	r4, r2, #9
 8001838:	b2d8      	uxtb	r0, r3
 800183a:	e7f1      	b.n	8001820 <__aeabi_d2f+0x28>
 800183c:	4325      	orrs	r5, r4
 800183e:	d0ed      	beq.n	800181c <__aeabi_d2f+0x24>
 8001840:	2080      	movs	r0, #128	; 0x80
 8001842:	03c0      	lsls	r0, r0, #15
 8001844:	4304      	orrs	r4, r0
 8001846:	20ff      	movs	r0, #255	; 0xff
 8001848:	e7ea      	b.n	8001820 <__aeabi_d2f+0x28>
 800184a:	2e00      	cmp	r6, #0
 800184c:	dd1b      	ble.n	8001886 <__aeabi_d2f+0x8e>
 800184e:	0192      	lsls	r2, r2, #6
 8001850:	1e53      	subs	r3, r2, #1
 8001852:	419a      	sbcs	r2, r3
 8001854:	00e4      	lsls	r4, r4, #3
 8001856:	0f6d      	lsrs	r5, r5, #29
 8001858:	4322      	orrs	r2, r4
 800185a:	432a      	orrs	r2, r5
 800185c:	0753      	lsls	r3, r2, #29
 800185e:	d048      	beq.n	80018f2 <__aeabi_d2f+0xfa>
 8001860:	230f      	movs	r3, #15
 8001862:	4013      	ands	r3, r2
 8001864:	2b04      	cmp	r3, #4
 8001866:	d000      	beq.n	800186a <__aeabi_d2f+0x72>
 8001868:	3204      	adds	r2, #4
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	04db      	lsls	r3, r3, #19
 800186e:	4013      	ands	r3, r2
 8001870:	d03f      	beq.n	80018f2 <__aeabi_d2f+0xfa>
 8001872:	1c70      	adds	r0, r6, #1
 8001874:	2efe      	cmp	r6, #254	; 0xfe
 8001876:	d0d1      	beq.n	800181c <__aeabi_d2f+0x24>
 8001878:	0192      	lsls	r2, r2, #6
 800187a:	0a54      	lsrs	r4, r2, #9
 800187c:	b2c0      	uxtb	r0, r0
 800187e:	e7cf      	b.n	8001820 <__aeabi_d2f+0x28>
 8001880:	2000      	movs	r0, #0
 8001882:	2400      	movs	r4, #0
 8001884:	e7cc      	b.n	8001820 <__aeabi_d2f+0x28>
 8001886:	0032      	movs	r2, r6
 8001888:	3217      	adds	r2, #23
 800188a:	db22      	blt.n	80018d2 <__aeabi_d2f+0xda>
 800188c:	2080      	movs	r0, #128	; 0x80
 800188e:	0400      	lsls	r0, r0, #16
 8001890:	4320      	orrs	r0, r4
 8001892:	241e      	movs	r4, #30
 8001894:	1ba4      	subs	r4, r4, r6
 8001896:	2c1f      	cmp	r4, #31
 8001898:	dd1d      	ble.n	80018d6 <__aeabi_d2f+0xde>
 800189a:	2202      	movs	r2, #2
 800189c:	4252      	negs	r2, r2
 800189e:	1b96      	subs	r6, r2, r6
 80018a0:	0002      	movs	r2, r0
 80018a2:	40f2      	lsrs	r2, r6
 80018a4:	0016      	movs	r6, r2
 80018a6:	2c20      	cmp	r4, #32
 80018a8:	d004      	beq.n	80018b4 <__aeabi_d2f+0xbc>
 80018aa:	4a15      	ldr	r2, [pc, #84]	; (8001900 <__aeabi_d2f+0x108>)
 80018ac:	4694      	mov	ip, r2
 80018ae:	4463      	add	r3, ip
 80018b0:	4098      	lsls	r0, r3
 80018b2:	4305      	orrs	r5, r0
 80018b4:	002a      	movs	r2, r5
 80018b6:	1e53      	subs	r3, r2, #1
 80018b8:	419a      	sbcs	r2, r3
 80018ba:	4332      	orrs	r2, r6
 80018bc:	2600      	movs	r6, #0
 80018be:	0753      	lsls	r3, r2, #29
 80018c0:	d1ce      	bne.n	8001860 <__aeabi_d2f+0x68>
 80018c2:	2480      	movs	r4, #128	; 0x80
 80018c4:	0013      	movs	r3, r2
 80018c6:	04e4      	lsls	r4, r4, #19
 80018c8:	2001      	movs	r0, #1
 80018ca:	4023      	ands	r3, r4
 80018cc:	4222      	tst	r2, r4
 80018ce:	d1d3      	bne.n	8001878 <__aeabi_d2f+0x80>
 80018d0:	e7b0      	b.n	8001834 <__aeabi_d2f+0x3c>
 80018d2:	2300      	movs	r3, #0
 80018d4:	e7ad      	b.n	8001832 <__aeabi_d2f+0x3a>
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <__aeabi_d2f+0x10c>)
 80018d8:	4694      	mov	ip, r2
 80018da:	002a      	movs	r2, r5
 80018dc:	40e2      	lsrs	r2, r4
 80018de:	0014      	movs	r4, r2
 80018e0:	002a      	movs	r2, r5
 80018e2:	4463      	add	r3, ip
 80018e4:	409a      	lsls	r2, r3
 80018e6:	4098      	lsls	r0, r3
 80018e8:	1e55      	subs	r5, r2, #1
 80018ea:	41aa      	sbcs	r2, r5
 80018ec:	4302      	orrs	r2, r0
 80018ee:	4322      	orrs	r2, r4
 80018f0:	e7e4      	b.n	80018bc <__aeabi_d2f+0xc4>
 80018f2:	0033      	movs	r3, r6
 80018f4:	e79e      	b.n	8001834 <__aeabi_d2f+0x3c>
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	000007fe 	.word	0x000007fe
 80018fc:	fffffc80 	.word	0xfffffc80
 8001900:	fffffca2 	.word	0xfffffca2
 8001904:	fffffc82 	.word	0xfffffc82

08001908 <__clzsi2>:
 8001908:	211c      	movs	r1, #28
 800190a:	2301      	movs	r3, #1
 800190c:	041b      	lsls	r3, r3, #16
 800190e:	4298      	cmp	r0, r3
 8001910:	d301      	bcc.n	8001916 <__clzsi2+0xe>
 8001912:	0c00      	lsrs	r0, r0, #16
 8001914:	3910      	subs	r1, #16
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	4298      	cmp	r0, r3
 800191a:	d301      	bcc.n	8001920 <__clzsi2+0x18>
 800191c:	0a00      	lsrs	r0, r0, #8
 800191e:	3908      	subs	r1, #8
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	4298      	cmp	r0, r3
 8001924:	d301      	bcc.n	800192a <__clzsi2+0x22>
 8001926:	0900      	lsrs	r0, r0, #4
 8001928:	3904      	subs	r1, #4
 800192a:	a202      	add	r2, pc, #8	; (adr r2, 8001934 <__clzsi2+0x2c>)
 800192c:	5c10      	ldrb	r0, [r2, r0]
 800192e:	1840      	adds	r0, r0, r1
 8001930:	4770      	bx	lr
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	02020304 	.word	0x02020304
 8001938:	01010101 	.word	0x01010101
	...

08001944 <__clzdi2>:
 8001944:	b510      	push	{r4, lr}
 8001946:	2900      	cmp	r1, #0
 8001948:	d103      	bne.n	8001952 <__clzdi2+0xe>
 800194a:	f7ff ffdd 	bl	8001908 <__clzsi2>
 800194e:	3020      	adds	r0, #32
 8001950:	e002      	b.n	8001958 <__clzdi2+0x14>
 8001952:	0008      	movs	r0, r1
 8001954:	f7ff ffd8 	bl	8001908 <__clzsi2>
 8001958:	bd10      	pop	{r4, pc}
 800195a:	46c0      	nop			; (mov r8, r8)

0800195c <AHT15_Transmit>:
 */
#include "AHT15.h"
#include "main.h"
static I2C_HandleTypeDef *AHT15_I2c;
static void AHT15_Transmit(uint8_t *Data, uint8_t Length)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af02      	add	r7, sp, #8
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	000a      	movs	r2, r1
 8001966:	1cfb      	adds	r3, r7, #3
 8001968:	701a      	strb	r2, [r3, #0]
   HAL_I2C_Master_Transmit(AHT15_I2c, AHT15_ADDRESS, Data, Length, AHT15_MAX_TIMEOUT);
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <AHT15_Transmit+0x30>)
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	1cfb      	adds	r3, r7, #3
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b299      	uxth	r1, r3
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	23fa      	movs	r3, #250	; 0xfa
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	000b      	movs	r3, r1
 800197e:	2170      	movs	r1, #112	; 0x70
 8001980:	f004 f91c 	bl	8005bbc <HAL_I2C_Master_Transmit>
}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b002      	add	sp, #8
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000558 	.word	0x20000558

08001990 <AHT15_Read>:
static void AHT15_Read(uint8_t *Data, uint8_t Length)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af02      	add	r7, sp, #8
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	000a      	movs	r2, r1
 800199a:	1cfb      	adds	r3, r7, #3
 800199c:	701a      	strb	r2, [r3, #0]
   HAL_I2C_Master_Receive(AHT15_I2c, AHT15_ADDRESS, Data, Length, AHT15_MAX_TIMEOUT);
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <AHT15_Read+0x30>)
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	1cfb      	adds	r3, r7, #3
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b299      	uxth	r1, r3
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	23fa      	movs	r3, #250	; 0xfa
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	000b      	movs	r3, r1
 80019b2:	2170      	movs	r1, #112	; 0x70
 80019b4:	f004 fa0a 	bl	8005dcc <HAL_I2C_Master_Receive>
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000558 	.word	0x20000558

080019c4 <AHT15_TriggerMeasurment>:
void AHT15_TriggerMeasurment(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
   uint8_t Temp[3] = { AHT15_MEASURMENT_TRIGGER_COMMAND, AHT15_DATA_1_COMMAND, AHT15_DATA_2_COMMAND };
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <AHT15_TriggerMeasurment+0x24>)
 80019ce:	8811      	ldrh	r1, [r2, #0]
 80019d0:	8019      	strh	r1, [r3, #0]
 80019d2:	7892      	ldrb	r2, [r2, #2]
 80019d4:	709a      	strb	r2, [r3, #2]
   AHT15_Transmit(Temp, 3);
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2103      	movs	r1, #3
 80019da:	0018      	movs	r0, r3
 80019dc:	f7ff ffbe 	bl	800195c <AHT15_Transmit>
}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b002      	add	sp, #8
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	08009374 	.word	0x08009374

080019ec <AHT15_ReadMesurmentFloat>:
void AHT15_ReadMesurmentFloat(float *Temperature, float *Humidity)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
   uint8_t Temp[6];
   uint32_t RawTemperature, RawHumidity;
   AHT15_Read(Temp, 6);
 80019f6:	2408      	movs	r4, #8
 80019f8:	193b      	adds	r3, r7, r4
 80019fa:	2106      	movs	r1, #6
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff ffc7 	bl	8001990 <AHT15_Read>
   RawTemperature = (((Temp[3] & 0x0f) << 16) | (Temp[4] << 8) | Temp[5]);
 8001a02:	0021      	movs	r1, r4
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	78db      	ldrb	r3, [r3, #3]
 8001a08:	041a      	lsls	r2, r3, #16
 8001a0a:	23f0      	movs	r3, #240	; 0xf0
 8001a0c:	031b      	lsls	r3, r3, #12
 8001a0e:	401a      	ands	r2, r3
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	791b      	ldrb	r3, [r3, #4]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	4313      	orrs	r3, r2
 8001a18:	187a      	adds	r2, r7, r1
 8001a1a:	7952      	ldrb	r2, [r2, #5]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
   RawHumidity    = (((Temp[1] << 16) | (Temp[2] << 8) | Temp[3]) >> 4);
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	785b      	ldrb	r3, [r3, #1]
 8001a24:	041a      	lsls	r2, r3, #16
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	789b      	ldrb	r3, [r3, #2]
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	187a      	adds	r2, r7, r1
 8001a30:	78d2      	ldrb	r2, [r2, #3]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	111b      	asrs	r3, r3, #4
 8001a36:	613b      	str	r3, [r7, #16]
   *Temperature   = (RawTemperature / AHT15_CONST_VALUE) * 200.0 - 50;
 8001a38:	6978      	ldr	r0, [r7, #20]
 8001a3a:	f7ff feb7 	bl	80017ac <__aeabi_ui2d>
 8001a3e:	2200      	movs	r2, #0
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <AHT15_ReadMesurmentFloat+0xc4>)
 8001a42:	f7fe fdbf 	bl	80005c4 <__aeabi_ddiv>
 8001a46:	0002      	movs	r2, r0
 8001a48:	000b      	movs	r3, r1
 8001a4a:	0010      	movs	r0, r2
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <AHT15_ReadMesurmentFloat+0xc8>)
 8001a52:	f7ff f8ad 	bl	8000bb0 <__aeabi_dmul>
 8001a56:	0002      	movs	r2, r0
 8001a58:	000b      	movs	r3, r1
 8001a5a:	0010      	movs	r0, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <AHT15_ReadMesurmentFloat+0xcc>)
 8001a62:	f7ff fb11 	bl	8001088 <__aeabi_dsub>
 8001a66:	0002      	movs	r2, r0
 8001a68:	000b      	movs	r3, r1
 8001a6a:	0010      	movs	r0, r2
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	f7ff fec3 	bl	80017f8 <__aeabi_d2f>
 8001a72:	1c02      	adds	r2, r0, #0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	601a      	str	r2, [r3, #0]
   *Humidity      = (RawHumidity / AHT15_CONST_VALUE) * 100.0;
 8001a78:	6938      	ldr	r0, [r7, #16]
 8001a7a:	f7ff fe97 	bl	80017ac <__aeabi_ui2d>
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <AHT15_ReadMesurmentFloat+0xc4>)
 8001a82:	f7fe fd9f 	bl	80005c4 <__aeabi_ddiv>
 8001a86:	0002      	movs	r2, r0
 8001a88:	000b      	movs	r3, r1
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <AHT15_ReadMesurmentFloat+0xd0>)
 8001a92:	f7ff f88d 	bl	8000bb0 <__aeabi_dmul>
 8001a96:	0002      	movs	r2, r0
 8001a98:	000b      	movs	r3, r1
 8001a9a:	0010      	movs	r0, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	f7ff feab 	bl	80017f8 <__aeabi_d2f>
 8001aa2:	1c02      	adds	r2, r0, #0
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b007      	add	sp, #28
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	41300000 	.word	0x41300000
 8001ab4:	40690000 	.word	0x40690000
 8001ab8:	40490000 	.word	0x40490000
 8001abc:	40590000 	.word	0x40590000

08001ac0 <AHT15_InitFunction>:
void AHT15_InitFunction(I2C_HandleTypeDef *I2c)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
   AHT15_I2c = I2c;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <AHT15_InitFunction+0x20>)
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	601a      	str	r2, [r3, #0]
   AHT15_Transmit((uint8_t *)AHT15_INITIALIZATION_COMMAND, 1);
 8001ace:	2101      	movs	r1, #1
 8001ad0:	20e1      	movs	r0, #225	; 0xe1
 8001ad2:	f7ff ff43 	bl	800195c <AHT15_Transmit>
}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	20000558 	.word	0x20000558

08001ae4 <ODWS_CheckBatteryLevel>:
 *      Author: M
 */
#include "adc.h"
#include "main.h"
float ODWS_CheckBatteryLevel(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
   uint32_t Temp;
   HAL_ADC_Start(&hadc1);
 8001aea:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <ODWS_CheckBatteryLevel+0x94>)
 8001aec:	0018      	movs	r0, r3
 8001aee:	f002 fe97 	bl	8004820 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc1, 1000);
 8001af2:	23fa      	movs	r3, #250	; 0xfa
 8001af4:	009a      	lsls	r2, r3, #2
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <ODWS_CheckBatteryLevel+0x94>)
 8001af8:	0011      	movs	r1, r2
 8001afa:	0018      	movs	r0, r3
 8001afc:	f002 fede 	bl	80048bc <HAL_ADC_PollForConversion>
   Temp = HAL_ADC_GetValue(&hadc1);
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <ODWS_CheckBatteryLevel+0x94>)
 8001b02:	0018      	movs	r0, r3
 8001b04:	f002 ff6e 	bl	80049e4 <HAL_ADC_GetValue>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	607b      	str	r3, [r7, #4]
   Temp = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
   for(int i = 0; i < 10; i++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	e015      	b.n	8001b42 <ODWS_CheckBatteryLevel+0x5e>
   {
      HAL_ADC_Start(&hadc1);
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <ODWS_CheckBatteryLevel+0x94>)
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f002 fe81 	bl	8004820 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 1000);
 8001b1e:	23fa      	movs	r3, #250	; 0xfa
 8001b20:	009a      	lsls	r2, r3, #2
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <ODWS_CheckBatteryLevel+0x94>)
 8001b24:	0011      	movs	r1, r2
 8001b26:	0018      	movs	r0, r3
 8001b28:	f002 fec8 	bl	80048bc <HAL_ADC_PollForConversion>
      Temp += HAL_ADC_GetValue(&hadc1);
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <ODWS_CheckBatteryLevel+0x94>)
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f002 ff58 	bl	80049e4 <HAL_ADC_GetValue>
 8001b34:	0002      	movs	r2, r0
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	189b      	adds	r3, r3, r2
 8001b3a:	607b      	str	r3, [r7, #4]
   for(int i = 0; i < 10; i++)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b09      	cmp	r3, #9
 8001b46:	dde6      	ble.n	8001b16 <ODWS_CheckBatteryLevel+0x32>
   }
   return (3.3 / 4095 * (Temp / 10));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	210a      	movs	r1, #10
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7fe fad7 	bl	8000100 <__udivsi3>
 8001b52:	0003      	movs	r3, r0
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7ff fe29 	bl	80017ac <__aeabi_ui2d>
 8001b5a:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <ODWS_CheckBatteryLevel+0x98>)
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <ODWS_CheckBatteryLevel+0x9c>)
 8001b5e:	f7ff f827 	bl	8000bb0 <__aeabi_dmul>
 8001b62:	0002      	movs	r2, r0
 8001b64:	000b      	movs	r3, r1
 8001b66:	0010      	movs	r0, r2
 8001b68:	0019      	movs	r1, r3
 8001b6a:	f7ff fe45 	bl	80017f8 <__aeabi_d2f>
 8001b6e:	1c03      	adds	r3, r0, #0
}
 8001b70:	1c18      	adds	r0, r3, #0
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b002      	add	sp, #8
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000790 	.word	0x20000790
 8001b7c:	e734d9b4 	.word	0xe734d9b4
 8001b80:	3f4a680c 	.word	0x3f4a680c

08001b84 <HC12_ExitCommandMode>:
void HC12_EnterCommandMode(void)
{
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 0);
}
void HC12_ExitCommandMode(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 1);
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	0119      	lsls	r1, r3, #4
 8001b8c:	23a0      	movs	r3, #160	; 0xa0
 8001b8e:	05db      	lsls	r3, r3, #23
 8001b90:	2201      	movs	r2, #1
 8001b92:	0018      	movs	r0, r3
 8001b94:	f003 ff06 	bl	80059a4 <HAL_GPIO_WritePin>
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HC12_TransmitData>:
void HC12_TransmitData(uint8_t *Data, uint32_t Length)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	23fa      	movs	r3, #250	; 0xfa
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <HC12_TransmitData+0x24>)
 8001bb6:	f005 feef 	bl	8007998 <HAL_UART_Transmit>
}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	20000a18 	.word	0x20000a18

08001bc8 <HC12_ReciveToIdleDMA>:
void HC12_ReciveToIdleDMA(uint8_t *Data, uint32_t Length)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HC12_ReciveToIdleDMA+0x20>)
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f007 fa60 	bl	80090a0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b002      	add	sp, #8
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000a18 	.word	0x20000a18

08001bec <HC12_Init>:
void HC12_Init(RFP_TypeDef *TempRfp, uint8_t *Buffer)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
   rfp      = TempRfp;
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HC12_Init+0x20>)
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	601a      	str	r2, [r3, #0]
   HC12Data = Buffer;
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <HC12_Init+0x24>)
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	601a      	str	r2, [r3, #0]
}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b002      	add	sp, #8
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	2000055c 	.word	0x2000055c
 8001c10:	20000560 	.word	0x20000560

08001c14 <MAX485_ListeningMode>:

#include "MAX485.h"
#include "main.h"
#include "usart.h"
static void MAX485_ListeningMode(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(MAX485_SEL_GPIO_Port, MAX485_SEL_Pin, 0);
 8001c18:	23a0      	movs	r3, #160	; 0xa0
 8001c1a:	05db      	lsls	r3, r3, #23
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2110      	movs	r1, #16
 8001c20:	0018      	movs	r0, r3
 8001c22:	f003 febf 	bl	80059a4 <HAL_GPIO_WritePin>
}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <MAX485_TransmitMode>:
static void MAX485_TransmitMode(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(MAX485_SEL_GPIO_Port, MAX485_SEL_Pin, 1);
 8001c30:	23a0      	movs	r3, #160	; 0xa0
 8001c32:	05db      	lsls	r3, r3, #23
 8001c34:	2201      	movs	r2, #1
 8001c36:	2110      	movs	r1, #16
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f003 feb3 	bl	80059a4 <HAL_GPIO_WritePin>
}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <MAX485_ReciveToIdleDMA>:
void MAX485_ReciveToIdleDMA(uint8_t *Data, uint16_t Length)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	000a      	movs	r2, r1
 8001c4e:	1cbb      	adds	r3, r7, #2
 8001c50:	801a      	strh	r2, [r3, #0]
   MAX485_ListeningMode();
 8001c52:	f7ff ffdf 	bl	8001c14 <MAX485_ListeningMode>
   HAL_UARTEx_ReceiveToIdle_DMA(&hlpuart1, Data, Length);
 8001c56:	1cbb      	adds	r3, r7, #2
 8001c58:	881a      	ldrh	r2, [r3, #0]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <MAX485_ReciveToIdleDMA+0x28>)
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f007 fa1e 	bl	80090a0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000984 	.word	0x20000984

08001c70 <MAX485_TransmitData>:
void MAX485_TransmitData(uint8_t *Data, uint16_t Length)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	000a      	movs	r2, r1
 8001c7a:	1cbb      	adds	r3, r7, #2
 8001c7c:	801a      	strh	r2, [r3, #0]
   MAX485_TransmitMode();
 8001c7e:	f7ff ffd5 	bl	8001c2c <MAX485_TransmitMode>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c82:	b672      	cpsid	i
}
 8001c84:	46c0      	nop			; (mov r8, r8)
   __disable_irq();
   HAL_UART_Transmit(&hlpuart1, Data, Length, 1000);
 8001c86:	23fa      	movs	r3, #250	; 0xfa
 8001c88:	009c      	lsls	r4, r3, #2
 8001c8a:	1cbb      	adds	r3, r7, #2
 8001c8c:	881a      	ldrh	r2, [r3, #0]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MAX485_TransmitData+0x38>)
 8001c92:	0023      	movs	r3, r4
 8001c94:	f005 fe80 	bl	8007998 <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c98:	b662      	cpsie	i
}
 8001c9a:	46c0      	nop			; (mov r8, r8)
   __enable_irq();
   MAX485_ListeningMode();
 8001c9c:	f7ff ffba 	bl	8001c14 <MAX485_ListeningMode>
}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b003      	add	sp, #12
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	20000984 	.word	0x20000984

08001cac <MAX_Handle>:
        { MAX_WaitForResponseFunction }, { MAX_ParseResponseFunction } };
MAXCommandFunctions_TypeDef MAXCommandFunction[MAX_COMMAND_CNT];
MAXDataFunctions_TypeDef MAXDataFunctions;
MAXMessageFunctions_TypeDef MAXMessageFunction[MAX_MESSAGE_CNT];
void MAX_Handle(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
   MAX_ChangeState();
 8001cb0:	f000 f856 	bl	8001d60 <MAX_ChangeState>
   if(MAXFunction[MAX->State].MAXFunction != NULL)
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MAX_Handle+0x30>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	001a      	movs	r2, r3
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <MAX_Handle+0x34>)
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	58d3      	ldr	r3, [r2, r3]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <MAX_Handle+0x2a>
   {
      MAXFunction[MAX->State].MAXFunction();
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <MAX_Handle+0x30>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	001a      	movs	r2, r3
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <MAX_Handle+0x34>)
 8001cd0:	0092      	lsls	r2, r2, #2
 8001cd2:	58d3      	ldr	r3, [r2, r3]
 8001cd4:	4798      	blx	r3
   }
}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2000062c 	.word	0x2000062c
 8001ce0:	20000024 	.word	0x20000024

08001ce4 <MAX_Init>:
void MAX_Init(MAX_TypeDef *RadioProtocol, MAXDeviceID_TypeDef Device)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	000a      	movs	r2, r1
 8001cee:	1cfb      	adds	r3, r7, #3
 8001cf0:	701a      	strb	r2, [r3, #0]
   MAX             = RadioProtocol;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <MAX_Init+0x6c>)
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	601a      	str	r2, [r3, #0]
   MAX->Initialize = MAX_INITIALIZE;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <MAX_Init+0x6c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	70da      	strb	r2, [r3, #3]
   MAX->DeviceType = Device;
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <MAX_Init+0x6c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	1cfa      	adds	r2, r7, #3
 8001d06:	7812      	ldrb	r2, [r2, #0]
 8001d08:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < MAX_COMMAND_CNT; i++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	e007      	b.n	8001d20 <MAX_Init+0x3c>
   {
      MAXCommandFunction[i].MAXCommandFunction = NULL;
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <MAX_Init+0x70>)
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	0092      	lsls	r2, r2, #2
 8001d16:	2100      	movs	r1, #0
 8001d18:	50d1      	str	r1, [r2, r3]
   for(int i = 0; i < MAX_COMMAND_CNT; i++)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	ddf4      	ble.n	8001d10 <MAX_Init+0x2c>
   }
   for(int i = 0; i < MAX_MESSAGE_CNT; i++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	e007      	b.n	8001d3c <MAX_Init+0x58>
   {
      MAXMessageFunction[i].MAXMessageFunction = NULL;
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <MAX_Init+0x74>)
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	2100      	movs	r1, #0
 8001d34:	50d1      	str	r1, [r2, r3]
   for(int i = 0; i < MAX_MESSAGE_CNT; i++)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	ddf4      	ble.n	8001d2c <MAX_Init+0x48>
   }
   MAXDataFunctions.MAXDataFunction = NULL;
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MAX_Init+0x78>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
}
 8001d48:	46c0      	nop			; (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b004      	add	sp, #16
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2000062c 	.word	0x2000062c
 8001d54:	20000630 	.word	0x20000630
 8001d58:	20000640 	.word	0x20000640
 8001d5c:	2000063c 	.word	0x2000063c

08001d60 <MAX_ChangeState>:
static void MAX_ChangeState(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
   for(int i = 0; i < MAX_TRANSITION_TABLE_SIZE; i++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	e02a      	b.n	8001dc2 <MAX_ChangeState+0x62>
   {
      if(MAX->State == MAXTransitionTable[i].Source && MAX->NewEvent == MAXTransitionTable[i].Event)
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MAX_ChangeState+0x78>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	7819      	ldrb	r1, [r3, #0]
 8001d72:	481a      	ldr	r0, [pc, #104]	; (8001ddc <MAX_ChangeState+0x7c>)
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	0013      	movs	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	189b      	adds	r3, r3, r2
 8001d7c:	5c1b      	ldrb	r3, [r3, r0]
 8001d7e:	4299      	cmp	r1, r3
 8001d80:	d11c      	bne.n	8001dbc <MAX_ChangeState+0x5c>
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <MAX_ChangeState+0x78>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	7859      	ldrb	r1, [r3, #1]
 8001d88:	4814      	ldr	r0, [pc, #80]	; (8001ddc <MAX_ChangeState+0x7c>)
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	189b      	adds	r3, r3, r2
 8001d92:	18c3      	adds	r3, r0, r3
 8001d94:	3302      	adds	r3, #2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4299      	cmp	r1, r3
 8001d9a:	d10f      	bne.n	8001dbc <MAX_ChangeState+0x5c>
      {
         MAX->State    = MAXTransitionTable[i].Destination;
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MAX_ChangeState+0x78>)
 8001d9e:	6819      	ldr	r1, [r3, #0]
 8001da0:	480e      	ldr	r0, [pc, #56]	; (8001ddc <MAX_ChangeState+0x7c>)
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	0013      	movs	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	189b      	adds	r3, r3, r2
 8001daa:	18c3      	adds	r3, r0, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	700b      	strb	r3, [r1, #0]
         MAX->NewEvent = MAX_EVENT_NOTHING;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MAX_ChangeState+0x78>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2200      	movs	r2, #0
 8001db8:	705a      	strb	r2, [r3, #1]
         return;
 8001dba:	e009      	b.n	8001dd0 <MAX_ChangeState+0x70>
   for(int i = 0; i < MAX_TRANSITION_TABLE_SIZE; i++)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0b      	cmp	r3, #11
 8001dc6:	d9d1      	bls.n	8001d6c <MAX_ChangeState+0xc>
      }
   }
   MAX->NewEvent = MAX_EVENT_NOTHING;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <MAX_ChangeState+0x78>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	705a      	strb	r2, [r3, #1]
}
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	2000062c 	.word	0x2000062c
 8001ddc:	20000000 	.word	0x20000000

08001de0 <MAX_RegisterDataFunction>:
void MAX_RegisterCommandFunction(MAXCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   MAXCommandFunction[Command - 1].MAXCommandFunction = Callback;
}
void MAX_RegisterDataFunction(void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
   MAXDataFunctions.MAXDataFunction = Callback;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <MAX_RegisterDataFunction+0x18>)
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	601a      	str	r2, [r3, #0]
}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b002      	add	sp, #8
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	2000063c 	.word	0x2000063c

08001dfc <MAX_InterruptTask>:
void MAX_RegisterMessageFunction(MAXMessage_TypeDef Message, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   MAXMessageFunction[Message - 1].MAXMessageFunction = Callback;
}
void MAX_InterruptTask(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
   MAX->NewDataFlag = MAX_NEW_DATA_FLAG_SET;
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <MAX_InterruptTask+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2201      	movs	r2, #1
 8001e06:	711a      	strb	r2, [r3, #4]
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	2000062c 	.word	0x2000062c

08001e14 <MAX_InterruptErrorTask>:
void MAX_InterruptErrorTask(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
   MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <MAX_InterruptErrorTask+0x14>)
 8001e1a:	2164      	movs	r1, #100	; 0x64
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff ff11 	bl	8001c44 <MAX485_ReciveToIdleDMA>
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000564 	.word	0x20000564

08001e2c <MAX_SendData>:
void MAX_SendData(MAXDeviceID_TypeDef Destination, MAXMessageType_TypeDef Type, uint8_t *Data, uint32_t Length)
{
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60ba      	str	r2, [r7, #8]
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	240f      	movs	r4, #15
 8001e38:	193b      	adds	r3, r7, r4
 8001e3a:	1c02      	adds	r2, r0, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	200e      	movs	r0, #14
 8001e40:	183b      	adds	r3, r7, r0
 8001e42:	1c0a      	adds	r2, r1, #0
 8001e44:	701a      	strb	r2, [r3, #0]
   MAXDataTransmit[0] = Destination;
 8001e46:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <MAX_SendData+0xbc>)
 8001e48:	193a      	adds	r2, r7, r4
 8001e4a:	7812      	ldrb	r2, [r2, #0]
 8001e4c:	701a      	strb	r2, [r3, #0]
   MAXDataTransmit[1] = MAX->DeviceType;
 8001e4e:	4b27      	ldr	r3, [pc, #156]	; (8001eec <MAX_SendData+0xc0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	795a      	ldrb	r2, [r3, #5]
 8001e54:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <MAX_SendData+0xbc>)
 8001e56:	705a      	strb	r2, [r3, #1]
   MAXDataTransmit[2] = Type;
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <MAX_SendData+0xbc>)
 8001e5a:	183a      	adds	r2, r7, r0
 8001e5c:	7812      	ldrb	r2, [r2, #0]
 8001e5e:	709a      	strb	r2, [r3, #2]
   for(int i = 0; i < Length; i++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	e00a      	b.n	8001e7c <MAX_SendData+0x50>
   {
      MAXDataTransmit[i + 3] = Data[i];
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	18d2      	adds	r2, r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3303      	adds	r3, #3
 8001e70:	7811      	ldrb	r1, [r2, #0]
 8001e72:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <MAX_SendData+0xbc>)
 8001e74:	54d1      	strb	r1, [r2, r3]
   for(int i = 0; i < Length; i++)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d8f0      	bhi.n	8001e66 <MAX_SendData+0x3a>
   }
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, MAXDataTransmit);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	1cd9      	adds	r1, r3, #3
 8001e88:	4a17      	ldr	r2, [pc, #92]	; (8001ee8 <MAX_SendData+0xbc>)
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	425b      	negs	r3, r3
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f000 ff46 	bl	8002d20 <Crc>
 8001e94:	0003      	movs	r3, r0
 8001e96:	613b      	str	r3, [r7, #16]
   MAXDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	0e1a      	lsrs	r2, r3, #24
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3303      	adds	r3, #3
 8001ea0:	b2d1      	uxtb	r1, r2
 8001ea2:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <MAX_SendData+0xbc>)
 8001ea4:	54d1      	strb	r1, [r2, r3]
   MAXDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	0c1a      	lsrs	r2, r3, #16
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3304      	adds	r3, #4
 8001eae:	b2d1      	uxtb	r1, r2
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <MAX_SendData+0xbc>)
 8001eb2:	54d1      	strb	r1, [r2, r3]
   MAXDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	0a1a      	lsrs	r2, r3, #8
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3305      	adds	r3, #5
 8001ebc:	b2d1      	uxtb	r1, r2
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <MAX_SendData+0xbc>)
 8001ec0:	54d1      	strb	r1, [r2, r3]
   MAXDataTransmit[3 + Length + 3] = (crc & 0xff);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3306      	adds	r3, #6
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	b2d1      	uxtb	r1, r2
 8001eca:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <MAX_SendData+0xbc>)
 8001ecc:	54d1      	strb	r1, [r2, r3]
   MAX->SendFlag                   = MAX_SEND_FLAG_SET;
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <MAX_SendData+0xc0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	735a      	strb	r2, [r3, #13]
   MAX->DatTransmitSize            = 3 + Length + 4;
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <MAX_SendData+0xc0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	3207      	adds	r2, #7
 8001ede:	619a      	str	r2, [r3, #24]
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b007      	add	sp, #28
 8001ee6:	bd90      	pop	{r4, r7, pc}
 8001ee8:	200005c8 	.word	0x200005c8
 8001eec:	2000062c 	.word	0x2000062c

08001ef0 <MAX_SendResponseFunction>:
static void MAX_SendResponseFunction(MAXMessageType_TypeDef Response)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	1dfb      	adds	r3, r7, #7
 8001efa:	701a      	strb	r2, [r3, #0]
   MAXDataTransmit[0] = MAX->SourceMessage;
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <MAX_SendResponseFunction+0x78>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	7b1a      	ldrb	r2, [r3, #12]
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <MAX_SendResponseFunction+0x7c>)
 8001f04:	701a      	strb	r2, [r3, #0]
   MAXDataTransmit[1] = MAX->DeviceType;
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <MAX_SendResponseFunction+0x78>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	795a      	ldrb	r2, [r3, #5]
 8001f0c:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <MAX_SendResponseFunction+0x7c>)
 8001f0e:	705a      	strb	r2, [r3, #1]
   MAXDataTransmit[2] = MAX_MESSAGE;
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <MAX_SendResponseFunction+0x7c>)
 8001f12:	2203      	movs	r2, #3
 8001f14:	709a      	strb	r2, [r3, #2]
   MAXDataTransmit[3] = Response;
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <MAX_SendResponseFunction+0x7c>)
 8001f18:	1dfa      	adds	r2, r7, #7
 8001f1a:	7812      	ldrb	r2, [r2, #0]
 8001f1c:	70da      	strb	r2, [r3, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, MAXDataTransmit);
 8001f1e:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <MAX_SendResponseFunction+0x7c>)
 8001f20:	2301      	movs	r3, #1
 8001f22:	425b      	negs	r3, r3
 8001f24:	2104      	movs	r1, #4
 8001f26:	0018      	movs	r0, r3
 8001f28:	f000 fefa 	bl	8002d20 <Crc>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	60fb      	str	r3, [r7, #12]
   MAXDataTransmit[4] = ((crc >> 24) & 0xff);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	0e1b      	lsrs	r3, r3, #24
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <MAX_SendResponseFunction+0x7c>)
 8001f38:	711a      	strb	r2, [r3, #4]
   MAXDataTransmit[5] = ((crc >> 16) & 0xff);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	0c1b      	lsrs	r3, r3, #16
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <MAX_SendResponseFunction+0x7c>)
 8001f42:	715a      	strb	r2, [r3, #5]
   MAXDataTransmit[6] = ((crc >> 8) & 0xff);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <MAX_SendResponseFunction+0x7c>)
 8001f4c:	719a      	strb	r2, [r3, #6]
   MAXDataTransmit[7] = (crc & 0xff);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MAX_SendResponseFunction+0x7c>)
 8001f54:	71da      	strb	r2, [r3, #7]
   MAX485_TransmitData(MAXDataTransmit, 8);
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <MAX_SendResponseFunction+0x7c>)
 8001f58:	2108      	movs	r1, #8
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f7ff fe88 	bl	8001c70 <MAX485_TransmitData>
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b004      	add	sp, #16
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	2000062c 	.word	0x2000062c
 8001f6c:	200005c8 	.word	0x200005c8

08001f70 <MAX_InitializeFunction>:
static void MAX_InitializeFunction(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
   MAX->NewEvent = MAX_EVENT_END_INITIALIZE;
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <MAX_InitializeFunction+0x1c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	705a      	strb	r2, [r3, #1]
   MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <MAX_InitializeFunction+0x20>)
 8001f7e:	2164      	movs	r1, #100	; 0x64
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7ff fe5f 	bl	8001c44 <MAX485_ReciveToIdleDMA>
}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2000062c 	.word	0x2000062c
 8001f90:	20000564 	.word	0x20000564

08001f94 <MAX_IdleFunction>:
static void MAX_IdleFunction(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
   if(MAX->NewDataFlag == MAX_NEW_DATA_FLAG_SET)
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MAX_IdleFunction+0x4c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	791b      	ldrb	r3, [r3, #4]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d108      	bne.n	8001fb6 <MAX_IdleFunction+0x22>
   {
      MAX->NewDataFlag = MAX_NEW_DATA_FLAG_RESET;
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MAX_IdleFunction+0x4c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	711a      	strb	r2, [r3, #4]
      MAX->NewEvent    = MAX_EVENT_NEW_DATA;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MAX_IdleFunction+0x4c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	705a      	strb	r2, [r3, #1]
   {
      MAX->SendFlag = MAX_SEND_FLAG_RESET;
      MAX->NewEvent = MAX_EVENT_SEND;
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
   }
}
 8001fb4:	e011      	b.n	8001fda <MAX_IdleFunction+0x46>
   else if(MAX->SendFlag == MAX_SEND_FLAG_SET)
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <MAX_IdleFunction+0x4c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	7b5b      	ldrb	r3, [r3, #13]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d10c      	bne.n	8001fda <MAX_IdleFunction+0x46>
      MAX->SendFlag = MAX_SEND_FLAG_RESET;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <MAX_IdleFunction+0x4c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	735a      	strb	r2, [r3, #13]
      MAX->NewEvent = MAX_EVENT_SEND;
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <MAX_IdleFunction+0x4c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2206      	movs	r2, #6
 8001fce:	705a      	strb	r2, [r3, #1]
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <MAX_IdleFunction+0x50>)
 8001fd2:	2164      	movs	r1, #100	; 0x64
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f7ff fe35 	bl	8001c44 <MAX485_ReciveToIdleDMA>
}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	2000062c 	.word	0x2000062c
 8001fe4:	20000564 	.word	0x20000564

08001fe8 <MAX_ParseFunction>:
static void MAX_ParseFunction(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
   MAX->SourceMessage  = MAXDataRecive[1];
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <MAX_ParseFunction+0xf8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a3b      	ldr	r2, [pc, #236]	; (80020e4 <MAX_ParseFunction+0xfc>)
 8001ff8:	7852      	ldrb	r2, [r2, #1]
 8001ffa:	731a      	strb	r2, [r3, #12]
   if(MAXDataRecive[0] != MAX->DeviceType)
 8001ffc:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <MAX_ParseFunction+0xfc>)
 8001ffe:	781a      	ldrb	r2, [r3, #0]
 8002000:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <MAX_ParseFunction+0xf8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	795b      	ldrb	r3, [r3, #5]
 8002006:	429a      	cmp	r2, r3
 8002008:	d00c      	beq.n	8002024 <MAX_ParseFunction+0x3c>
   {
      MAX->NewEvent = MAX_EVENT_ERROR;
 800200a:	4b35      	ldr	r3, [pc, #212]	; (80020e0 <MAX_ParseFunction+0xf8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2203      	movs	r2, #3
 8002010:	705a      	strb	r2, [r3, #1]
      MAX_SendResponseFunction(MAX_ERROR);
 8002012:	2001      	movs	r0, #1
 8002014:	f7ff ff6c 	bl	8001ef0 <MAX_SendResponseFunction>
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8002018:	4b32      	ldr	r3, [pc, #200]	; (80020e4 <MAX_ParseFunction+0xfc>)
 800201a:	2164      	movs	r1, #100	; 0x64
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff fe11 	bl	8001c44 <MAX485_ReciveToIdleDMA>
               MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
            }
         }
      }
   }
}
 8002022:	e058      	b.n	80020d6 <MAX_ParseFunction+0xee>
      if(MAX->DataSize != 0)
 8002024:	4b2e      	ldr	r3, [pc, #184]	; (80020e0 <MAX_ParseFunction+0xf8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d053      	beq.n	80020d6 <MAX_ParseFunction+0xee>
         MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 800202e:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <MAX_ParseFunction+0xf8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	3b04      	subs	r3, #4
 8002036:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <MAX_ParseFunction+0xfc>)
 8002038:	5cd3      	ldrb	r3, [r2, r3]
 800203a:	061a      	lsls	r2, r3, #24
 800203c:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <MAX_ParseFunction+0xf8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	3b03      	subs	r3, #3
 8002044:	4927      	ldr	r1, [pc, #156]	; (80020e4 <MAX_ParseFunction+0xfc>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	431a      	orrs	r2, r3
                       | ((uint32_t)MAXDataRecive[MAX->DataSize - 2] << 8) | ((uint32_t)MAXDataRecive[MAX->DataSize - 1]));
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <MAX_ParseFunction+0xf8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	3b02      	subs	r3, #2
 8002054:	4923      	ldr	r1, [pc, #140]	; (80020e4 <MAX_ParseFunction+0xfc>)
 8002056:	5ccb      	ldrb	r3, [r1, r3]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	431a      	orrs	r2, r3
 800205c:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <MAX_ParseFunction+0xf8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	3b01      	subs	r3, #1
 8002064:	491f      	ldr	r1, [pc, #124]	; (80020e4 <MAX_ParseFunction+0xfc>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
         MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 8002068:	4313      	orrs	r3, r2
 800206a:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <MAX_ParseFunction+0xf8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	1f19      	subs	r1, r3, #4
 8002074:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <MAX_ParseFunction+0xfc>)
 8002076:	2301      	movs	r3, #1
 8002078:	425b      	negs	r3, r3
 800207a:	0018      	movs	r0, r3
 800207c:	f000 fe50 	bl	8002d20 <Crc>
 8002080:	0002      	movs	r2, r0
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4293      	cmp	r3, r2
 8002086:	d107      	bne.n	8002098 <MAX_ParseFunction+0xb0>
            MAX->NewEvent = MAX_EVENT_DATA_OK;
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <MAX_ParseFunction+0xf8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2204      	movs	r2, #4
 800208e:	705a      	strb	r2, [r3, #1]
            MAX_SendResponseFunction(MAX_OK);
 8002090:	2004      	movs	r0, #4
 8002092:	f7ff ff2d 	bl	8001ef0 <MAX_SendResponseFunction>
}
 8002096:	e01e      	b.n	80020d6 <MAX_ParseFunction+0xee>
            if(RepareMessage(MessageCRC, MAXDataRecive, MAX->DataSize) == CRC_OK)
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <MAX_ParseFunction+0xf8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	4911      	ldr	r1, [pc, #68]	; (80020e4 <MAX_ParseFunction+0xfc>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	0018      	movs	r0, r3
 80020a4:	f000 fe8a 	bl	8002dbc <RepareMessage>
 80020a8:	0003      	movs	r3, r0
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d107      	bne.n	80020be <MAX_ParseFunction+0xd6>
               MAX->NewEvent = MAX_EVENT_DATA_OK;
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <MAX_ParseFunction+0xf8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2204      	movs	r2, #4
 80020b4:	705a      	strb	r2, [r3, #1]
               MAX_SendResponseFunction(MAX_OK);
 80020b6:	2004      	movs	r0, #4
 80020b8:	f7ff ff1a 	bl	8001ef0 <MAX_SendResponseFunction>
}
 80020bc:	e00b      	b.n	80020d6 <MAX_ParseFunction+0xee>
               MAX->NewEvent = MAX_EVENT_ERROR;
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <MAX_ParseFunction+0xf8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2203      	movs	r2, #3
 80020c4:	705a      	strb	r2, [r3, #1]
               MAX_SendResponseFunction(MAX_CRC_ERROR);
 80020c6:	2002      	movs	r0, #2
 80020c8:	f7ff ff12 	bl	8001ef0 <MAX_SendResponseFunction>
               MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <MAX_ParseFunction+0xfc>)
 80020ce:	2164      	movs	r1, #100	; 0x64
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff fdb7 	bl	8001c44 <MAX485_ReciveToIdleDMA>
}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	b002      	add	sp, #8
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	2000062c 	.word	0x2000062c
 80020e4:	20000564 	.word	0x20000564

080020e8 <MAX_RunningFunction>:
static void MAX_RunningFunction(void)
{
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	af00      	add	r7, sp, #0
   switch(MAXDataRecive[2])
 80020ec:	4b29      	ldr	r3, [pc, #164]	; (8002194 <MAX_RunningFunction+0xac>)
 80020ee:	789b      	ldrb	r3, [r3, #2]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d029      	beq.n	8002148 <MAX_RunningFunction+0x60>
 80020f4:	dc3e      	bgt.n	8002174 <MAX_RunningFunction+0x8c>
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d002      	beq.n	8002100 <MAX_RunningFunction+0x18>
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d016      	beq.n	800212c <MAX_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 80020fe:	e039      	b.n	8002174 <MAX_RunningFunction+0x8c>
         if(MAXCommandFunction[MAXDataRecive[3] - 1].MAXCommandFunction != NULL)
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <MAX_RunningFunction+0xac>)
 8002102:	78db      	ldrb	r3, [r3, #3]
 8002104:	1e5a      	subs	r2, r3, #1
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <MAX_RunningFunction+0xb0>)
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	58d3      	ldr	r3, [r2, r3]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d033      	beq.n	8002178 <MAX_RunningFunction+0x90>
            MAXCommandFunction[MAXDataRecive[3] - 1].MAXCommandFunction(MAXDataRecive, MAX->DataSize, 4);
 8002110:	4b20      	ldr	r3, [pc, #128]	; (8002194 <MAX_RunningFunction+0xac>)
 8002112:	78db      	ldrb	r3, [r3, #3]
 8002114:	1e5a      	subs	r2, r3, #1
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <MAX_RunningFunction+0xb0>)
 8002118:	0092      	lsls	r2, r2, #2
 800211a:	58d4      	ldr	r4, [r2, r3]
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <MAX_RunningFunction+0xb4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6899      	ldr	r1, [r3, #8]
 8002122:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <MAX_RunningFunction+0xac>)
 8002124:	2204      	movs	r2, #4
 8002126:	0018      	movs	r0, r3
 8002128:	47a0      	blx	r4
         break;
 800212a:	e025      	b.n	8002178 <MAX_RunningFunction+0x90>
         if(MAXDataFunctions.MAXDataFunction != NULL)
 800212c:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <MAX_RunningFunction+0xb8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d023      	beq.n	800217c <MAX_RunningFunction+0x94>
            MAXDataFunctions.MAXDataFunction(MAXDataRecive, MAX->DataSize, 4);
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <MAX_RunningFunction+0xb8>)
 8002136:	681c      	ldr	r4, [r3, #0]
 8002138:	4b18      	ldr	r3, [pc, #96]	; (800219c <MAX_RunningFunction+0xb4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6899      	ldr	r1, [r3, #8]
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <MAX_RunningFunction+0xac>)
 8002140:	2204      	movs	r2, #4
 8002142:	0018      	movs	r0, r3
 8002144:	47a0      	blx	r4
         break;
 8002146:	e019      	b.n	800217c <MAX_RunningFunction+0x94>
         if(MAXMessageFunction[MAXDataRecive[3] - 1].MAXMessageFunction != NULL)
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <MAX_RunningFunction+0xac>)
 800214a:	78db      	ldrb	r3, [r3, #3]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <MAX_RunningFunction+0xbc>)
 8002150:	0092      	lsls	r2, r2, #2
 8002152:	58d3      	ldr	r3, [r2, r3]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <MAX_RunningFunction+0x98>
            MAXMessageFunction[MAXDataRecive[3] - 1].MAXMessageFunction(MAXDataRecive, MAX->DataSize, 4);
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MAX_RunningFunction+0xac>)
 800215a:	78db      	ldrb	r3, [r3, #3]
 800215c:	1e5a      	subs	r2, r3, #1
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <MAX_RunningFunction+0xbc>)
 8002160:	0092      	lsls	r2, r2, #2
 8002162:	58d4      	ldr	r4, [r2, r3]
 8002164:	4b0d      	ldr	r3, [pc, #52]	; (800219c <MAX_RunningFunction+0xb4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6899      	ldr	r1, [r3, #8]
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <MAX_RunningFunction+0xac>)
 800216c:	2204      	movs	r2, #4
 800216e:	0018      	movs	r0, r3
 8002170:	47a0      	blx	r4
         break;
 8002172:	e005      	b.n	8002180 <MAX_RunningFunction+0x98>
         break;
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	e004      	b.n	8002182 <MAX_RunningFunction+0x9a>
         break;
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	e002      	b.n	8002182 <MAX_RunningFunction+0x9a>
         break;
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	e000      	b.n	8002182 <MAX_RunningFunction+0x9a>
         break;
 8002180:	46c0      	nop			; (mov r8, r8)
      }
   }
   MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <MAX_RunningFunction+0xac>)
 8002184:	2164      	movs	r1, #100	; 0x64
 8002186:	0018      	movs	r0, r3
 8002188:	f7ff fd5c 	bl	8001c44 <MAX485_ReciveToIdleDMA>
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	bdb0      	pop	{r4, r5, r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	20000564 	.word	0x20000564
 8002198:	20000630 	.word	0x20000630
 800219c:	2000062c 	.word	0x2000062c
 80021a0:	2000063c 	.word	0x2000063c
 80021a4:	20000640 	.word	0x20000640

080021a8 <MAX_SendFunction>:
static void MAX_SendFunction(void)
{
 80021a8:	b5b0      	push	{r4, r5, r7, lr}
 80021aa:	af00      	add	r7, sp, #0
   if(MAX->Cnt < 5)
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <MAX_SendFunction+0x60>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d818      	bhi.n	80021e8 <MAX_SendFunction+0x40>
   {
      MAX485_TransmitData(MAXDataTransmit, MAX->DatTransmitSize);
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <MAX_SendFunction+0x60>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <MAX_SendFunction+0x64>)
 80021c0:	0011      	movs	r1, r2
 80021c2:	0018      	movs	r0, r3
 80021c4:	f7ff fd54 	bl	8001c70 <MAX485_TransmitData>
      MAX->Cnt++;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <MAX_SendFunction+0x60>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	3201      	adds	r2, #1
 80021d0:	611a      	str	r2, [r3, #16]
      MAX->NewEvent = MAX_EVENT_WAIT_FOR_RESPONSE;
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <MAX_SendFunction+0x60>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2205      	movs	r2, #5
 80021d8:	705a      	strb	r2, [r3, #1]
      MAX->LastTick = HAL_GetTick();
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <MAX_SendFunction+0x60>)
 80021dc:	681c      	ldr	r4, [r3, #0]
 80021de:	f001 fff7 	bl	80041d0 <HAL_GetTick>
 80021e2:	0003      	movs	r3, r0
 80021e4:	6163      	str	r3, [r4, #20]
   {
      MAX->Cnt      = 0;
      MAX->NewEvent = MAX_EVENT_ERROR;
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
   }
}
 80021e6:	e00c      	b.n	8002202 <MAX_SendFunction+0x5a>
      MAX->Cnt      = 0;
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <MAX_SendFunction+0x60>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
      MAX->NewEvent = MAX_EVENT_ERROR;
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <MAX_SendFunction+0x60>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2203      	movs	r2, #3
 80021f6:	705a      	strb	r2, [r3, #1]
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <MAX_SendFunction+0x68>)
 80021fa:	2164      	movs	r1, #100	; 0x64
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7ff fd21 	bl	8001c44 <MAX485_ReciveToIdleDMA>
}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	bdb0      	pop	{r4, r5, r7, pc}
 8002208:	2000062c 	.word	0x2000062c
 800220c:	200005c8 	.word	0x200005c8
 8002210:	20000564 	.word	0x20000564

08002214 <MAX_WaitForResponseFunction>:
static void MAX_WaitForResponseFunction(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - MAX->LastTick > 2000)
 8002218:	f001 ffda 	bl	80041d0 <HAL_GetTick>
 800221c:	0002      	movs	r2, r0
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <MAX_WaitForResponseFunction+0x48>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	1ad2      	subs	r2, r2, r3
 8002226:	23fa      	movs	r3, #250	; 0xfa
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	429a      	cmp	r2, r3
 800222c:	d904      	bls.n	8002238 <MAX_WaitForResponseFunction+0x24>
   {
      MAX->NewEvent = MAX_EVENT_ERROR;
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <MAX_WaitForResponseFunction+0x48>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2203      	movs	r2, #3
 8002234:	705a      	strb	r2, [r3, #1]
   else if(MAX->NewDataFlag == MAX_NEW_DATA_FLAG_SET)
   {
      MAX->NewDataFlag = MAX_NEW_DATA_FLAG_RESET;
      MAX->NewEvent    = MAX_EVENT_NEW_DATA;
   }
}
 8002236:	e00d      	b.n	8002254 <MAX_WaitForResponseFunction+0x40>
   else if(MAX->NewDataFlag == MAX_NEW_DATA_FLAG_SET)
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <MAX_WaitForResponseFunction+0x48>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	791b      	ldrb	r3, [r3, #4]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <MAX_WaitForResponseFunction+0x40>
      MAX->NewDataFlag = MAX_NEW_DATA_FLAG_RESET;
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <MAX_WaitForResponseFunction+0x48>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2200      	movs	r2, #0
 800224a:	711a      	strb	r2, [r3, #4]
      MAX->NewEvent    = MAX_EVENT_NEW_DATA;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <MAX_WaitForResponseFunction+0x48>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2201      	movs	r2, #1
 8002252:	705a      	strb	r2, [r3, #1]
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	2000062c 	.word	0x2000062c

08002260 <MAX_ParseResponseFunction>:
static void MAX_ParseResponseFunction(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 8002266:	4b54      	ldr	r3, [pc, #336]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	3b04      	subs	r3, #4
 800226e:	4a53      	ldr	r2, [pc, #332]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 8002270:	5cd3      	ldrb	r3, [r2, r3]
 8002272:	061a      	lsls	r2, r3, #24
 8002274:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	3b03      	subs	r3, #3
 800227c:	494f      	ldr	r1, [pc, #316]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	431a      	orrs	r2, r3
                          | ((uint32_t)MAXDataRecive[MAX->DataSize - 2] << 8) | ((uint32_t)MAXDataRecive[MAX->DataSize - 1]));
 8002284:	4b4c      	ldr	r3, [pc, #304]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	3b02      	subs	r3, #2
 800228c:	494b      	ldr	r1, [pc, #300]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 800228e:	5ccb      	ldrb	r3, [r1, r3]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	431a      	orrs	r2, r3
 8002294:	4b48      	ldr	r3, [pc, #288]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	3b01      	subs	r3, #1
 800229c:	4947      	ldr	r1, [pc, #284]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
   uint32_t MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	607b      	str	r3, [r7, #4]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 80022a4:	4b44      	ldr	r3, [pc, #272]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	1f19      	subs	r1, r3, #4
 80022ac:	4a43      	ldr	r2, [pc, #268]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 80022ae:	2301      	movs	r3, #1
 80022b0:	425b      	negs	r3, r3
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 fd34 	bl	8002d20 <Crc>
 80022b8:	0002      	movs	r2, r0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4293      	cmp	r3, r2
 80022be:	d130      	bne.n	8002322 <MAX_ParseResponseFunction+0xc2>
   {
      if(MAXDataRecive[0] == MAX->DeviceType && MAXDataRecive[2] == MAX_MESSAGE)
 80022c0:	4b3e      	ldr	r3, [pc, #248]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	4b3c      	ldr	r3, [pc, #240]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	795b      	ldrb	r3, [r3, #5]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d11f      	bne.n	800230e <MAX_ParseResponseFunction+0xae>
 80022ce:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 80022d0:	789b      	ldrb	r3, [r3, #2]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d11b      	bne.n	800230e <MAX_ParseResponseFunction+0xae>
      {
         if(MAXDataRecive[3] == MAX_OK)
 80022d6:	4b39      	ldr	r3, [pc, #228]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 80022d8:	78db      	ldrb	r3, [r3, #3]
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d10d      	bne.n	80022fa <MAX_ParseResponseFunction+0x9a>
         {
            MAX->NewEvent = MAX_EVENT_DATA_OK;
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2204      	movs	r2, #4
 80022e4:	705a      	strb	r2, [r3, #1]
            MAX->Cnt      = 0;
 80022e6:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]
            MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 80022ee:	4b33      	ldr	r3, [pc, #204]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 80022f0:	2164      	movs	r1, #100	; 0x64
 80022f2:	0018      	movs	r0, r3
 80022f4:	f7ff fca6 	bl	8001c44 <MAX485_ReciveToIdleDMA>
         if(MAXDataRecive[3] == MAX_OK)
 80022f8:	e059      	b.n	80023ae <MAX_ParseResponseFunction+0x14e>
         }
         else
         {
            MAX->NewEvent = MAX_EVENT_ERROR;
 80022fa:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2203      	movs	r2, #3
 8002300:	705a      	strb	r2, [r3, #1]
            MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8002302:	4b2e      	ldr	r3, [pc, #184]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 8002304:	2164      	movs	r1, #100	; 0x64
 8002306:	0018      	movs	r0, r3
 8002308:	f7ff fc9c 	bl	8001c44 <MAX485_ReciveToIdleDMA>
         if(MAXDataRecive[3] == MAX_OK)
 800230c:	e04f      	b.n	80023ae <MAX_ParseResponseFunction+0x14e>
         }
      }
      else
      {
         MAX->NewEvent = MAX_EVENT_ERROR;
 800230e:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2203      	movs	r2, #3
 8002314:	705a      	strb	r2, [r3, #1]
         MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8002316:	4b29      	ldr	r3, [pc, #164]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 8002318:	2164      	movs	r1, #100	; 0x64
 800231a:	0018      	movs	r0, r3
 800231c:	f7ff fc92 	bl	8001c44 <MAX485_ReciveToIdleDMA>
   else
   {
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
      MAX->NewEvent = MAX_EVENT_ERROR;
   }
}
 8002320:	e045      	b.n	80023ae <MAX_ParseResponseFunction+0x14e>
   else if(RepareMessage(MessageCRC, MAXDataRecive, MAX->DataSize) == CRC_OK)
 8002322:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	4924      	ldr	r1, [pc, #144]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	0018      	movs	r0, r3
 800232e:	f000 fd45 	bl	8002dbc <RepareMessage>
 8002332:	0003      	movs	r3, r0
 8002334:	2b01      	cmp	r3, #1
 8002336:	d130      	bne.n	800239a <MAX_ParseResponseFunction+0x13a>
      if(MAXDataRecive[0] == MAX->DeviceType && MAXDataRecive[2] == MAX_MESSAGE)
 8002338:	4b20      	ldr	r3, [pc, #128]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	795b      	ldrb	r3, [r3, #5]
 8002342:	429a      	cmp	r2, r3
 8002344:	d11f      	bne.n	8002386 <MAX_ParseResponseFunction+0x126>
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 8002348:	789b      	ldrb	r3, [r3, #2]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d11b      	bne.n	8002386 <MAX_ParseResponseFunction+0x126>
         if(MAXDataRecive[3] == MAX_OK)
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 8002350:	78db      	ldrb	r3, [r3, #3]
 8002352:	2b04      	cmp	r3, #4
 8002354:	d10d      	bne.n	8002372 <MAX_ParseResponseFunction+0x112>
            MAX->NewEvent = MAX_EVENT_DATA_OK;
 8002356:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2204      	movs	r2, #4
 800235c:	705a      	strb	r2, [r3, #1]
            MAX->Cnt      = 0;
 800235e:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]
            MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 8002368:	2164      	movs	r1, #100	; 0x64
 800236a:	0018      	movs	r0, r3
 800236c:	f7ff fc6a 	bl	8001c44 <MAX485_ReciveToIdleDMA>
         if(MAXDataRecive[3] == MAX_OK)
 8002370:	e01d      	b.n	80023ae <MAX_ParseResponseFunction+0x14e>
            MAX->NewEvent = MAX_EVENT_ERROR;
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2203      	movs	r2, #3
 8002378:	705a      	strb	r2, [r3, #1]
            MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 800237c:	2164      	movs	r1, #100	; 0x64
 800237e:	0018      	movs	r0, r3
 8002380:	f7ff fc60 	bl	8001c44 <MAX485_ReciveToIdleDMA>
         if(MAXDataRecive[3] == MAX_OK)
 8002384:	e013      	b.n	80023ae <MAX_ParseResponseFunction+0x14e>
         MAX->NewEvent = MAX_EVENT_ERROR;
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2203      	movs	r2, #3
 800238c:	705a      	strb	r2, [r3, #1]
         MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 8002390:	2164      	movs	r1, #100	; 0x64
 8002392:	0018      	movs	r0, r3
 8002394:	f7ff fc56 	bl	8001c44 <MAX485_ReciveToIdleDMA>
}
 8002398:	e009      	b.n	80023ae <MAX_ParseResponseFunction+0x14e>
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <MAX_ParseResponseFunction+0x15c>)
 800239c:	2164      	movs	r1, #100	; 0x64
 800239e:	0018      	movs	r0, r3
 80023a0:	f7ff fc50 	bl	8001c44 <MAX485_ReciveToIdleDMA>
      MAX->NewEvent = MAX_EVENT_ERROR;
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <MAX_ParseResponseFunction+0x158>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2203      	movs	r2, #3
 80023aa:	705a      	strb	r2, [r3, #1]
}
 80023ac:	e7ff      	b.n	80023ae <MAX_ParseResponseFunction+0x14e>
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b002      	add	sp, #8
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	2000062c 	.word	0x2000062c
 80023bc:	20000564 	.word	0x20000564

080023c0 <PMS_Reset>:
#include "PMS.h"
#include "main.h"
#include "usart.h"
#include "SM.h"
void PMS_Reset(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(PMS_RST_GPIO_Port, PMS_RST_Pin, 0);
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <PMS_Reset+0x2c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	2108      	movs	r1, #8
 80023ca:	0018      	movs	r0, r3
 80023cc:	f003 faea 	bl	80059a4 <HAL_GPIO_WritePin>
   HAL_Delay(1000);
 80023d0:	23fa      	movs	r3, #250	; 0xfa
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	0018      	movs	r0, r3
 80023d6:	f001 ff05 	bl	80041e4 <HAL_Delay>
   HAL_GPIO_WritePin(PMS_RST_GPIO_Port, PMS_RST_Pin, 1);
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <PMS_Reset+0x2c>)
 80023dc:	2201      	movs	r2, #1
 80023de:	2108      	movs	r1, #8
 80023e0:	0018      	movs	r0, r3
 80023e2:	f003 fadf 	bl	80059a4 <HAL_GPIO_WritePin>
}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	50000400 	.word	0x50000400

080023f0 <PMS_EnterSleepMode>:
{
   HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Data, Length);
}
#endif
void PMS_EnterSleepMode(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PMS_SET_GPIO_Port, PMS_SET_Pin, 0);
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <PMS_EnterSleepMode+0x18>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	2110      	movs	r1, #16
 80023fa:	0018      	movs	r0, r3
 80023fc:	f003 fad2 	bl	80059a4 <HAL_GPIO_WritePin>
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	50000400 	.word	0x50000400

0800240c <PMS_ExitSleepMode>:
void PMS_ExitSleepMode(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PMS_SET_GPIO_Port, PMS_SET_Pin, 1);
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <PMS_ExitSleepMode+0x18>)
 8002412:	2201      	movs	r2, #1
 8002414:	2110      	movs	r1, #16
 8002416:	0018      	movs	r0, r3
 8002418:	f003 fac4 	bl	80059a4 <HAL_GPIO_WritePin>
}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	50000400 	.word	0x50000400

08002428 <SM_Handle>:
                                                  { SM_STATE_SLEEP, SM_STATE_RUNNING, SM_EVENT_END_SLEEP },
                                                  { SM_STATE_RUNNING, SM_STATE_WAIT_FOR_SEND, SM_EVENT_WAIT_FOR_SEND },
                                                  { SM_STATE_WAIT_FOR_SEND, SM_STATE_SLEEP, SM_EVENT_SEND_DATA } };
SMFunctions_TypeDef SmFunctions[] = { { SM_InitializeFunction }, { SM_RunningFunction }, { SM_WaitForSendFunction }, { SM_SleepFunction } };
void SM_Handle(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
   if(Rfp.Initialize == RFP_INITIALIZE)
 800242c:	4b16      	ldr	r3, [pc, #88]	; (8002488 <SM_Handle+0x60>)
 800242e:	78db      	ldrb	r3, [r3, #3]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <SM_Handle+0x10>
   {
      RFP_Handle();
 8002434:	f000 ff3c 	bl	80032b0 <RFP_Handle>
   }
   if(MAX.Initialize == MAX_INITIALIZE)
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <SM_Handle+0x64>)
 800243a:	78db      	ldrb	r3, [r3, #3]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <SM_Handle+0x1c>
   {
      MAX_Handle();
 8002440:	f7ff fc34 	bl	8001cac <MAX_Handle>
   }
   if(HAL_GetTick() - Sm.LastTick > 10)
 8002444:	f001 fec4 	bl	80041d0 <HAL_GetTick>
 8002448:	0002      	movs	r2, r0
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <SM_Handle+0x68>)
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b0a      	cmp	r3, #10
 8002452:	d915      	bls.n	8002480 <SM_Handle+0x58>
   {
      Sm.LastTick = HAL_GetTick();
 8002454:	f001 febc 	bl	80041d0 <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <SM_Handle+0x68>)
 800245c:	611a      	str	r2, [r3, #16]
      SM_ChangeState();
 800245e:	f000 f81b 	bl	8002498 <SM_ChangeState>
      if(SmFunctions[Sm.State].SmFunction != NULL)
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <SM_Handle+0x68>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	001a      	movs	r2, r3
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <SM_Handle+0x6c>)
 800246a:	0092      	lsls	r2, r2, #2
 800246c:	58d3      	ldr	r3, [r2, r3]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <SM_Handle+0x58>
      {
         SmFunctions[Sm.State].SmFunction();
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <SM_Handle+0x68>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	001a      	movs	r2, r3
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <SM_Handle+0x6c>)
 800247a:	0092      	lsls	r2, r2, #2
 800247c:	58d3      	ldr	r3, [r2, r3]
 800247e:	4798      	blx	r3
      }
   }
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	2000068c 	.word	0x2000068c
 800248c:	200006a8 	.word	0x200006a8
 8002490:	20000650 	.word	0x20000650
 8002494:	20000050 	.word	0x20000050

08002498 <SM_ChangeState>:
static void SM_ChangeState(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
   for(int i = 0; i < SM_TRANSITION_TABLE_SIZE; i++)
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	e022      	b.n	80024ea <SM_ChangeState+0x52>
   {
      if(Sm.State == SmTransitionTable[i].Source && Sm.NewEvent == SmTransitionTable[i].Event)
 80024a4:	4b16      	ldr	r3, [pc, #88]	; (8002500 <SM_ChangeState+0x68>)
 80024a6:	7819      	ldrb	r1, [r3, #0]
 80024a8:	4816      	ldr	r0, [pc, #88]	; (8002504 <SM_ChangeState+0x6c>)
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	0013      	movs	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	189b      	adds	r3, r3, r2
 80024b2:	5c1b      	ldrb	r3, [r3, r0]
 80024b4:	4299      	cmp	r1, r3
 80024b6:	d115      	bne.n	80024e4 <SM_ChangeState+0x4c>
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <SM_ChangeState+0x68>)
 80024ba:	7859      	ldrb	r1, [r3, #1]
 80024bc:	4811      	ldr	r0, [pc, #68]	; (8002504 <SM_ChangeState+0x6c>)
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	0013      	movs	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	189b      	adds	r3, r3, r2
 80024c6:	18c3      	adds	r3, r0, r3
 80024c8:	3302      	adds	r3, #2
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4299      	cmp	r1, r3
 80024ce:	d109      	bne.n	80024e4 <SM_ChangeState+0x4c>
      {
         Sm.State = SmTransitionTable[i].Destination;
 80024d0:	490c      	ldr	r1, [pc, #48]	; (8002504 <SM_ChangeState+0x6c>)
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	0013      	movs	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	189b      	adds	r3, r3, r2
 80024da:	18cb      	adds	r3, r1, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	781a      	ldrb	r2, [r3, #0]
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <SM_ChangeState+0x68>)
 80024e2:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < SM_TRANSITION_TABLE_SIZE; i++)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3301      	adds	r3, #1
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d9d9      	bls.n	80024a4 <SM_ChangeState+0xc>
      }
   }
   Sm.NewEvent = SM_EVENT_NOTHING;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <SM_ChangeState+0x68>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	705a      	strb	r2, [r3, #1]
}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b002      	add	sp, #8
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	20000650 	.word	0x20000650
 8002504:	20000040 	.word	0x20000040

08002508 <SM_InitializeFunction>:
static void SM_InitializeFunction(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
   Sm.Sw  = &Sw;
 800250c:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <SM_InitializeFunction+0x70>)
 800250e:	4a1b      	ldr	r2, [pc, #108]	; (800257c <SM_InitializeFunction+0x74>)
 8002510:	605a      	str	r2, [r3, #4]
   Sm.Rfp = &Rfp;
 8002512:	4b19      	ldr	r3, [pc, #100]	; (8002578 <SM_InitializeFunction+0x70>)
 8002514:	4a1a      	ldr	r2, [pc, #104]	; (8002580 <SM_InitializeFunction+0x78>)
 8002516:	609a      	str	r2, [r3, #8]
   Sm.Max = &MAX;
 8002518:	4b17      	ldr	r3, [pc, #92]	; (8002578 <SM_InitializeFunction+0x70>)
 800251a:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <SM_InitializeFunction+0x7c>)
 800251c:	60da      	str	r2, [r3, #12]
   SW_Init(&Sw);
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <SM_InitializeFunction+0x74>)
 8002520:	0018      	movs	r0, r3
 8002522:	f000 fb3f 	bl	8002ba4 <SW_Init>
   RFP_Init(&Rfp, RFP_ODWS);
 8002526:	4b16      	ldr	r3, [pc, #88]	; (8002580 <SM_InitializeFunction+0x78>)
 8002528:	2102      	movs	r1, #2
 800252a:	0018      	movs	r0, r3
 800252c:	f000 fedc 	bl	80032e8 <RFP_Init>
   MAX_Init(&MAX, MAX_ODWS);
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <SM_InitializeFunction+0x7c>)
 8002532:	2102      	movs	r1, #2
 8002534:	0018      	movs	r0, r3
 8002536:	f7ff fbd5 	bl	8001ce4 <MAX_Init>
   AHT15_InitFunction(&hi2c1);
 800253a:	4b13      	ldr	r3, [pc, #76]	; (8002588 <SM_InitializeFunction+0x80>)
 800253c:	0018      	movs	r0, r3
 800253e:	f7ff fabf 	bl	8001ac0 <AHT15_InitFunction>
   RFP_RegisterCommandFunction(RFP_TEST, RFP_CommadTestFunction);
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <SM_InitializeFunction+0x84>)
 8002544:	0019      	movs	r1, r3
 8002546:	2001      	movs	r0, #1
 8002548:	f000 ff4c 	bl	80033e4 <RFP_RegisterCommandFunction>
   RFP_RegisterCommandFunction(RFP_START_MEASURMENT, RFP_CommandStartMeasurmentFunction);
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <SM_InitializeFunction+0x88>)
 800254e:	0019      	movs	r1, r3
 8002550:	2002      	movs	r0, #2
 8002552:	f000 ff47 	bl	80033e4 <RFP_RegisterCommandFunction>
   MAX_RegisterDataFunction(MAX_DataFunction);
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <SM_InitializeFunction+0x8c>)
 8002558:	0018      	movs	r0, r3
 800255a:	f7ff fc41 	bl	8001de0 <MAX_RegisterDataFunction>
   Sm.NewEvent = SM_EVENT_END_INITIALIZE;
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <SM_InitializeFunction+0x70>)
 8002560:	2201      	movs	r2, #1
 8002562:	705a      	strb	r2, [r3, #1]
   PMS_Reset();
 8002564:	f7ff ff2c 	bl	80023c0 <PMS_Reset>
   PMS_EnterSleepMode();
 8002568:	f7ff ff42 	bl	80023f0 <PMS_EnterSleepMode>
   Sm.SensorFlag = SENSOR_FLAG_SET;
 800256c:	4b02      	ldr	r3, [pc, #8]	; (8002578 <SM_InitializeFunction+0x70>)
 800256e:	2201      	movs	r2, #1
 8002570:	751a      	strb	r2, [r3, #20]
}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000650 	.word	0x20000650
 800257c:	20000680 	.word	0x20000680
 8002580:	2000068c 	.word	0x2000068c
 8002584:	200006a8 	.word	0x200006a8
 8002588:	200007f8 	.word	0x200007f8
 800258c:	08002915 	.word	0x08002915
 8002590:	08002939 	.word	0x08002939
 8002594:	08002959 	.word	0x08002959

08002598 <SM_RunningFunction>:
static void SM_RunningFunction(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
   Switch_Handle();
 800259e:	f000 fa51 	bl	8002a44 <Switch_Handle>
   Sm.CntMs++;
 80025a2:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <SM_RunningFunction+0x11c>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <SM_RunningFunction+0x11c>)
 80025aa:	619a      	str	r2, [r3, #24]
   Sm.BatteryVoltage = ODWS_CheckBatteryLevel();
 80025ac:	f7ff fa9a 	bl	8001ae4 <ODWS_CheckBatteryLevel>
 80025b0:	1c02      	adds	r2, r0, #0
 80025b2:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <SM_RunningFunction+0x11c>)
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
   if(MAX.State == MAX_STATE_IDLE && Rfp.State == RFP_STATE_IDLE)
 80025b6:	4b40      	ldr	r3, [pc, #256]	; (80026b8 <SM_RunningFunction+0x120>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d000      	beq.n	80025c0 <SM_RunningFunction+0x28>
 80025be:	e075      	b.n	80026ac <SM_RunningFunction+0x114>
 80025c0:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <SM_RunningFunction+0x124>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d000      	beq.n	80025ca <SM_RunningFunction+0x32>
 80025c8:	e070      	b.n	80026ac <SM_RunningFunction+0x114>
   {
      if(Sm.SensorFlag == SENSOR_FLAG_SET)
 80025ca:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <SM_RunningFunction+0x11c>)
 80025cc:	7d1b      	ldrb	r3, [r3, #20]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d119      	bne.n	8002606 <SM_RunningFunction+0x6e>
      {
         Sm.SensorFlag                    = SENSOR_FLAG_RESET;
 80025d2:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <SM_RunningFunction+0x11c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	751a      	strb	r2, [r3, #20]
         Sm.StartReadSensorMeasurmentFlag = SENSOR_FLAG_SET;
 80025d8:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <SM_RunningFunction+0x11c>)
 80025da:	2201      	movs	r2, #1
 80025dc:	755a      	strb	r2, [r3, #21]
         uint8_t Temp                     = MAX_START_MEASURMENT;
 80025de:	1cfb      	adds	r3, r7, #3
 80025e0:	2202      	movs	r2, #2
 80025e2:	701a      	strb	r2, [r3, #0]
         MAX_SendData(MAX_BS, MAX_COMMAND, &Temp, 1);
 80025e4:	1cfa      	adds	r2, r7, #3
 80025e6:	2301      	movs	r3, #1
 80025e8:	2101      	movs	r1, #1
 80025ea:	2001      	movs	r0, #1
 80025ec:	f7ff fc1e 	bl	8001e2c <MAX_SendData>
         AHT15_TriggerMeasurment();
 80025f0:	f7ff f9e8 	bl	80019c4 <AHT15_TriggerMeasurment>
         PMS_ExitSleepMode();
 80025f4:	f7ff ff0a 	bl	800240c <PMS_ExitSleepMode>
         Sm.PMSFlag = SENSOR_FLAG_RESET;
 80025f8:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <SM_RunningFunction+0x11c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	759a      	strb	r2, [r3, #22]
         Sm.CntMs   = 0;
 80025fe:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <SM_RunningFunction+0x11c>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
      else
      {
         Sm.NewEvent = SM_EVENT_END_RUNNING;
      }
   }
}
 8002604:	e052      	b.n	80026ac <SM_RunningFunction+0x114>
      else if(Sm.StartReadSensorMeasurmentFlag == SENSOR_FLAG_SET)
 8002606:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <SM_RunningFunction+0x11c>)
 8002608:	7d5b      	ldrb	r3, [r3, #21]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d14b      	bne.n	80026a6 <SM_RunningFunction+0x10e>
         if(Sm.CntMs >= ALL_SENSOR_DELAY)
 800260e:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <SM_RunningFunction+0x11c>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	4a2b      	ldr	r2, [pc, #172]	; (80026c0 <SM_RunningFunction+0x128>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d949      	bls.n	80026ac <SM_RunningFunction+0x114>
            AHT15_ReadMesurmentFloat(&Sm.AHT15_Temperature, &Sm.AHT15_Humidity);
 8002618:	4a2a      	ldr	r2, [pc, #168]	; (80026c4 <SM_RunningFunction+0x12c>)
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <SM_RunningFunction+0x130>)
 800261c:	0011      	movs	r1, r2
 800261e:	0018      	movs	r0, r3
 8002620:	f7ff f9e4 	bl	80019ec <AHT15_ReadMesurmentFloat>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8002624:	23a0      	movs	r3, #160	; 0xa0
 8002626:	05db      	lsls	r3, r3, #23
 8002628:	2201      	movs	r2, #1
 800262a:	2120      	movs	r1, #32
 800262c:	0018      	movs	r0, r3
 800262e:	f003 f9b9 	bl	80059a4 <HAL_GPIO_WritePin>
            HAL_UARTEx_ReceiveToIdle_DMA(&huart2, PMSData, 100);
 8002632:	4926      	ldr	r1, [pc, #152]	; (80026cc <SM_RunningFunction+0x134>)
 8002634:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <SM_RunningFunction+0x138>)
 8002636:	2264      	movs	r2, #100	; 0x64
 8002638:	0018      	movs	r0, r3
 800263a:	f006 fd31 	bl	80090a0 <HAL_UARTEx_ReceiveToIdle_DMA>
            uint32_t Time = HAL_GetTick();
 800263e:	f001 fdc7 	bl	80041d0 <HAL_GetTick>
 8002642:	0003      	movs	r3, r0
 8002644:	607b      	str	r3, [r7, #4]
            while(Sm.PMSFlag == SENSOR_FLAG_RESET)
 8002646:	e007      	b.n	8002658 <SM_RunningFunction+0xc0>
               if(HAL_GetTick() - Time > PMS_MAX_TIMEOUT)
 8002648:	f001 fdc2 	bl	80041d0 <HAL_GetTick>
 800264c:	0002      	movs	r2, r0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <SM_RunningFunction+0x13c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d804      	bhi.n	8002662 <SM_RunningFunction+0xca>
            while(Sm.PMSFlag == SENSOR_FLAG_RESET)
 8002658:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <SM_RunningFunction+0x11c>)
 800265a:	7d9b      	ldrb	r3, [r3, #22]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f3      	beq.n	8002648 <SM_RunningFunction+0xb0>
 8002660:	e000      	b.n	8002664 <SM_RunningFunction+0xcc>
                  break;
 8002662:	46c0      	nop			; (mov r8, r8)
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8002664:	23a0      	movs	r3, #160	; 0xa0
 8002666:	05db      	lsls	r3, r3, #23
 8002668:	2200      	movs	r2, #0
 800266a:	2120      	movs	r1, #32
 800266c:	0018      	movs	r0, r3
 800266e:	f003 f999 	bl	80059a4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8002672:	b672      	cpsid	i
}
 8002674:	46c0      	nop			; (mov r8, r8)
            SM_FillPayloadFunction();
 8002676:	f000 f87f 	bl	8002778 <SM_FillPayloadFunction>
  __ASM volatile ("cpsie i" : : : "memory");
 800267a:	b662      	cpsie	i
}
 800267c:	46c0      	nop			; (mov r8, r8)
            RFP_SendData(RFP_IDWS, RFP_DATA, DataSensor, 34);
 800267e:	4a16      	ldr	r2, [pc, #88]	; (80026d8 <SM_RunningFunction+0x140>)
 8002680:	2322      	movs	r3, #34	; 0x22
 8002682:	2102      	movs	r1, #2
 8002684:	2003      	movs	r0, #3
 8002686:	f000 fecd 	bl	8003424 <RFP_SendData>
            Sm.NewEvent                      = SM_EVENT_WAIT_FOR_SEND;
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <SM_RunningFunction+0x11c>)
 800268c:	2203      	movs	r2, #3
 800268e:	705a      	strb	r2, [r3, #1]
            Sm.CntMs                         = 0;
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <SM_RunningFunction+0x11c>)
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
            Sm.StartReadSensorMeasurmentFlag = SENSOR_FLAG_RESET;
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <SM_RunningFunction+0x11c>)
 8002698:	2200      	movs	r2, #0
 800269a:	755a      	strb	r2, [r3, #21]
            RFP_Handle();
 800269c:	f000 fe08 	bl	80032b0 <RFP_Handle>
            PMS_EnterSleepMode();
 80026a0:	f7ff fea6 	bl	80023f0 <PMS_EnterSleepMode>
}
 80026a4:	e002      	b.n	80026ac <SM_RunningFunction+0x114>
         Sm.NewEvent = SM_EVENT_END_RUNNING;
 80026a6:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <SM_RunningFunction+0x11c>)
 80026a8:	2202      	movs	r2, #2
 80026aa:	705a      	strb	r2, [r3, #1]
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000650 	.word	0x20000650
 80026b8:	200006a8 	.word	0x200006a8
 80026bc:	2000068c 	.word	0x2000068c
 80026c0:	00002327 	.word	0x00002327
 80026c4:	20000670 	.word	0x20000670
 80026c8:	2000066c 	.word	0x2000066c
 80026cc:	200006c4 	.word	0x200006c4
 80026d0:	20000aac 	.word	0x20000aac
 80026d4:	00001388 	.word	0x00001388
 80026d8:	20000728 	.word	0x20000728

080026dc <SM_WaitForSendFunction>:
static void SM_WaitForSendFunction(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
   Sm.CntMs++;
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <SM_WaitForSendFunction+0x40>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <SM_WaitForSendFunction+0x40>)
 80026e8:	619a      	str	r2, [r3, #24]
   if(Rfp.State != RFP_STATE_IDLE)
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <SM_WaitForSendFunction+0x44>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d00b      	beq.n	800270a <SM_WaitForSendFunction+0x2e>
   {
      if(Sm.CntMs > ALL_SENSOR_DELAY)
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <SM_WaitForSendFunction+0x40>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <SM_WaitForSendFunction+0x48>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d90c      	bls.n	8002716 <SM_WaitForSendFunction+0x3a>
      {
         Sm.CntMs    = 0;
 80026fc:	4b07      	ldr	r3, [pc, #28]	; (800271c <SM_WaitForSendFunction+0x40>)
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
         Sm.NewEvent = SM_EVENT_SEND_DATA;
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <SM_WaitForSendFunction+0x40>)
 8002704:	2204      	movs	r2, #4
 8002706:	705a      	strb	r2, [r3, #1]
   else
   {
      Sm.NewEvent = SM_EVENT_SEND_DATA;
      Sm.CntMs    = 0;
   }
}
 8002708:	e005      	b.n	8002716 <SM_WaitForSendFunction+0x3a>
      Sm.NewEvent = SM_EVENT_SEND_DATA;
 800270a:	4b04      	ldr	r3, [pc, #16]	; (800271c <SM_WaitForSendFunction+0x40>)
 800270c:	2204      	movs	r2, #4
 800270e:	705a      	strb	r2, [r3, #1]
      Sm.CntMs    = 0;
 8002710:	4b02      	ldr	r3, [pc, #8]	; (800271c <SM_WaitForSendFunction+0x40>)
 8002712:	2200      	movs	r2, #0
 8002714:	619a      	str	r2, [r3, #24]
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000650 	.word	0x20000650
 8002720:	2000068c 	.word	0x2000068c
 8002724:	00002328 	.word	0x00002328

08002728 <SM_SleepFunction>:
static void SM_SleepFunction(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800272c:	23a0      	movs	r3, #160	; 0xa0
 800272e:	05db      	lsls	r3, r3, #23
 8002730:	2200      	movs	r2, #0
 8002732:	2180      	movs	r1, #128	; 0x80
 8002734:	0018      	movs	r0, r3
 8002736:	f003 f935 	bl	80059a4 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800273a:	23a0      	movs	r3, #160	; 0xa0
 800273c:	05db      	lsls	r3, r3, #23
 800273e:	2200      	movs	r2, #0
 8002740:	2140      	movs	r1, #64	; 0x40
 8002742:	0018      	movs	r0, r3
 8002744:	f003 f92e 	bl	80059a4 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <SM_SleepFunction+0x48>)
 800274a:	2200      	movs	r2, #0
 800274c:	2102      	movs	r1, #2
 800274e:	0018      	movs	r0, r3
 8002750:	f003 f928 	bl	80059a4 <HAL_GPIO_WritePin>
   HAL_SuspendTick();
 8002754:	f001 fd6a 	bl	800422c <HAL_SuspendTick>
   //HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
   HAL_ResumeTick();
 8002758:	f001 fd76 	bl	8004248 <HAL_ResumeTick>
   Sm.NewEvent   = SM_EVENT_END_SLEEP;
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <SM_SleepFunction+0x4c>)
 800275e:	2205      	movs	r2, #5
 8002760:	705a      	strb	r2, [r3, #1]
   Sm.SensorFlag = SENSOR_FLAG_SET;
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <SM_SleepFunction+0x4c>)
 8002764:	2201      	movs	r2, #1
 8002766:	751a      	strb	r2, [r3, #20]
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	50000400 	.word	0x50000400
 8002774:	20000650 	.word	0x20000650

08002778 <SM_FillPayloadFunction>:
static void SM_FillPayloadFunction(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
   uint8_t *TempPtr = NULL;
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
   TempPtr          = &Sm.AHT15_Humidity;
 8002782:	4b5d      	ldr	r3, [pc, #372]	; (80028f8 <SM_FillPayloadFunction+0x180>)
 8002784:	607b      	str	r3, [r7, #4]
   DataSensor[0]    = RFP_HUMIDITI_AHT_15;
 8002786:	4b5d      	ldr	r3, [pc, #372]	; (80028fc <SM_FillPayloadFunction+0x184>)
 8002788:	2202      	movs	r2, #2
 800278a:	701a      	strb	r2, [r3, #0]
   DataSensor[1]    = *TempPtr;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <SM_FillPayloadFunction+0x184>)
 8002792:	705a      	strb	r2, [r3, #1]
   TempPtr++;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3301      	adds	r3, #1
 8002798:	607b      	str	r3, [r7, #4]
   DataSensor[2] = *TempPtr;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	781a      	ldrb	r2, [r3, #0]
 800279e:	4b57      	ldr	r3, [pc, #348]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80027a0:	709a      	strb	r2, [r3, #2]
   TempPtr++;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3301      	adds	r3, #1
 80027a6:	607b      	str	r3, [r7, #4]
   DataSensor[3] = *TempPtr;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	4b53      	ldr	r3, [pc, #332]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80027ae:	70da      	strb	r2, [r3, #3]
   TempPtr++;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3301      	adds	r3, #1
 80027b4:	607b      	str	r3, [r7, #4]
   DataSensor[4] = *TempPtr;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	4b50      	ldr	r3, [pc, #320]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80027bc:	711a      	strb	r2, [r3, #4]
   TempPtr       = &Sm.AHT15_Temperature;
 80027be:	4b50      	ldr	r3, [pc, #320]	; (8002900 <SM_FillPayloadFunction+0x188>)
 80027c0:	607b      	str	r3, [r7, #4]
   DataSensor[5] = RFP_TEMPERATURE_AHT_15;
 80027c2:	4b4e      	ldr	r3, [pc, #312]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	715a      	strb	r2, [r3, #5]
   DataSensor[6] = *TempPtr;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80027ce:	719a      	strb	r2, [r3, #6]
   TempPtr++;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3301      	adds	r3, #1
 80027d4:	607b      	str	r3, [r7, #4]
   DataSensor[7] = *TempPtr;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	4b48      	ldr	r3, [pc, #288]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80027dc:	71da      	strb	r2, [r3, #7]
   TempPtr++;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3301      	adds	r3, #1
 80027e2:	607b      	str	r3, [r7, #4]
   DataSensor[8] = *TempPtr;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	4b44      	ldr	r3, [pc, #272]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80027ea:	721a      	strb	r2, [r3, #8]
   TempPtr++;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3301      	adds	r3, #1
 80027f0:	607b      	str	r3, [r7, #4]
   DataSensor[9]  = *TempPtr;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	781a      	ldrb	r2, [r3, #0]
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80027f8:	725a      	strb	r2, [r3, #9]
   TempPtr        = Sm.Brightness;
 80027fa:	4b42      	ldr	r3, [pc, #264]	; (8002904 <SM_FillPayloadFunction+0x18c>)
 80027fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027fe:	607b      	str	r3, [r7, #4]
   DataSensor[10] = RFP_BRIGHTNESS;
 8002800:	4b3e      	ldr	r3, [pc, #248]	; (80028fc <SM_FillPayloadFunction+0x184>)
 8002802:	2206      	movs	r2, #6
 8002804:	729a      	strb	r2, [r3, #10]
   DataSensor[11] = *TempPtr;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	4b3c      	ldr	r3, [pc, #240]	; (80028fc <SM_FillPayloadFunction+0x184>)
 800280c:	72da      	strb	r2, [r3, #11]
   TempPtr++;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3301      	adds	r3, #1
 8002812:	607b      	str	r3, [r7, #4]
   DataSensor[12] = *TempPtr;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	781a      	ldrb	r2, [r3, #0]
 8002818:	4b38      	ldr	r3, [pc, #224]	; (80028fc <SM_FillPayloadFunction+0x184>)
 800281a:	731a      	strb	r2, [r3, #12]
   TempPtr++;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3301      	adds	r3, #1
 8002820:	607b      	str	r3, [r7, #4]
   TempPtr        = &Sm.BatteryVoltage;
 8002822:	4b39      	ldr	r3, [pc, #228]	; (8002908 <SM_FillPayloadFunction+0x190>)
 8002824:	607b      	str	r3, [r7, #4]
   DataSensor[13] = RFP_BATTERY_LEVEL;
 8002826:	4b35      	ldr	r3, [pc, #212]	; (80028fc <SM_FillPayloadFunction+0x184>)
 8002828:	2205      	movs	r2, #5
 800282a:	735a      	strb	r2, [r3, #13]
   DataSensor[14] = *TempPtr;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <SM_FillPayloadFunction+0x184>)
 8002832:	739a      	strb	r2, [r3, #14]
   TempPtr++;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3301      	adds	r3, #1
 8002838:	607b      	str	r3, [r7, #4]
   DataSensor[15] = *TempPtr;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	4b2f      	ldr	r3, [pc, #188]	; (80028fc <SM_FillPayloadFunction+0x184>)
 8002840:	73da      	strb	r2, [r3, #15]
   TempPtr++;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3301      	adds	r3, #1
 8002846:	607b      	str	r3, [r7, #4]
   DataSensor[16] = *TempPtr;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <SM_FillPayloadFunction+0x184>)
 800284e:	741a      	strb	r2, [r3, #16]
   TempPtr++;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3301      	adds	r3, #1
 8002854:	607b      	str	r3, [r7, #4]
   DataSensor[17] = *TempPtr;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	4b28      	ldr	r3, [pc, #160]	; (80028fc <SM_FillPayloadFunction+0x184>)
 800285c:	745a      	strb	r2, [r3, #17]
   DataSensor[18] = RFP_BATTERY_STATE;
 800285e:	4b27      	ldr	r3, [pc, #156]	; (80028fc <SM_FillPayloadFunction+0x184>)
 8002860:	2208      	movs	r2, #8
 8002862:	749a      	strb	r2, [r3, #18]
   DataSensor[19] = 0; // TODO;
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <SM_FillPayloadFunction+0x184>)
 8002866:	2200      	movs	r2, #0
 8002868:	74da      	strb	r2, [r3, #19]
   DataSensor[20] = RFP_AIR_POLLUTION_PM1;
 800286a:	4b24      	ldr	r3, [pc, #144]	; (80028fc <SM_FillPayloadFunction+0x184>)
 800286c:	2209      	movs	r2, #9
 800286e:	751a      	strb	r2, [r3, #20]
   DataSensor[21] = PMSData[10];
 8002870:	4b26      	ldr	r3, [pc, #152]	; (800290c <SM_FillPayloadFunction+0x194>)
 8002872:	7a9a      	ldrb	r2, [r3, #10]
 8002874:	4b21      	ldr	r3, [pc, #132]	; (80028fc <SM_FillPayloadFunction+0x184>)
 8002876:	755a      	strb	r2, [r3, #21]
   DataSensor[22] = PMSData[11];
 8002878:	4b24      	ldr	r3, [pc, #144]	; (800290c <SM_FillPayloadFunction+0x194>)
 800287a:	7ada      	ldrb	r2, [r3, #11]
 800287c:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <SM_FillPayloadFunction+0x184>)
 800287e:	759a      	strb	r2, [r3, #22]
   DataSensor[23] = RFP_AIR_POLLUTION_PM10;
 8002880:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <SM_FillPayloadFunction+0x184>)
 8002882:	220b      	movs	r2, #11
 8002884:	75da      	strb	r2, [r3, #23]
   DataSensor[24] = PMSData[8];
 8002886:	4b21      	ldr	r3, [pc, #132]	; (800290c <SM_FillPayloadFunction+0x194>)
 8002888:	7a1a      	ldrb	r2, [r3, #8]
 800288a:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <SM_FillPayloadFunction+0x184>)
 800288c:	761a      	strb	r2, [r3, #24]
   DataSensor[25] = PMSData[9];
 800288e:	4b1f      	ldr	r3, [pc, #124]	; (800290c <SM_FillPayloadFunction+0x194>)
 8002890:	7a5a      	ldrb	r2, [r3, #9]
 8002892:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <SM_FillPayloadFunction+0x184>)
 8002894:	765a      	strb	r2, [r3, #25]
   DataSensor[26] = RFP_AIR_POLLUTION_PM25;
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <SM_FillPayloadFunction+0x184>)
 8002898:	220a      	movs	r2, #10
 800289a:	769a      	strb	r2, [r3, #26]
   DataSensor[27] = PMSData[12];
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <SM_FillPayloadFunction+0x194>)
 800289e:	7b1a      	ldrb	r2, [r3, #12]
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80028a2:	76da      	strb	r2, [r3, #27]
   DataSensor[28] = PMSData[13];
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <SM_FillPayloadFunction+0x194>)
 80028a6:	7b5a      	ldrb	r2, [r3, #13]
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80028aa:	771a      	strb	r2, [r3, #28]
   TempPtr        = &Sm.EXT_Temperature;
 80028ac:	4b18      	ldr	r3, [pc, #96]	; (8002910 <SM_FillPayloadFunction+0x198>)
 80028ae:	607b      	str	r3, [r7, #4]
   DataSensor[29] = RFP_EXTERNAL_MODULE_TEMPERATURE;
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80028b2:	2207      	movs	r2, #7
 80028b4:	775a      	strb	r2, [r3, #29]
   DataSensor[30] = *TempPtr;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	781a      	ldrb	r2, [r3, #0]
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80028bc:	779a      	strb	r2, [r3, #30]
   TempPtr++;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3301      	adds	r3, #1
 80028c2:	607b      	str	r3, [r7, #4]
   DataSensor[31] = *TempPtr;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	781a      	ldrb	r2, [r3, #0]
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80028ca:	77da      	strb	r2, [r3, #31]
   TempPtr++;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3301      	adds	r3, #1
 80028d0:	607b      	str	r3, [r7, #4]
   DataSensor[32] = *TempPtr;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7819      	ldrb	r1, [r3, #0]
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80028d8:	2220      	movs	r2, #32
 80028da:	5499      	strb	r1, [r3, r2]
   TempPtr++;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3301      	adds	r3, #1
 80028e0:	607b      	str	r3, [r7, #4]
   DataSensor[33] = *TempPtr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7819      	ldrb	r1, [r3, #0]
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <SM_FillPayloadFunction+0x184>)
 80028e8:	2221      	movs	r2, #33	; 0x21
 80028ea:	5499      	strb	r1, [r3, r2]
   TempPtr        = NULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	607b      	str	r3, [r7, #4]
}
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b002      	add	sp, #8
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000670 	.word	0x20000670
 80028fc:	20000728 	.word	0x20000728
 8002900:	2000066c 	.word	0x2000066c
 8002904:	20000650 	.word	0x20000650
 8002908:	2000067c 	.word	0x2000067c
 800290c:	200006c4 	.word	0x200006c4
 8002910:	20000678 	.word	0x20000678

08002914 <RFP_CommadTestFunction>:
void RFP_CommadTestFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
   HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <RFP_CommadTestFunction+0x20>)
 8002922:	2201      	movs	r2, #1
 8002924:	2102      	movs	r1, #2
 8002926:	0018      	movs	r0, r3
 8002928:	f003 f83c 	bl	80059a4 <HAL_GPIO_WritePin>
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b004      	add	sp, #16
 8002932:	bd80      	pop	{r7, pc}
 8002934:	50000400 	.word	0x50000400

08002938 <RFP_CommandStartMeasurmentFunction>:
void RFP_CommandStartMeasurmentFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
   Sm.SensorFlag = SENSOR_FLAG_SET;
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <RFP_CommandStartMeasurmentFunction+0x1c>)
 8002946:	2201      	movs	r2, #1
 8002948:	751a      	strb	r2, [r3, #20]
}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b004      	add	sp, #16
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	20000650 	.word	0x20000650

08002958 <MAX_DataFunction>:
void MAX_DataFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
   HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8002964:	23a0      	movs	r3, #160	; 0xa0
 8002966:	05db      	lsls	r3, r3, #23
 8002968:	2201      	movs	r2, #1
 800296a:	2140      	movs	r1, #64	; 0x40
 800296c:	0018      	movs	r0, r3
 800296e:	f003 f819 	bl	80059a4 <HAL_GPIO_WritePin>
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	46bd      	mov	sp, r7
 8002976:	b004      	add	sp, #16
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	000a      	movs	r2, r1
 8002986:	1cbb      	adds	r3, r7, #2
 8002988:	801a      	strh	r2, [r3, #0]
   if(huart->Instance == USART1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a24      	ldr	r2, [pc, #144]	; (8002a20 <HAL_UARTEx_RxEventCallback+0xa4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d10b      	bne.n	80029ac <HAL_UARTEx_RxEventCallback+0x30>
   {
      HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8002994:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_UARTEx_RxEventCallback+0xa8>)
 8002996:	2102      	movs	r1, #2
 8002998:	0018      	movs	r0, r3
 800299a:	f003 f820 	bl	80059de <HAL_GPIO_TogglePin>
      Rfp.DataSize = Size;
 800299e:	1cbb      	adds	r3, r7, #2
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <HAL_UARTEx_RxEventCallback+0xac>)
 80029a4:	609a      	str	r2, [r3, #8]
      RFP_InterruptTask();
 80029a6:	f000 fd31 	bl	800340c <RFP_InterruptTask>
      else
      {
         HAL_UARTEx_ReceiveToIdle_DMA(&huart2, PMSData, 100);
      }
   }
}
 80029aa:	e035      	b.n	8002a18 <HAL_UARTEx_RxEventCallback+0x9c>
   else if(huart->Instance == LPUART1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1e      	ldr	r2, [pc, #120]	; (8002a2c <HAL_UARTEx_RxEventCallback+0xb0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d117      	bne.n	80029e6 <HAL_UARTEx_RxEventCallback+0x6a>
      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80029b6:	23a0      	movs	r3, #160	; 0xa0
 80029b8:	05db      	lsls	r3, r3, #23
 80029ba:	2140      	movs	r1, #64	; 0x40
 80029bc:	0018      	movs	r0, r3
 80029be:	f003 f80e 	bl	80059de <HAL_GPIO_TogglePin>
      if(Size > 4 && Size < 101)
 80029c2:	1cbb      	adds	r3, r7, #2
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d90a      	bls.n	80029e0 <HAL_UARTEx_RxEventCallback+0x64>
 80029ca:	1cbb      	adds	r3, r7, #2
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	2b64      	cmp	r3, #100	; 0x64
 80029d0:	d806      	bhi.n	80029e0 <HAL_UARTEx_RxEventCallback+0x64>
         MAX.DataSize = Size;
 80029d2:	1cbb      	adds	r3, r7, #2
 80029d4:	881a      	ldrh	r2, [r3, #0]
 80029d6:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <HAL_UARTEx_RxEventCallback+0xb4>)
 80029d8:	609a      	str	r2, [r3, #8]
         MAX_InterruptTask();
 80029da:	f7ff fa0f 	bl	8001dfc <MAX_InterruptTask>
}
 80029de:	e01b      	b.n	8002a18 <HAL_UARTEx_RxEventCallback+0x9c>
         MAX_InterruptErrorTask();
 80029e0:	f7ff fa18 	bl	8001e14 <MAX_InterruptErrorTask>
}
 80029e4:	e018      	b.n	8002a18 <HAL_UARTEx_RxEventCallback+0x9c>
   else if(huart->Instance == USART2)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <HAL_UARTEx_RxEventCallback+0xb8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d113      	bne.n	8002a18 <HAL_UARTEx_RxEventCallback+0x9c>
      if(PMSData[0] == 0x42)
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <HAL_UARTEx_RxEventCallback+0xbc>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b42      	cmp	r3, #66	; 0x42
 80029f6:	d109      	bne.n	8002a0c <HAL_UARTEx_RxEventCallback+0x90>
         Sm.PMSFlag = SENSOR_FLAG_SET;
 80029f8:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <HAL_UARTEx_RxEventCallback+0xc0>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	759a      	strb	r2, [r3, #22]
         HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80029fe:	23a0      	movs	r3, #160	; 0xa0
 8002a00:	05db      	lsls	r3, r3, #23
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	0018      	movs	r0, r3
 8002a06:	f002 ffea 	bl	80059de <HAL_GPIO_TogglePin>
}
 8002a0a:	e005      	b.n	8002a18 <HAL_UARTEx_RxEventCallback+0x9c>
         HAL_UARTEx_ReceiveToIdle_DMA(&huart2, PMSData, 100);
 8002a0c:	490a      	ldr	r1, [pc, #40]	; (8002a38 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002a10:	2264      	movs	r2, #100	; 0x64
 8002a12:	0018      	movs	r0, r3
 8002a14:	f006 fb44 	bl	80090a0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002a18:	46c0      	nop			; (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b002      	add	sp, #8
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40013800 	.word	0x40013800
 8002a24:	50000400 	.word	0x50000400
 8002a28:	2000068c 	.word	0x2000068c
 8002a2c:	40008000 	.word	0x40008000
 8002a30:	200006a8 	.word	0x200006a8
 8002a34:	40004400 	.word	0x40004400
 8002a38:	200006c4 	.word	0x200006c4
 8002a3c:	20000650 	.word	0x20000650
 8002a40:	20000aac 	.word	0x20000aac

08002a44 <Switch_Handle>:
                                                  { SW_STATE_CONFIRM, SW_STATE_RELEASE, SW_EVENT_RELEASE },
                                                  { SW_STATE_RELEASE, SW_STATE_IDLE, SW_EVENT_NOTHING } };
SWFunctions_TypeDef SwFunctions[]             = { { SW_InitializeFunction }, { SW_IdleFunction },    { SW_DebounceFunction }, { SW_TickFunction },
                                                  { SW_PressFunction },      { SW_ConfirmFunction }, { SW_ReleaseFunction } };
void Switch_Handle(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
   SW_ChangeState();
 8002a48:	f000 f818 	bl	8002a7c <SW_ChangeState>
   if(SwFunctions[Sw->State].SwFunction != NULL)
 8002a4c:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <Switch_Handle+0x30>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	001a      	movs	r2, r3
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <Switch_Handle+0x34>)
 8002a56:	0092      	lsls	r2, r2, #2
 8002a58:	58d3      	ldr	r3, [r2, r3]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <Switch_Handle+0x2a>
   {
      SwFunctions[Sw->State].SwFunction();
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <Switch_Handle+0x30>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	001a      	movs	r2, r3
 8002a66:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <Switch_Handle+0x34>)
 8002a68:	0092      	lsls	r2, r2, #2
 8002a6a:	58d3      	ldr	r3, [r2, r3]
 8002a6c:	4798      	blx	r3
   }
}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	2000078c 	.word	0x2000078c
 8002a78:	20000078 	.word	0x20000078

08002a7c <SW_ChangeState>:
static void SW_ChangeState(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
   for(int i = 0; i < SW_TRANSITION_TABLE_SIZE; i++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	e02a      	b.n	8002ade <SW_ChangeState+0x62>
   {
      if(Sw->State == SwTransitionTable[i].Source && Sw->NewEvent == SwTransitionTable[i].Event)
 8002a88:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <SW_ChangeState+0x78>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	7819      	ldrb	r1, [r3, #0]
 8002a8e:	481a      	ldr	r0, [pc, #104]	; (8002af8 <SW_ChangeState+0x7c>)
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	0013      	movs	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	189b      	adds	r3, r3, r2
 8002a98:	5c1b      	ldrb	r3, [r3, r0]
 8002a9a:	4299      	cmp	r1, r3
 8002a9c:	d11c      	bne.n	8002ad8 <SW_ChangeState+0x5c>
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <SW_ChangeState+0x78>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	7859      	ldrb	r1, [r3, #1]
 8002aa4:	4814      	ldr	r0, [pc, #80]	; (8002af8 <SW_ChangeState+0x7c>)
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	189b      	adds	r3, r3, r2
 8002aae:	18c3      	adds	r3, r0, r3
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	4299      	cmp	r1, r3
 8002ab6:	d10f      	bne.n	8002ad8 <SW_ChangeState+0x5c>
      {
         Sw->State = SwTransitionTable[i].Destination;
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <SW_ChangeState+0x78>)
 8002aba:	6819      	ldr	r1, [r3, #0]
 8002abc:	480e      	ldr	r0, [pc, #56]	; (8002af8 <SW_ChangeState+0x7c>)
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	0013      	movs	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	189b      	adds	r3, r3, r2
 8002ac6:	18c3      	adds	r3, r0, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	700b      	strb	r3, [r1, #0]
         Sw->NewEvent = SW_EVENT_NOTHING;
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <SW_ChangeState+0x78>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	705a      	strb	r2, [r3, #1]
         return;
 8002ad6:	e009      	b.n	8002aec <SW_ChangeState+0x70>
   for(int i = 0; i < SW_TRANSITION_TABLE_SIZE; i++)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3301      	adds	r3, #1
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b07      	cmp	r3, #7
 8002ae2:	d9d1      	bls.n	8002a88 <SW_ChangeState+0xc>
      }
   }
   Sw->NewEvent = SW_EVENT_NOTHING;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <SW_ChangeState+0x78>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	705a      	strb	r2, [r3, #1]
}
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b002      	add	sp, #8
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	2000078c 	.word	0x2000078c
 8002af8:	20000060 	.word	0x20000060

08002afc <SW_InitializeFunction>:
static void SW_InitializeFunction(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_END_INITIALIZE;
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <SW_InitializeFunction+0x14>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2200      	movs	r2, #0
 8002b06:	705a      	strb	r2, [r3, #1]
}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	2000078c 	.word	0x2000078c

08002b14 <SW_IdleFunction>:
static void SW_IdleFunction(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_DEBOUNCE;
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <SW_IdleFunction+0x14>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	705a      	strb	r2, [r3, #1]
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	2000078c 	.word	0x2000078c

08002b2c <SW_DebounceFunction>:
static void SW_DebounceFunction(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_PRESS;
 8002b30:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <SW_DebounceFunction+0x14>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2203      	movs	r2, #3
 8002b36:	705a      	strb	r2, [r3, #1]
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	2000078c 	.word	0x2000078c

08002b44 <SW_TickFunction>:
static void SW_TickFunction(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_RELEASE;
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <SW_TickFunction+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	705a      	strb	r2, [r3, #1]
}
 8002b50:	46c0      	nop			; (mov r8, r8)
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	2000078c 	.word	0x2000078c

08002b5c <SW_PressFunction>:
static void SW_PressFunction(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_CONFIRM;
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <SW_PressFunction+0x14>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2205      	movs	r2, #5
 8002b66:	705a      	strb	r2, [r3, #1]
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	2000078c 	.word	0x2000078c

08002b74 <SW_ConfirmFunction>:
static void SW_ConfirmFunction(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_RELEASE;
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <SW_ConfirmFunction+0x14>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	705a      	strb	r2, [r3, #1]
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	2000078c 	.word	0x2000078c

08002b8c <SW_ReleaseFunction>:
static void SW_ReleaseFunction(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_NOTHING;
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <SW_ReleaseFunction+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2201      	movs	r2, #1
 8002b96:	705a      	strb	r2, [r3, #1]
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	2000078c 	.word	0x2000078c

08002ba4 <SW_Init>:
void SW_Init(SW_TypeDef *Switch)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
   Sw = Switch;
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <SW_Init+0x18>)
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	601a      	str	r2, [r3, #0]
}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	2000078c 	.word	0x2000078c

08002bc0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	0018      	movs	r0, r3
 8002bca:	230c      	movs	r3, #12
 8002bcc:	001a      	movs	r2, r3
 8002bce:	2100      	movs	r1, #0
 8002bd0:	f006 fb50 	bl	8009274 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002bd6:	4a2e      	ldr	r2, [pc, #184]	; (8002c90 <MX_ADC1_Init+0xd0>)
 8002bd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002bda:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002bdc:	2280      	movs	r2, #128	; 0x80
 8002bde:	05d2      	lsls	r2, r2, #23
 8002be0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002be2:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002be8:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002bee:	4b27      	ldr	r3, [pc, #156]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bf4:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002bfa:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002c00:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c06:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c12:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002c14:	2220      	movs	r2, #32
 8002c16:	2100      	movs	r1, #0
 8002c18:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002c28:	222c      	movs	r2, #44	; 0x2c
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002c34:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002c3a:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002c42:	223c      	movs	r2, #60	; 0x3c
 8002c44:	2100      	movs	r1, #0
 8002c46:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002c48:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c4e:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002c50:	0018      	movs	r0, r3
 8002c52:	f001 fc3d 	bl	80044d0 <HAL_ADC_Init>
 8002c56:	1e03      	subs	r3, r0, #0
 8002c58:	d001      	beq.n	8002c5e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002c5a:	f000 fb24 	bl	80032a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	4a0c      	ldr	r2, [pc, #48]	; (8002c94 <MX_ADC1_Init+0xd4>)
 8002c62:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	2200      	movs	r2, #0
 8002c68:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c70:	1d3a      	adds	r2, r7, #4
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <MX_ADC1_Init+0xcc>)
 8002c74:	0011      	movs	r1, r2
 8002c76:	0018      	movs	r0, r3
 8002c78:	f001 fec0 	bl	80049fc <HAL_ADC_ConfigChannel>
 8002c7c:	1e03      	subs	r3, r0, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002c80:	f000 fb11 	bl	80032a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b004      	add	sp, #16
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000790 	.word	0x20000790
 8002c90:	40012400 	.word	0x40012400
 8002c94:	20000100 	.word	0x20000100

08002c98 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b08b      	sub	sp, #44	; 0x2c
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	2414      	movs	r4, #20
 8002ca2:	193b      	adds	r3, r7, r4
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	2314      	movs	r3, #20
 8002ca8:	001a      	movs	r2, r3
 8002caa:	2100      	movs	r1, #0
 8002cac:	f006 fae2 	bl	8009274 <memset>
  if(adcHandle->Instance==ADC1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_ADC_MspInit+0x7c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d128      	bne.n	8002d0c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002cba:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <HAL_ADC_MspInit+0x80>)
 8002cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cbe:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <HAL_ADC_MspInit+0x80>)
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	0349      	lsls	r1, r1, #13
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <HAL_ADC_MspInit+0x80>)
 8002cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	035b      	lsls	r3, r3, #13
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <HAL_ADC_MspInit+0x80>)
 8002cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cda:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <HAL_ADC_MspInit+0x80>)
 8002cdc:	2102      	movs	r1, #2
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_ADC_MspInit+0x80>)
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cee:	193b      	adds	r3, r7, r4
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cf4:	193b      	adds	r3, r7, r4
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	193b      	adds	r3, r7, r4
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d00:	193b      	adds	r3, r7, r4
 8002d02:	4a06      	ldr	r2, [pc, #24]	; (8002d1c <HAL_ADC_MspInit+0x84>)
 8002d04:	0019      	movs	r1, r3
 8002d06:	0010      	movs	r0, r2
 8002d08:	f002 fce8 	bl	80056dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b00b      	add	sp, #44	; 0x2c
 8002d12:	bd90      	pop	{r4, r7, pc}
 8002d14:	40012400 	.word	0x40012400
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	50000400 	.word	0x50000400

08002d20 <Crc>:
#include "crc.h"
#include "main.h"
int RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
int k              = 0;
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
   PreviuseCRC ^= data[0];
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	001a      	movs	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4053      	eors	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8002d38:	2301      	movs	r3, #1
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e02c      	b.n	8002d98 <Crc+0x78>
   {
      uint32_t temp = data[i];
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	18d3      	adds	r3, r2, r3
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	613b      	str	r3, [r7, #16]
      if(temp == 0x00000000 )
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d110      	bne.n	8002d70 <Crc+0x50>
      {
         temp = RandomNumber[k % (sizeof(RandomNumber)-1)];
 8002d4e:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <Crc+0x90>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	212f      	movs	r1, #47	; 0x2f
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7fd fa59 	bl	800020c <__aeabi_uidivmod>
 8002d5a:	000b      	movs	r3, r1
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <Crc+0x94>)
 8002d60:	0092      	lsls	r2, r2, #2
 8002d62:	58d3      	ldr	r3, [r2, r3]
 8002d64:	613b      	str	r3, [r7, #16]
         k++;
 8002d66:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <Crc+0x90>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <Crc+0x90>)
 8002d6e:	601a      	str	r2, [r3, #0]
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4353      	muls	r3, r2
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4053      	eors	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
      if(PreviuseCRC & 0x80000000)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	da03      	bge.n	8002d8c <Crc+0x6c>
      {
         PreviuseCRC ^= 0xABC245C2;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <Crc+0x98>)
 8002d88:	4053      	eors	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
      }
      PreviuseCRC <<= 1;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	3301      	adds	r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d3ce      	bcc.n	8002d3e <Crc+0x1e>
   }
   k = 0;
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <Crc+0x90>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
   return PreviuseCRC;
 8002da6:	68fb      	ldr	r3, [r7, #12]
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b006      	add	sp, #24
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	200007f4 	.word	0x200007f4
 8002db4:	20000094 	.word	0x20000094
 8002db8:	abc245c2 	.word	0xabc245c2

08002dbc <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
   uint8_t temp = 1;
 8002dc8:	2317      	movs	r3, #23
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < DataLength; i++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	e03f      	b.n	8002e56 <RepareMessage+0x9a>
   {
      for(int j = 0; j < 8; j++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	e036      	b.n	8002e4a <RepareMessage+0x8e>
      {
         data[i] ^= (temp << j);
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	18d3      	adds	r3, r2, r3
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	b25a      	sxtb	r2, r3
 8002de6:	2317      	movs	r3, #23
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	7819      	ldrb	r1, [r3, #0]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	4099      	lsls	r1, r3
 8002df0:	000b      	movs	r3, r1
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	4053      	eors	r3, r2
 8002df6:	b259      	sxtb	r1, r3
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	18d3      	adds	r3, r2, r3
 8002dfe:	b2ca      	uxtb	r2, r1
 8002e00:	701a      	strb	r2, [r3, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	1f19      	subs	r1, r3, #4
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	2301      	movs	r3, #1
 8002e0a:	425b      	negs	r3, r3
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f7ff ff87 	bl	8002d20 <Crc>
 8002e12:	0002      	movs	r2, r0
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d101      	bne.n	8002e1e <RepareMessage+0x62>
         {
            return CRC_OK;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e020      	b.n	8002e60 <RepareMessage+0xa4>
         }
         else
         {
            data[i] ^= (temp << j);
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	18d3      	adds	r3, r2, r3
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b25a      	sxtb	r2, r3
 8002e28:	2317      	movs	r3, #23
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	7819      	ldrb	r1, [r3, #0]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	4099      	lsls	r1, r3
 8002e32:	000b      	movs	r3, r1
 8002e34:	b25b      	sxtb	r3, r3
 8002e36:	4053      	eors	r3, r2
 8002e38:	b259      	sxtb	r1, r3
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	18d3      	adds	r3, r2, r3
 8002e40:	b2ca      	uxtb	r2, r1
 8002e42:	701a      	strb	r2, [r3, #0]
      for(int j = 0; j < 8; j++)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	3301      	adds	r3, #1
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b07      	cmp	r3, #7
 8002e4e:	ddc5      	ble.n	8002ddc <RepareMessage+0x20>
   for(int i = 0; i < DataLength; i++)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	3301      	adds	r3, #1
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d8bb      	bhi.n	8002dd6 <RepareMessage+0x1a>
         }
      }
   }
   return CRC_ERROR;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b008      	add	sp, #32
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <MX_DMA_Init+0x28>)
 8002e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <MX_DMA_Init+0x28>)
 8002e74:	2101      	movs	r1, #1
 8002e76:	430a      	orrs	r2, r1
 8002e78:	639a      	str	r2, [r3, #56]	; 0x38
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <MX_DMA_Init+0x28>)
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4013      	ands	r3, r2
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]

}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b002      	add	sp, #8
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	40021000 	.word	0x40021000

08002e94 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b089      	sub	sp, #36	; 0x24
 8002e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9a:	240c      	movs	r4, #12
 8002e9c:	193b      	adds	r3, r7, r4
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	2314      	movs	r3, #20
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	f006 f9e5 	bl	8009274 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eaa:	4b53      	ldr	r3, [pc, #332]	; (8002ff8 <MX_GPIO_Init+0x164>)
 8002eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eae:	4b52      	ldr	r3, [pc, #328]	; (8002ff8 <MX_GPIO_Init+0x164>)
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002eb6:	4b50      	ldr	r3, [pc, #320]	; (8002ff8 <MX_GPIO_Init+0x164>)
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eba:	2202      	movs	r2, #2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec2:	4b4d      	ldr	r3, [pc, #308]	; (8002ff8 <MX_GPIO_Init+0x164>)
 8002ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec6:	4b4c      	ldr	r3, [pc, #304]	; (8002ff8 <MX_GPIO_Init+0x164>)
 8002ec8:	2101      	movs	r1, #1
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ece:	4b4a      	ldr	r3, [pc, #296]	; (8002ff8 <MX_GPIO_Init+0x164>)
 8002ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	607b      	str	r3, [r7, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAX485_SEL_Pin|LED3_Pin|LED1_Pin|LED2_Pin
 8002eda:	4948      	ldr	r1, [pc, #288]	; (8002ffc <MX_GPIO_Init+0x168>)
 8002edc:	23a0      	movs	r3, #160	; 0xa0
 8002ede:	05db      	lsls	r3, r3, #23
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f002 fd5e 	bl	80059a4 <HAL_GPIO_WritePin>
                          |DS18B20_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|PMS_SET_Pin, GPIO_PIN_RESET);
 8002ee8:	4b45      	ldr	r3, [pc, #276]	; (8003000 <MX_GPIO_Init+0x16c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	2112      	movs	r1, #18
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f002 fd58 	bl	80059a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, GPIO_PIN_SET);
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	0119      	lsls	r1, r3, #4
 8002ef8:	23a0      	movs	r3, #160	; 0xa0
 8002efa:	05db      	lsls	r3, r3, #23
 8002efc:	2201      	movs	r2, #1
 8002efe:	0018      	movs	r0, r3
 8002f00:	f002 fd50 	bl	80059a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PMS_RST_GPIO_Port, PMS_RST_Pin, GPIO_PIN_SET);
 8002f04:	4b3e      	ldr	r3, [pc, #248]	; (8003000 <MX_GPIO_Init+0x16c>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	2108      	movs	r1, #8
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f002 fd4a 	bl	80059a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COVERTER_PG_Pin;
 8002f10:	193b      	adds	r3, r7, r4
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	0092      	lsls	r2, r2, #2
 8002f16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	193b      	adds	r3, r7, r4
 8002f20:	2200      	movs	r2, #0
 8002f22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(COVERTER_PG_GPIO_Port, &GPIO_InitStruct);
 8002f24:	193b      	adds	r3, r7, r4
 8002f26:	4a36      	ldr	r2, [pc, #216]	; (8003000 <MX_GPIO_Init+0x16c>)
 8002f28:	0019      	movs	r1, r3
 8002f2a:	0010      	movs	r0, r2
 8002f2c:	f002 fbd6 	bl	80056dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BATTERY_CHRG_Pin|BATTERY_STDBY_Pin;
 8002f30:	193b      	adds	r3, r7, r4
 8002f32:	2203      	movs	r2, #3
 8002f34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f36:	193b      	adds	r3, r7, r4
 8002f38:	2200      	movs	r2, #0
 8002f3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	193b      	adds	r3, r7, r4
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f42:	193a      	adds	r2, r7, r4
 8002f44:	23a0      	movs	r3, #160	; 0xa0
 8002f46:	05db      	lsls	r3, r3, #23
 8002f48:	0011      	movs	r1, r2
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f002 fbc6 	bl	80056dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = MAX485_SEL_Pin|LED3_Pin|LED1_Pin|LED2_Pin
 8002f50:	0021      	movs	r1, r4
 8002f52:	187b      	adds	r3, r7, r1
 8002f54:	228f      	movs	r2, #143	; 0x8f
 8002f56:	0112      	lsls	r2, r2, #4
 8002f58:	601a      	str	r2, [r3, #0]
                          |HC12_SET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f5a:	000c      	movs	r4, r1
 8002f5c:	193b      	adds	r3, r7, r4
 8002f5e:	2201      	movs	r2, #1
 8002f60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	193b      	adds	r3, r7, r4
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f68:	193b      	adds	r3, r7, r4
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6e:	193a      	adds	r2, r7, r4
 8002f70:	23a0      	movs	r3, #160	; 0xa0
 8002f72:	05db      	lsls	r3, r3, #23
 8002f74:	0011      	movs	r1, r2
 8002f76:	0018      	movs	r0, r3
 8002f78:	f002 fbb0 	bl	80056dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|PMS_RST_Pin|PMS_SET_Pin;
 8002f7c:	193b      	adds	r3, r7, r4
 8002f7e:	221a      	movs	r2, #26
 8002f80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f82:	193b      	adds	r3, r7, r4
 8002f84:	2201      	movs	r2, #1
 8002f86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	193b      	adds	r3, r7, r4
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8e:	193b      	adds	r3, r7, r4
 8002f90:	2200      	movs	r2, #0
 8002f92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f94:	193b      	adds	r3, r7, r4
 8002f96:	4a1a      	ldr	r2, [pc, #104]	; (8003000 <MX_GPIO_Init+0x16c>)
 8002f98:	0019      	movs	r1, r3
 8002f9a:	0010      	movs	r0, r2
 8002f9c:	f002 fb9e 	bl	80056dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8002fa0:	193b      	adds	r3, r7, r4
 8002fa2:	2280      	movs	r2, #128	; 0x80
 8002fa4:	0052      	lsls	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fa8:	193b      	adds	r3, r7, r4
 8002faa:	2284      	movs	r2, #132	; 0x84
 8002fac:	0392      	lsls	r2, r2, #14
 8002fae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	193b      	adds	r3, r7, r4
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8002fb6:	193a      	adds	r2, r7, r4
 8002fb8:	23a0      	movs	r3, #160	; 0xa0
 8002fba:	05db      	lsls	r3, r3, #23
 8002fbc:	0011      	movs	r1, r2
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f002 fb8c 	bl	80056dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8002fc4:	0021      	movs	r1, r4
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	2280      	movs	r2, #128	; 0x80
 8002fca:	0152      	lsls	r2, r2, #5
 8002fcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fda:	187b      	adds	r3, r7, r1
 8002fdc:	2203      	movs	r2, #3
 8002fde:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8002fe0:	187a      	adds	r2, r7, r1
 8002fe2:	23a0      	movs	r3, #160	; 0xa0
 8002fe4:	05db      	lsls	r3, r3, #23
 8002fe6:	0011      	movs	r1, r2
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f002 fb77 	bl	80056dc <HAL_GPIO_Init>

}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b009      	add	sp, #36	; 0x24
 8002ff4:	bd90      	pop	{r4, r7, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	000010f0 	.word	0x000010f0
 8003000:	50000400 	.word	0x50000400

08003004 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <MX_I2C1_Init+0x74>)
 800300a:	4a1c      	ldr	r2, [pc, #112]	; (800307c <MX_I2C1_Init+0x78>)
 800300c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800300e:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <MX_I2C1_Init+0x74>)
 8003010:	4a1b      	ldr	r2, [pc, #108]	; (8003080 <MX_I2C1_Init+0x7c>)
 8003012:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003014:	4b18      	ldr	r3, [pc, #96]	; (8003078 <MX_I2C1_Init+0x74>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800301a:	4b17      	ldr	r3, [pc, #92]	; (8003078 <MX_I2C1_Init+0x74>)
 800301c:	2201      	movs	r2, #1
 800301e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003020:	4b15      	ldr	r3, [pc, #84]	; (8003078 <MX_I2C1_Init+0x74>)
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003026:	4b14      	ldr	r3, [pc, #80]	; (8003078 <MX_I2C1_Init+0x74>)
 8003028:	2200      	movs	r2, #0
 800302a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <MX_I2C1_Init+0x74>)
 800302e:	2200      	movs	r2, #0
 8003030:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003032:	4b11      	ldr	r3, [pc, #68]	; (8003078 <MX_I2C1_Init+0x74>)
 8003034:	2200      	movs	r2, #0
 8003036:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <MX_I2C1_Init+0x74>)
 800303a:	2200      	movs	r2, #0
 800303c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800303e:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <MX_I2C1_Init+0x74>)
 8003040:	0018      	movs	r0, r3
 8003042:	f002 fd25 	bl	8005a90 <HAL_I2C_Init>
 8003046:	1e03      	subs	r3, r0, #0
 8003048:	d001      	beq.n	800304e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800304a:	f000 f92c 	bl	80032a6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <MX_I2C1_Init+0x74>)
 8003050:	2100      	movs	r1, #0
 8003052:	0018      	movs	r0, r3
 8003054:	f003 fa52 	bl	80064fc <HAL_I2CEx_ConfigAnalogFilter>
 8003058:	1e03      	subs	r3, r0, #0
 800305a:	d001      	beq.n	8003060 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800305c:	f000 f923 	bl	80032a6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <MX_I2C1_Init+0x74>)
 8003062:	2100      	movs	r1, #0
 8003064:	0018      	movs	r0, r3
 8003066:	f003 fa95 	bl	8006594 <HAL_I2CEx_ConfigDigitalFilter>
 800306a:	1e03      	subs	r3, r0, #0
 800306c:	d001      	beq.n	8003072 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800306e:	f000 f91a 	bl	80032a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	200007f8 	.word	0x200007f8
 800307c:	40005400 	.word	0x40005400
 8003080:	00303d5b 	.word	0x00303d5b

08003084 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b095      	sub	sp, #84	; 0x54
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308c:	233c      	movs	r3, #60	; 0x3c
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	0018      	movs	r0, r3
 8003092:	2314      	movs	r3, #20
 8003094:	001a      	movs	r2, r3
 8003096:	2100      	movs	r1, #0
 8003098:	f006 f8ec 	bl	8009274 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800309c:	2410      	movs	r4, #16
 800309e:	193b      	adds	r3, r7, r4
 80030a0:	0018      	movs	r0, r3
 80030a2:	232c      	movs	r3, #44	; 0x2c
 80030a4:	001a      	movs	r2, r3
 80030a6:	2100      	movs	r1, #0
 80030a8:	f006 f8e4 	bl	8009274 <memset>
  if(i2cHandle->Instance==I2C1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <HAL_I2C_MspInit+0xb8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d13d      	bne.n	8003132 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030b6:	193b      	adds	r3, r7, r4
 80030b8:	2220      	movs	r2, #32
 80030ba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80030bc:	193b      	adds	r3, r7, r4
 80030be:	2200      	movs	r2, #0
 80030c0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030c2:	193b      	adds	r3, r7, r4
 80030c4:	0018      	movs	r0, r3
 80030c6:	f003 ffc1 	bl	800704c <HAL_RCCEx_PeriphCLKConfig>
 80030ca:	1e03      	subs	r3, r0, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80030ce:	f000 f8ea 	bl	80032a6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d2:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <HAL_I2C_MspInit+0xbc>)
 80030d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <HAL_I2C_MspInit+0xbc>)
 80030d8:	2102      	movs	r1, #2
 80030da:	430a      	orrs	r2, r1
 80030dc:	635a      	str	r2, [r3, #52]	; 0x34
 80030de:	4b18      	ldr	r3, [pc, #96]	; (8003140 <HAL_I2C_MspInit+0xbc>)
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	2202      	movs	r2, #2
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030ea:	213c      	movs	r1, #60	; 0x3c
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	22c0      	movs	r2, #192	; 0xc0
 80030f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030f2:	187b      	adds	r3, r7, r1
 80030f4:	2212      	movs	r2, #18
 80030f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030fe:	187b      	adds	r3, r7, r1
 8003100:	2203      	movs	r2, #3
 8003102:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003104:	187b      	adds	r3, r7, r1
 8003106:	2206      	movs	r2, #6
 8003108:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310a:	187b      	adds	r3, r7, r1
 800310c:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <HAL_I2C_MspInit+0xc0>)
 800310e:	0019      	movs	r1, r3
 8003110:	0010      	movs	r0, r2
 8003112:	f002 fae3 	bl	80056dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_I2C_MspInit+0xbc>)
 8003118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_I2C_MspInit+0xbc>)
 800311c:	2180      	movs	r1, #128	; 0x80
 800311e:	0389      	lsls	r1, r1, #14
 8003120:	430a      	orrs	r2, r1
 8003122:	63da      	str	r2, [r3, #60]	; 0x3c
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_I2C_MspInit+0xbc>)
 8003126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	039b      	lsls	r3, r3, #14
 800312c:	4013      	ands	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b015      	add	sp, #84	; 0x54
 8003138:	bd90      	pop	{r4, r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	40005400 	.word	0x40005400
 8003140:	40021000 	.word	0x40021000
 8003144:	50000400 	.word	0x50000400

08003148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800314c:	f000 ffc4 	bl	80040d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003150:	f000 f815 	bl	800317e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003154:	f7ff fe9e 	bl	8002e94 <MX_GPIO_Init>
  MX_DMA_Init();
 8003158:	f7ff fe86 	bl	8002e68 <MX_DMA_Init>
  MX_ADC1_Init();
 800315c:	f7ff fd30 	bl	8002bc0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003160:	f7ff ff50 	bl	8003004 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8003164:	f000 fd3e 	bl	8003be4 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8003168:	f000 fd92 	bl	8003c90 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800316c:	f000 fcca 	bl	8003b04 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003170:	f000 fddc 	bl	8003d2c <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003174:	f000 f862 	bl	800323c <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while(1)
   {
      SM_Handle();
 8003178:	f7ff f956 	bl	8002428 <SM_Handle>
 800317c:	e7fc      	b.n	8003178 <main+0x30>

0800317e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800317e:	b590      	push	{r4, r7, lr}
 8003180:	b093      	sub	sp, #76	; 0x4c
 8003182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003184:	2410      	movs	r4, #16
 8003186:	193b      	adds	r3, r7, r4
 8003188:	0018      	movs	r0, r3
 800318a:	2338      	movs	r3, #56	; 0x38
 800318c:	001a      	movs	r2, r3
 800318e:	2100      	movs	r1, #0
 8003190:	f006 f870 	bl	8009274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003194:	003b      	movs	r3, r7
 8003196:	0018      	movs	r0, r3
 8003198:	2310      	movs	r3, #16
 800319a:	001a      	movs	r2, r3
 800319c:	2100      	movs	r1, #0
 800319e:	f006 f869 	bl	8009274 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	0018      	movs	r0, r3
 80031a8:	f003 fa40 	bl	800662c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031ac:	193b      	adds	r3, r7, r4
 80031ae:	2202      	movs	r2, #2
 80031b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031b2:	193b      	adds	r3, r7, r4
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	0052      	lsls	r2, r2, #1
 80031b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80031ba:	0021      	movs	r1, r4
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031c2:	187b      	adds	r3, r7, r1
 80031c4:	2240      	movs	r2, #64	; 0x40
 80031c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031c8:	187b      	adds	r3, r7, r1
 80031ca:	2202      	movs	r2, #2
 80031cc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	2202      	movs	r2, #2
 80031d2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80031d4:	187b      	adds	r3, r7, r1
 80031d6:	2200      	movs	r2, #0
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80031da:	187b      	adds	r3, r7, r1
 80031dc:	2208      	movs	r2, #8
 80031de:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031e0:	187b      	adds	r3, r7, r1
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	0292      	lsls	r2, r2, #10
 80031e6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	2280      	movs	r2, #128	; 0x80
 80031ec:	0492      	lsls	r2, r2, #18
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	2280      	movs	r2, #128	; 0x80
 80031f4:	0592      	lsls	r2, r2, #22
 80031f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	0018      	movs	r0, r3
 80031fc:	f003 fa62 	bl	80066c4 <HAL_RCC_OscConfig>
 8003200:	1e03      	subs	r3, r0, #0
 8003202:	d001      	beq.n	8003208 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003204:	f000 f84f 	bl	80032a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003208:	003b      	movs	r3, r7
 800320a:	2207      	movs	r2, #7
 800320c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800320e:	003b      	movs	r3, r7
 8003210:	2202      	movs	r2, #2
 8003212:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8003214:	003b      	movs	r3, r7
 8003216:	2290      	movs	r2, #144	; 0x90
 8003218:	0112      	lsls	r2, r2, #4
 800321a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800321c:	003b      	movs	r3, r7
 800321e:	2200      	movs	r2, #0
 8003220:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003222:	003b      	movs	r3, r7
 8003224:	2100      	movs	r1, #0
 8003226:	0018      	movs	r0, r3
 8003228:	f003 fd66 	bl	8006cf8 <HAL_RCC_ClockConfig>
 800322c:	1e03      	subs	r3, r0, #0
 800322e:	d001      	beq.n	8003234 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003230:	f000 f839 	bl	80032a6 <Error_Handler>
  }
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b013      	add	sp, #76	; 0x4c
 800323a:	bd90      	pop	{r4, r7, pc}

0800323c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003240:	2200      	movs	r2, #0
 8003242:	2100      	movs	r1, #0
 8003244:	2009      	movs	r0, #9
 8003246:	f001 fef5 	bl	8005034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800324a:	2009      	movs	r0, #9
 800324c:	f001 ff07 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003250:	2200      	movs	r2, #0
 8003252:	2100      	movs	r1, #0
 8003254:	201b      	movs	r0, #27
 8003256:	f001 feed 	bl	8005034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800325a:	201b      	movs	r0, #27
 800325c:	f001 feff 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* LPUART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003260:	2200      	movs	r2, #0
 8003262:	2100      	movs	r1, #0
 8003264:	201d      	movs	r0, #29
 8003266:	f001 fee5 	bl	8005034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800326a:	201d      	movs	r0, #29
 800326c:	f001 fef7 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003270:	2200      	movs	r2, #0
 8003272:	2100      	movs	r1, #0
 8003274:	200a      	movs	r0, #10
 8003276:	f001 fedd 	bl	8005034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800327a:	200a      	movs	r0, #10
 800327c:	f001 feef 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003280:	2200      	movs	r2, #0
 8003282:	2100      	movs	r1, #0
 8003284:	2007      	movs	r0, #7
 8003286:	f001 fed5 	bl	8005034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800328a:	2007      	movs	r0, #7
 800328c:	f001 fee7 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003290:	2200      	movs	r2, #0
 8003292:	2100      	movs	r1, #0
 8003294:	201c      	movs	r0, #28
 8003296:	f001 fecd 	bl	8005034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800329a:	201c      	movs	r0, #28
 800329c:	f001 fedf 	bl	800505e <HAL_NVIC_EnableIRQ>
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80032aa:	b672      	cpsid	i
}
 80032ac:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 80032ae:	e7fe      	b.n	80032ae <Error_Handler+0x8>

080032b0 <RFP_Handle>:
        { RFP_WaitForResponseFunction }, { RFP_ParseResponseFunction } };
RFPCommandFunctions_TypeDef RfpCommandFunction[RFP_COMMAND_CNT];
RFPDataFunctions_TypeDef RfpDataFunctions;
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
void RFP_Handle(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
   RFP_ChangeState();
 80032b4:	f000 f856 	bl	8003364 <RFP_ChangeState>
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <RFP_Handle+0x30>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	001a      	movs	r2, r3
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <RFP_Handle+0x34>)
 80032c2:	0092      	lsls	r2, r2, #2
 80032c4:	58d3      	ldr	r3, [r2, r3]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <RFP_Handle+0x2a>
   {
      RfpFunction[Rfp->State].RfpFunction();
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <RFP_Handle+0x30>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	001a      	movs	r2, r3
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <RFP_Handle+0x34>)
 80032d4:	0092      	lsls	r2, r2, #2
 80032d6:	58d3      	ldr	r3, [r2, r3]
 80032d8:	4798      	blx	r3
   }
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000914 	.word	0x20000914
 80032e4:	200000e8 	.word	0x200000e8

080032e8 <RFP_Init>:
void RFP_Init(RFP_TypeDef *RadioProtocol, RFPDeviceID_TypeDef Device)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	000a      	movs	r2, r1
 80032f2:	1cfb      	adds	r3, r7, #3
 80032f4:	701a      	strb	r2, [r3, #0]
   Rfp             = RadioProtocol;
 80032f6:	4b17      	ldr	r3, [pc, #92]	; (8003354 <RFP_Init+0x6c>)
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	601a      	str	r2, [r3, #0]
   Rfp->Initialize = RFP_INITIALIZE;
 80032fc:	4b15      	ldr	r3, [pc, #84]	; (8003354 <RFP_Init+0x6c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2201      	movs	r2, #1
 8003302:	70da      	strb	r2, [r3, #3]
   Rfp->DeviceType = Device;
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <RFP_Init+0x6c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	1cfa      	adds	r2, r7, #3
 800330a:	7812      	ldrb	r2, [r2, #0]
 800330c:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	e007      	b.n	8003324 <RFP_Init+0x3c>
   {
      RfpCommandFunction[i].RfpCommandFunction = NULL;
 8003314:	4b10      	ldr	r3, [pc, #64]	; (8003358 <RFP_Init+0x70>)
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	0092      	lsls	r2, r2, #2
 800331a:	2100      	movs	r1, #0
 800331c:	50d1      	str	r1, [r2, r3]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	3301      	adds	r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b02      	cmp	r3, #2
 8003328:	ddf4      	ble.n	8003314 <RFP_Init+0x2c>
   }
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	e007      	b.n	8003340 <RFP_Init+0x58>
   {
      RfpMessageFunction[i].RfpMessageFunction = NULL;
 8003330:	4b0a      	ldr	r3, [pc, #40]	; (800335c <RFP_Init+0x74>)
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	0092      	lsls	r2, r2, #2
 8003336:	2100      	movs	r1, #0
 8003338:	50d1      	str	r1, [r2, r3]
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	3301      	adds	r3, #1
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b03      	cmp	r3, #3
 8003344:	ddf4      	ble.n	8003330 <RFP_Init+0x48>
   }
   RfpDataFunctions.RfpDataFunction = NULL;
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <RFP_Init+0x78>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b004      	add	sp, #16
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000914 	.word	0x20000914
 8003358:	20000918 	.word	0x20000918
 800335c:	20000928 	.word	0x20000928
 8003360:	20000924 	.word	0x20000924

08003364 <RFP_ChangeState>:
static void RFP_ChangeState(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 800336a:	2300      	movs	r3, #0
 800336c:	607b      	str	r3, [r7, #4]
 800336e:	e02a      	b.n	80033c6 <RFP_ChangeState+0x62>
   {
      if(Rfp->State == RfpTransitionTable[i].Source && Rfp->NewEvent == RfpTransitionTable[i].Event)
 8003370:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <RFP_ChangeState+0x78>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	7819      	ldrb	r1, [r3, #0]
 8003376:	481a      	ldr	r0, [pc, #104]	; (80033e0 <RFP_ChangeState+0x7c>)
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	0013      	movs	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	189b      	adds	r3, r3, r2
 8003380:	5c1b      	ldrb	r3, [r3, r0]
 8003382:	4299      	cmp	r1, r3
 8003384:	d11c      	bne.n	80033c0 <RFP_ChangeState+0x5c>
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <RFP_ChangeState+0x78>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	7859      	ldrb	r1, [r3, #1]
 800338c:	4814      	ldr	r0, [pc, #80]	; (80033e0 <RFP_ChangeState+0x7c>)
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	0013      	movs	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	189b      	adds	r3, r3, r2
 8003396:	18c3      	adds	r3, r0, r3
 8003398:	3302      	adds	r3, #2
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4299      	cmp	r1, r3
 800339e:	d10f      	bne.n	80033c0 <RFP_ChangeState+0x5c>
      {
         Rfp->State    = RfpTransitionTable[i].Destination;
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <RFP_ChangeState+0x78>)
 80033a2:	6819      	ldr	r1, [r3, #0]
 80033a4:	480e      	ldr	r0, [pc, #56]	; (80033e0 <RFP_ChangeState+0x7c>)
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	0013      	movs	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	189b      	adds	r3, r3, r2
 80033ae:	18c3      	adds	r3, r0, r3
 80033b0:	3301      	adds	r3, #1
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	700b      	strb	r3, [r1, #0]
         Rfp->NewEvent = RFP_EVENT_NOTHING;
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <RFP_ChangeState+0x78>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	705a      	strb	r2, [r3, #1]
         return;
 80033be:	e009      	b.n	80033d4 <RFP_ChangeState+0x70>
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3301      	adds	r3, #1
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b0b      	cmp	r3, #11
 80033ca:	d9d1      	bls.n	8003370 <RFP_ChangeState+0xc>
      }
   }
   Rfp->NewEvent = RFP_EVENT_NOTHING;
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <RFP_ChangeState+0x78>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2200      	movs	r2, #0
 80033d2:	705a      	strb	r2, [r3, #1]
}
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b002      	add	sp, #8
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	20000914 	.word	0x20000914
 80033e0:	200000c4 	.word	0x200000c4

080033e4 <RFP_RegisterCommandFunction>:
void RFP_RegisterCommandFunction(RFPCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	0002      	movs	r2, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	1dfb      	adds	r3, r7, #7
 80033f0:	701a      	strb	r2, [r3, #0]
   RfpCommandFunction[Command - 1].RfpCommandFunction = Callback;
 80033f2:	1dfb      	adds	r3, r7, #7
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	1e5a      	subs	r2, r3, #1
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <RFP_RegisterCommandFunction+0x24>)
 80033fa:	0092      	lsls	r2, r2, #2
 80033fc:	6839      	ldr	r1, [r7, #0]
 80033fe:	50d1      	str	r1, [r2, r3]
}
 8003400:	46c0      	nop			; (mov r8, r8)
 8003402:	46bd      	mov	sp, r7
 8003404:	b002      	add	sp, #8
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20000918 	.word	0x20000918

0800340c <RFP_InterruptTask>:
void RFP_RegisterMessageFunction(RFPMessage_TypeDef Message, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpMessageFunction[Message - 1].RfpMessageFunction = Callback;
}
void RFP_InterruptTask(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
   Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_SET;
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <RFP_InterruptTask+0x14>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2201      	movs	r2, #1
 8003416:	711a      	strb	r2, [r3, #4]
}
 8003418:	46c0      	nop			; (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	20000914 	.word	0x20000914

08003424 <RFP_SendData>:
void RFP_SendData(RFPDeviceID_TypeDef Destination, RFPMessageType_TypeDef Type, uint8_t *Data, uint32_t Length)
{
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60ba      	str	r2, [r7, #8]
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	240f      	movs	r4, #15
 8003430:	193b      	adds	r3, r7, r4
 8003432:	1c02      	adds	r2, r0, #0
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	200e      	movs	r0, #14
 8003438:	183b      	adds	r3, r7, r0
 800343a:	1c0a      	adds	r2, r1, #0
 800343c:	701a      	strb	r2, [r3, #0]
   RfpDataTransmit[0] = Destination;
 800343e:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <RFP_SendData+0xbc>)
 8003440:	193a      	adds	r2, r7, r4
 8003442:	7812      	ldrb	r2, [r2, #0]
 8003444:	701a      	strb	r2, [r3, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 8003446:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <RFP_SendData+0xc0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	795a      	ldrb	r2, [r3, #5]
 800344c:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <RFP_SendData+0xbc>)
 800344e:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = Type;
 8003450:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <RFP_SendData+0xbc>)
 8003452:	183a      	adds	r2, r7, r0
 8003454:	7812      	ldrb	r2, [r2, #0]
 8003456:	709a      	strb	r2, [r3, #2]
   for(int i = 0; i < Length; i++)
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	e00a      	b.n	8003474 <RFP_SendData+0x50>
   {
      RfpDataTransmit[i + 3] = Data[i];
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	18d2      	adds	r2, r2, r3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	3303      	adds	r3, #3
 8003468:	7811      	ldrb	r1, [r2, #0]
 800346a:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <RFP_SendData+0xbc>)
 800346c:	54d1      	strb	r1, [r2, r3]
   for(int i = 0; i < Length; i++)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	3301      	adds	r3, #1
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	d8f0      	bhi.n	800345e <RFP_SendData+0x3a>
   }
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, RfpDataTransmit);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1cd9      	adds	r1, r3, #3
 8003480:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <RFP_SendData+0xbc>)
 8003482:	2301      	movs	r3, #1
 8003484:	425b      	negs	r3, r3
 8003486:	0018      	movs	r0, r3
 8003488:	f7ff fc4a 	bl	8002d20 <Crc>
 800348c:	0003      	movs	r3, r0
 800348e:	613b      	str	r3, [r7, #16]
   RfpDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	0e1a      	lsrs	r2, r3, #24
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3303      	adds	r3, #3
 8003498:	b2d1      	uxtb	r1, r2
 800349a:	4a11      	ldr	r2, [pc, #68]	; (80034e0 <RFP_SendData+0xbc>)
 800349c:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	0c1a      	lsrs	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3304      	adds	r3, #4
 80034a6:	b2d1      	uxtb	r1, r2
 80034a8:	4a0d      	ldr	r2, [pc, #52]	; (80034e0 <RFP_SendData+0xbc>)
 80034aa:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	0a1a      	lsrs	r2, r3, #8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3305      	adds	r3, #5
 80034b4:	b2d1      	uxtb	r1, r2
 80034b6:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <RFP_SendData+0xbc>)
 80034b8:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 3] = (crc & 0xff);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3306      	adds	r3, #6
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	b2d1      	uxtb	r1, r2
 80034c2:	4a07      	ldr	r2, [pc, #28]	; (80034e0 <RFP_SendData+0xbc>)
 80034c4:	54d1      	strb	r1, [r2, r3]
   Rfp->SendFlag                   = RFP_SEND_FLAG_SET;
 80034c6:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <RFP_SendData+0xc0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2201      	movs	r2, #1
 80034cc:	745a      	strb	r2, [r3, #17]
   Rfp->DataSizeTransmit           = 3 + Length + 4;
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <RFP_SendData+0xc0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	3207      	adds	r2, #7
 80034d6:	60da      	str	r2, [r3, #12]
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	b007      	add	sp, #28
 80034de:	bd90      	pop	{r4, r7, pc}
 80034e0:	200008b0 	.word	0x200008b0
 80034e4:	20000914 	.word	0x20000914

080034e8 <RFP_SendResponseFunction>:
static void RFP_SendResponseFunction(RFPMessageType_TypeDef Response)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	0002      	movs	r2, r0
 80034f0:	1dfb      	adds	r3, r7, #7
 80034f2:	701a      	strb	r2, [r3, #0]
   HAL_Delay(200);
 80034f4:	20c8      	movs	r0, #200	; 0xc8
 80034f6:	f000 fe75 	bl	80041e4 <HAL_Delay>
   RfpDataTransmit[0] = Rfp->SourceMessage;
 80034fa:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <RFP_SendResponseFunction+0x80>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	7c1a      	ldrb	r2, [r3, #16]
 8003500:	4b1a      	ldr	r3, [pc, #104]	; (800356c <RFP_SendResponseFunction+0x84>)
 8003502:	701a      	strb	r2, [r3, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <RFP_SendResponseFunction+0x80>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	795a      	ldrb	r2, [r3, #5]
 800350a:	4b18      	ldr	r3, [pc, #96]	; (800356c <RFP_SendResponseFunction+0x84>)
 800350c:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = RFP_MESSAGE;
 800350e:	4b17      	ldr	r3, [pc, #92]	; (800356c <RFP_SendResponseFunction+0x84>)
 8003510:	2203      	movs	r2, #3
 8003512:	709a      	strb	r2, [r3, #2]
   RfpDataTransmit[3] = Response;
 8003514:	4b15      	ldr	r3, [pc, #84]	; (800356c <RFP_SendResponseFunction+0x84>)
 8003516:	1dfa      	adds	r2, r7, #7
 8003518:	7812      	ldrb	r2, [r2, #0]
 800351a:	70da      	strb	r2, [r3, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, RfpDataTransmit);
 800351c:	4a13      	ldr	r2, [pc, #76]	; (800356c <RFP_SendResponseFunction+0x84>)
 800351e:	2301      	movs	r3, #1
 8003520:	425b      	negs	r3, r3
 8003522:	2104      	movs	r1, #4
 8003524:	0018      	movs	r0, r3
 8003526:	f7ff fbfb 	bl	8002d20 <Crc>
 800352a:	0003      	movs	r3, r0
 800352c:	60fb      	str	r3, [r7, #12]
   RfpDataTransmit[4] = ((crc >> 24) & 0xff);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	0e1b      	lsrs	r3, r3, #24
 8003532:	b2da      	uxtb	r2, r3
 8003534:	4b0d      	ldr	r3, [pc, #52]	; (800356c <RFP_SendResponseFunction+0x84>)
 8003536:	711a      	strb	r2, [r3, #4]
   RfpDataTransmit[5] = ((crc >> 16) & 0xff);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <RFP_SendResponseFunction+0x84>)
 8003540:	715a      	strb	r2, [r3, #5]
   RfpDataTransmit[6] = ((crc >> 8) & 0xff);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	b2da      	uxtb	r2, r3
 8003548:	4b08      	ldr	r3, [pc, #32]	; (800356c <RFP_SendResponseFunction+0x84>)
 800354a:	719a      	strb	r2, [r3, #6]
   RfpDataTransmit[7] = (crc & 0xff);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <RFP_SendResponseFunction+0x84>)
 8003552:	71da      	strb	r2, [r3, #7]
   HC12_TransmitData(RfpDataTransmit, 8);
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <RFP_SendResponseFunction+0x84>)
 8003556:	2108      	movs	r1, #8
 8003558:	0018      	movs	r0, r3
 800355a:	f7fe fb21 	bl	8001ba0 <HC12_TransmitData>
}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	46bd      	mov	sp, r7
 8003562:	b004      	add	sp, #16
 8003564:	bd80      	pop	{r7, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	20000914 	.word	0x20000914
 800356c:	200008b0 	.word	0x200008b0

08003570 <RFP_InitializeFunction>:
static void RFP_InitializeFunction(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
   Rfp->NewEvent = RFP_EVENT_END_INITIALIZE;
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <RFP_InitializeFunction+0x30>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2202      	movs	r2, #2
 800357a:	705a      	strb	r2, [r3, #1]
   HC12_ExitCommandMode();
 800357c:	f7fe fb02 	bl	8001b84 <HC12_ExitCommandMode>
   HC12_Init(Rfp, RfpDataRecive);
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <RFP_InitializeFunction+0x30>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a07      	ldr	r2, [pc, #28]	; (80035a4 <RFP_InitializeFunction+0x34>)
 8003586:	0011      	movs	r1, r2
 8003588:	0018      	movs	r0, r3
 800358a:	f7fe fb2f 	bl	8001bec <HC12_Init>
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <RFP_InitializeFunction+0x34>)
 8003590:	2164      	movs	r1, #100	; 0x64
 8003592:	0018      	movs	r0, r3
 8003594:	f7fe fb18 	bl	8001bc8 <HC12_ReciveToIdleDMA>
}
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	20000914 	.word	0x20000914
 80035a4:	2000084c 	.word	0x2000084c

080035a8 <RFP_IdleFunction>:
static void RFP_IdleFunction(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
   if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <RFP_IdleFunction+0x4c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	791b      	ldrb	r3, [r3, #4]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d108      	bne.n	80035ca <RFP_IdleFunction+0x22>
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <RFP_IdleFunction+0x4c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <RFP_IdleFunction+0x4c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2201      	movs	r2, #1
 80035c6:	705a      	strb	r2, [r3, #1]
   {
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
      Rfp->NewEvent = RFP_EVENT_SEND;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 80035c8:	e011      	b.n	80035ee <RFP_IdleFunction+0x46>
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <RFP_IdleFunction+0x4c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	7c5b      	ldrb	r3, [r3, #17]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d10c      	bne.n	80035ee <RFP_IdleFunction+0x46>
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
 80035d4:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <RFP_IdleFunction+0x4c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2200      	movs	r2, #0
 80035da:	745a      	strb	r2, [r3, #17]
      Rfp->NewEvent = RFP_EVENT_SEND;
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <RFP_IdleFunction+0x4c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2206      	movs	r2, #6
 80035e2:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <RFP_IdleFunction+0x50>)
 80035e6:	2164      	movs	r1, #100	; 0x64
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7fe faed 	bl	8001bc8 <HC12_ReciveToIdleDMA>
}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000914 	.word	0x20000914
 80035f8:	2000084c 	.word	0x2000084c

080035fc <RFP_ParseFunction>:
static void RFP_ParseFunction(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	607b      	str	r3, [r7, #4]
   Rfp->SourceMessage  = RfpDataRecive[1];
 8003606:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <RFP_ParseFunction+0xf8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a3b      	ldr	r2, [pc, #236]	; (80036f8 <RFP_ParseFunction+0xfc>)
 800360c:	7852      	ldrb	r2, [r2, #1]
 800360e:	741a      	strb	r2, [r3, #16]
   if(RfpDataRecive[0] != Rfp->DeviceType)
 8003610:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <RFP_ParseFunction+0xfc>)
 8003612:	781a      	ldrb	r2, [r3, #0]
 8003614:	4b37      	ldr	r3, [pc, #220]	; (80036f4 <RFP_ParseFunction+0xf8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	795b      	ldrb	r3, [r3, #5]
 800361a:	429a      	cmp	r2, r3
 800361c:	d00c      	beq.n	8003638 <RFP_ParseFunction+0x3c>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800361e:	4b35      	ldr	r3, [pc, #212]	; (80036f4 <RFP_ParseFunction+0xf8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2203      	movs	r2, #3
 8003624:	705a      	strb	r2, [r3, #1]
      RFP_SendResponseFunction(RFP_ERROR);
 8003626:	2001      	movs	r0, #1
 8003628:	f7ff ff5e 	bl	80034e8 <RFP_SendResponseFunction>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800362c:	4b32      	ldr	r3, [pc, #200]	; (80036f8 <RFP_ParseFunction+0xfc>)
 800362e:	2164      	movs	r1, #100	; 0x64
 8003630:	0018      	movs	r0, r3
 8003632:	f7fe fac9 	bl	8001bc8 <HC12_ReciveToIdleDMA>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
            }
         }
      }
   }
}
 8003636:	e058      	b.n	80036ea <RFP_ParseFunction+0xee>
      if(Rfp->DataSize != 0)
 8003638:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <RFP_ParseFunction+0xf8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d053      	beq.n	80036ea <RFP_ParseFunction+0xee>
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8003642:	4b2c      	ldr	r3, [pc, #176]	; (80036f4 <RFP_ParseFunction+0xf8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	3b04      	subs	r3, #4
 800364a:	4a2b      	ldr	r2, [pc, #172]	; (80036f8 <RFP_ParseFunction+0xfc>)
 800364c:	5cd3      	ldrb	r3, [r2, r3]
 800364e:	061a      	lsls	r2, r3, #24
 8003650:	4b28      	ldr	r3, [pc, #160]	; (80036f4 <RFP_ParseFunction+0xf8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	3b03      	subs	r3, #3
 8003658:	4927      	ldr	r1, [pc, #156]	; (80036f8 <RFP_ParseFunction+0xfc>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	041b      	lsls	r3, r3, #16
 800365e:	431a      	orrs	r2, r3
                       | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 8003660:	4b24      	ldr	r3, [pc, #144]	; (80036f4 <RFP_ParseFunction+0xf8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	3b02      	subs	r3, #2
 8003668:	4923      	ldr	r1, [pc, #140]	; (80036f8 <RFP_ParseFunction+0xfc>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	431a      	orrs	r2, r3
 8003670:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <RFP_ParseFunction+0xf8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	3b01      	subs	r3, #1
 8003678:	491f      	ldr	r1, [pc, #124]	; (80036f8 <RFP_ParseFunction+0xfc>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800367c:	4313      	orrs	r3, r2
 800367e:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 8003680:	4b1c      	ldr	r3, [pc, #112]	; (80036f4 <RFP_ParseFunction+0xf8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	1f19      	subs	r1, r3, #4
 8003688:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <RFP_ParseFunction+0xfc>)
 800368a:	2301      	movs	r3, #1
 800368c:	425b      	negs	r3, r3
 800368e:	0018      	movs	r0, r3
 8003690:	f7ff fb46 	bl	8002d20 <Crc>
 8003694:	0002      	movs	r2, r0
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4293      	cmp	r3, r2
 800369a:	d107      	bne.n	80036ac <RFP_ParseFunction+0xb0>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800369c:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <RFP_ParseFunction+0xf8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2204      	movs	r2, #4
 80036a2:	705a      	strb	r2, [r3, #1]
            RFP_SendResponseFunction(RFP_OK);
 80036a4:	2004      	movs	r0, #4
 80036a6:	f7ff ff1f 	bl	80034e8 <RFP_SendResponseFunction>
}
 80036aa:	e01e      	b.n	80036ea <RFP_ParseFunction+0xee>
            if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 80036ac:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <RFP_ParseFunction+0xf8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	4911      	ldr	r1, [pc, #68]	; (80036f8 <RFP_ParseFunction+0xfc>)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7ff fb80 	bl	8002dbc <RepareMessage>
 80036bc:	0003      	movs	r3, r0
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d107      	bne.n	80036d2 <RFP_ParseFunction+0xd6>
               Rfp->NewEvent = RFP_EVENT_DATA_OK;
 80036c2:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <RFP_ParseFunction+0xf8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2204      	movs	r2, #4
 80036c8:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_OK);
 80036ca:	2004      	movs	r0, #4
 80036cc:	f7ff ff0c 	bl	80034e8 <RFP_SendResponseFunction>
}
 80036d0:	e00b      	b.n	80036ea <RFP_ParseFunction+0xee>
               Rfp->NewEvent = RFP_EVENT_ERROR;
 80036d2:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <RFP_ParseFunction+0xf8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2203      	movs	r2, #3
 80036d8:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_CRC_ERROR);
 80036da:	2002      	movs	r0, #2
 80036dc:	f7ff ff04 	bl	80034e8 <RFP_SendResponseFunction>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <RFP_ParseFunction+0xfc>)
 80036e2:	2164      	movs	r1, #100	; 0x64
 80036e4:	0018      	movs	r0, r3
 80036e6:	f7fe fa6f 	bl	8001bc8 <HC12_ReciveToIdleDMA>
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	20000914 	.word	0x20000914
 80036f8:	2000084c 	.word	0x2000084c

080036fc <RFP_RunningFunction>:
static void RFP_RunningFunction(void)
{
 80036fc:	b5b0      	push	{r4, r5, r7, lr}
 80036fe:	af00      	add	r7, sp, #0
   switch(RfpDataRecive[2])
 8003700:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <RFP_RunningFunction+0xac>)
 8003702:	789b      	ldrb	r3, [r3, #2]
 8003704:	2b03      	cmp	r3, #3
 8003706:	d029      	beq.n	800375c <RFP_RunningFunction+0x60>
 8003708:	dc3e      	bgt.n	8003788 <RFP_RunningFunction+0x8c>
 800370a:	2b01      	cmp	r3, #1
 800370c:	d002      	beq.n	8003714 <RFP_RunningFunction+0x18>
 800370e:	2b02      	cmp	r3, #2
 8003710:	d016      	beq.n	8003740 <RFP_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 8003712:	e039      	b.n	8003788 <RFP_RunningFunction+0x8c>
         if(RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction != NULL)
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <RFP_RunningFunction+0xac>)
 8003716:	78db      	ldrb	r3, [r3, #3]
 8003718:	1e5a      	subs	r2, r3, #1
 800371a:	4b24      	ldr	r3, [pc, #144]	; (80037ac <RFP_RunningFunction+0xb0>)
 800371c:	0092      	lsls	r2, r2, #2
 800371e:	58d3      	ldr	r3, [r2, r3]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d033      	beq.n	800378c <RFP_RunningFunction+0x90>
            RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction(RfpDataRecive, Rfp->DataSize, 4);
 8003724:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <RFP_RunningFunction+0xac>)
 8003726:	78db      	ldrb	r3, [r3, #3]
 8003728:	1e5a      	subs	r2, r3, #1
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <RFP_RunningFunction+0xb0>)
 800372c:	0092      	lsls	r2, r2, #2
 800372e:	58d4      	ldr	r4, [r2, r3]
 8003730:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <RFP_RunningFunction+0xb4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6899      	ldr	r1, [r3, #8]
 8003736:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <RFP_RunningFunction+0xac>)
 8003738:	2204      	movs	r2, #4
 800373a:	0018      	movs	r0, r3
 800373c:	47a0      	blx	r4
         break;
 800373e:	e025      	b.n	800378c <RFP_RunningFunction+0x90>
         if(RfpDataFunctions.RfpDataFunction != NULL)
 8003740:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <RFP_RunningFunction+0xb8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d023      	beq.n	8003790 <RFP_RunningFunction+0x94>
            RfpDataFunctions.RfpDataFunction(RfpDataRecive, Rfp->DataSize, 4);
 8003748:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <RFP_RunningFunction+0xb8>)
 800374a:	681c      	ldr	r4, [r3, #0]
 800374c:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <RFP_RunningFunction+0xb4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6899      	ldr	r1, [r3, #8]
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <RFP_RunningFunction+0xac>)
 8003754:	2204      	movs	r2, #4
 8003756:	0018      	movs	r0, r3
 8003758:	47a0      	blx	r4
         break;
 800375a:	e019      	b.n	8003790 <RFP_RunningFunction+0x94>
         if(RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction != NULL)
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <RFP_RunningFunction+0xac>)
 800375e:	78db      	ldrb	r3, [r3, #3]
 8003760:	1e5a      	subs	r2, r3, #1
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <RFP_RunningFunction+0xbc>)
 8003764:	0092      	lsls	r2, r2, #2
 8003766:	58d3      	ldr	r3, [r2, r3]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d013      	beq.n	8003794 <RFP_RunningFunction+0x98>
            RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction(RfpDataRecive, Rfp->DataSize, 4);
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <RFP_RunningFunction+0xac>)
 800376e:	78db      	ldrb	r3, [r3, #3]
 8003770:	1e5a      	subs	r2, r3, #1
 8003772:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <RFP_RunningFunction+0xbc>)
 8003774:	0092      	lsls	r2, r2, #2
 8003776:	58d4      	ldr	r4, [r2, r3]
 8003778:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <RFP_RunningFunction+0xb4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6899      	ldr	r1, [r3, #8]
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <RFP_RunningFunction+0xac>)
 8003780:	2204      	movs	r2, #4
 8003782:	0018      	movs	r0, r3
 8003784:	47a0      	blx	r4
         break;
 8003786:	e005      	b.n	8003794 <RFP_RunningFunction+0x98>
         break;
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	e004      	b.n	8003796 <RFP_RunningFunction+0x9a>
         break;
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	e002      	b.n	8003796 <RFP_RunningFunction+0x9a>
         break;
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	e000      	b.n	8003796 <RFP_RunningFunction+0x9a>
         break;
 8003794:	46c0      	nop			; (mov r8, r8)
      }
   }
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8003796:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <RFP_RunningFunction+0xac>)
 8003798:	2164      	movs	r1, #100	; 0x64
 800379a:	0018      	movs	r0, r3
 800379c:	f7fe fa14 	bl	8001bc8 <HC12_ReciveToIdleDMA>
}
 80037a0:	46c0      	nop			; (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bdb0      	pop	{r4, r5, r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	2000084c 	.word	0x2000084c
 80037ac:	20000918 	.word	0x20000918
 80037b0:	20000914 	.word	0x20000914
 80037b4:	20000924 	.word	0x20000924
 80037b8:	20000928 	.word	0x20000928

080037bc <RFP_SendFunction>:
static void RFP_SendFunction(void)
{
 80037bc:	b5b0      	push	{r4, r5, r7, lr}
 80037be:	af00      	add	r7, sp, #0
   if(Rfp->Cnt < 5)
 80037c0:	4b17      	ldr	r3, [pc, #92]	; (8003820 <RFP_SendFunction+0x64>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d81a      	bhi.n	8003800 <RFP_SendFunction+0x44>
   {
      HAL_Delay(200);
 80037ca:	20c8      	movs	r0, #200	; 0xc8
 80037cc:	f000 fd0a 	bl	80041e4 <HAL_Delay>
      HC12_TransmitData(RfpDataTransmit, Rfp->DataSizeTransmit);
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <RFP_SendFunction+0x64>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	4b13      	ldr	r3, [pc, #76]	; (8003824 <RFP_SendFunction+0x68>)
 80037d8:	0011      	movs	r1, r2
 80037da:	0018      	movs	r0, r3
 80037dc:	f7fe f9e0 	bl	8001ba0 <HC12_TransmitData>
      Rfp->Cnt++;
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <RFP_SendFunction+0x64>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	3201      	adds	r2, #1
 80037e8:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_WAIT_FOR_RESPONSE;
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <RFP_SendFunction+0x64>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2205      	movs	r2, #5
 80037f0:	705a      	strb	r2, [r3, #1]
      Rfp->LastTick = HAL_GetTick();
 80037f2:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <RFP_SendFunction+0x64>)
 80037f4:	681c      	ldr	r4, [r3, #0]
 80037f6:	f000 fceb 	bl	80041d0 <HAL_GetTick>
 80037fa:	0003      	movs	r3, r0
 80037fc:	61a3      	str	r3, [r4, #24]
   {
      Rfp->Cnt      = 0;
      Rfp->NewEvent = RFP_EVENT_ERROR;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 80037fe:	e00c      	b.n	800381a <RFP_SendFunction+0x5e>
      Rfp->Cnt      = 0;
 8003800:	4b07      	ldr	r3, [pc, #28]	; (8003820 <RFP_SendFunction+0x64>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2200      	movs	r2, #0
 8003806:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <RFP_SendFunction+0x64>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2203      	movs	r2, #3
 800380e:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <RFP_SendFunction+0x6c>)
 8003812:	2164      	movs	r1, #100	; 0x64
 8003814:	0018      	movs	r0, r3
 8003816:	f7fe f9d7 	bl	8001bc8 <HC12_ReciveToIdleDMA>
}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	bdb0      	pop	{r4, r5, r7, pc}
 8003820:	20000914 	.word	0x20000914
 8003824:	200008b0 	.word	0x200008b0
 8003828:	2000084c 	.word	0x2000084c

0800382c <RFP_WaitForResponseFunction>:
static void RFP_WaitForResponseFunction(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - Rfp->LastTick > 2000)
 8003830:	f000 fcce 	bl	80041d0 <HAL_GetTick>
 8003834:	0002      	movs	r2, r0
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <RFP_WaitForResponseFunction+0x48>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	1ad2      	subs	r2, r2, r3
 800383e:	23fa      	movs	r3, #250	; 0xfa
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	429a      	cmp	r2, r3
 8003844:	d904      	bls.n	8003850 <RFP_WaitForResponseFunction+0x24>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8003846:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <RFP_WaitForResponseFunction+0x48>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2203      	movs	r2, #3
 800384c:	705a      	strb	r2, [r3, #1]
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
   }
}
 800384e:	e00d      	b.n	800386c <RFP_WaitForResponseFunction+0x40>
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 8003850:	4b08      	ldr	r3, [pc, #32]	; (8003874 <RFP_WaitForResponseFunction+0x48>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	791b      	ldrb	r3, [r3, #4]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	d107      	bne.n	800386c <RFP_WaitForResponseFunction+0x40>
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <RFP_WaitForResponseFunction+0x48>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2200      	movs	r2, #0
 8003862:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <RFP_WaitForResponseFunction+0x48>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2201      	movs	r2, #1
 800386a:	705a      	strb	r2, [r3, #1]
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	20000914 	.word	0x20000914

08003878 <RFP_ParseResponseFunction>:
static void RFP_ParseResponseFunction(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800387e:	4b54      	ldr	r3, [pc, #336]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	3b04      	subs	r3, #4
 8003886:	4a53      	ldr	r2, [pc, #332]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	061a      	lsls	r2, r3, #24
 800388c:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	3b03      	subs	r3, #3
 8003894:	494f      	ldr	r1, [pc, #316]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	431a      	orrs	r2, r3
                          | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 800389c:	4b4c      	ldr	r3, [pc, #304]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	3b02      	subs	r3, #2
 80038a4:	494b      	ldr	r1, [pc, #300]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	431a      	orrs	r2, r3
 80038ac:	4b48      	ldr	r3, [pc, #288]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	4947      	ldr	r1, [pc, #284]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	607b      	str	r3, [r7, #4]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 80038bc:	4b44      	ldr	r3, [pc, #272]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	1f19      	subs	r1, r3, #4
 80038c4:	4a43      	ldr	r2, [pc, #268]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 80038c6:	2301      	movs	r3, #1
 80038c8:	425b      	negs	r3, r3
 80038ca:	0018      	movs	r0, r3
 80038cc:	f7ff fa28 	bl	8002d20 <Crc>
 80038d0:	0002      	movs	r2, r0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d130      	bne.n	800393a <RFP_ParseResponseFunction+0xc2>
   {
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 80038d8:	4b3e      	ldr	r3, [pc, #248]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	4b3c      	ldr	r3, [pc, #240]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	795b      	ldrb	r3, [r3, #5]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d11f      	bne.n	8003926 <RFP_ParseResponseFunction+0xae>
 80038e6:	4b3b      	ldr	r3, [pc, #236]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 80038e8:	789b      	ldrb	r3, [r3, #2]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d11b      	bne.n	8003926 <RFP_ParseResponseFunction+0xae>
      {
         if(RfpDataRecive[3] == RFP_OK)
 80038ee:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 80038f0:	78db      	ldrb	r3, [r3, #3]
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d10d      	bne.n	8003912 <RFP_ParseResponseFunction+0x9a>
         {
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 80038f6:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2204      	movs	r2, #4
 80038fc:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 80038fe:	4b34      	ldr	r3, [pc, #208]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2200      	movs	r2, #0
 8003904:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8003906:	4b33      	ldr	r3, [pc, #204]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 8003908:	2164      	movs	r1, #100	; 0x64
 800390a:	0018      	movs	r0, r3
 800390c:	f7fe f95c 	bl	8001bc8 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8003910:	e059      	b.n	80039c6 <RFP_ParseResponseFunction+0x14e>
         }
         else
         {
            Rfp->NewEvent = RFP_EVENT_ERROR;
 8003912:	4b2f      	ldr	r3, [pc, #188]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2203      	movs	r2, #3
 8003918:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800391a:	4b2e      	ldr	r3, [pc, #184]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 800391c:	2164      	movs	r1, #100	; 0x64
 800391e:	0018      	movs	r0, r3
 8003920:	f7fe f952 	bl	8001bc8 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8003924:	e04f      	b.n	80039c6 <RFP_ParseResponseFunction+0x14e>
         }
      }
      else
      {
         Rfp->NewEvent = RFP_EVENT_ERROR;
 8003926:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2203      	movs	r2, #3
 800392c:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800392e:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 8003930:	2164      	movs	r1, #100	; 0x64
 8003932:	0018      	movs	r0, r3
 8003934:	f7fe f948 	bl	8001bc8 <HC12_ReciveToIdleDMA>
   else
   {
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
      Rfp->NewEvent = RFP_EVENT_ERROR;
   }
}
 8003938:	e045      	b.n	80039c6 <RFP_ParseResponseFunction+0x14e>
   else if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 800393a:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	4924      	ldr	r1, [pc, #144]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	0018      	movs	r0, r3
 8003946:	f7ff fa39 	bl	8002dbc <RepareMessage>
 800394a:	0003      	movs	r3, r0
 800394c:	2b01      	cmp	r3, #1
 800394e:	d130      	bne.n	80039b2 <RFP_ParseResponseFunction+0x13a>
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 8003950:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 8003952:	781a      	ldrb	r2, [r3, #0]
 8003954:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	795b      	ldrb	r3, [r3, #5]
 800395a:	429a      	cmp	r2, r3
 800395c:	d11f      	bne.n	800399e <RFP_ParseResponseFunction+0x126>
 800395e:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 8003960:	789b      	ldrb	r3, [r3, #2]
 8003962:	2b03      	cmp	r3, #3
 8003964:	d11b      	bne.n	800399e <RFP_ParseResponseFunction+0x126>
         if(RfpDataRecive[3] == RFP_OK)
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 8003968:	78db      	ldrb	r3, [r3, #3]
 800396a:	2b04      	cmp	r3, #4
 800396c:	d10d      	bne.n	800398a <RFP_ParseResponseFunction+0x112>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2204      	movs	r2, #4
 8003974:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2200      	movs	r2, #0
 800397c:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800397e:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 8003980:	2164      	movs	r1, #100	; 0x64
 8003982:	0018      	movs	r0, r3
 8003984:	f7fe f920 	bl	8001bc8 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8003988:	e01d      	b.n	80039c6 <RFP_ParseResponseFunction+0x14e>
            Rfp->NewEvent = RFP_EVENT_ERROR;
 800398a:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2203      	movs	r2, #3
 8003990:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 8003994:	2164      	movs	r1, #100	; 0x64
 8003996:	0018      	movs	r0, r3
 8003998:	f7fe f916 	bl	8001bc8 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800399c:	e013      	b.n	80039c6 <RFP_ParseResponseFunction+0x14e>
         Rfp->NewEvent = RFP_EVENT_ERROR;
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2203      	movs	r2, #3
 80039a4:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 80039a8:	2164      	movs	r1, #100	; 0x64
 80039aa:	0018      	movs	r0, r3
 80039ac:	f7fe f90c 	bl	8001bc8 <HC12_ReciveToIdleDMA>
}
 80039b0:	e009      	b.n	80039c6 <RFP_ParseResponseFunction+0x14e>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <RFP_ParseResponseFunction+0x15c>)
 80039b4:	2164      	movs	r1, #100	; 0x64
 80039b6:	0018      	movs	r0, r3
 80039b8:	f7fe f906 	bl	8001bc8 <HC12_ReciveToIdleDMA>
      Rfp->NewEvent = RFP_EVENT_ERROR;
 80039bc:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <RFP_ParseResponseFunction+0x158>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2203      	movs	r2, #3
 80039c2:	705a      	strb	r2, [r3, #1]
}
 80039c4:	e7ff      	b.n	80039c6 <RFP_ParseResponseFunction+0x14e>
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b002      	add	sp, #8
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	20000914 	.word	0x20000914
 80039d4:	2000084c 	.word	0x2000084c

080039d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039de:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <HAL_MspInit+0x44>)
 80039e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e2:	4b0e      	ldr	r3, [pc, #56]	; (8003a1c <HAL_MspInit+0x44>)
 80039e4:	2101      	movs	r1, #1
 80039e6:	430a      	orrs	r2, r1
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
 80039ea:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <HAL_MspInit+0x44>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	2201      	movs	r2, #1
 80039f0:	4013      	ands	r3, r2
 80039f2:	607b      	str	r3, [r7, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_MspInit+0x44>)
 80039f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <HAL_MspInit+0x44>)
 80039fc:	2180      	movs	r1, #128	; 0x80
 80039fe:	0549      	lsls	r1, r1, #21
 8003a00:	430a      	orrs	r2, r1
 8003a02:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a04:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_MspInit+0x44>)
 8003a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	055b      	lsls	r3, r3, #21
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b002      	add	sp, #8
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	40021000 	.word	0x40021000

08003a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while(1)
 8003a24:	e7fe      	b.n	8003a24 <NMI_Handler+0x4>

08003a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
   HAL_NVIC_SystemReset();
 8003a2a:	f001 fb28 	bl	800507e <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a2e:	e7fe      	b.n	8003a2e <HardFault_Handler+0x8>

08003a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVC_IRQn 0 */
  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a48:	f000 fbb0 	bl	80041ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWITCH_Pin);
 8003a56:	2380      	movs	r3, #128	; 0x80
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f001 ffda 	bl	8005a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <DMA1_Channel1_IRQHandler+0x14>)
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f001 fcf2 	bl	8005458 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	20000b9c 	.word	0x20000b9c

08003a80 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8003a86:	0018      	movs	r0, r3
 8003a88:	f001 fce6 	bl	8005458 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003a8c:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <DMA1_Channel2_3_IRQHandler+0x20>)
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f001 fce2 	bl	8005458 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003a94:	46c0      	nop			; (mov r8, r8)
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	20000b40 	.word	0x20000b40
 8003aa0:	20000bf8 	.word	0x20000bf8

08003aa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <USART1_IRQHandler+0x14>)
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f004 f810 	bl	8007ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	20000a18 	.word	0x20000a18

08003abc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <USART2_IRQHandler+0x14>)
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f004 f804 	bl	8007ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	20000aac 	.word	0x20000aac

08003ad4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void LPUART1_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003ad8:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <LPUART1_IRQHandler+0x14>)
 8003ada:	0018      	movs	r0, r3
 8003adc:	f003 fff8 	bl	8007ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003ae0:	46c0      	nop			; (mov r8, r8)
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	20000984 	.word	0x20000984

08003aec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <SystemInit+0x14>)
 8003af2:	2280      	movs	r2, #128	; 0x80
 8003af4:	0512      	lsls	r2, r2, #20
 8003af6:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	e000ed00 	.word	0xe000ed00

08003b04 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b0a:	2310      	movs	r3, #16
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	0018      	movs	r0, r3
 8003b10:	2310      	movs	r3, #16
 8003b12:	001a      	movs	r2, r3
 8003b14:	2100      	movs	r1, #0
 8003b16:	f005 fbad 	bl	8009274 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	230c      	movs	r3, #12
 8003b20:	001a      	movs	r2, r3
 8003b22:	2100      	movs	r1, #0
 8003b24:	f005 fba6 	bl	8009274 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b28:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <MX_TIM2_Init+0xa4>)
 8003b2a:	2280      	movs	r2, #128	; 0x80
 8003b2c:	05d2      	lsls	r2, r2, #23
 8003b2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8003b30:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <MX_TIM2_Init+0xa4>)
 8003b32:	220f      	movs	r2, #15
 8003b34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b36:	4b1c      	ldr	r3, [pc, #112]	; (8003ba8 <MX_TIM2_Init+0xa4>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <MX_TIM2_Init+0xa4>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	4252      	negs	r2, r2
 8003b42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b44:	4b18      	ldr	r3, [pc, #96]	; (8003ba8 <MX_TIM2_Init+0xa4>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b4a:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <MX_TIM2_Init+0xa4>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b50:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <MX_TIM2_Init+0xa4>)
 8003b52:	0018      	movs	r0, r3
 8003b54:	f003 fc12 	bl	800737c <HAL_TIM_Base_Init>
 8003b58:	1e03      	subs	r3, r0, #0
 8003b5a:	d001      	beq.n	8003b60 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003b5c:	f7ff fba3 	bl	80032a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b60:	2110      	movs	r1, #16
 8003b62:	187b      	adds	r3, r7, r1
 8003b64:	2280      	movs	r2, #128	; 0x80
 8003b66:	0152      	lsls	r2, r2, #5
 8003b68:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b6a:	187a      	adds	r2, r7, r1
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <MX_TIM2_Init+0xa4>)
 8003b6e:	0011      	movs	r1, r2
 8003b70:	0018      	movs	r0, r3
 8003b72:	f003 fc5b 	bl	800742c <HAL_TIM_ConfigClockSource>
 8003b76:	1e03      	subs	r3, r0, #0
 8003b78:	d001      	beq.n	8003b7e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003b7a:	f7ff fb94 	bl	80032a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b7e:	1d3b      	adds	r3, r7, #4
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b84:	1d3b      	adds	r3, r7, #4
 8003b86:	2200      	movs	r2, #0
 8003b88:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b8a:	1d3a      	adds	r2, r7, #4
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <MX_TIM2_Init+0xa4>)
 8003b8e:	0011      	movs	r1, r2
 8003b90:	0018      	movs	r0, r3
 8003b92:	f003 fe3d 	bl	8007810 <HAL_TIMEx_MasterConfigSynchronization>
 8003b96:	1e03      	subs	r3, r0, #0
 8003b98:	d001      	beq.n	8003b9e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003b9a:	f7ff fb84 	bl	80032a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b008      	add	sp, #32
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	20000938 	.word	0x20000938

08003bac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	05db      	lsls	r3, r3, #23
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <HAL_TIM_Base_MspInit+0x34>)
 8003bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_TIM_Base_MspInit+0x34>)
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <HAL_TIM_Base_MspInit+0x34>)
 8003bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b004      	add	sp, #16
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40021000 	.word	0x40021000

08003be4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003be8:	4b27      	ldr	r3, [pc, #156]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003bea:	4a28      	ldr	r2, [pc, #160]	; (8003c8c <MX_LPUART1_UART_Init+0xa8>)
 8003bec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2400;
 8003bee:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003bf0:	2296      	movs	r2, #150	; 0x96
 8003bf2:	0112      	lsls	r2, r2, #4
 8003bf4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bf6:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003bfc:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003c02:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003c08:	4b1f      	ldr	r3, [pc, #124]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003c0a:	220c      	movs	r2, #12
 8003c0c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c0e:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c14:	4b1c      	ldr	r3, [pc, #112]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV16;
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003c1c:	2207      	movs	r2, #7
 8003c1e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003c22:	2230      	movs	r2, #48	; 0x30
 8003c24:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003c26:	4b18      	ldr	r3, [pc, #96]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003c28:	2280      	movs	r2, #128	; 0x80
 8003c2a:	0152      	lsls	r2, r2, #5
 8003c2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003c2e:	4b16      	ldr	r3, [pc, #88]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	0192      	lsls	r2, r2, #6
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003c36:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003c3c:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f003 fe54 	bl	80078ec <HAL_UART_Init>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d001      	beq.n	8003c4c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8003c48:	f7ff fb2d 	bl	80032a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003c4e:	2100      	movs	r1, #0
 8003c50:	0018      	movs	r0, r3
 8003c52:	f005 f9a3 	bl	8008f9c <HAL_UARTEx_SetTxFifoThreshold>
 8003c56:	1e03      	subs	r3, r0, #0
 8003c58:	d001      	beq.n	8003c5e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8003c5a:	f7ff fb24 	bl	80032a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c5e:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003c60:	2100      	movs	r1, #0
 8003c62:	0018      	movs	r0, r3
 8003c64:	f005 f9da 	bl	800901c <HAL_UARTEx_SetRxFifoThreshold>
 8003c68:	1e03      	subs	r3, r0, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003c6c:	f7ff fb1b 	bl	80032a6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <MX_LPUART1_UART_Init+0xa4>)
 8003c72:	0018      	movs	r0, r3
 8003c74:	f005 f958 	bl	8008f28 <HAL_UARTEx_DisableFifoMode>
 8003c78:	1e03      	subs	r3, r0, #0
 8003c7a:	d001      	beq.n	8003c80 <MX_LPUART1_UART_Init+0x9c>
  {
    Error_Handler();
 8003c7c:	f7ff fb13 	bl	80032a6 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	20000984 	.word	0x20000984
 8003c8c:	40008000 	.word	0x40008000

08003c90 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c94:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003c96:	4a24      	ldr	r2, [pc, #144]	; (8003d28 <MX_USART1_UART_Init+0x98>)
 8003c98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8003c9a:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003c9c:	2296      	movs	r2, #150	; 0x96
 8003c9e:	0112      	lsls	r2, r2, #4
 8003ca0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ca2:	4b20      	ldr	r3, [pc, #128]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ca8:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003cae:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003cb6:	220c      	movs	r2, #12
 8003cb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cba:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cc0:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cc6:	4b17      	ldr	r3, [pc, #92]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ccc:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cd2:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003cd8:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f003 fe06 	bl	80078ec <HAL_UART_Init>
 8003ce0:	1e03      	subs	r3, r0, #0
 8003ce2:	d001      	beq.n	8003ce8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003ce4:	f7ff fadf 	bl	80032a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ce8:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003cea:	2100      	movs	r1, #0
 8003cec:	0018      	movs	r0, r3
 8003cee:	f005 f955 	bl	8008f9c <HAL_UARTEx_SetTxFifoThreshold>
 8003cf2:	1e03      	subs	r3, r0, #0
 8003cf4:	d001      	beq.n	8003cfa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003cf6:	f7ff fad6 	bl	80032a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f005 f98c 	bl	800901c <HAL_UARTEx_SetRxFifoThreshold>
 8003d04:	1e03      	subs	r3, r0, #0
 8003d06:	d001      	beq.n	8003d0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003d08:	f7ff facd 	bl	80032a6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <MX_USART1_UART_Init+0x94>)
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f005 f90a 	bl	8008f28 <HAL_UARTEx_DisableFifoMode>
 8003d14:	1e03      	subs	r3, r0, #0
 8003d16:	d001      	beq.n	8003d1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003d18:	f7ff fac5 	bl	80032a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	20000a18 	.word	0x20000a18
 8003d28:	40013800 	.word	0x40013800

08003d2c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d30:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <MX_USART2_UART_Init+0x70>)
 8003d32:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <MX_USART2_UART_Init+0x74>)
 8003d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003d36:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <MX_USART2_UART_Init+0x70>)
 8003d38:	2296      	movs	r2, #150	; 0x96
 8003d3a:	0192      	lsls	r2, r2, #6
 8003d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <MX_USART2_UART_Init+0x70>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d44:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <MX_USART2_UART_Init+0x70>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d4a:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <MX_USART2_UART_Init+0x70>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d50:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <MX_USART2_UART_Init+0x70>)
 8003d52:	220c      	movs	r2, #12
 8003d54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d56:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <MX_USART2_UART_Init+0x70>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <MX_USART2_UART_Init+0x70>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d62:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <MX_USART2_UART_Init+0x70>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <MX_USART2_UART_Init+0x70>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <MX_USART2_UART_Init+0x70>)
 8003d70:	2218      	movs	r2, #24
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <MX_USART2_UART_Init+0x70>)
 8003d76:	2280      	movs	r2, #128	; 0x80
 8003d78:	0212      	lsls	r2, r2, #8
 8003d7a:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003d7c:	4b07      	ldr	r3, [pc, #28]	; (8003d9c <MX_USART2_UART_Init+0x70>)
 8003d7e:	2280      	movs	r2, #128	; 0x80
 8003d80:	0152      	lsls	r2, r2, #5
 8003d82:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <MX_USART2_UART_Init+0x70>)
 8003d86:	0018      	movs	r0, r3
 8003d88:	f003 fdb0 	bl	80078ec <HAL_UART_Init>
 8003d8c:	1e03      	subs	r3, r0, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8003d90:	f7ff fa89 	bl	80032a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	20000aac 	.word	0x20000aac
 8003da0:	40004400 	.word	0x40004400

08003da4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003da4:	b590      	push	{r4, r7, lr}
 8003da6:	b099      	sub	sp, #100	; 0x64
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	234c      	movs	r3, #76	; 0x4c
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	0018      	movs	r0, r3
 8003db2:	2314      	movs	r3, #20
 8003db4:	001a      	movs	r2, r3
 8003db6:	2100      	movs	r1, #0
 8003db8:	f005 fa5c 	bl	8009274 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dbc:	2420      	movs	r4, #32
 8003dbe:	193b      	adds	r3, r7, r4
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	232c      	movs	r3, #44	; 0x2c
 8003dc4:	001a      	movs	r2, r3
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	f005 fa54 	bl	8009274 <memset>
  if(uartHandle->Instance==LPUART1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4aa2      	ldr	r2, [pc, #648]	; (800405c <HAL_UART_MspInit+0x2b8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d16b      	bne.n	8003eae <HAL_UART_MspInit+0x10a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003dd6:	193b      	adds	r3, r7, r4
 8003dd8:	2210      	movs	r2, #16
 8003dda:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8003ddc:	193b      	adds	r3, r7, r4
 8003dde:	2280      	movs	r2, #128	; 0x80
 8003de0:	0112      	lsls	r2, r2, #4
 8003de2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003de4:	193b      	adds	r3, r7, r4
 8003de6:	0018      	movs	r0, r3
 8003de8:	f003 f930 	bl	800704c <HAL_RCCEx_PeriphCLKConfig>
 8003dec:	1e03      	subs	r3, r0, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003df0:	f7ff fa59 	bl	80032a6 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003df4:	4b9a      	ldr	r3, [pc, #616]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003df8:	4b99      	ldr	r3, [pc, #612]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003dfa:	2180      	movs	r1, #128	; 0x80
 8003dfc:	0349      	lsls	r1, r1, #13
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e02:	4b97      	ldr	r3, [pc, #604]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	035b      	lsls	r3, r3, #13
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e10:	4b93      	ldr	r3, [pc, #588]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e14:	4b92      	ldr	r3, [pc, #584]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003e16:	2101      	movs	r1, #1
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8003e1c:	4b90      	ldr	r3, [pc, #576]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e20:	2201      	movs	r2, #1
 8003e22:	4013      	ands	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e28:	214c      	movs	r1, #76	; 0x4c
 8003e2a:	187b      	adds	r3, r7, r1
 8003e2c:	220c      	movs	r2, #12
 8003e2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e30:	187b      	adds	r3, r7, r1
 8003e32:	2202      	movs	r2, #2
 8003e34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e36:	187b      	adds	r3, r7, r1
 8003e38:	2200      	movs	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3c:	187b      	adds	r3, r7, r1
 8003e3e:	2200      	movs	r2, #0
 8003e40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8003e42:	187b      	adds	r3, r7, r1
 8003e44:	2206      	movs	r2, #6
 8003e46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e48:	187a      	adds	r2, r7, r1
 8003e4a:	23a0      	movs	r3, #160	; 0xa0
 8003e4c:	05db      	lsls	r3, r3, #23
 8003e4e:	0011      	movs	r1, r2
 8003e50:	0018      	movs	r0, r3
 8003e52:	f001 fc43 	bl	80056dc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8003e56:	4b83      	ldr	r3, [pc, #524]	; (8004064 <HAL_UART_MspInit+0x2c0>)
 8003e58:	4a83      	ldr	r2, [pc, #524]	; (8004068 <HAL_UART_MspInit+0x2c4>)
 8003e5a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003e5c:	4b81      	ldr	r3, [pc, #516]	; (8004064 <HAL_UART_MspInit+0x2c0>)
 8003e5e:	220e      	movs	r2, #14
 8003e60:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e62:	4b80      	ldr	r3, [pc, #512]	; (8004064 <HAL_UART_MspInit+0x2c0>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e68:	4b7e      	ldr	r3, [pc, #504]	; (8004064 <HAL_UART_MspInit+0x2c0>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e6e:	4b7d      	ldr	r3, [pc, #500]	; (8004064 <HAL_UART_MspInit+0x2c0>)
 8003e70:	2280      	movs	r2, #128	; 0x80
 8003e72:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e74:	4b7b      	ldr	r3, [pc, #492]	; (8004064 <HAL_UART_MspInit+0x2c0>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e7a:	4b7a      	ldr	r3, [pc, #488]	; (8004064 <HAL_UART_MspInit+0x2c0>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8003e80:	4b78      	ldr	r3, [pc, #480]	; (8004064 <HAL_UART_MspInit+0x2c0>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003e86:	4b77      	ldr	r3, [pc, #476]	; (8004064 <HAL_UART_MspInit+0x2c0>)
 8003e88:	22c0      	movs	r2, #192	; 0xc0
 8003e8a:	0192      	lsls	r2, r2, #6
 8003e8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003e8e:	4b75      	ldr	r3, [pc, #468]	; (8004064 <HAL_UART_MspInit+0x2c0>)
 8003e90:	0018      	movs	r0, r3
 8003e92:	f001 f905 	bl	80050a0 <HAL_DMA_Init>
 8003e96:	1e03      	subs	r3, r0, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8003e9a:	f7ff fa04 	bl	80032a6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	4a70      	ldr	r2, [pc, #448]	; (8004064 <HAL_UART_MspInit+0x2c0>)
 8003ea4:	505a      	str	r2, [r3, r1]
 8003ea6:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <HAL_UART_MspInit+0x2c0>)
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003eac:	e0d2      	b.n	8004054 <HAL_UART_MspInit+0x2b0>
  else if(uartHandle->Instance==USART1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6e      	ldr	r2, [pc, #440]	; (800406c <HAL_UART_MspInit+0x2c8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d16c      	bne.n	8003f92 <HAL_UART_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003eb8:	2120      	movs	r1, #32
 8003eba:	187b      	adds	r3, r7, r1
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003ec0:	187b      	adds	r3, r7, r1
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f003 f8bf 	bl	800704c <HAL_RCCEx_PeriphCLKConfig>
 8003ece:	1e03      	subs	r3, r0, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8003ed2:	f7ff f9e8 	bl	80032a6 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ed6:	4b62      	ldr	r3, [pc, #392]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eda:	4b61      	ldr	r3, [pc, #388]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003edc:	2180      	movs	r1, #128	; 0x80
 8003ede:	01c9      	lsls	r1, r1, #7
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ee4:	4b5e      	ldr	r3, [pc, #376]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	01db      	lsls	r3, r3, #7
 8003eec:	4013      	ands	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef2:	4b5b      	ldr	r3, [pc, #364]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef6:	4b5a      	ldr	r3, [pc, #360]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003ef8:	2101      	movs	r1, #1
 8003efa:	430a      	orrs	r2, r1
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34
 8003efe:	4b58      	ldr	r3, [pc, #352]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f02:	2201      	movs	r2, #1
 8003f04:	4013      	ands	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003f0a:	214c      	movs	r1, #76	; 0x4c
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	22c0      	movs	r2, #192	; 0xc0
 8003f10:	00d2      	lsls	r2, r2, #3
 8003f12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	2202      	movs	r2, #2
 8003f18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	187b      	adds	r3, r7, r1
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f20:	187b      	adds	r3, r7, r1
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003f26:	187b      	adds	r3, r7, r1
 8003f28:	2201      	movs	r2, #1
 8003f2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2c:	187a      	adds	r2, r7, r1
 8003f2e:	23a0      	movs	r3, #160	; 0xa0
 8003f30:	05db      	lsls	r3, r3, #23
 8003f32:	0011      	movs	r1, r2
 8003f34:	0018      	movs	r0, r3
 8003f36:	f001 fbd1 	bl	80056dc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003f3a:	4b4d      	ldr	r3, [pc, #308]	; (8004070 <HAL_UART_MspInit+0x2cc>)
 8003f3c:	4a4d      	ldr	r2, [pc, #308]	; (8004074 <HAL_UART_MspInit+0x2d0>)
 8003f3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003f40:	4b4b      	ldr	r3, [pc, #300]	; (8004070 <HAL_UART_MspInit+0x2cc>)
 8003f42:	2232      	movs	r2, #50	; 0x32
 8003f44:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f46:	4b4a      	ldr	r3, [pc, #296]	; (8004070 <HAL_UART_MspInit+0x2cc>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f4c:	4b48      	ldr	r3, [pc, #288]	; (8004070 <HAL_UART_MspInit+0x2cc>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f52:	4b47      	ldr	r3, [pc, #284]	; (8004070 <HAL_UART_MspInit+0x2cc>)
 8003f54:	2280      	movs	r2, #128	; 0x80
 8003f56:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f58:	4b45      	ldr	r3, [pc, #276]	; (8004070 <HAL_UART_MspInit+0x2cc>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f5e:	4b44      	ldr	r3, [pc, #272]	; (8004070 <HAL_UART_MspInit+0x2cc>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003f64:	4b42      	ldr	r3, [pc, #264]	; (8004070 <HAL_UART_MspInit+0x2cc>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f6a:	4b41      	ldr	r3, [pc, #260]	; (8004070 <HAL_UART_MspInit+0x2cc>)
 8003f6c:	22c0      	movs	r2, #192	; 0xc0
 8003f6e:	0192      	lsls	r2, r2, #6
 8003f70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f72:	4b3f      	ldr	r3, [pc, #252]	; (8004070 <HAL_UART_MspInit+0x2cc>)
 8003f74:	0018      	movs	r0, r3
 8003f76:	f001 f893 	bl	80050a0 <HAL_DMA_Init>
 8003f7a:	1e03      	subs	r3, r0, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_UART_MspInit+0x1de>
      Error_Handler();
 8003f7e:	f7ff f992 	bl	80032a6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2180      	movs	r1, #128	; 0x80
 8003f86:	4a3a      	ldr	r2, [pc, #232]	; (8004070 <HAL_UART_MspInit+0x2cc>)
 8003f88:	505a      	str	r2, [r3, r1]
 8003f8a:	4b39      	ldr	r3, [pc, #228]	; (8004070 <HAL_UART_MspInit+0x2cc>)
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f90:	e060      	b.n	8004054 <HAL_UART_MspInit+0x2b0>
  else if(uartHandle->Instance==USART2)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a38      	ldr	r2, [pc, #224]	; (8004078 <HAL_UART_MspInit+0x2d4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d15b      	bne.n	8004054 <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f9c:	4b30      	ldr	r3, [pc, #192]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa0:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003fa2:	2180      	movs	r1, #128	; 0x80
 8003fa4:	0289      	lsls	r1, r1, #10
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	63da      	str	r2, [r3, #60]	; 0x3c
 8003faa:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fae:	2380      	movs	r3, #128	; 0x80
 8003fb0:	029b      	lsls	r3, r3, #10
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb8:	4b29      	ldr	r3, [pc, #164]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fbc:	4b28      	ldr	r3, [pc, #160]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	635a      	str	r2, [r3, #52]	; 0x34
 8003fc4:	4b26      	ldr	r3, [pc, #152]	; (8004060 <HAL_UART_MspInit+0x2bc>)
 8003fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc8:	2201      	movs	r2, #1
 8003fca:	4013      	ands	r3, r2
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003fd0:	214c      	movs	r1, #76	; 0x4c
 8003fd2:	187b      	adds	r3, r7, r1
 8003fd4:	22c0      	movs	r2, #192	; 0xc0
 8003fd6:	0212      	lsls	r2, r2, #8
 8003fd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	2202      	movs	r2, #2
 8003fde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe0:	187b      	adds	r3, r7, r1
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe6:	187b      	adds	r3, r7, r1
 8003fe8:	2200      	movs	r2, #0
 8003fea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	2201      	movs	r2, #1
 8003ff0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff2:	187a      	adds	r2, r7, r1
 8003ff4:	23a0      	movs	r3, #160	; 0xa0
 8003ff6:	05db      	lsls	r3, r3, #23
 8003ff8:	0011      	movs	r1, r2
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f001 fb6e 	bl	80056dc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8004000:	4b1e      	ldr	r3, [pc, #120]	; (800407c <HAL_UART_MspInit+0x2d8>)
 8004002:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <HAL_UART_MspInit+0x2dc>)
 8004004:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004006:	4b1d      	ldr	r3, [pc, #116]	; (800407c <HAL_UART_MspInit+0x2d8>)
 8004008:	2234      	movs	r2, #52	; 0x34
 800400a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_UART_MspInit+0x2d8>)
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004012:	4b1a      	ldr	r3, [pc, #104]	; (800407c <HAL_UART_MspInit+0x2d8>)
 8004014:	2200      	movs	r2, #0
 8004016:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004018:	4b18      	ldr	r3, [pc, #96]	; (800407c <HAL_UART_MspInit+0x2d8>)
 800401a:	2280      	movs	r2, #128	; 0x80
 800401c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800401e:	4b17      	ldr	r3, [pc, #92]	; (800407c <HAL_UART_MspInit+0x2d8>)
 8004020:	2200      	movs	r2, #0
 8004022:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004024:	4b15      	ldr	r3, [pc, #84]	; (800407c <HAL_UART_MspInit+0x2d8>)
 8004026:	2200      	movs	r2, #0
 8004028:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800402a:	4b14      	ldr	r3, [pc, #80]	; (800407c <HAL_UART_MspInit+0x2d8>)
 800402c:	2200      	movs	r2, #0
 800402e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <HAL_UART_MspInit+0x2d8>)
 8004032:	2200      	movs	r2, #0
 8004034:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004036:	4b11      	ldr	r3, [pc, #68]	; (800407c <HAL_UART_MspInit+0x2d8>)
 8004038:	0018      	movs	r0, r3
 800403a:	f001 f831 	bl	80050a0 <HAL_DMA_Init>
 800403e:	1e03      	subs	r3, r0, #0
 8004040:	d001      	beq.n	8004046 <HAL_UART_MspInit+0x2a2>
      Error_Handler();
 8004042:	f7ff f930 	bl	80032a6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2180      	movs	r1, #128	; 0x80
 800404a:	4a0c      	ldr	r2, [pc, #48]	; (800407c <HAL_UART_MspInit+0x2d8>)
 800404c:	505a      	str	r2, [r3, r1]
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_UART_MspInit+0x2d8>)
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	46bd      	mov	sp, r7
 8004058:	b019      	add	sp, #100	; 0x64
 800405a:	bd90      	pop	{r4, r7, pc}
 800405c:	40008000 	.word	0x40008000
 8004060:	40021000 	.word	0x40021000
 8004064:	20000b40 	.word	0x20000b40
 8004068:	4002001c 	.word	0x4002001c
 800406c:	40013800 	.word	0x40013800
 8004070:	20000b9c 	.word	0x20000b9c
 8004074:	40020008 	.word	0x40020008
 8004078:	40004400 	.word	0x40004400
 800407c:	20000bf8 	.word	0x20000bf8
 8004080:	40020030 	.word	0x40020030

08004084 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004084:	480d      	ldr	r0, [pc, #52]	; (80040bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004086:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004088:	f7ff fd30 	bl	8003aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800408c:	480c      	ldr	r0, [pc, #48]	; (80040c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800408e:	490d      	ldr	r1, [pc, #52]	; (80040c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004090:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <LoopForever+0xe>)
  movs r3, #0
 8004092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004094:	e002      	b.n	800409c <LoopCopyDataInit>

08004096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800409a:	3304      	adds	r3, #4

0800409c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800409c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800409e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040a0:	d3f9      	bcc.n	8004096 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040a2:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80040a4:	4c0a      	ldr	r4, [pc, #40]	; (80040d0 <LoopForever+0x16>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040a8:	e001      	b.n	80040ae <LoopFillZerobss>

080040aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040ac:	3204      	adds	r2, #4

080040ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040b0:	d3fb      	bcc.n	80040aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80040b2:	f005 f8bb 	bl	800922c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80040b6:	f7ff f847 	bl	8003148 <main>

080040ba <LoopForever>:

LoopForever:
  b LoopForever
 80040ba:	e7fe      	b.n	80040ba <LoopForever>
  ldr   r0, =_estack
 80040bc:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 80040c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040c4:	2000053c 	.word	0x2000053c
  ldr r2, =_sidata
 80040c8:	08009498 	.word	0x08009498
  ldr r2, =_sbss
 80040cc:	2000053c 	.word	0x2000053c
  ldr r4, =_ebss
 80040d0:	20000c5c 	.word	0x20000c5c

080040d4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040d4:	e7fe      	b.n	80040d4 <ADC1_COMP_IRQHandler>
	...

080040d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040de:	1dfb      	adds	r3, r7, #7
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_Init+0x3c>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_Init+0x3c>)
 80040ea:	2180      	movs	r1, #128	; 0x80
 80040ec:	0049      	lsls	r1, r1, #1
 80040ee:	430a      	orrs	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040f2:	2003      	movs	r0, #3
 80040f4:	f000 f810 	bl	8004118 <HAL_InitTick>
 80040f8:	1e03      	subs	r3, r0, #0
 80040fa:	d003      	beq.n	8004104 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80040fc:	1dfb      	adds	r3, r7, #7
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	e001      	b.n	8004108 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004104:	f7ff fc68 	bl	80039d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004108:	1dfb      	adds	r3, r7, #7
 800410a:	781b      	ldrb	r3, [r3, #0]
}
 800410c:	0018      	movs	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	b002      	add	sp, #8
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40022000 	.word	0x40022000

08004118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004120:	230f      	movs	r3, #15
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004128:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <HAL_InitTick+0x88>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d02b      	beq.n	8004188 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004130:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <HAL_InitTick+0x8c>)
 8004132:	681c      	ldr	r4, [r3, #0]
 8004134:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <HAL_InitTick+0x88>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	0019      	movs	r1, r3
 800413a:	23fa      	movs	r3, #250	; 0xfa
 800413c:	0098      	lsls	r0, r3, #2
 800413e:	f7fb ffdf 	bl	8000100 <__udivsi3>
 8004142:	0003      	movs	r3, r0
 8004144:	0019      	movs	r1, r3
 8004146:	0020      	movs	r0, r4
 8004148:	f7fb ffda 	bl	8000100 <__udivsi3>
 800414c:	0003      	movs	r3, r0
 800414e:	0018      	movs	r0, r3
 8004150:	f000 ff99 	bl	8005086 <HAL_SYSTICK_Config>
 8004154:	1e03      	subs	r3, r0, #0
 8004156:	d112      	bne.n	800417e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d80a      	bhi.n	8004174 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	2301      	movs	r3, #1
 8004162:	425b      	negs	r3, r3
 8004164:	2200      	movs	r2, #0
 8004166:	0018      	movs	r0, r3
 8004168:	f000 ff64 	bl	8005034 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <HAL_InitTick+0x90>)
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e00d      	b.n	8004190 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004174:	230f      	movs	r3, #15
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	e008      	b.n	8004190 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800417e:	230f      	movs	r3, #15
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	e003      	b.n	8004190 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004188:	230f      	movs	r3, #15
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004190:	230f      	movs	r3, #15
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	781b      	ldrb	r3, [r3, #0]
}
 8004196:	0018      	movs	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	b005      	add	sp, #20
 800419c:	bd90      	pop	{r4, r7, pc}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	2000010c 	.word	0x2000010c
 80041a4:	20000104 	.word	0x20000104
 80041a8:	20000108 	.word	0x20000108

080041ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <HAL_IncTick+0x1c>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	001a      	movs	r2, r3
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HAL_IncTick+0x20>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	18d2      	adds	r2, r2, r3
 80041bc:	4b03      	ldr	r3, [pc, #12]	; (80041cc <HAL_IncTick+0x20>)
 80041be:	601a      	str	r2, [r3, #0]
}
 80041c0:	46c0      	nop			; (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	2000010c 	.word	0x2000010c
 80041cc:	20000c54 	.word	0x20000c54

080041d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  return uwTick;
 80041d4:	4b02      	ldr	r3, [pc, #8]	; (80041e0 <HAL_GetTick+0x10>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	0018      	movs	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	20000c54 	.word	0x20000c54

080041e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041ec:	f7ff fff0 	bl	80041d0 <HAL_GetTick>
 80041f0:	0003      	movs	r3, r0
 80041f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3301      	adds	r3, #1
 80041fc:	d005      	beq.n	800420a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <HAL_Delay+0x44>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	001a      	movs	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	189b      	adds	r3, r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	f7ff ffe0 	bl	80041d0 <HAL_GetTick>
 8004210:	0002      	movs	r2, r0
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	429a      	cmp	r2, r3
 800421a:	d8f7      	bhi.n	800420c <HAL_Delay+0x28>
  {
  }
}
 800421c:	46c0      	nop			; (mov r8, r8)
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	b004      	add	sp, #16
 8004224:	bd80      	pop	{r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	2000010c 	.word	0x2000010c

0800422c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <HAL_SuspendTick+0x18>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_SuspendTick+0x18>)
 8004236:	2102      	movs	r1, #2
 8004238:	438a      	bics	r2, r1
 800423a:	601a      	str	r2, [r3, #0]
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	e000e010 	.word	0xe000e010

08004248 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <HAL_ResumeTick+0x18>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b03      	ldr	r3, [pc, #12]	; (8004260 <HAL_ResumeTick+0x18>)
 8004252:	2102      	movs	r1, #2
 8004254:	430a      	orrs	r2, r1
 8004256:	601a      	str	r2, [r3, #0]
}
 8004258:	46c0      	nop			; (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	e000e010 	.word	0xe000e010

08004264 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a05      	ldr	r2, [pc, #20]	; (8004288 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004274:	401a      	ands	r2, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	601a      	str	r2, [r3, #0]
}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	46bd      	mov	sp, r7
 8004282:	b002      	add	sp, #8
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	fe3fffff 	.word	0xfe3fffff

0800428c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	23e0      	movs	r3, #224	; 0xe0
 800429a:	045b      	lsls	r3, r3, #17
 800429c:	4013      	ands	r3, r2
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b002      	add	sp, #8
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	2104      	movs	r1, #4
 80042ba:	400a      	ands	r2, r1
 80042bc:	2107      	movs	r1, #7
 80042be:	4091      	lsls	r1, r2
 80042c0:	000a      	movs	r2, r1
 80042c2:	43d2      	mvns	r2, r2
 80042c4:	401a      	ands	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2104      	movs	r1, #4
 80042ca:	400b      	ands	r3, r1
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4099      	lsls	r1, r3
 80042d0:	000b      	movs	r3, r1
 80042d2:	431a      	orrs	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80042d8:	46c0      	nop			; (mov r8, r8)
 80042da:	46bd      	mov	sp, r7
 80042dc:	b004      	add	sp, #16
 80042de:	bd80      	pop	{r7, pc}

080042e0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	2104      	movs	r1, #4
 80042f2:	400a      	ands	r2, r1
 80042f4:	2107      	movs	r1, #7
 80042f6:	4091      	lsls	r1, r2
 80042f8:	000a      	movs	r2, r1
 80042fa:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2104      	movs	r1, #4
 8004300:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004302:	40da      	lsrs	r2, r3
 8004304:	0013      	movs	r3, r2
}
 8004306:	0018      	movs	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	b002      	add	sp, #8
 800430c:	bd80      	pop	{r7, pc}

0800430e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	23c0      	movs	r3, #192	; 0xc0
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	4013      	ands	r3, r2
 8004320:	d101      	bne.n	8004326 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004326:	2300      	movs	r3, #0
}
 8004328:	0018      	movs	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	b002      	add	sp, #8
 800432e:	bd80      	pop	{r7, pc}

08004330 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	211f      	movs	r1, #31
 8004344:	400a      	ands	r2, r1
 8004346:	210f      	movs	r1, #15
 8004348:	4091      	lsls	r1, r2
 800434a:	000a      	movs	r2, r1
 800434c:	43d2      	mvns	r2, r2
 800434e:	401a      	ands	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	0e9b      	lsrs	r3, r3, #26
 8004354:	210f      	movs	r1, #15
 8004356:	4019      	ands	r1, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	201f      	movs	r0, #31
 800435c:	4003      	ands	r3, r0
 800435e:	4099      	lsls	r1, r3
 8004360:	000b      	movs	r3, r1
 8004362:	431a      	orrs	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004368:	46c0      	nop			; (mov r8, r8)
 800436a:	46bd      	mov	sp, r7
 800436c:	b004      	add	sp, #16
 800436e:	bd80      	pop	{r7, pc}

08004370 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	035b      	lsls	r3, r3, #13
 8004382:	0b5b      	lsrs	r3, r3, #13
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	629a      	str	r2, [r3, #40]	; 0x28
}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	46bd      	mov	sp, r7
 800438e:	b002      	add	sp, #8
 8004390:	bd80      	pop	{r7, pc}

08004392 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	0352      	lsls	r2, r2, #13
 80043a4:	0b52      	lsrs	r2, r2, #13
 80043a6:	43d2      	mvns	r2, r2
 80043a8:	401a      	ands	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b002      	add	sp, #8
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	0212      	lsls	r2, r2, #8
 80043cc:	43d2      	mvns	r2, r2
 80043ce:	401a      	ands	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	400b      	ands	r3, r1
 80043d8:	4904      	ldr	r1, [pc, #16]	; (80043ec <LL_ADC_SetChannelSamplingTime+0x34>)
 80043da:	400b      	ands	r3, r1
 80043dc:	431a      	orrs	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b004      	add	sp, #16
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	07ffff00 	.word	0x07ffff00

080043f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	4a05      	ldr	r2, [pc, #20]	; (8004414 <LL_ADC_EnableInternalRegulator+0x24>)
 80043fe:	4013      	ands	r3, r2
 8004400:	2280      	movs	r2, #128	; 0x80
 8004402:	0552      	lsls	r2, r2, #21
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b002      	add	sp, #8
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	6fffffe8 	.word	0x6fffffe8

08004418 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	055b      	lsls	r3, r3, #21
 8004428:	401a      	ands	r2, r3
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	055b      	lsls	r3, r3, #21
 800442e:	429a      	cmp	r2, r3
 8004430:	d101      	bne.n	8004436 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004436:	2300      	movs	r3, #0
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	b002      	add	sp, #8
 800443e:	bd80      	pop	{r7, pc}

08004440 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4a04      	ldr	r2, [pc, #16]	; (8004460 <LL_ADC_Enable+0x20>)
 800444e:	4013      	ands	r3, r2
 8004450:	2201      	movs	r2, #1
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004458:	46c0      	nop			; (mov r8, r8)
 800445a:	46bd      	mov	sp, r7
 800445c:	b002      	add	sp, #8
 800445e:	bd80      	pop	{r7, pc}
 8004460:	7fffffe8 	.word	0x7fffffe8

08004464 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2201      	movs	r2, #1
 8004472:	4013      	ands	r3, r2
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <LL_ADC_IsEnabled+0x18>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <LL_ADC_IsEnabled+0x1a>
 800447c:	2300      	movs	r3, #0
}
 800447e:	0018      	movs	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	b002      	add	sp, #8
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4a04      	ldr	r2, [pc, #16]	; (80044a8 <LL_ADC_REG_StartConversion+0x20>)
 8004496:	4013      	ands	r3, r2
 8004498:	2204      	movs	r2, #4
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b002      	add	sp, #8
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	7fffffe8 	.word	0x7fffffe8

080044ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2204      	movs	r2, #4
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d101      	bne.n	80044c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	0018      	movs	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b002      	add	sp, #8
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044d8:	231f      	movs	r3, #31
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e17f      	b.n	80047f6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	0018      	movs	r0, r3
 8004502:	f7fe fbc9 	bl	8002c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2254      	movs	r2, #84	; 0x54
 8004510:	2100      	movs	r1, #0
 8004512:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	0018      	movs	r0, r3
 800451a:	f7ff ff7d 	bl	8004418 <LL_ADC_IsInternalRegulatorEnabled>
 800451e:	1e03      	subs	r3, r0, #0
 8004520:	d115      	bne.n	800454e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	0018      	movs	r0, r3
 8004528:	f7ff ff62 	bl	80043f0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800452c:	4bb4      	ldr	r3, [pc, #720]	; (8004800 <HAL_ADC_Init+0x330>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	49b4      	ldr	r1, [pc, #720]	; (8004804 <HAL_ADC_Init+0x334>)
 8004532:	0018      	movs	r0, r3
 8004534:	f7fb fde4 	bl	8000100 <__udivsi3>
 8004538:	0003      	movs	r3, r0
 800453a:	3301      	adds	r3, #1
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004540:	e002      	b.n	8004548 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3b01      	subs	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f9      	bne.n	8004542 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	0018      	movs	r0, r3
 8004554:	f7ff ff60 	bl	8004418 <LL_ADC_IsInternalRegulatorEnabled>
 8004558:	1e03      	subs	r3, r0, #0
 800455a:	d10f      	bne.n	800457c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004560:	2210      	movs	r2, #16
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456c:	2201      	movs	r2, #1
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004574:	231f      	movs	r3, #31
 8004576:	18fb      	adds	r3, r7, r3
 8004578:	2201      	movs	r2, #1
 800457a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	0018      	movs	r0, r3
 8004582:	f7ff ff93 	bl	80044ac <LL_ADC_REG_IsConversionOngoing>
 8004586:	0003      	movs	r3, r0
 8004588:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	2210      	movs	r2, #16
 8004590:	4013      	ands	r3, r2
 8004592:	d000      	beq.n	8004596 <HAL_ADC_Init+0xc6>
 8004594:	e122      	b.n	80047dc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d000      	beq.n	800459e <HAL_ADC_Init+0xce>
 800459c:	e11e      	b.n	80047dc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	4a99      	ldr	r2, [pc, #612]	; (8004808 <HAL_ADC_Init+0x338>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	2202      	movs	r2, #2
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	0018      	movs	r0, r3
 80045b4:	f7ff ff56 	bl	8004464 <LL_ADC_IsEnabled>
 80045b8:	1e03      	subs	r3, r0, #0
 80045ba:	d000      	beq.n	80045be <HAL_ADC_Init+0xee>
 80045bc:	e0ad      	b.n	800471a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	7e1b      	ldrb	r3, [r3, #24]
 80045c6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80045c8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	7e5b      	ldrb	r3, [r3, #25]
 80045ce:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80045d0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	7e9b      	ldrb	r3, [r3, #26]
 80045d6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80045d8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_ADC_Init+0x118>
 80045e2:	2380      	movs	r3, #128	; 0x80
 80045e4:	015b      	lsls	r3, r3, #5
 80045e6:	e000      	b.n	80045ea <HAL_ADC_Init+0x11a>
 80045e8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80045ea:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80045f0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	da04      	bge.n	8004604 <HAL_ADC_Init+0x134>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	e001      	b.n	8004608 <HAL_ADC_Init+0x138>
 8004604:	2380      	movs	r3, #128	; 0x80
 8004606:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004608:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	212c      	movs	r1, #44	; 0x2c
 800460e:	5c5b      	ldrb	r3, [r3, r1]
 8004610:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004612:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4313      	orrs	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	5c9b      	ldrb	r3, [r3, r2]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d115      	bne.n	8004650 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	7e9b      	ldrb	r3, [r3, #26]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d105      	bne.n	8004638 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2280      	movs	r2, #128	; 0x80
 8004630:	0252      	lsls	r2, r2, #9
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	e00b      	b.n	8004650 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463c:	2220      	movs	r2, #32
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004648:	2201      	movs	r2, #1
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800465c:	23e0      	movs	r3, #224	; 0xe0
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004666:	4313      	orrs	r3, r2
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4313      	orrs	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a65      	ldr	r2, [pc, #404]	; (800480c <HAL_ADC_Init+0x33c>)
 8004676:	4013      	ands	r3, r2
 8004678:	0019      	movs	r1, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	430a      	orrs	r2, r1
 8004682:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	0f9b      	lsrs	r3, r3, #30
 800468a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004690:	4313      	orrs	r3, r2
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	223c      	movs	r2, #60	; 0x3c
 800469c:	5c9b      	ldrb	r3, [r3, r2]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d111      	bne.n	80046c6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	0f9b      	lsrs	r3, r3, #30
 80046a8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046ae:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80046b4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80046ba:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	2201      	movs	r2, #1
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	4a50      	ldr	r2, [pc, #320]	; (8004810 <HAL_ADC_Init+0x340>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	0019      	movs	r1, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	430a      	orrs	r2, r1
 80046da:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	23c0      	movs	r3, #192	; 0xc0
 80046e2:	061b      	lsls	r3, r3, #24
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d018      	beq.n	800471a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	05db      	lsls	r3, r3, #23
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d012      	beq.n	800471a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	061b      	lsls	r3, r3, #24
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d00c      	beq.n	800471a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004700:	4b44      	ldr	r3, [pc, #272]	; (8004814 <HAL_ADC_Init+0x344>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a44      	ldr	r2, [pc, #272]	; (8004818 <HAL_ADC_Init+0x348>)
 8004706:	4013      	ands	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	23f0      	movs	r3, #240	; 0xf0
 8004710:	039b      	lsls	r3, r3, #14
 8004712:	401a      	ands	r2, r3
 8004714:	4b3f      	ldr	r3, [pc, #252]	; (8004814 <HAL_ADC_Init+0x344>)
 8004716:	430a      	orrs	r2, r1
 8004718:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	001a      	movs	r2, r3
 8004724:	2100      	movs	r1, #0
 8004726:	f7ff fdbe 	bl	80042a6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	493a      	ldr	r1, [pc, #232]	; (800481c <HAL_ADC_Init+0x34c>)
 8004734:	001a      	movs	r2, r3
 8004736:	f7ff fdb6 	bl	80042a6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2110      	movs	r1, #16
 800474e:	4249      	negs	r1, r1
 8004750:	430a      	orrs	r2, r1
 8004752:	629a      	str	r2, [r3, #40]	; 0x28
 8004754:	e018      	b.n	8004788 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	039b      	lsls	r3, r3, #14
 800475e:	429a      	cmp	r2, r3
 8004760:	d112      	bne.n	8004788 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	3b01      	subs	r3, #1
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	221c      	movs	r2, #28
 8004772:	4013      	ands	r3, r2
 8004774:	2210      	movs	r2, #16
 8004776:	4252      	negs	r2, r2
 8004778:	409a      	lsls	r2, r3
 800477a:	0011      	movs	r1, r2
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2100      	movs	r1, #0
 800478e:	0018      	movs	r0, r3
 8004790:	f7ff fda6 	bl	80042e0 <LL_ADC_GetSamplingTimeCommonChannels>
 8004794:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800479a:	429a      	cmp	r2, r3
 800479c:	d10b      	bne.n	80047b6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	2203      	movs	r2, #3
 80047aa:	4393      	bics	r3, r2
 80047ac:	2201      	movs	r2, #1
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80047b4:	e01c      	b.n	80047f0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	2212      	movs	r2, #18
 80047bc:	4393      	bics	r3, r2
 80047be:	2210      	movs	r2, #16
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ca:	2201      	movs	r2, #1
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80047d2:	231f      	movs	r3, #31
 80047d4:	18fb      	adds	r3, r7, r3
 80047d6:	2201      	movs	r2, #1
 80047d8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80047da:	e009      	b.n	80047f0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	2210      	movs	r2, #16
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80047e8:	231f      	movs	r3, #31
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80047f0:	231f      	movs	r3, #31
 80047f2:	18fb      	adds	r3, r7, r3
 80047f4:	781b      	ldrb	r3, [r3, #0]
}
 80047f6:	0018      	movs	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b008      	add	sp, #32
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	20000104 	.word	0x20000104
 8004804:	00030d40 	.word	0x00030d40
 8004808:	fffffefd 	.word	0xfffffefd
 800480c:	fffe0201 	.word	0xfffe0201
 8004810:	1ffffc02 	.word	0x1ffffc02
 8004814:	40012708 	.word	0x40012708
 8004818:	ffc3ffff 	.word	0xffc3ffff
 800481c:	07ffff04 	.word	0x07ffff04

08004820 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004820:	b5b0      	push	{r4, r5, r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0018      	movs	r0, r3
 800482e:	f7ff fe3d 	bl	80044ac <LL_ADC_REG_IsConversionOngoing>
 8004832:	1e03      	subs	r3, r0, #0
 8004834:	d135      	bne.n	80048a2 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2254      	movs	r2, #84	; 0x54
 800483a:	5c9b      	ldrb	r3, [r3, r2]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_ADC_Start+0x24>
 8004840:	2302      	movs	r3, #2
 8004842:	e035      	b.n	80048b0 <HAL_ADC_Start+0x90>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2254      	movs	r2, #84	; 0x54
 8004848:	2101      	movs	r1, #1
 800484a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800484c:	250f      	movs	r5, #15
 800484e:	197c      	adds	r4, r7, r5
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	0018      	movs	r0, r3
 8004854:	f000 faaa 	bl	8004dac <ADC_Enable>
 8004858:	0003      	movs	r3, r0
 800485a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800485c:	197b      	adds	r3, r7, r5
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d119      	bne.n	8004898 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004868:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <HAL_ADC_Start+0x98>)
 800486a:	4013      	ands	r3, r2
 800486c:	2280      	movs	r2, #128	; 0x80
 800486e:	0052      	lsls	r2, r2, #1
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	221c      	movs	r2, #28
 8004882:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2254      	movs	r2, #84	; 0x54
 8004888:	2100      	movs	r1, #0
 800488a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	0018      	movs	r0, r3
 8004892:	f7ff fdf9 	bl	8004488 <LL_ADC_REG_StartConversion>
 8004896:	e008      	b.n	80048aa <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2254      	movs	r2, #84	; 0x54
 800489c:	2100      	movs	r1, #0
 800489e:	5499      	strb	r1, [r3, r2]
 80048a0:	e003      	b.n	80048aa <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80048a2:	230f      	movs	r3, #15
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	2202      	movs	r2, #2
 80048a8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80048aa:	230f      	movs	r3, #15
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	781b      	ldrb	r3, [r3, #0]
}
 80048b0:	0018      	movs	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b004      	add	sp, #16
 80048b6:	bdb0      	pop	{r4, r5, r7, pc}
 80048b8:	fffff0fe 	.word	0xfffff0fe

080048bc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d102      	bne.n	80048d4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80048ce:	2308      	movs	r3, #8
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	e00f      	b.n	80048f4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	4013      	ands	r3, r2
 80048de:	d007      	beq.n	80048f0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	2220      	movs	r2, #32
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e072      	b.n	80049d6 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80048f0:	2304      	movs	r3, #4
 80048f2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80048f4:	f7ff fc6c 	bl	80041d0 <HAL_GetTick>
 80048f8:	0003      	movs	r3, r0
 80048fa:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80048fc:	e01f      	b.n	800493e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	3301      	adds	r3, #1
 8004902:	d01c      	beq.n	800493e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004904:	f7ff fc64 	bl	80041d0 <HAL_GetTick>
 8004908:	0002      	movs	r2, r0
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d302      	bcc.n	800491a <HAL_ADC_PollForConversion+0x5e>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d111      	bne.n	800493e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4013      	ands	r3, r2
 8004924:	d10b      	bne.n	800493e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	2204      	movs	r2, #4
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2254      	movs	r2, #84	; 0x54
 8004936:	2100      	movs	r1, #0
 8004938:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e04b      	b.n	80049d6 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4013      	ands	r3, r2
 8004948:	d0d9      	beq.n	80048fe <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	2280      	movs	r2, #128	; 0x80
 8004950:	0092      	lsls	r2, r2, #2
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	0018      	movs	r0, r3
 800495e:	f7ff fcd6 	bl	800430e <LL_ADC_REG_IsTriggerSourceSWStart>
 8004962:	1e03      	subs	r3, r0, #0
 8004964:	d02e      	beq.n	80049c4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	7e9b      	ldrb	r3, [r3, #26]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d12a      	bne.n	80049c4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2208      	movs	r2, #8
 8004976:	4013      	ands	r3, r2
 8004978:	2b08      	cmp	r3, #8
 800497a:	d123      	bne.n	80049c4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	0018      	movs	r0, r3
 8004982:	f7ff fd93 	bl	80044ac <LL_ADC_REG_IsConversionOngoing>
 8004986:	1e03      	subs	r3, r0, #0
 8004988:	d110      	bne.n	80049ac <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	210c      	movs	r1, #12
 8004996:	438a      	bics	r2, r1
 8004998:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499e:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <HAL_ADC_PollForConversion+0x124>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	2201      	movs	r2, #1
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	659a      	str	r2, [r3, #88]	; 0x58
 80049aa:	e00b      	b.n	80049c4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	2220      	movs	r2, #32
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049bc:	2201      	movs	r2, #1
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	7e1b      	ldrb	r3, [r3, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d103      	bne.n	80049d4 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	220c      	movs	r2, #12
 80049d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	0018      	movs	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	b004      	add	sp, #16
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	fffffefe 	.word	0xfffffefe

080049e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80049f2:	0018      	movs	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	b002      	add	sp, #8
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a06:	2317      	movs	r3, #23
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2254      	movs	r2, #84	; 0x54
 8004a16:	5c9b      	ldrb	r3, [r3, r2]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x24>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e1c0      	b.n	8004da2 <HAL_ADC_ConfigChannel+0x3a6>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2254      	movs	r2, #84	; 0x54
 8004a24:	2101      	movs	r1, #1
 8004a26:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f7ff fd3d 	bl	80044ac <LL_ADC_REG_IsConversionOngoing>
 8004a32:	1e03      	subs	r3, r0, #0
 8004a34:	d000      	beq.n	8004a38 <HAL_ADC_ConfigChannel+0x3c>
 8004a36:	e1a3      	b.n	8004d80 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d100      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0x46>
 8004a40:	e143      	b.n	8004cca <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	061b      	lsls	r3, r3, #24
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d004      	beq.n	8004a58 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a52:	4ac1      	ldr	r2, [pc, #772]	; (8004d58 <HAL_ADC_ConfigChannel+0x35c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d108      	bne.n	8004a6a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	0019      	movs	r1, r3
 8004a62:	0010      	movs	r0, r2
 8004a64:	f7ff fc84 	bl	8004370 <LL_ADC_REG_SetSequencerChAdd>
 8004a68:	e0c9      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	211f      	movs	r1, #31
 8004a74:	400b      	ands	r3, r1
 8004a76:	210f      	movs	r1, #15
 8004a78:	4099      	lsls	r1, r3
 8004a7a:	000b      	movs	r3, r1
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	4013      	ands	r3, r2
 8004a80:	0019      	movs	r1, r3
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	035b      	lsls	r3, r3, #13
 8004a88:	0b5b      	lsrs	r3, r3, #13
 8004a8a:	d105      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x9c>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	0e9b      	lsrs	r3, r3, #26
 8004a92:	221f      	movs	r2, #31
 8004a94:	4013      	ands	r3, r2
 8004a96:	e098      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d000      	beq.n	8004aa4 <HAL_ADC_ConfigChannel+0xa8>
 8004aa2:	e091      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x1cc>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d000      	beq.n	8004ab0 <HAL_ADC_ConfigChannel+0xb4>
 8004aae:	e089      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x1c8>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d000      	beq.n	8004abc <HAL_ADC_ConfigChannel+0xc0>
 8004aba:	e081      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x1c4>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d000      	beq.n	8004ac8 <HAL_ADC_ConfigChannel+0xcc>
 8004ac6:	e079      	b.n	8004bbc <HAL_ADC_ConfigChannel+0x1c0>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2210      	movs	r2, #16
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d000      	beq.n	8004ad4 <HAL_ADC_ConfigChannel+0xd8>
 8004ad2:	e071      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x1bc>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	4013      	ands	r3, r2
 8004adc:	d000      	beq.n	8004ae0 <HAL_ADC_ConfigChannel+0xe4>
 8004ade:	e069      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x1b8>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2240      	movs	r2, #64	; 0x40
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d000      	beq.n	8004aec <HAL_ADC_ConfigChannel+0xf0>
 8004aea:	e061      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x1b4>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2280      	movs	r2, #128	; 0x80
 8004af2:	4013      	ands	r3, r2
 8004af4:	d000      	beq.n	8004af8 <HAL_ADC_ConfigChannel+0xfc>
 8004af6:	e059      	b.n	8004bac <HAL_ADC_ConfigChannel+0x1b0>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	4013      	ands	r3, r2
 8004b02:	d151      	bne.n	8004ba8 <HAL_ADC_ConfigChannel+0x1ac>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d149      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x1a8>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d141      	bne.n	8004ba0 <HAL_ADC_ConfigChannel+0x1a4>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	4013      	ands	r3, r2
 8004b26:	d139      	bne.n	8004b9c <HAL_ADC_ConfigChannel+0x1a0>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	2380      	movs	r3, #128	; 0x80
 8004b2e:	015b      	lsls	r3, r3, #5
 8004b30:	4013      	ands	r3, r2
 8004b32:	d131      	bne.n	8004b98 <HAL_ADC_ConfigChannel+0x19c>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	019b      	lsls	r3, r3, #6
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d129      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x198>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	01db      	lsls	r3, r3, #7
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d121      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x194>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	4013      	ands	r3, r2
 8004b56:	d119      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x190>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	2380      	movs	r3, #128	; 0x80
 8004b5e:	025b      	lsls	r3, r3, #9
 8004b60:	4013      	ands	r3, r2
 8004b62:	d111      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0x18c>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	2380      	movs	r3, #128	; 0x80
 8004b6a:	029b      	lsls	r3, r3, #10
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d109      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x188>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	2380      	movs	r3, #128	; 0x80
 8004b76:	02db      	lsls	r3, r3, #11
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d001      	beq.n	8004b80 <HAL_ADC_ConfigChannel+0x184>
 8004b7c:	2312      	movs	r3, #18
 8004b7e:	e024      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004b80:	2300      	movs	r3, #0
 8004b82:	e022      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004b84:	2311      	movs	r3, #17
 8004b86:	e020      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	e01e      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004b8c:	230f      	movs	r3, #15
 8004b8e:	e01c      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004b90:	230e      	movs	r3, #14
 8004b92:	e01a      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004b94:	230d      	movs	r3, #13
 8004b96:	e018      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004b98:	230c      	movs	r3, #12
 8004b9a:	e016      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004b9c:	230b      	movs	r3, #11
 8004b9e:	e014      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004ba0:	230a      	movs	r3, #10
 8004ba2:	e012      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004ba4:	2309      	movs	r3, #9
 8004ba6:	e010      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004ba8:	2308      	movs	r3, #8
 8004baa:	e00e      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004bac:	2307      	movs	r3, #7
 8004bae:	e00c      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004bb0:	2306      	movs	r3, #6
 8004bb2:	e00a      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004bb4:	2305      	movs	r3, #5
 8004bb6:	e008      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004bb8:	2304      	movs	r3, #4
 8004bba:	e006      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e004      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e002      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1ce>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	6852      	ldr	r2, [r2, #4]
 8004bce:	201f      	movs	r0, #31
 8004bd0:	4002      	ands	r2, r0
 8004bd2:	4093      	lsls	r3, r2
 8004bd4:	000a      	movs	r2, r1
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	089b      	lsrs	r3, r3, #2
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d808      	bhi.n	8004bfe <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	6859      	ldr	r1, [r3, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	001a      	movs	r2, r3
 8004bfa:	f7ff fb99 	bl	8004330 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6819      	ldr	r1, [r3, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	001a      	movs	r2, r3
 8004c0c:	f7ff fbd4 	bl	80043b8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	db00      	blt.n	8004c1a <HAL_ADC_ConfigChannel+0x21e>
 8004c18:	e0bc      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c1a:	4b50      	ldr	r3, [pc, #320]	; (8004d5c <HAL_ADC_ConfigChannel+0x360>)
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f7ff fb35 	bl	800428c <LL_ADC_GetCommonPathInternalCh>
 8004c22:	0003      	movs	r3, r0
 8004c24:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a4d      	ldr	r2, [pc, #308]	; (8004d60 <HAL_ADC_ConfigChannel+0x364>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d122      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004c38:	d11d      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2280      	movs	r2, #128	; 0x80
 8004c3e:	0412      	lsls	r2, r2, #16
 8004c40:	4313      	orrs	r3, r2
 8004c42:	4a46      	ldr	r2, [pc, #280]	; (8004d5c <HAL_ADC_ConfigChannel+0x360>)
 8004c44:	0019      	movs	r1, r3
 8004c46:	0010      	movs	r0, r2
 8004c48:	f7ff fb0c 	bl	8004264 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c4c:	4b45      	ldr	r3, [pc, #276]	; (8004d64 <HAL_ADC_ConfigChannel+0x368>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4945      	ldr	r1, [pc, #276]	; (8004d68 <HAL_ADC_ConfigChannel+0x36c>)
 8004c52:	0018      	movs	r0, r3
 8004c54:	f7fb fa54 	bl	8000100 <__udivsi3>
 8004c58:	0003      	movs	r3, r0
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	0013      	movs	r3, r2
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	189b      	adds	r3, r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c66:	e002      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f9      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004c74:	e08e      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a3c      	ldr	r2, [pc, #240]	; (8004d6c <HAL_ADC_ConfigChannel+0x370>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d10e      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	2380      	movs	r3, #128	; 0x80
 8004c84:	045b      	lsls	r3, r3, #17
 8004c86:	4013      	ands	r3, r2
 8004c88:	d109      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2280      	movs	r2, #128	; 0x80
 8004c8e:	0452      	lsls	r2, r2, #17
 8004c90:	4313      	orrs	r3, r2
 8004c92:	4a32      	ldr	r2, [pc, #200]	; (8004d5c <HAL_ADC_ConfigChannel+0x360>)
 8004c94:	0019      	movs	r1, r3
 8004c96:	0010      	movs	r0, r2
 8004c98:	f7ff fae4 	bl	8004264 <LL_ADC_SetCommonPathInternalCh>
 8004c9c:	e07a      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a33      	ldr	r2, [pc, #204]	; (8004d70 <HAL_ADC_ConfigChannel+0x374>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d000      	beq.n	8004caa <HAL_ADC_ConfigChannel+0x2ae>
 8004ca8:	e074      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	03db      	lsls	r3, r3, #15
 8004cb0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004cb2:	d000      	beq.n	8004cb6 <HAL_ADC_ConfigChannel+0x2ba>
 8004cb4:	e06e      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2280      	movs	r2, #128	; 0x80
 8004cba:	03d2      	lsls	r2, r2, #15
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	4a27      	ldr	r2, [pc, #156]	; (8004d5c <HAL_ADC_ConfigChannel+0x360>)
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	0010      	movs	r0, r2
 8004cc4:	f7ff face 	bl	8004264 <LL_ADC_SetCommonPathInternalCh>
 8004cc8:	e064      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	061b      	lsls	r3, r3, #24
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d004      	beq.n	8004ce0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004cda:	4a1f      	ldr	r2, [pc, #124]	; (8004d58 <HAL_ADC_ConfigChannel+0x35c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d107      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	0019      	movs	r1, r3
 8004cea:	0010      	movs	r0, r2
 8004cec:	f7ff fb51 	bl	8004392 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	da4d      	bge.n	8004d94 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cf8:	4b18      	ldr	r3, [pc, #96]	; (8004d5c <HAL_ADC_ConfigChannel+0x360>)
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f7ff fac6 	bl	800428c <LL_ADC_GetCommonPathInternalCh>
 8004d00:	0003      	movs	r3, r0
 8004d02:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <HAL_ADC_ConfigChannel+0x364>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d108      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4a18      	ldr	r2, [pc, #96]	; (8004d74 <HAL_ADC_ConfigChannel+0x378>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	4a11      	ldr	r2, [pc, #68]	; (8004d5c <HAL_ADC_ConfigChannel+0x360>)
 8004d16:	0019      	movs	r1, r3
 8004d18:	0010      	movs	r0, r2
 8004d1a:	f7ff faa3 	bl	8004264 <LL_ADC_SetCommonPathInternalCh>
 8004d1e:	e039      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a11      	ldr	r2, [pc, #68]	; (8004d6c <HAL_ADC_ConfigChannel+0x370>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d108      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <HAL_ADC_ConfigChannel+0x37c>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <HAL_ADC_ConfigChannel+0x360>)
 8004d32:	0019      	movs	r1, r3
 8004d34:	0010      	movs	r0, r2
 8004d36:	f7ff fa95 	bl	8004264 <LL_ADC_SetCommonPathInternalCh>
 8004d3a:	e02b      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0b      	ldr	r2, [pc, #44]	; (8004d70 <HAL_ADC_ConfigChannel+0x374>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d126      	bne.n	8004d94 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4a0c      	ldr	r2, [pc, #48]	; (8004d7c <HAL_ADC_ConfigChannel+0x380>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	4a03      	ldr	r2, [pc, #12]	; (8004d5c <HAL_ADC_ConfigChannel+0x360>)
 8004d4e:	0019      	movs	r1, r3
 8004d50:	0010      	movs	r0, r2
 8004d52:	f7ff fa87 	bl	8004264 <LL_ADC_SetCommonPathInternalCh>
 8004d56:	e01d      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x398>
 8004d58:	80000004 	.word	0x80000004
 8004d5c:	40012708 	.word	0x40012708
 8004d60:	b0001000 	.word	0xb0001000
 8004d64:	20000104 	.word	0x20000104
 8004d68:	00030d40 	.word	0x00030d40
 8004d6c:	b8004000 	.word	0xb8004000
 8004d70:	b4002000 	.word	0xb4002000
 8004d74:	ff7fffff 	.word	0xff7fffff
 8004d78:	feffffff 	.word	0xfeffffff
 8004d7c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d84:	2220      	movs	r2, #32
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004d8c:	2317      	movs	r3, #23
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	2201      	movs	r2, #1
 8004d92:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2254      	movs	r2, #84	; 0x54
 8004d98:	2100      	movs	r1, #0
 8004d9a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004d9c:	2317      	movs	r3, #23
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	781b      	ldrb	r3, [r3, #0]
}
 8004da2:	0018      	movs	r0, r3
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b006      	add	sp, #24
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	46c0      	nop			; (mov r8, r8)

08004dac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7ff fb51 	bl	8004464 <LL_ADC_IsEnabled>
 8004dc2:	1e03      	subs	r3, r0, #0
 8004dc4:	d000      	beq.n	8004dc8 <ADC_Enable+0x1c>
 8004dc6:	e069      	b.n	8004e9c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	4a36      	ldr	r2, [pc, #216]	; (8004ea8 <ADC_Enable+0xfc>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d00d      	beq.n	8004df0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd8:	2210      	movs	r2, #16
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de4:	2201      	movs	r2, #1
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e056      	b.n	8004e9e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7ff fb23 	bl	8004440 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004dfa:	4b2c      	ldr	r3, [pc, #176]	; (8004eac <ADC_Enable+0x100>)
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7ff fa45 	bl	800428c <LL_ADC_GetCommonPathInternalCh>
 8004e02:	0002      	movs	r2, r0
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	041b      	lsls	r3, r3, #16
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d00f      	beq.n	8004e2c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e0c:	4b28      	ldr	r3, [pc, #160]	; (8004eb0 <ADC_Enable+0x104>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4928      	ldr	r1, [pc, #160]	; (8004eb4 <ADC_Enable+0x108>)
 8004e12:	0018      	movs	r0, r3
 8004e14:	f7fb f974 	bl	8000100 <__udivsi3>
 8004e18:	0003      	movs	r3, r0
 8004e1a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004e1c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004e1e:	e002      	b.n	8004e26 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1f9      	bne.n	8004e20 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	7e5b      	ldrb	r3, [r3, #25]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d033      	beq.n	8004e9c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004e34:	f7ff f9cc 	bl	80041d0 <HAL_GetTick>
 8004e38:	0003      	movs	r3, r0
 8004e3a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e3c:	e027      	b.n	8004e8e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	0018      	movs	r0, r3
 8004e44:	f7ff fb0e 	bl	8004464 <LL_ADC_IsEnabled>
 8004e48:	1e03      	subs	r3, r0, #0
 8004e4a:	d104      	bne.n	8004e56 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f7ff faf5 	bl	8004440 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e56:	f7ff f9bb 	bl	80041d0 <HAL_GetTick>
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d914      	bls.n	8004e8e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d00d      	beq.n	8004e8e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	2210      	movs	r2, #16
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e82:	2201      	movs	r2, #1
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e007      	b.n	8004e9e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2201      	movs	r2, #1
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d1d0      	bne.n	8004e3e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b004      	add	sp, #16
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	80000017 	.word	0x80000017
 8004eac:	40012708 	.word	0x40012708
 8004eb0:	20000104 	.word	0x20000104
 8004eb4:	00030d40 	.word	0x00030d40

08004eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	0002      	movs	r2, r0
 8004ec0:	1dfb      	adds	r3, r7, #7
 8004ec2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004ec4:	1dfb      	adds	r3, r7, #7
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8004eca:	d809      	bhi.n	8004ee0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ecc:	1dfb      	adds	r3, r7, #7
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	001a      	movs	r2, r3
 8004ed2:	231f      	movs	r3, #31
 8004ed4:	401a      	ands	r2, r3
 8004ed6:	4b04      	ldr	r3, [pc, #16]	; (8004ee8 <__NVIC_EnableIRQ+0x30>)
 8004ed8:	2101      	movs	r1, #1
 8004eda:	4091      	lsls	r1, r2
 8004edc:	000a      	movs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004ee0:	46c0      	nop			; (mov r8, r8)
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b002      	add	sp, #8
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	e000e100 	.word	0xe000e100

08004eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	0002      	movs	r2, r0
 8004ef4:	6039      	str	r1, [r7, #0]
 8004ef6:	1dfb      	adds	r3, r7, #7
 8004ef8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004efa:	1dfb      	adds	r3, r7, #7
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b7f      	cmp	r3, #127	; 0x7f
 8004f00:	d828      	bhi.n	8004f54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f02:	4a2f      	ldr	r2, [pc, #188]	; (8004fc0 <__NVIC_SetPriority+0xd4>)
 8004f04:	1dfb      	adds	r3, r7, #7
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	b25b      	sxtb	r3, r3
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	33c0      	adds	r3, #192	; 0xc0
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	589b      	ldr	r3, [r3, r2]
 8004f12:	1dfa      	adds	r2, r7, #7
 8004f14:	7812      	ldrb	r2, [r2, #0]
 8004f16:	0011      	movs	r1, r2
 8004f18:	2203      	movs	r2, #3
 8004f1a:	400a      	ands	r2, r1
 8004f1c:	00d2      	lsls	r2, r2, #3
 8004f1e:	21ff      	movs	r1, #255	; 0xff
 8004f20:	4091      	lsls	r1, r2
 8004f22:	000a      	movs	r2, r1
 8004f24:	43d2      	mvns	r2, r2
 8004f26:	401a      	ands	r2, r3
 8004f28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	019b      	lsls	r3, r3, #6
 8004f2e:	22ff      	movs	r2, #255	; 0xff
 8004f30:	401a      	ands	r2, r3
 8004f32:	1dfb      	adds	r3, r7, #7
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	0018      	movs	r0, r3
 8004f38:	2303      	movs	r3, #3
 8004f3a:	4003      	ands	r3, r0
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f40:	481f      	ldr	r0, [pc, #124]	; (8004fc0 <__NVIC_SetPriority+0xd4>)
 8004f42:	1dfb      	adds	r3, r7, #7
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	b25b      	sxtb	r3, r3
 8004f48:	089b      	lsrs	r3, r3, #2
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	33c0      	adds	r3, #192	; 0xc0
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004f52:	e031      	b.n	8004fb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f54:	4a1b      	ldr	r2, [pc, #108]	; (8004fc4 <__NVIC_SetPriority+0xd8>)
 8004f56:	1dfb      	adds	r3, r7, #7
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	230f      	movs	r3, #15
 8004f5e:	400b      	ands	r3, r1
 8004f60:	3b08      	subs	r3, #8
 8004f62:	089b      	lsrs	r3, r3, #2
 8004f64:	3306      	adds	r3, #6
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	18d3      	adds	r3, r2, r3
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	1dfa      	adds	r2, r7, #7
 8004f70:	7812      	ldrb	r2, [r2, #0]
 8004f72:	0011      	movs	r1, r2
 8004f74:	2203      	movs	r2, #3
 8004f76:	400a      	ands	r2, r1
 8004f78:	00d2      	lsls	r2, r2, #3
 8004f7a:	21ff      	movs	r1, #255	; 0xff
 8004f7c:	4091      	lsls	r1, r2
 8004f7e:	000a      	movs	r2, r1
 8004f80:	43d2      	mvns	r2, r2
 8004f82:	401a      	ands	r2, r3
 8004f84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	019b      	lsls	r3, r3, #6
 8004f8a:	22ff      	movs	r2, #255	; 0xff
 8004f8c:	401a      	ands	r2, r3
 8004f8e:	1dfb      	adds	r3, r7, #7
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	0018      	movs	r0, r3
 8004f94:	2303      	movs	r3, #3
 8004f96:	4003      	ands	r3, r0
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f9c:	4809      	ldr	r0, [pc, #36]	; (8004fc4 <__NVIC_SetPriority+0xd8>)
 8004f9e:	1dfb      	adds	r3, r7, #7
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	001c      	movs	r4, r3
 8004fa4:	230f      	movs	r3, #15
 8004fa6:	4023      	ands	r3, r4
 8004fa8:	3b08      	subs	r3, #8
 8004faa:	089b      	lsrs	r3, r3, #2
 8004fac:	430a      	orrs	r2, r1
 8004fae:	3306      	adds	r3, #6
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	18c3      	adds	r3, r0, r3
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	601a      	str	r2, [r3, #0]
}
 8004fb8:	46c0      	nop			; (mov r8, r8)
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b003      	add	sp, #12
 8004fbe:	bd90      	pop	{r4, r7, pc}
 8004fc0:	e000e100 	.word	0xe000e100
 8004fc4:	e000ed00 	.word	0xe000ed00

08004fc8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004fcc:	f3bf 8f4f 	dsb	sy
}
 8004fd0:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fd2:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <__NVIC_SystemReset+0x1c>)
 8004fd4:	4a04      	ldr	r2, [pc, #16]	; (8004fe8 <__NVIC_SystemReset+0x20>)
 8004fd6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fd8:	f3bf 8f4f 	dsb	sy
}
 8004fdc:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	e7fd      	b.n	8004fde <__NVIC_SystemReset+0x16>
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	e000ed00 	.word	0xe000ed00
 8004fe8:	05fa0004 	.word	0x05fa0004

08004fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	1e5a      	subs	r2, r3, #1
 8004ff8:	2380      	movs	r3, #128	; 0x80
 8004ffa:	045b      	lsls	r3, r3, #17
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d301      	bcc.n	8005004 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005000:	2301      	movs	r3, #1
 8005002:	e010      	b.n	8005026 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005004:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <SysTick_Config+0x44>)
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	3a01      	subs	r2, #1
 800500a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800500c:	2301      	movs	r3, #1
 800500e:	425b      	negs	r3, r3
 8005010:	2103      	movs	r1, #3
 8005012:	0018      	movs	r0, r3
 8005014:	f7ff ff6a 	bl	8004eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <SysTick_Config+0x44>)
 800501a:	2200      	movs	r2, #0
 800501c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800501e:	4b04      	ldr	r3, [pc, #16]	; (8005030 <SysTick_Config+0x44>)
 8005020:	2207      	movs	r2, #7
 8005022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005024:	2300      	movs	r3, #0
}
 8005026:	0018      	movs	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	b002      	add	sp, #8
 800502c:	bd80      	pop	{r7, pc}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	e000e010 	.word	0xe000e010

08005034 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	210f      	movs	r1, #15
 8005040:	187b      	adds	r3, r7, r1
 8005042:	1c02      	adds	r2, r0, #0
 8005044:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	187b      	adds	r3, r7, r1
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	b25b      	sxtb	r3, r3
 800504e:	0011      	movs	r1, r2
 8005050:	0018      	movs	r0, r3
 8005052:	f7ff ff4b 	bl	8004eec <__NVIC_SetPriority>
}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	46bd      	mov	sp, r7
 800505a:	b004      	add	sp, #16
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	0002      	movs	r2, r0
 8005066:	1dfb      	adds	r3, r7, #7
 8005068:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800506a:	1dfb      	adds	r3, r7, #7
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	b25b      	sxtb	r3, r3
 8005070:	0018      	movs	r0, r3
 8005072:	f7ff ff21 	bl	8004eb8 <__NVIC_EnableIRQ>
}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	46bd      	mov	sp, r7
 800507a:	b002      	add	sp, #8
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005082:	f7ff ffa1 	bl	8004fc8 <__NVIC_SystemReset>

08005086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	0018      	movs	r0, r3
 8005092:	f7ff ffab 	bl	8004fec <SysTick_Config>
 8005096:	0003      	movs	r3, r0
}
 8005098:	0018      	movs	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	b002      	add	sp, #8
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e077      	b.n	80051a2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a3d      	ldr	r2, [pc, #244]	; (80051ac <HAL_DMA_Init+0x10c>)
 80050b8:	4694      	mov	ip, r2
 80050ba:	4463      	add	r3, ip
 80050bc:	2114      	movs	r1, #20
 80050be:	0018      	movs	r0, r3
 80050c0:	f7fb f81e 	bl	8000100 <__udivsi3>
 80050c4:	0003      	movs	r3, r0
 80050c6:	009a      	lsls	r2, r3, #2
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2225      	movs	r2, #37	; 0x25
 80050d0:	2102      	movs	r1, #2
 80050d2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4934      	ldr	r1, [pc, #208]	; (80051b0 <HAL_DMA_Init+0x110>)
 80050e0:	400a      	ands	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6819      	ldr	r1, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	0018      	movs	r0, r3
 800511e:	f000 fa8d 	bl	800563c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	2380      	movs	r3, #128	; 0x80
 8005128:	01db      	lsls	r3, r3, #7
 800512a:	429a      	cmp	r2, r3
 800512c:	d102      	bne.n	8005134 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513c:	213f      	movs	r1, #63	; 0x3f
 800513e:	400a      	ands	r2, r1
 8005140:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800514a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d011      	beq.n	8005178 <HAL_DMA_Init+0xd8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b04      	cmp	r3, #4
 800515a:	d80d      	bhi.n	8005178 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	0018      	movs	r0, r3
 8005160:	f000 fa98 	bl	8005694 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	e008      	b.n	800518a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2225      	movs	r2, #37	; 0x25
 8005194:	2101      	movs	r1, #1
 8005196:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2224      	movs	r2, #36	; 0x24
 800519c:	2100      	movs	r1, #0
 800519e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	0018      	movs	r0, r3
 80051a4:	46bd      	mov	sp, r7
 80051a6:	b002      	add	sp, #8
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	bffdfff8 	.word	0xbffdfff8
 80051b0:	ffff800f 	.word	0xffff800f

080051b4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051c2:	2317      	movs	r3, #23
 80051c4:	18fb      	adds	r3, r7, r3
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2224      	movs	r2, #36	; 0x24
 80051ce:	5c9b      	ldrb	r3, [r3, r2]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_DMA_Start_IT+0x24>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e06f      	b.n	80052b8 <HAL_DMA_Start_IT+0x104>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2224      	movs	r2, #36	; 0x24
 80051dc:	2101      	movs	r1, #1
 80051de:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2225      	movs	r2, #37	; 0x25
 80051e4:	5c9b      	ldrb	r3, [r3, r2]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d157      	bne.n	800529c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2225      	movs	r2, #37	; 0x25
 80051f0:	2102      	movs	r1, #2
 80051f2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2101      	movs	r1, #1
 8005206:	438a      	bics	r2, r1
 8005208:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f9d3 	bl	80055bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	2b00      	cmp	r3, #0
 800521c:	d008      	beq.n	8005230 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	210e      	movs	r1, #14
 800522a:	430a      	orrs	r2, r1
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e00f      	b.n	8005250 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2104      	movs	r1, #4
 800523c:	438a      	bics	r2, r1
 800523e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	210a      	movs	r1, #10
 800524c:	430a      	orrs	r2, r1
 800524e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	2380      	movs	r3, #128	; 0x80
 8005258:	025b      	lsls	r3, r3, #9
 800525a:	4013      	ands	r3, r2
 800525c:	d008      	beq.n	8005270 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005268:	2180      	movs	r1, #128	; 0x80
 800526a:	0049      	lsls	r1, r1, #1
 800526c:	430a      	orrs	r2, r1
 800526e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005282:	2180      	movs	r1, #128	; 0x80
 8005284:	0049      	lsls	r1, r1, #1
 8005286:	430a      	orrs	r2, r1
 8005288:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2101      	movs	r1, #1
 8005296:	430a      	orrs	r2, r1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e00a      	b.n	80052b2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2280      	movs	r2, #128	; 0x80
 80052a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2224      	movs	r2, #36	; 0x24
 80052a6:	2100      	movs	r1, #0
 80052a8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80052aa:	2317      	movs	r3, #23
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	2201      	movs	r2, #1
 80052b0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80052b2:	2317      	movs	r3, #23
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	781b      	ldrb	r3, [r3, #0]
}
 80052b8:	0018      	movs	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b006      	add	sp, #24
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e050      	b.n	8005374 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2225      	movs	r2, #37	; 0x25
 80052d6:	5c9b      	ldrb	r3, [r3, r2]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d008      	beq.n	80052f0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2204      	movs	r2, #4
 80052e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2224      	movs	r2, #36	; 0x24
 80052e8:	2100      	movs	r1, #0
 80052ea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e041      	b.n	8005374 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	210e      	movs	r1, #14
 80052fc:	438a      	bics	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	491c      	ldr	r1, [pc, #112]	; (800537c <HAL_DMA_Abort+0xbc>)
 800530c:	400a      	ands	r2, r1
 800530e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2101      	movs	r1, #1
 800531c:	438a      	bics	r2, r1
 800531e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8005320:	4b17      	ldr	r3, [pc, #92]	; (8005380 <HAL_DMA_Abort+0xc0>)
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	221c      	movs	r2, #28
 800532a:	4013      	ands	r3, r2
 800532c:	2201      	movs	r2, #1
 800532e:	409a      	lsls	r2, r3
 8005330:	4b13      	ldr	r3, [pc, #76]	; (8005380 <HAL_DMA_Abort+0xc0>)
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800533e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00c      	beq.n	8005362 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005352:	490a      	ldr	r1, [pc, #40]	; (800537c <HAL_DMA_Abort+0xbc>)
 8005354:	400a      	ands	r2, r1
 8005356:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005360:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2225      	movs	r2, #37	; 0x25
 8005366:	2101      	movs	r1, #1
 8005368:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2224      	movs	r2, #36	; 0x24
 800536e:	2100      	movs	r1, #0
 8005370:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	0018      	movs	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	b002      	add	sp, #8
 800537a:	bd80      	pop	{r7, pc}
 800537c:	fffffeff 	.word	0xfffffeff
 8005380:	40020000 	.word	0x40020000

08005384 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800538c:	210f      	movs	r1, #15
 800538e:	187b      	adds	r3, r7, r1
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2225      	movs	r2, #37	; 0x25
 8005398:	5c9b      	ldrb	r3, [r3, r2]
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d006      	beq.n	80053ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2204      	movs	r2, #4
 80053a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80053a6:	187b      	adds	r3, r7, r1
 80053a8:	2201      	movs	r2, #1
 80053aa:	701a      	strb	r2, [r3, #0]
 80053ac:	e049      	b.n	8005442 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	210e      	movs	r1, #14
 80053ba:	438a      	bics	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2101      	movs	r1, #1
 80053ca:	438a      	bics	r2, r1
 80053cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	491d      	ldr	r1, [pc, #116]	; (8005450 <HAL_DMA_Abort_IT+0xcc>)
 80053da:	400a      	ands	r2, r1
 80053dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80053de:	4b1d      	ldr	r3, [pc, #116]	; (8005454 <HAL_DMA_Abort_IT+0xd0>)
 80053e0:	6859      	ldr	r1, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	221c      	movs	r2, #28
 80053e8:	4013      	ands	r3, r2
 80053ea:	2201      	movs	r2, #1
 80053ec:	409a      	lsls	r2, r3
 80053ee:	4b19      	ldr	r3, [pc, #100]	; (8005454 <HAL_DMA_Abort_IT+0xd0>)
 80053f0:	430a      	orrs	r2, r1
 80053f2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80053fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00c      	beq.n	8005420 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005410:	490f      	ldr	r1, [pc, #60]	; (8005450 <HAL_DMA_Abort_IT+0xcc>)
 8005412:	400a      	ands	r2, r1
 8005414:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800541e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2225      	movs	r2, #37	; 0x25
 8005424:	2101      	movs	r1, #1
 8005426:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2224      	movs	r2, #36	; 0x24
 800542c:	2100      	movs	r1, #0
 800542e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	2b00      	cmp	r3, #0
 8005436:	d004      	beq.n	8005442 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	0010      	movs	r0, r2
 8005440:	4798      	blx	r3
    }
  }
  return status;
 8005442:	230f      	movs	r3, #15
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	781b      	ldrb	r3, [r3, #0]
}
 8005448:	0018      	movs	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	b004      	add	sp, #16
 800544e:	bd80      	pop	{r7, pc}
 8005450:	fffffeff 	.word	0xfffffeff
 8005454:	40020000 	.word	0x40020000

08005458 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005460:	4b55      	ldr	r3, [pc, #340]	; (80055b8 <HAL_DMA_IRQHandler+0x160>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	221c      	movs	r2, #28
 8005474:	4013      	ands	r3, r2
 8005476:	2204      	movs	r2, #4
 8005478:	409a      	lsls	r2, r3
 800547a:	0013      	movs	r3, r2
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4013      	ands	r3, r2
 8005480:	d027      	beq.n	80054d2 <HAL_DMA_IRQHandler+0x7a>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2204      	movs	r2, #4
 8005486:	4013      	ands	r3, r2
 8005488:	d023      	beq.n	80054d2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2220      	movs	r2, #32
 8005492:	4013      	ands	r3, r2
 8005494:	d107      	bne.n	80054a6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2104      	movs	r1, #4
 80054a2:	438a      	bics	r2, r1
 80054a4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80054a6:	4b44      	ldr	r3, [pc, #272]	; (80055b8 <HAL_DMA_IRQHandler+0x160>)
 80054a8:	6859      	ldr	r1, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	221c      	movs	r2, #28
 80054b0:	4013      	ands	r3, r2
 80054b2:	2204      	movs	r2, #4
 80054b4:	409a      	lsls	r2, r3
 80054b6:	4b40      	ldr	r3, [pc, #256]	; (80055b8 <HAL_DMA_IRQHandler+0x160>)
 80054b8:	430a      	orrs	r2, r1
 80054ba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d100      	bne.n	80054c6 <HAL_DMA_IRQHandler+0x6e>
 80054c4:	e073      	b.n	80055ae <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	0010      	movs	r0, r2
 80054ce:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80054d0:	e06d      	b.n	80055ae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	221c      	movs	r2, #28
 80054d8:	4013      	ands	r3, r2
 80054da:	2202      	movs	r2, #2
 80054dc:	409a      	lsls	r2, r3
 80054de:	0013      	movs	r3, r2
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4013      	ands	r3, r2
 80054e4:	d02e      	beq.n	8005544 <HAL_DMA_IRQHandler+0xec>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2202      	movs	r2, #2
 80054ea:	4013      	ands	r3, r2
 80054ec:	d02a      	beq.n	8005544 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2220      	movs	r2, #32
 80054f6:	4013      	ands	r3, r2
 80054f8:	d10b      	bne.n	8005512 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	210a      	movs	r1, #10
 8005506:	438a      	bics	r2, r1
 8005508:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2225      	movs	r2, #37	; 0x25
 800550e:	2101      	movs	r1, #1
 8005510:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005512:	4b29      	ldr	r3, [pc, #164]	; (80055b8 <HAL_DMA_IRQHandler+0x160>)
 8005514:	6859      	ldr	r1, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	221c      	movs	r2, #28
 800551c:	4013      	ands	r3, r2
 800551e:	2202      	movs	r2, #2
 8005520:	409a      	lsls	r2, r3
 8005522:	4b25      	ldr	r3, [pc, #148]	; (80055b8 <HAL_DMA_IRQHandler+0x160>)
 8005524:	430a      	orrs	r2, r1
 8005526:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2224      	movs	r2, #36	; 0x24
 800552c:	2100      	movs	r1, #0
 800552e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d03a      	beq.n	80055ae <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	0010      	movs	r0, r2
 8005540:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005542:	e034      	b.n	80055ae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	221c      	movs	r2, #28
 800554a:	4013      	ands	r3, r2
 800554c:	2208      	movs	r2, #8
 800554e:	409a      	lsls	r2, r3
 8005550:	0013      	movs	r3, r2
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4013      	ands	r3, r2
 8005556:	d02b      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x158>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2208      	movs	r2, #8
 800555c:	4013      	ands	r3, r2
 800555e:	d027      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	210e      	movs	r1, #14
 800556c:	438a      	bics	r2, r1
 800556e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005570:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <HAL_DMA_IRQHandler+0x160>)
 8005572:	6859      	ldr	r1, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	221c      	movs	r2, #28
 800557a:	4013      	ands	r3, r2
 800557c:	2201      	movs	r2, #1
 800557e:	409a      	lsls	r2, r3
 8005580:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <HAL_DMA_IRQHandler+0x160>)
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2225      	movs	r2, #37	; 0x25
 8005590:	2101      	movs	r1, #1
 8005592:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2224      	movs	r2, #36	; 0x24
 8005598:	2100      	movs	r1, #0
 800559a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d005      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	0010      	movs	r0, r2
 80055ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	46c0      	nop			; (mov r8, r8)
}
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b004      	add	sp, #16
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40020000 	.word	0x40020000

080055bc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80055d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80055e4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <DMA_SetConfig+0x7c>)
 80055e8:	6859      	ldr	r1, [r3, #4]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	221c      	movs	r2, #28
 80055f0:	4013      	ands	r3, r2
 80055f2:	2201      	movs	r2, #1
 80055f4:	409a      	lsls	r2, r3
 80055f6:	4b10      	ldr	r3, [pc, #64]	; (8005638 <DMA_SetConfig+0x7c>)
 80055f8:	430a      	orrs	r2, r1
 80055fa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b10      	cmp	r3, #16
 800560a:	d108      	bne.n	800561e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800561c:	e007      	b.n	800562e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	60da      	str	r2, [r3, #12]
}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	46bd      	mov	sp, r7
 8005632:	b004      	add	sp, #16
 8005634:	bd80      	pop	{r7, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	40020000 	.word	0x40020000

0800563c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	089b      	lsrs	r3, r3, #2
 800564a:	4a10      	ldr	r2, [pc, #64]	; (800568c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800564c:	4694      	mov	ip, r2
 800564e:	4463      	add	r3, ip
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	001a      	movs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	001a      	movs	r2, r3
 800565e:	23ff      	movs	r3, #255	; 0xff
 8005660:	4013      	ands	r3, r2
 8005662:	3b08      	subs	r3, #8
 8005664:	2114      	movs	r1, #20
 8005666:	0018      	movs	r0, r3
 8005668:	f7fa fd4a 	bl	8000100 <__udivsi3>
 800566c:	0003      	movs	r3, r0
 800566e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a07      	ldr	r2, [pc, #28]	; (8005690 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005674:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	221f      	movs	r2, #31
 800567a:	4013      	ands	r3, r2
 800567c:	2201      	movs	r2, #1
 800567e:	409a      	lsls	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005684:	46c0      	nop			; (mov r8, r8)
 8005686:	46bd      	mov	sp, r7
 8005688:	b004      	add	sp, #16
 800568a:	bd80      	pop	{r7, pc}
 800568c:	10008200 	.word	0x10008200
 8005690:	40020880 	.word	0x40020880

08005694 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	223f      	movs	r2, #63	; 0x3f
 80056a2:	4013      	ands	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4a0a      	ldr	r2, [pc, #40]	; (80056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80056aa:	4694      	mov	ip, r2
 80056ac:	4463      	add	r3, ip
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	001a      	movs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a07      	ldr	r2, [pc, #28]	; (80056d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80056ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3b01      	subs	r3, #1
 80056c0:	2203      	movs	r2, #3
 80056c2:	4013      	ands	r3, r2
 80056c4:	2201      	movs	r2, #1
 80056c6:	409a      	lsls	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	659a      	str	r2, [r3, #88]	; 0x58
}
 80056cc:	46c0      	nop			; (mov r8, r8)
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b004      	add	sp, #16
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	1000823f 	.word	0x1000823f
 80056d8:	40020940 	.word	0x40020940

080056dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056e6:	2300      	movs	r3, #0
 80056e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056ea:	e147      	b.n	800597c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2101      	movs	r1, #1
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4091      	lsls	r1, r2
 80056f6:	000a      	movs	r2, r1
 80056f8:	4013      	ands	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d100      	bne.n	8005704 <HAL_GPIO_Init+0x28>
 8005702:	e138      	b.n	8005976 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2203      	movs	r2, #3
 800570a:	4013      	ands	r3, r2
 800570c:	2b01      	cmp	r3, #1
 800570e:	d005      	beq.n	800571c <HAL_GPIO_Init+0x40>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2203      	movs	r2, #3
 8005716:	4013      	ands	r3, r2
 8005718:	2b02      	cmp	r3, #2
 800571a:	d130      	bne.n	800577e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	2203      	movs	r2, #3
 8005728:	409a      	lsls	r2, r3
 800572a:	0013      	movs	r3, r2
 800572c:	43da      	mvns	r2, r3
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4013      	ands	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	409a      	lsls	r2, r3
 800573e:	0013      	movs	r3, r2
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005752:	2201      	movs	r2, #1
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	409a      	lsls	r2, r3
 8005758:	0013      	movs	r3, r2
 800575a:	43da      	mvns	r2, r3
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	4013      	ands	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	091b      	lsrs	r3, r3, #4
 8005768:	2201      	movs	r2, #1
 800576a:	401a      	ands	r2, r3
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	409a      	lsls	r2, r3
 8005770:	0013      	movs	r3, r2
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2203      	movs	r2, #3
 8005784:	4013      	ands	r3, r2
 8005786:	2b03      	cmp	r3, #3
 8005788:	d017      	beq.n	80057ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	2203      	movs	r2, #3
 8005796:	409a      	lsls	r2, r3
 8005798:	0013      	movs	r3, r2
 800579a:	43da      	mvns	r2, r3
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	4013      	ands	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	409a      	lsls	r2, r3
 80057ac:	0013      	movs	r3, r2
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2203      	movs	r2, #3
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d123      	bne.n	800580e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	08da      	lsrs	r2, r3, #3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3208      	adds	r2, #8
 80057ce:	0092      	lsls	r2, r2, #2
 80057d0:	58d3      	ldr	r3, [r2, r3]
 80057d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2207      	movs	r2, #7
 80057d8:	4013      	ands	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	220f      	movs	r2, #15
 80057de:	409a      	lsls	r2, r3
 80057e0:	0013      	movs	r3, r2
 80057e2:	43da      	mvns	r2, r3
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4013      	ands	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2107      	movs	r1, #7
 80057f2:	400b      	ands	r3, r1
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	409a      	lsls	r2, r3
 80057f8:	0013      	movs	r3, r2
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	08da      	lsrs	r2, r3, #3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3208      	adds	r2, #8
 8005808:	0092      	lsls	r2, r2, #2
 800580a:	6939      	ldr	r1, [r7, #16]
 800580c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	2203      	movs	r2, #3
 800581a:	409a      	lsls	r2, r3
 800581c:	0013      	movs	r3, r2
 800581e:	43da      	mvns	r2, r3
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4013      	ands	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2203      	movs	r2, #3
 800582c:	401a      	ands	r2, r3
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	409a      	lsls	r2, r3
 8005834:	0013      	movs	r3, r2
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	23c0      	movs	r3, #192	; 0xc0
 8005848:	029b      	lsls	r3, r3, #10
 800584a:	4013      	ands	r3, r2
 800584c:	d100      	bne.n	8005850 <HAL_GPIO_Init+0x174>
 800584e:	e092      	b.n	8005976 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005850:	4a50      	ldr	r2, [pc, #320]	; (8005994 <HAL_GPIO_Init+0x2b8>)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	089b      	lsrs	r3, r3, #2
 8005856:	3318      	adds	r3, #24
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	589b      	ldr	r3, [r3, r2]
 800585c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2203      	movs	r2, #3
 8005862:	4013      	ands	r3, r2
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	220f      	movs	r2, #15
 8005868:	409a      	lsls	r2, r3
 800586a:	0013      	movs	r3, r2
 800586c:	43da      	mvns	r2, r3
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	4013      	ands	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	23a0      	movs	r3, #160	; 0xa0
 8005878:	05db      	lsls	r3, r3, #23
 800587a:	429a      	cmp	r2, r3
 800587c:	d013      	beq.n	80058a6 <HAL_GPIO_Init+0x1ca>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a45      	ldr	r2, [pc, #276]	; (8005998 <HAL_GPIO_Init+0x2bc>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00d      	beq.n	80058a2 <HAL_GPIO_Init+0x1c6>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a44      	ldr	r2, [pc, #272]	; (800599c <HAL_GPIO_Init+0x2c0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d007      	beq.n	800589e <HAL_GPIO_Init+0x1c2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a43      	ldr	r2, [pc, #268]	; (80059a0 <HAL_GPIO_Init+0x2c4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d101      	bne.n	800589a <HAL_GPIO_Init+0x1be>
 8005896:	2303      	movs	r3, #3
 8005898:	e006      	b.n	80058a8 <HAL_GPIO_Init+0x1cc>
 800589a:	2305      	movs	r3, #5
 800589c:	e004      	b.n	80058a8 <HAL_GPIO_Init+0x1cc>
 800589e:	2302      	movs	r3, #2
 80058a0:	e002      	b.n	80058a8 <HAL_GPIO_Init+0x1cc>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <HAL_GPIO_Init+0x1cc>
 80058a6:	2300      	movs	r3, #0
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	2103      	movs	r1, #3
 80058ac:	400a      	ands	r2, r1
 80058ae:	00d2      	lsls	r2, r2, #3
 80058b0:	4093      	lsls	r3, r2
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80058b8:	4936      	ldr	r1, [pc, #216]	; (8005994 <HAL_GPIO_Init+0x2b8>)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	089b      	lsrs	r3, r3, #2
 80058be:	3318      	adds	r3, #24
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058c6:	4b33      	ldr	r3, [pc, #204]	; (8005994 <HAL_GPIO_Init+0x2b8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	43da      	mvns	r2, r3
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4013      	ands	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	2380      	movs	r3, #128	; 0x80
 80058dc:	035b      	lsls	r3, r3, #13
 80058de:	4013      	ands	r3, r2
 80058e0:	d003      	beq.n	80058ea <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058ea:	4b2a      	ldr	r3, [pc, #168]	; (8005994 <HAL_GPIO_Init+0x2b8>)
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80058f0:	4b28      	ldr	r3, [pc, #160]	; (8005994 <HAL_GPIO_Init+0x2b8>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	43da      	mvns	r2, r3
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4013      	ands	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	2380      	movs	r3, #128	; 0x80
 8005906:	039b      	lsls	r3, r3, #14
 8005908:	4013      	ands	r3, r2
 800590a:	d003      	beq.n	8005914 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005914:	4b1f      	ldr	r3, [pc, #124]	; (8005994 <HAL_GPIO_Init+0x2b8>)
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800591a:	4a1e      	ldr	r2, [pc, #120]	; (8005994 <HAL_GPIO_Init+0x2b8>)
 800591c:	2384      	movs	r3, #132	; 0x84
 800591e:	58d3      	ldr	r3, [r2, r3]
 8005920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	43da      	mvns	r2, r3
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4013      	ands	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	029b      	lsls	r3, r3, #10
 8005934:	4013      	ands	r3, r2
 8005936:	d003      	beq.n	8005940 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005940:	4914      	ldr	r1, [pc, #80]	; (8005994 <HAL_GPIO_Init+0x2b8>)
 8005942:	2284      	movs	r2, #132	; 0x84
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005948:	4a12      	ldr	r2, [pc, #72]	; (8005994 <HAL_GPIO_Init+0x2b8>)
 800594a:	2380      	movs	r3, #128	; 0x80
 800594c:	58d3      	ldr	r3, [r2, r3]
 800594e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	43da      	mvns	r2, r3
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4013      	ands	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	2380      	movs	r3, #128	; 0x80
 8005960:	025b      	lsls	r3, r3, #9
 8005962:	4013      	ands	r3, r2
 8005964:	d003      	beq.n	800596e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800596e:	4909      	ldr	r1, [pc, #36]	; (8005994 <HAL_GPIO_Init+0x2b8>)
 8005970:	2280      	movs	r2, #128	; 0x80
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	3301      	adds	r3, #1
 800597a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	40da      	lsrs	r2, r3
 8005984:	1e13      	subs	r3, r2, #0
 8005986:	d000      	beq.n	800598a <HAL_GPIO_Init+0x2ae>
 8005988:	e6b0      	b.n	80056ec <HAL_GPIO_Init+0x10>
  }
}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	46c0      	nop			; (mov r8, r8)
 800598e:	46bd      	mov	sp, r7
 8005990:	b006      	add	sp, #24
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40021800 	.word	0x40021800
 8005998:	50000400 	.word	0x50000400
 800599c:	50000800 	.word	0x50000800
 80059a0:	50000c00 	.word	0x50000c00

080059a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	0008      	movs	r0, r1
 80059ae:	0011      	movs	r1, r2
 80059b0:	1cbb      	adds	r3, r7, #2
 80059b2:	1c02      	adds	r2, r0, #0
 80059b4:	801a      	strh	r2, [r3, #0]
 80059b6:	1c7b      	adds	r3, r7, #1
 80059b8:	1c0a      	adds	r2, r1, #0
 80059ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059bc:	1c7b      	adds	r3, r7, #1
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059c4:	1cbb      	adds	r3, r7, #2
 80059c6:	881a      	ldrh	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059cc:	e003      	b.n	80059d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059ce:	1cbb      	adds	r3, r7, #2
 80059d0:	881a      	ldrh	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059d6:	46c0      	nop			; (mov r8, r8)
 80059d8:	46bd      	mov	sp, r7
 80059da:	b002      	add	sp, #8
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	000a      	movs	r2, r1
 80059e8:	1cbb      	adds	r3, r7, #2
 80059ea:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059f2:	1cbb      	adds	r3, r7, #2
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4013      	ands	r3, r2
 80059fa:	041a      	lsls	r2, r3, #16
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	43db      	mvns	r3, r3
 8005a00:	1cb9      	adds	r1, r7, #2
 8005a02:	8809      	ldrh	r1, [r1, #0]
 8005a04:	400b      	ands	r3, r1
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	619a      	str	r2, [r3, #24]
}
 8005a0c:	46c0      	nop			; (mov r8, r8)
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b004      	add	sp, #16
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	0002      	movs	r2, r0
 8005a1c:	1dbb      	adds	r3, r7, #6
 8005a1e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005a20:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	1dba      	adds	r2, r7, #6
 8005a26:	8812      	ldrh	r2, [r2, #0]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d008      	beq.n	8005a3e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005a2c:	4b0d      	ldr	r3, [pc, #52]	; (8005a64 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005a2e:	1dba      	adds	r2, r7, #6
 8005a30:	8812      	ldrh	r2, [r2, #0]
 8005a32:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005a34:	1dbb      	adds	r3, r7, #6
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 f815 	bl	8005a68 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8005a3e:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	1dba      	adds	r2, r7, #6
 8005a44:	8812      	ldrh	r2, [r2, #0]
 8005a46:	4013      	ands	r3, r2
 8005a48:	d008      	beq.n	8005a5c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005a4a:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005a4c:	1dba      	adds	r2, r7, #6
 8005a4e:	8812      	ldrh	r2, [r2, #0]
 8005a50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005a52:	1dbb      	adds	r3, r7, #6
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	0018      	movs	r0, r3
 8005a58:	f000 f810 	bl	8005a7c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005a5c:	46c0      	nop			; (mov r8, r8)
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	b002      	add	sp, #8
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40021800 	.word	0x40021800

08005a68 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	0002      	movs	r2, r0
 8005a70:	1dbb      	adds	r3, r7, #6
 8005a72:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005a74:	46c0      	nop			; (mov r8, r8)
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b002      	add	sp, #8
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	0002      	movs	r2, r0
 8005a84:	1dbb      	adds	r3, r7, #6
 8005a86:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8005a88:	46c0      	nop			; (mov r8, r8)
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	b002      	add	sp, #8
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e082      	b.n	8005ba8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2241      	movs	r2, #65	; 0x41
 8005aa6:	5c9b      	ldrb	r3, [r3, r2]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d107      	bne.n	8005abe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2240      	movs	r2, #64	; 0x40
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f7fd fae3 	bl	8003084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2241      	movs	r2, #65	; 0x41
 8005ac2:	2124      	movs	r1, #36	; 0x24
 8005ac4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	438a      	bics	r2, r1
 8005ad4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4934      	ldr	r1, [pc, #208]	; (8005bb0 <HAL_I2C_Init+0x120>)
 8005ae0:	400a      	ands	r2, r1
 8005ae2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4931      	ldr	r1, [pc, #196]	; (8005bb4 <HAL_I2C_Init+0x124>)
 8005af0:	400a      	ands	r2, r1
 8005af2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d108      	bne.n	8005b0e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2180      	movs	r1, #128	; 0x80
 8005b06:	0209      	lsls	r1, r1, #8
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	609a      	str	r2, [r3, #8]
 8005b0c:	e007      	b.n	8005b1e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2184      	movs	r1, #132	; 0x84
 8005b18:	0209      	lsls	r1, r1, #8
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d104      	bne.n	8005b30 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2280      	movs	r2, #128	; 0x80
 8005b2c:	0112      	lsls	r2, r2, #4
 8005b2e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	491f      	ldr	r1, [pc, #124]	; (8005bb8 <HAL_I2C_Init+0x128>)
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	491a      	ldr	r1, [pc, #104]	; (8005bb4 <HAL_I2C_Init+0x124>)
 8005b4c:	400a      	ands	r2, r1
 8005b4e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69d9      	ldr	r1, [r3, #28]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1a      	ldr	r2, [r3, #32]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2101      	movs	r1, #1
 8005b86:	430a      	orrs	r2, r1
 8005b88:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2241      	movs	r2, #65	; 0x41
 8005b94:	2120      	movs	r1, #32
 8005b96:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2242      	movs	r2, #66	; 0x42
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	0018      	movs	r0, r3
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b002      	add	sp, #8
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	f0ffffff 	.word	0xf0ffffff
 8005bb4:	ffff7fff 	.word	0xffff7fff
 8005bb8:	02008000 	.word	0x02008000

08005bbc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005bbc:	b590      	push	{r4, r7, lr}
 8005bbe:	b089      	sub	sp, #36	; 0x24
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	0008      	movs	r0, r1
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	0019      	movs	r1, r3
 8005bca:	230a      	movs	r3, #10
 8005bcc:	18fb      	adds	r3, r7, r3
 8005bce:	1c02      	adds	r2, r0, #0
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	2308      	movs	r3, #8
 8005bd4:	18fb      	adds	r3, r7, r3
 8005bd6:	1c0a      	adds	r2, r1, #0
 8005bd8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2241      	movs	r2, #65	; 0x41
 8005bde:	5c9b      	ldrb	r3, [r3, r2]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d000      	beq.n	8005be8 <HAL_I2C_Master_Transmit+0x2c>
 8005be6:	e0e7      	b.n	8005db8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2240      	movs	r2, #64	; 0x40
 8005bec:	5c9b      	ldrb	r3, [r3, r2]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_I2C_Master_Transmit+0x3a>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e0e1      	b.n	8005dba <HAL_I2C_Master_Transmit+0x1fe>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2240      	movs	r2, #64	; 0x40
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bfe:	f7fe fae7 	bl	80041d0 <HAL_GetTick>
 8005c02:	0003      	movs	r3, r0
 8005c04:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c06:	2380      	movs	r3, #128	; 0x80
 8005c08:	0219      	lsls	r1, r3, #8
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	2319      	movs	r3, #25
 8005c12:	2201      	movs	r2, #1
 8005c14:	f000 fa04 	bl	8006020 <I2C_WaitOnFlagUntilTimeout>
 8005c18:	1e03      	subs	r3, r0, #0
 8005c1a:	d001      	beq.n	8005c20 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0cc      	b.n	8005dba <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2241      	movs	r2, #65	; 0x41
 8005c24:	2121      	movs	r1, #33	; 0x21
 8005c26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2242      	movs	r2, #66	; 0x42
 8005c2c:	2110      	movs	r1, #16
 8005c2e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2208      	movs	r2, #8
 8005c40:	18ba      	adds	r2, r7, r2
 8005c42:	8812      	ldrh	r2, [r2, #0]
 8005c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2bff      	cmp	r3, #255	; 0xff
 8005c54:	d911      	bls.n	8005c7a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	22ff      	movs	r2, #255	; 0xff
 8005c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	2380      	movs	r3, #128	; 0x80
 8005c64:	045c      	lsls	r4, r3, #17
 8005c66:	230a      	movs	r3, #10
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	8819      	ldrh	r1, [r3, #0]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	4b55      	ldr	r3, [pc, #340]	; (8005dc4 <HAL_I2C_Master_Transmit+0x208>)
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	0023      	movs	r3, r4
 8005c74:	f000 fc08 	bl	8006488 <I2C_TransferConfig>
 8005c78:	e075      	b.n	8005d66 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	2380      	movs	r3, #128	; 0x80
 8005c8c:	049c      	lsls	r4, r3, #18
 8005c8e:	230a      	movs	r3, #10
 8005c90:	18fb      	adds	r3, r7, r3
 8005c92:	8819      	ldrh	r1, [r3, #0]
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	4b4b      	ldr	r3, [pc, #300]	; (8005dc4 <HAL_I2C_Master_Transmit+0x208>)
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	0023      	movs	r3, r4
 8005c9c:	f000 fbf4 	bl	8006488 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005ca0:	e061      	b.n	8005d66 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f000 f9f8 	bl	800609e <I2C_WaitOnTXISFlagUntilTimeout>
 8005cae:	1e03      	subs	r3, r0, #0
 8005cb0:	d001      	beq.n	8005cb6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e081      	b.n	8005dba <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	781a      	ldrb	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d03a      	beq.n	8005d66 <HAL_I2C_Master_Transmit+0x1aa>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d136      	bne.n	8005d66 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	0013      	movs	r3, r2
 8005d02:	2200      	movs	r2, #0
 8005d04:	2180      	movs	r1, #128	; 0x80
 8005d06:	f000 f98b 	bl	8006020 <I2C_WaitOnFlagUntilTimeout>
 8005d0a:	1e03      	subs	r3, r0, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e053      	b.n	8005dba <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2bff      	cmp	r3, #255	; 0xff
 8005d1a:	d911      	bls.n	8005d40 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	22ff      	movs	r2, #255	; 0xff
 8005d20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	045c      	lsls	r4, r3, #17
 8005d2c:	230a      	movs	r3, #10
 8005d2e:	18fb      	adds	r3, r7, r3
 8005d30:	8819      	ldrh	r1, [r3, #0]
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	2300      	movs	r3, #0
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	0023      	movs	r3, r4
 8005d3a:	f000 fba5 	bl	8006488 <I2C_TransferConfig>
 8005d3e:	e012      	b.n	8005d66 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	049c      	lsls	r4, r3, #18
 8005d54:	230a      	movs	r3, #10
 8005d56:	18fb      	adds	r3, r7, r3
 8005d58:	8819      	ldrh	r1, [r3, #0]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	0023      	movs	r3, r4
 8005d62:	f000 fb91 	bl	8006488 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d198      	bne.n	8005ca2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	0018      	movs	r0, r3
 8005d78:	f000 f9d0 	bl	800611c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d7c:	1e03      	subs	r3, r0, #0
 8005d7e:	d001      	beq.n	8005d84 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e01a      	b.n	8005dba <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	490c      	ldr	r1, [pc, #48]	; (8005dc8 <HAL_I2C_Master_Transmit+0x20c>)
 8005d98:	400a      	ands	r2, r1
 8005d9a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2241      	movs	r2, #65	; 0x41
 8005da0:	2120      	movs	r1, #32
 8005da2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2242      	movs	r2, #66	; 0x42
 8005da8:	2100      	movs	r1, #0
 8005daa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2240      	movs	r2, #64	; 0x40
 8005db0:	2100      	movs	r1, #0
 8005db2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e000      	b.n	8005dba <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
  }
}
 8005dba:	0018      	movs	r0, r3
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	b007      	add	sp, #28
 8005dc0:	bd90      	pop	{r4, r7, pc}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	80002000 	.word	0x80002000
 8005dc8:	fe00e800 	.word	0xfe00e800

08005dcc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005dcc:	b590      	push	{r4, r7, lr}
 8005dce:	b089      	sub	sp, #36	; 0x24
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	0008      	movs	r0, r1
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	0019      	movs	r1, r3
 8005dda:	230a      	movs	r3, #10
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	1c02      	adds	r2, r0, #0
 8005de0:	801a      	strh	r2, [r3, #0]
 8005de2:	2308      	movs	r3, #8
 8005de4:	18fb      	adds	r3, r7, r3
 8005de6:	1c0a      	adds	r2, r1, #0
 8005de8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2241      	movs	r2, #65	; 0x41
 8005dee:	5c9b      	ldrb	r3, [r3, r2]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d000      	beq.n	8005df8 <HAL_I2C_Master_Receive+0x2c>
 8005df6:	e0e8      	b.n	8005fca <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2240      	movs	r2, #64	; 0x40
 8005dfc:	5c9b      	ldrb	r3, [r3, r2]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d101      	bne.n	8005e06 <HAL_I2C_Master_Receive+0x3a>
 8005e02:	2302      	movs	r3, #2
 8005e04:	e0e2      	b.n	8005fcc <HAL_I2C_Master_Receive+0x200>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2240      	movs	r2, #64	; 0x40
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e0e:	f7fe f9df 	bl	80041d0 <HAL_GetTick>
 8005e12:	0003      	movs	r3, r0
 8005e14:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e16:	2380      	movs	r3, #128	; 0x80
 8005e18:	0219      	lsls	r1, r3, #8
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	2319      	movs	r3, #25
 8005e22:	2201      	movs	r2, #1
 8005e24:	f000 f8fc 	bl	8006020 <I2C_WaitOnFlagUntilTimeout>
 8005e28:	1e03      	subs	r3, r0, #0
 8005e2a:	d001      	beq.n	8005e30 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e0cd      	b.n	8005fcc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2241      	movs	r2, #65	; 0x41
 8005e34:	2122      	movs	r1, #34	; 0x22
 8005e36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2242      	movs	r2, #66	; 0x42
 8005e3c:	2110      	movs	r1, #16
 8005e3e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2208      	movs	r2, #8
 8005e50:	18ba      	adds	r2, r7, r2
 8005e52:	8812      	ldrh	r2, [r2, #0]
 8005e54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2bff      	cmp	r3, #255	; 0xff
 8005e64:	d911      	bls.n	8005e8a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	22ff      	movs	r2, #255	; 0xff
 8005e6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	2380      	movs	r3, #128	; 0x80
 8005e74:	045c      	lsls	r4, r3, #17
 8005e76:	230a      	movs	r3, #10
 8005e78:	18fb      	adds	r3, r7, r3
 8005e7a:	8819      	ldrh	r1, [r3, #0]
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	4b55      	ldr	r3, [pc, #340]	; (8005fd4 <HAL_I2C_Master_Receive+0x208>)
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	0023      	movs	r3, r4
 8005e84:	f000 fb00 	bl	8006488 <I2C_TransferConfig>
 8005e88:	e076      	b.n	8005f78 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	2380      	movs	r3, #128	; 0x80
 8005e9c:	049c      	lsls	r4, r3, #18
 8005e9e:	230a      	movs	r3, #10
 8005ea0:	18fb      	adds	r3, r7, r3
 8005ea2:	8819      	ldrh	r1, [r3, #0]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	4b4b      	ldr	r3, [pc, #300]	; (8005fd4 <HAL_I2C_Master_Receive+0x208>)
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	0023      	movs	r3, r4
 8005eac:	f000 faec 	bl	8006488 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005eb0:	e062      	b.n	8005f78 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f000 f96b 	bl	8006194 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ebe:	1e03      	subs	r3, r0, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e082      	b.n	8005fcc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d03a      	beq.n	8005f78 <HAL_I2C_Master_Receive+0x1ac>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d136      	bne.n	8005f78 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	0013      	movs	r3, r2
 8005f14:	2200      	movs	r2, #0
 8005f16:	2180      	movs	r1, #128	; 0x80
 8005f18:	f000 f882 	bl	8006020 <I2C_WaitOnFlagUntilTimeout>
 8005f1c:	1e03      	subs	r3, r0, #0
 8005f1e:	d001      	beq.n	8005f24 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e053      	b.n	8005fcc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2bff      	cmp	r3, #255	; 0xff
 8005f2c:	d911      	bls.n	8005f52 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	22ff      	movs	r2, #255	; 0xff
 8005f32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	2380      	movs	r3, #128	; 0x80
 8005f3c:	045c      	lsls	r4, r3, #17
 8005f3e:	230a      	movs	r3, #10
 8005f40:	18fb      	adds	r3, r7, r3
 8005f42:	8819      	ldrh	r1, [r3, #0]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	2300      	movs	r3, #0
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	0023      	movs	r3, r4
 8005f4c:	f000 fa9c 	bl	8006488 <I2C_TransferConfig>
 8005f50:	e012      	b.n	8005f78 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	2380      	movs	r3, #128	; 0x80
 8005f64:	049c      	lsls	r4, r3, #18
 8005f66:	230a      	movs	r3, #10
 8005f68:	18fb      	adds	r3, r7, r3
 8005f6a:	8819      	ldrh	r1, [r3, #0]
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	0023      	movs	r3, r4
 8005f74:	f000 fa88 	bl	8006488 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d197      	bne.n	8005eb2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f000 f8c7 	bl	800611c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f8e:	1e03      	subs	r3, r0, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e01a      	b.n	8005fcc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	490b      	ldr	r1, [pc, #44]	; (8005fd8 <HAL_I2C_Master_Receive+0x20c>)
 8005faa:	400a      	ands	r2, r1
 8005fac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2241      	movs	r2, #65	; 0x41
 8005fb2:	2120      	movs	r1, #32
 8005fb4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2242      	movs	r2, #66	; 0x42
 8005fba:	2100      	movs	r1, #0
 8005fbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2240      	movs	r2, #64	; 0x40
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e000      	b.n	8005fcc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005fca:	2302      	movs	r3, #2
  }
}
 8005fcc:	0018      	movs	r0, r3
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	b007      	add	sp, #28
 8005fd2:	bd90      	pop	{r4, r7, pc}
 8005fd4:	80002400 	.word	0x80002400
 8005fd8:	fe00e800 	.word	0xfe00e800

08005fdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	2202      	movs	r2, #2
 8005fec:	4013      	ands	r3, r2
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d103      	bne.n	8005ffa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	2201      	movs	r2, #1
 8006002:	4013      	ands	r3, r2
 8006004:	2b01      	cmp	r3, #1
 8006006:	d007      	beq.n	8006018 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2101      	movs	r1, #1
 8006014:	430a      	orrs	r2, r1
 8006016:	619a      	str	r2, [r3, #24]
  }
}
 8006018:	46c0      	nop			; (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	b002      	add	sp, #8
 800601e:	bd80      	pop	{r7, pc}

08006020 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	1dfb      	adds	r3, r7, #7
 800602e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006030:	e021      	b.n	8006076 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	3301      	adds	r3, #1
 8006036:	d01e      	beq.n	8006076 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006038:	f7fe f8ca 	bl	80041d0 <HAL_GetTick>
 800603c:	0002      	movs	r2, r0
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d302      	bcc.n	800604e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d113      	bne.n	8006076 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006052:	2220      	movs	r2, #32
 8006054:	431a      	orrs	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2241      	movs	r2, #65	; 0x41
 800605e:	2120      	movs	r1, #32
 8006060:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2242      	movs	r2, #66	; 0x42
 8006066:	2100      	movs	r1, #0
 8006068:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2240      	movs	r2, #64	; 0x40
 800606e:	2100      	movs	r1, #0
 8006070:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e00f      	b.n	8006096 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	4013      	ands	r3, r2
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	425a      	negs	r2, r3
 8006086:	4153      	adcs	r3, r2
 8006088:	b2db      	uxtb	r3, r3
 800608a:	001a      	movs	r2, r3
 800608c:	1dfb      	adds	r3, r7, #7
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d0ce      	beq.n	8006032 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	0018      	movs	r0, r3
 8006098:	46bd      	mov	sp, r7
 800609a:	b004      	add	sp, #16
 800609c:	bd80      	pop	{r7, pc}

0800609e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060aa:	e02b      	b.n	8006104 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	0018      	movs	r0, r3
 80060b4:	f000 f8e8 	bl	8006288 <I2C_IsErrorOccurred>
 80060b8:	1e03      	subs	r3, r0, #0
 80060ba:	d001      	beq.n	80060c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e029      	b.n	8006114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	3301      	adds	r3, #1
 80060c4:	d01e      	beq.n	8006104 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c6:	f7fe f883 	bl	80041d0 <HAL_GetTick>
 80060ca:	0002      	movs	r2, r0
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d302      	bcc.n	80060dc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d113      	bne.n	8006104 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e0:	2220      	movs	r2, #32
 80060e2:	431a      	orrs	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2241      	movs	r2, #65	; 0x41
 80060ec:	2120      	movs	r1, #32
 80060ee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2242      	movs	r2, #66	; 0x42
 80060f4:	2100      	movs	r1, #0
 80060f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2240      	movs	r2, #64	; 0x40
 80060fc:	2100      	movs	r1, #0
 80060fe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e007      	b.n	8006114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	2202      	movs	r2, #2
 800610c:	4013      	ands	r3, r2
 800610e:	2b02      	cmp	r3, #2
 8006110:	d1cc      	bne.n	80060ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	0018      	movs	r0, r3
 8006116:	46bd      	mov	sp, r7
 8006118:	b004      	add	sp, #16
 800611a:	bd80      	pop	{r7, pc}

0800611c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006128:	e028      	b.n	800617c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	0018      	movs	r0, r3
 8006132:	f000 f8a9 	bl	8006288 <I2C_IsErrorOccurred>
 8006136:	1e03      	subs	r3, r0, #0
 8006138:	d001      	beq.n	800613e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e026      	b.n	800618c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613e:	f7fe f847 	bl	80041d0 <HAL_GetTick>
 8006142:	0002      	movs	r2, r0
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	429a      	cmp	r2, r3
 800614c:	d302      	bcc.n	8006154 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d113      	bne.n	800617c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006158:	2220      	movs	r2, #32
 800615a:	431a      	orrs	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2241      	movs	r2, #65	; 0x41
 8006164:	2120      	movs	r1, #32
 8006166:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2242      	movs	r2, #66	; 0x42
 800616c:	2100      	movs	r1, #0
 800616e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2240      	movs	r2, #64	; 0x40
 8006174:	2100      	movs	r1, #0
 8006176:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e007      	b.n	800618c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	2220      	movs	r2, #32
 8006184:	4013      	ands	r3, r2
 8006186:	2b20      	cmp	r3, #32
 8006188:	d1cf      	bne.n	800612a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	0018      	movs	r0, r3
 800618e:	46bd      	mov	sp, r7
 8006190:	b004      	add	sp, #16
 8006192:	bd80      	pop	{r7, pc}

08006194 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061a0:	e064      	b.n	800626c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	0018      	movs	r0, r3
 80061aa:	f000 f86d 	bl	8006288 <I2C_IsErrorOccurred>
 80061ae:	1e03      	subs	r3, r0, #0
 80061b0:	d001      	beq.n	80061b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e062      	b.n	800627c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	2220      	movs	r2, #32
 80061be:	4013      	ands	r3, r2
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	d138      	bne.n	8006236 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	2204      	movs	r2, #4
 80061cc:	4013      	ands	r3, r2
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d105      	bne.n	80061de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	e04e      	b.n	800627c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	2210      	movs	r2, #16
 80061e6:	4013      	ands	r3, r2
 80061e8:	2b10      	cmp	r3, #16
 80061ea:	d107      	bne.n	80061fc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2210      	movs	r2, #16
 80061f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2204      	movs	r2, #4
 80061f8:	645a      	str	r2, [r3, #68]	; 0x44
 80061fa:	e002      	b.n	8006202 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2220      	movs	r2, #32
 8006208:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	491b      	ldr	r1, [pc, #108]	; (8006284 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006216:	400a      	ands	r2, r1
 8006218:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2241      	movs	r2, #65	; 0x41
 800621e:	2120      	movs	r1, #32
 8006220:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2242      	movs	r2, #66	; 0x42
 8006226:	2100      	movs	r1, #0
 8006228:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2240      	movs	r2, #64	; 0x40
 800622e:	2100      	movs	r1, #0
 8006230:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e022      	b.n	800627c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006236:	f7fd ffcb 	bl	80041d0 <HAL_GetTick>
 800623a:	0002      	movs	r2, r0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	429a      	cmp	r2, r3
 8006244:	d302      	bcc.n	800624c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10f      	bne.n	800626c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006250:	2220      	movs	r2, #32
 8006252:	431a      	orrs	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2241      	movs	r2, #65	; 0x41
 800625c:	2120      	movs	r1, #32
 800625e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2240      	movs	r2, #64	; 0x40
 8006264:	2100      	movs	r1, #0
 8006266:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e007      	b.n	800627c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	2204      	movs	r2, #4
 8006274:	4013      	ands	r3, r2
 8006276:	2b04      	cmp	r3, #4
 8006278:	d193      	bne.n	80061a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	0018      	movs	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	b004      	add	sp, #16
 8006282:	bd80      	pop	{r7, pc}
 8006284:	fe00e800 	.word	0xfe00e800

08006288 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006288:	b590      	push	{r4, r7, lr}
 800628a:	b08b      	sub	sp, #44	; 0x2c
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006294:	2327      	movs	r3, #39	; 0x27
 8006296:	18fb      	adds	r3, r7, r3
 8006298:	2200      	movs	r2, #0
 800629a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2210      	movs	r2, #16
 80062b0:	4013      	ands	r3, r2
 80062b2:	d100      	bne.n	80062b6 <I2C_IsErrorOccurred+0x2e>
 80062b4:	e082      	b.n	80063bc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2210      	movs	r2, #16
 80062bc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062be:	e060      	b.n	8006382 <I2C_IsErrorOccurred+0xfa>
 80062c0:	2427      	movs	r4, #39	; 0x27
 80062c2:	193b      	adds	r3, r7, r4
 80062c4:	193a      	adds	r2, r7, r4
 80062c6:	7812      	ldrb	r2, [r2, #0]
 80062c8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	3301      	adds	r3, #1
 80062ce:	d058      	beq.n	8006382 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80062d0:	f7fd ff7e 	bl	80041d0 <HAL_GetTick>
 80062d4:	0002      	movs	r2, r0
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d306      	bcc.n	80062ee <I2C_IsErrorOccurred+0x66>
 80062e0:	193b      	adds	r3, r7, r4
 80062e2:	193a      	adds	r2, r7, r4
 80062e4:	7812      	ldrb	r2, [r2, #0]
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d149      	bne.n	8006382 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	2380      	movs	r3, #128	; 0x80
 80062f6:	01db      	lsls	r3, r3, #7
 80062f8:	4013      	ands	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80062fc:	2013      	movs	r0, #19
 80062fe:	183b      	adds	r3, r7, r0
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	2142      	movs	r1, #66	; 0x42
 8006304:	5c52      	ldrb	r2, [r2, r1]
 8006306:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	2380      	movs	r3, #128	; 0x80
 8006310:	021b      	lsls	r3, r3, #8
 8006312:	401a      	ands	r2, r3
 8006314:	2380      	movs	r3, #128	; 0x80
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	429a      	cmp	r2, r3
 800631a:	d126      	bne.n	800636a <I2C_IsErrorOccurred+0xe2>
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	2380      	movs	r3, #128	; 0x80
 8006320:	01db      	lsls	r3, r3, #7
 8006322:	429a      	cmp	r2, r3
 8006324:	d021      	beq.n	800636a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8006326:	183b      	adds	r3, r7, r0
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b20      	cmp	r3, #32
 800632c:	d01d      	beq.n	800636a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2180      	movs	r1, #128	; 0x80
 800633a:	01c9      	lsls	r1, r1, #7
 800633c:	430a      	orrs	r2, r1
 800633e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006340:	f7fd ff46 	bl	80041d0 <HAL_GetTick>
 8006344:	0003      	movs	r3, r0
 8006346:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006348:	e00f      	b.n	800636a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800634a:	f7fd ff41 	bl	80041d0 <HAL_GetTick>
 800634e:	0002      	movs	r2, r0
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b19      	cmp	r3, #25
 8006356:	d908      	bls.n	800636a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	2220      	movs	r2, #32
 800635c:	4313      	orrs	r3, r2
 800635e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006360:	2327      	movs	r3, #39	; 0x27
 8006362:	18fb      	adds	r3, r7, r3
 8006364:	2201      	movs	r2, #1
 8006366:	701a      	strb	r2, [r3, #0]

              break;
 8006368:	e00b      	b.n	8006382 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	2220      	movs	r2, #32
 8006372:	4013      	ands	r3, r2
 8006374:	2127      	movs	r1, #39	; 0x27
 8006376:	187a      	adds	r2, r7, r1
 8006378:	1879      	adds	r1, r7, r1
 800637a:	7809      	ldrb	r1, [r1, #0]
 800637c:	7011      	strb	r1, [r2, #0]
 800637e:	2b20      	cmp	r3, #32
 8006380:	d1e3      	bne.n	800634a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	2220      	movs	r2, #32
 800638a:	4013      	ands	r3, r2
 800638c:	2b20      	cmp	r3, #32
 800638e:	d004      	beq.n	800639a <I2C_IsErrorOccurred+0x112>
 8006390:	2327      	movs	r3, #39	; 0x27
 8006392:	18fb      	adds	r3, r7, r3
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d092      	beq.n	80062c0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800639a:	2327      	movs	r3, #39	; 0x27
 800639c:	18fb      	adds	r3, r7, r3
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d103      	bne.n	80063ac <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2220      	movs	r2, #32
 80063aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	2204      	movs	r2, #4
 80063b0:	4313      	orrs	r3, r2
 80063b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80063b4:	2327      	movs	r3, #39	; 0x27
 80063b6:	18fb      	adds	r3, r7, r3
 80063b8:	2201      	movs	r2, #1
 80063ba:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	2380      	movs	r3, #128	; 0x80
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	4013      	ands	r3, r2
 80063cc:	d00c      	beq.n	80063e8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	2201      	movs	r2, #1
 80063d2:	4313      	orrs	r3, r2
 80063d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2280      	movs	r2, #128	; 0x80
 80063dc:	0052      	lsls	r2, r2, #1
 80063de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063e0:	2327      	movs	r3, #39	; 0x27
 80063e2:	18fb      	adds	r3, r7, r3
 80063e4:	2201      	movs	r2, #1
 80063e6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	4013      	ands	r3, r2
 80063f0:	d00c      	beq.n	800640c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	2208      	movs	r2, #8
 80063f6:	4313      	orrs	r3, r2
 80063f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2280      	movs	r2, #128	; 0x80
 8006400:	00d2      	lsls	r2, r2, #3
 8006402:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006404:	2327      	movs	r3, #39	; 0x27
 8006406:	18fb      	adds	r3, r7, r3
 8006408:	2201      	movs	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	2380      	movs	r3, #128	; 0x80
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4013      	ands	r3, r2
 8006414:	d00c      	beq.n	8006430 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	2202      	movs	r2, #2
 800641a:	4313      	orrs	r3, r2
 800641c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2280      	movs	r2, #128	; 0x80
 8006424:	0092      	lsls	r2, r2, #2
 8006426:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006428:	2327      	movs	r3, #39	; 0x27
 800642a:	18fb      	adds	r3, r7, r3
 800642c:	2201      	movs	r2, #1
 800642e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006430:	2327      	movs	r3, #39	; 0x27
 8006432:	18fb      	adds	r3, r7, r3
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01d      	beq.n	8006476 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	0018      	movs	r0, r3
 800643e:	f7ff fdcd 	bl	8005fdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	490d      	ldr	r1, [pc, #52]	; (8006484 <I2C_IsErrorOccurred+0x1fc>)
 800644e:	400a      	ands	r2, r1
 8006450:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	431a      	orrs	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2241      	movs	r2, #65	; 0x41
 8006462:	2120      	movs	r1, #32
 8006464:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2242      	movs	r2, #66	; 0x42
 800646a:	2100      	movs	r1, #0
 800646c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2240      	movs	r2, #64	; 0x40
 8006472:	2100      	movs	r1, #0
 8006474:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006476:	2327      	movs	r3, #39	; 0x27
 8006478:	18fb      	adds	r3, r7, r3
 800647a:	781b      	ldrb	r3, [r3, #0]
}
 800647c:	0018      	movs	r0, r3
 800647e:	46bd      	mov	sp, r7
 8006480:	b00b      	add	sp, #44	; 0x2c
 8006482:	bd90      	pop	{r4, r7, pc}
 8006484:	fe00e800 	.word	0xfe00e800

08006488 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006488:	b590      	push	{r4, r7, lr}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	0008      	movs	r0, r1
 8006492:	0011      	movs	r1, r2
 8006494:	607b      	str	r3, [r7, #4]
 8006496:	240a      	movs	r4, #10
 8006498:	193b      	adds	r3, r7, r4
 800649a:	1c02      	adds	r2, r0, #0
 800649c:	801a      	strh	r2, [r3, #0]
 800649e:	2009      	movs	r0, #9
 80064a0:	183b      	adds	r3, r7, r0
 80064a2:	1c0a      	adds	r2, r1, #0
 80064a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064a6:	193b      	adds	r3, r7, r4
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	059b      	lsls	r3, r3, #22
 80064ac:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064ae:	183b      	adds	r3, r7, r0
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	0419      	lsls	r1, r3, #16
 80064b4:	23ff      	movs	r3, #255	; 0xff
 80064b6:	041b      	lsls	r3, r3, #16
 80064b8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064ba:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	4313      	orrs	r3, r2
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d2:	0d51      	lsrs	r1, r2, #21
 80064d4:	2280      	movs	r2, #128	; 0x80
 80064d6:	00d2      	lsls	r2, r2, #3
 80064d8:	400a      	ands	r2, r1
 80064da:	4907      	ldr	r1, [pc, #28]	; (80064f8 <I2C_TransferConfig+0x70>)
 80064dc:	430a      	orrs	r2, r1
 80064de:	43d2      	mvns	r2, r2
 80064e0:	401a      	ands	r2, r3
 80064e2:	0011      	movs	r1, r2
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	46bd      	mov	sp, r7
 80064f2:	b007      	add	sp, #28
 80064f4:	bd90      	pop	{r4, r7, pc}
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	03ff63ff 	.word	0x03ff63ff

080064fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2241      	movs	r2, #65	; 0x41
 800650a:	5c9b      	ldrb	r3, [r3, r2]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b20      	cmp	r3, #32
 8006510:	d138      	bne.n	8006584 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2240      	movs	r2, #64	; 0x40
 8006516:	5c9b      	ldrb	r3, [r3, r2]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800651c:	2302      	movs	r3, #2
 800651e:	e032      	b.n	8006586 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2240      	movs	r2, #64	; 0x40
 8006524:	2101      	movs	r1, #1
 8006526:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2241      	movs	r2, #65	; 0x41
 800652c:	2124      	movs	r1, #36	; 0x24
 800652e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2101      	movs	r1, #1
 800653c:	438a      	bics	r2, r1
 800653e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4911      	ldr	r1, [pc, #68]	; (8006590 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800654c:	400a      	ands	r2, r1
 800654e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6819      	ldr	r1, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2101      	movs	r1, #1
 800656c:	430a      	orrs	r2, r1
 800656e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2241      	movs	r2, #65	; 0x41
 8006574:	2120      	movs	r1, #32
 8006576:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2240      	movs	r2, #64	; 0x40
 800657c:	2100      	movs	r1, #0
 800657e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	e000      	b.n	8006586 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006584:	2302      	movs	r3, #2
  }
}
 8006586:	0018      	movs	r0, r3
 8006588:	46bd      	mov	sp, r7
 800658a:	b002      	add	sp, #8
 800658c:	bd80      	pop	{r7, pc}
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	ffffefff 	.word	0xffffefff

08006594 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2241      	movs	r2, #65	; 0x41
 80065a2:	5c9b      	ldrb	r3, [r3, r2]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d139      	bne.n	800661e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2240      	movs	r2, #64	; 0x40
 80065ae:	5c9b      	ldrb	r3, [r3, r2]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e033      	b.n	8006620 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2240      	movs	r2, #64	; 0x40
 80065bc:	2101      	movs	r1, #1
 80065be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2241      	movs	r2, #65	; 0x41
 80065c4:	2124      	movs	r1, #36	; 0x24
 80065c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2101      	movs	r1, #1
 80065d4:	438a      	bics	r2, r1
 80065d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4a11      	ldr	r2, [pc, #68]	; (8006628 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2101      	movs	r1, #1
 8006606:	430a      	orrs	r2, r1
 8006608:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2241      	movs	r2, #65	; 0x41
 800660e:	2120      	movs	r1, #32
 8006610:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2240      	movs	r2, #64	; 0x40
 8006616:	2100      	movs	r1, #0
 8006618:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e000      	b.n	8006620 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800661e:	2302      	movs	r3, #2
  }
}
 8006620:	0018      	movs	r0, r3
 8006622:	46bd      	mov	sp, r7
 8006624:	b004      	add	sp, #16
 8006626:	bd80      	pop	{r7, pc}
 8006628:	fffff0ff 	.word	0xfffff0ff

0800662c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006634:	4b19      	ldr	r3, [pc, #100]	; (800669c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a19      	ldr	r2, [pc, #100]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800663a:	4013      	ands	r3, r2
 800663c:	0019      	movs	r1, r3
 800663e:	4b17      	ldr	r3, [pc, #92]	; (800669c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	430a      	orrs	r2, r1
 8006644:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	2380      	movs	r3, #128	; 0x80
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	429a      	cmp	r2, r3
 800664e:	d11f      	bne.n	8006690 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006650:	4b14      	ldr	r3, [pc, #80]	; (80066a4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	0013      	movs	r3, r2
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	189b      	adds	r3, r3, r2
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	4912      	ldr	r1, [pc, #72]	; (80066a8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800665e:	0018      	movs	r0, r3
 8006660:	f7f9 fd4e 	bl	8000100 <__udivsi3>
 8006664:	0003      	movs	r3, r0
 8006666:	3301      	adds	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800666a:	e008      	b.n	800667e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3b01      	subs	r3, #1
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	e001      	b.n	800667e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e009      	b.n	8006692 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800667e:	4b07      	ldr	r3, [pc, #28]	; (800669c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006680:	695a      	ldr	r2, [r3, #20]
 8006682:	2380      	movs	r3, #128	; 0x80
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	401a      	ands	r2, r3
 8006688:	2380      	movs	r3, #128	; 0x80
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	429a      	cmp	r2, r3
 800668e:	d0ed      	beq.n	800666c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	0018      	movs	r0, r3
 8006694:	46bd      	mov	sp, r7
 8006696:	b004      	add	sp, #16
 8006698:	bd80      	pop	{r7, pc}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	40007000 	.word	0x40007000
 80066a0:	fffff9ff 	.word	0xfffff9ff
 80066a4:	20000104 	.word	0x20000104
 80066a8:	000f4240 	.word	0x000f4240

080066ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80066b0:	4b03      	ldr	r3, [pc, #12]	; (80066c0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	23e0      	movs	r3, #224	; 0xe0
 80066b6:	01db      	lsls	r3, r3, #7
 80066b8:	4013      	ands	r3, r2
}
 80066ba:	0018      	movs	r0, r3
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40021000 	.word	0x40021000

080066c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e2fe      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2201      	movs	r2, #1
 80066dc:	4013      	ands	r3, r2
 80066de:	d100      	bne.n	80066e2 <HAL_RCC_OscConfig+0x1e>
 80066e0:	e07c      	b.n	80067dc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066e2:	4bc3      	ldr	r3, [pc, #780]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2238      	movs	r2, #56	; 0x38
 80066e8:	4013      	ands	r3, r2
 80066ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066ec:	4bc0      	ldr	r3, [pc, #768]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	2203      	movs	r2, #3
 80066f2:	4013      	ands	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b10      	cmp	r3, #16
 80066fa:	d102      	bne.n	8006702 <HAL_RCC_OscConfig+0x3e>
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d002      	beq.n	8006708 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b08      	cmp	r3, #8
 8006706:	d10b      	bne.n	8006720 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006708:	4bb9      	ldr	r3, [pc, #740]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	2380      	movs	r3, #128	; 0x80
 800670e:	029b      	lsls	r3, r3, #10
 8006710:	4013      	ands	r3, r2
 8006712:	d062      	beq.n	80067da <HAL_RCC_OscConfig+0x116>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d15e      	bne.n	80067da <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e2d9      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	2380      	movs	r3, #128	; 0x80
 8006726:	025b      	lsls	r3, r3, #9
 8006728:	429a      	cmp	r2, r3
 800672a:	d107      	bne.n	800673c <HAL_RCC_OscConfig+0x78>
 800672c:	4bb0      	ldr	r3, [pc, #704]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	4baf      	ldr	r3, [pc, #700]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006732:	2180      	movs	r1, #128	; 0x80
 8006734:	0249      	lsls	r1, r1, #9
 8006736:	430a      	orrs	r2, r1
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	e020      	b.n	800677e <HAL_RCC_OscConfig+0xba>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	23a0      	movs	r3, #160	; 0xa0
 8006742:	02db      	lsls	r3, r3, #11
 8006744:	429a      	cmp	r2, r3
 8006746:	d10e      	bne.n	8006766 <HAL_RCC_OscConfig+0xa2>
 8006748:	4ba9      	ldr	r3, [pc, #676]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	4ba8      	ldr	r3, [pc, #672]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 800674e:	2180      	movs	r1, #128	; 0x80
 8006750:	02c9      	lsls	r1, r1, #11
 8006752:	430a      	orrs	r2, r1
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	4ba6      	ldr	r3, [pc, #664]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4ba5      	ldr	r3, [pc, #660]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 800675c:	2180      	movs	r1, #128	; 0x80
 800675e:	0249      	lsls	r1, r1, #9
 8006760:	430a      	orrs	r2, r1
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e00b      	b.n	800677e <HAL_RCC_OscConfig+0xba>
 8006766:	4ba2      	ldr	r3, [pc, #648]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	4ba1      	ldr	r3, [pc, #644]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 800676c:	49a1      	ldr	r1, [pc, #644]	; (80069f4 <HAL_RCC_OscConfig+0x330>)
 800676e:	400a      	ands	r2, r1
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	4b9f      	ldr	r3, [pc, #636]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b9e      	ldr	r3, [pc, #632]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006778:	499f      	ldr	r1, [pc, #636]	; (80069f8 <HAL_RCC_OscConfig+0x334>)
 800677a:	400a      	ands	r2, r1
 800677c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d014      	beq.n	80067b0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006786:	f7fd fd23 	bl	80041d0 <HAL_GetTick>
 800678a:	0003      	movs	r3, r0
 800678c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006790:	f7fd fd1e 	bl	80041d0 <HAL_GetTick>
 8006794:	0002      	movs	r2, r0
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b64      	cmp	r3, #100	; 0x64
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e298      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067a2:	4b93      	ldr	r3, [pc, #588]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	2380      	movs	r3, #128	; 0x80
 80067a8:	029b      	lsls	r3, r3, #10
 80067aa:	4013      	ands	r3, r2
 80067ac:	d0f0      	beq.n	8006790 <HAL_RCC_OscConfig+0xcc>
 80067ae:	e015      	b.n	80067dc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b0:	f7fd fd0e 	bl	80041d0 <HAL_GetTick>
 80067b4:	0003      	movs	r3, r0
 80067b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067b8:	e008      	b.n	80067cc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067ba:	f7fd fd09 	bl	80041d0 <HAL_GetTick>
 80067be:	0002      	movs	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b64      	cmp	r3, #100	; 0x64
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e283      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067cc:	4b88      	ldr	r3, [pc, #544]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	2380      	movs	r3, #128	; 0x80
 80067d2:	029b      	lsls	r3, r3, #10
 80067d4:	4013      	ands	r3, r2
 80067d6:	d1f0      	bne.n	80067ba <HAL_RCC_OscConfig+0xf6>
 80067d8:	e000      	b.n	80067dc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2202      	movs	r2, #2
 80067e2:	4013      	ands	r3, r2
 80067e4:	d100      	bne.n	80067e8 <HAL_RCC_OscConfig+0x124>
 80067e6:	e099      	b.n	800691c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067e8:	4b81      	ldr	r3, [pc, #516]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	2238      	movs	r2, #56	; 0x38
 80067ee:	4013      	ands	r3, r2
 80067f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067f2:	4b7f      	ldr	r3, [pc, #508]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	2203      	movs	r2, #3
 80067f8:	4013      	ands	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	2b10      	cmp	r3, #16
 8006800:	d102      	bne.n	8006808 <HAL_RCC_OscConfig+0x144>
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2b02      	cmp	r3, #2
 8006806:	d002      	beq.n	800680e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d135      	bne.n	800687a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800680e:	4b78      	ldr	r3, [pc, #480]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	2380      	movs	r3, #128	; 0x80
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	4013      	ands	r3, r2
 8006818:	d005      	beq.n	8006826 <HAL_RCC_OscConfig+0x162>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e256      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006826:	4b72      	ldr	r3, [pc, #456]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	4a74      	ldr	r2, [pc, #464]	; (80069fc <HAL_RCC_OscConfig+0x338>)
 800682c:	4013      	ands	r3, r2
 800682e:	0019      	movs	r1, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	021a      	lsls	r2, r3, #8
 8006836:	4b6e      	ldr	r3, [pc, #440]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006838:	430a      	orrs	r2, r1
 800683a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d112      	bne.n	8006868 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006842:	4b6b      	ldr	r3, [pc, #428]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a6e      	ldr	r2, [pc, #440]	; (8006a00 <HAL_RCC_OscConfig+0x33c>)
 8006848:	4013      	ands	r3, r2
 800684a:	0019      	movs	r1, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	4b67      	ldr	r3, [pc, #412]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006852:	430a      	orrs	r2, r1
 8006854:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006856:	4b66      	ldr	r3, [pc, #408]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	0adb      	lsrs	r3, r3, #11
 800685c:	2207      	movs	r2, #7
 800685e:	4013      	ands	r3, r2
 8006860:	4a68      	ldr	r2, [pc, #416]	; (8006a04 <HAL_RCC_OscConfig+0x340>)
 8006862:	40da      	lsrs	r2, r3
 8006864:	4b68      	ldr	r3, [pc, #416]	; (8006a08 <HAL_RCC_OscConfig+0x344>)
 8006866:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006868:	4b68      	ldr	r3, [pc, #416]	; (8006a0c <HAL_RCC_OscConfig+0x348>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	0018      	movs	r0, r3
 800686e:	f7fd fc53 	bl	8004118 <HAL_InitTick>
 8006872:	1e03      	subs	r3, r0, #0
 8006874:	d051      	beq.n	800691a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e22c      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d030      	beq.n	80068e4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006882:	4b5b      	ldr	r3, [pc, #364]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a5e      	ldr	r2, [pc, #376]	; (8006a00 <HAL_RCC_OscConfig+0x33c>)
 8006888:	4013      	ands	r3, r2
 800688a:	0019      	movs	r1, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	4b57      	ldr	r3, [pc, #348]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006892:	430a      	orrs	r2, r1
 8006894:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006896:	4b56      	ldr	r3, [pc, #344]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b55      	ldr	r3, [pc, #340]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 800689c:	2180      	movs	r1, #128	; 0x80
 800689e:	0049      	lsls	r1, r1, #1
 80068a0:	430a      	orrs	r2, r1
 80068a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a4:	f7fd fc94 	bl	80041d0 <HAL_GetTick>
 80068a8:	0003      	movs	r3, r0
 80068aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068ac:	e008      	b.n	80068c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068ae:	f7fd fc8f 	bl	80041d0 <HAL_GetTick>
 80068b2:	0002      	movs	r2, r0
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e209      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068c0:	4b4b      	ldr	r3, [pc, #300]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	2380      	movs	r3, #128	; 0x80
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	4013      	ands	r3, r2
 80068ca:	d0f0      	beq.n	80068ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068cc:	4b48      	ldr	r3, [pc, #288]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	4a4a      	ldr	r2, [pc, #296]	; (80069fc <HAL_RCC_OscConfig+0x338>)
 80068d2:	4013      	ands	r3, r2
 80068d4:	0019      	movs	r1, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	021a      	lsls	r2, r3, #8
 80068dc:	4b44      	ldr	r3, [pc, #272]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 80068de:	430a      	orrs	r2, r1
 80068e0:	605a      	str	r2, [r3, #4]
 80068e2:	e01b      	b.n	800691c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80068e4:	4b42      	ldr	r3, [pc, #264]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	4b41      	ldr	r3, [pc, #260]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 80068ea:	4949      	ldr	r1, [pc, #292]	; (8006a10 <HAL_RCC_OscConfig+0x34c>)
 80068ec:	400a      	ands	r2, r1
 80068ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f0:	f7fd fc6e 	bl	80041d0 <HAL_GetTick>
 80068f4:	0003      	movs	r3, r0
 80068f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068f8:	e008      	b.n	800690c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068fa:	f7fd fc69 	bl	80041d0 <HAL_GetTick>
 80068fe:	0002      	movs	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e1e3      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800690c:	4b38      	ldr	r3, [pc, #224]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	2380      	movs	r3, #128	; 0x80
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	4013      	ands	r3, r2
 8006916:	d1f0      	bne.n	80068fa <HAL_RCC_OscConfig+0x236>
 8006918:	e000      	b.n	800691c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800691a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2208      	movs	r2, #8
 8006922:	4013      	ands	r3, r2
 8006924:	d047      	beq.n	80069b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006926:	4b32      	ldr	r3, [pc, #200]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	2238      	movs	r2, #56	; 0x38
 800692c:	4013      	ands	r3, r2
 800692e:	2b18      	cmp	r3, #24
 8006930:	d10a      	bne.n	8006948 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006932:	4b2f      	ldr	r3, [pc, #188]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006936:	2202      	movs	r2, #2
 8006938:	4013      	ands	r3, r2
 800693a:	d03c      	beq.n	80069b6 <HAL_RCC_OscConfig+0x2f2>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d138      	bne.n	80069b6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e1c5      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d019      	beq.n	8006984 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006950:	4b27      	ldr	r3, [pc, #156]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006952:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006954:	4b26      	ldr	r3, [pc, #152]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006956:	2101      	movs	r1, #1
 8006958:	430a      	orrs	r2, r1
 800695a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695c:	f7fd fc38 	bl	80041d0 <HAL_GetTick>
 8006960:	0003      	movs	r3, r0
 8006962:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006966:	f7fd fc33 	bl	80041d0 <HAL_GetTick>
 800696a:	0002      	movs	r2, r0
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e1ad      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006978:	4b1d      	ldr	r3, [pc, #116]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 800697a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800697c:	2202      	movs	r2, #2
 800697e:	4013      	ands	r3, r2
 8006980:	d0f1      	beq.n	8006966 <HAL_RCC_OscConfig+0x2a2>
 8006982:	e018      	b.n	80069b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006984:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 8006986:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006988:	4b19      	ldr	r3, [pc, #100]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 800698a:	2101      	movs	r1, #1
 800698c:	438a      	bics	r2, r1
 800698e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006990:	f7fd fc1e 	bl	80041d0 <HAL_GetTick>
 8006994:	0003      	movs	r3, r0
 8006996:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800699a:	f7fd fc19 	bl	80041d0 <HAL_GetTick>
 800699e:	0002      	movs	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e193      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069ac:	4b10      	ldr	r3, [pc, #64]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 80069ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069b0:	2202      	movs	r2, #2
 80069b2:	4013      	ands	r3, r2
 80069b4:	d1f1      	bne.n	800699a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2204      	movs	r2, #4
 80069bc:	4013      	ands	r3, r2
 80069be:	d100      	bne.n	80069c2 <HAL_RCC_OscConfig+0x2fe>
 80069c0:	e0c6      	b.n	8006b50 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069c2:	231f      	movs	r3, #31
 80069c4:	18fb      	adds	r3, r7, r3
 80069c6:	2200      	movs	r2, #0
 80069c8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80069ca:	4b09      	ldr	r3, [pc, #36]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	2238      	movs	r2, #56	; 0x38
 80069d0:	4013      	ands	r3, r2
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d11e      	bne.n	8006a14 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80069d6:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <HAL_RCC_OscConfig+0x32c>)
 80069d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069da:	2202      	movs	r2, #2
 80069dc:	4013      	ands	r3, r2
 80069de:	d100      	bne.n	80069e2 <HAL_RCC_OscConfig+0x31e>
 80069e0:	e0b6      	b.n	8006b50 <HAL_RCC_OscConfig+0x48c>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d000      	beq.n	80069ec <HAL_RCC_OscConfig+0x328>
 80069ea:	e0b1      	b.n	8006b50 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e171      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
 80069f0:	40021000 	.word	0x40021000
 80069f4:	fffeffff 	.word	0xfffeffff
 80069f8:	fffbffff 	.word	0xfffbffff
 80069fc:	ffff80ff 	.word	0xffff80ff
 8006a00:	ffffc7ff 	.word	0xffffc7ff
 8006a04:	00f42400 	.word	0x00f42400
 8006a08:	20000104 	.word	0x20000104
 8006a0c:	20000108 	.word	0x20000108
 8006a10:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a14:	4bb1      	ldr	r3, [pc, #708]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a18:	2380      	movs	r3, #128	; 0x80
 8006a1a:	055b      	lsls	r3, r3, #21
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	d101      	bne.n	8006a24 <HAL_RCC_OscConfig+0x360>
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <HAL_RCC_OscConfig+0x362>
 8006a24:	2300      	movs	r3, #0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d011      	beq.n	8006a4e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006a2a:	4bac      	ldr	r3, [pc, #688]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a2e:	4bab      	ldr	r3, [pc, #684]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006a30:	2180      	movs	r1, #128	; 0x80
 8006a32:	0549      	lsls	r1, r1, #21
 8006a34:	430a      	orrs	r2, r1
 8006a36:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a38:	4ba8      	ldr	r3, [pc, #672]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a3c:	2380      	movs	r3, #128	; 0x80
 8006a3e:	055b      	lsls	r3, r3, #21
 8006a40:	4013      	ands	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006a46:	231f      	movs	r3, #31
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a4e:	4ba4      	ldr	r3, [pc, #656]	; (8006ce0 <HAL_RCC_OscConfig+0x61c>)
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	2380      	movs	r3, #128	; 0x80
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	4013      	ands	r3, r2
 8006a58:	d11a      	bne.n	8006a90 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a5a:	4ba1      	ldr	r3, [pc, #644]	; (8006ce0 <HAL_RCC_OscConfig+0x61c>)
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	4ba0      	ldr	r3, [pc, #640]	; (8006ce0 <HAL_RCC_OscConfig+0x61c>)
 8006a60:	2180      	movs	r1, #128	; 0x80
 8006a62:	0049      	lsls	r1, r1, #1
 8006a64:	430a      	orrs	r2, r1
 8006a66:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006a68:	f7fd fbb2 	bl	80041d0 <HAL_GetTick>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a70:	e008      	b.n	8006a84 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a72:	f7fd fbad 	bl	80041d0 <HAL_GetTick>
 8006a76:	0002      	movs	r2, r0
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e127      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a84:	4b96      	ldr	r3, [pc, #600]	; (8006ce0 <HAL_RCC_OscConfig+0x61c>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	2380      	movs	r3, #128	; 0x80
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	d0f0      	beq.n	8006a72 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d106      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x3e2>
 8006a98:	4b90      	ldr	r3, [pc, #576]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006a9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a9c:	4b8f      	ldr	r3, [pc, #572]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006aa4:	e01c      	b.n	8006ae0 <HAL_RCC_OscConfig+0x41c>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	2b05      	cmp	r3, #5
 8006aac:	d10c      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x404>
 8006aae:	4b8b      	ldr	r3, [pc, #556]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006ab0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ab2:	4b8a      	ldr	r3, [pc, #552]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006ab4:	2104      	movs	r1, #4
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006aba:	4b88      	ldr	r3, [pc, #544]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006abc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006abe:	4b87      	ldr	r3, [pc, #540]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ac6:	e00b      	b.n	8006ae0 <HAL_RCC_OscConfig+0x41c>
 8006ac8:	4b84      	ldr	r3, [pc, #528]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006aca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006acc:	4b83      	ldr	r3, [pc, #524]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006ace:	2101      	movs	r1, #1
 8006ad0:	438a      	bics	r2, r1
 8006ad2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ad4:	4b81      	ldr	r3, [pc, #516]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006ad6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ad8:	4b80      	ldr	r3, [pc, #512]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006ada:	2104      	movs	r1, #4
 8006adc:	438a      	bics	r2, r1
 8006ade:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d014      	beq.n	8006b12 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae8:	f7fd fb72 	bl	80041d0 <HAL_GetTick>
 8006aec:	0003      	movs	r3, r0
 8006aee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006af0:	e009      	b.n	8006b06 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af2:	f7fd fb6d 	bl	80041d0 <HAL_GetTick>
 8006af6:	0002      	movs	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	4a79      	ldr	r2, [pc, #484]	; (8006ce4 <HAL_RCC_OscConfig+0x620>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e0e6      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b06:	4b75      	ldr	r3, [pc, #468]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	d0f0      	beq.n	8006af2 <HAL_RCC_OscConfig+0x42e>
 8006b10:	e013      	b.n	8006b3a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b12:	f7fd fb5d 	bl	80041d0 <HAL_GetTick>
 8006b16:	0003      	movs	r3, r0
 8006b18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b1a:	e009      	b.n	8006b30 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b1c:	f7fd fb58 	bl	80041d0 <HAL_GetTick>
 8006b20:	0002      	movs	r2, r0
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	4a6f      	ldr	r2, [pc, #444]	; (8006ce4 <HAL_RCC_OscConfig+0x620>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e0d1      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b30:	4b6a      	ldr	r3, [pc, #424]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b34:	2202      	movs	r2, #2
 8006b36:	4013      	ands	r3, r2
 8006b38:	d1f0      	bne.n	8006b1c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006b3a:	231f      	movs	r3, #31
 8006b3c:	18fb      	adds	r3, r7, r3
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d105      	bne.n	8006b50 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006b44:	4b65      	ldr	r3, [pc, #404]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b48:	4b64      	ldr	r3, [pc, #400]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006b4a:	4967      	ldr	r1, [pc, #412]	; (8006ce8 <HAL_RCC_OscConfig+0x624>)
 8006b4c:	400a      	ands	r2, r1
 8006b4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d100      	bne.n	8006b5a <HAL_RCC_OscConfig+0x496>
 8006b58:	e0bb      	b.n	8006cd2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b5a:	4b60      	ldr	r3, [pc, #384]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2238      	movs	r2, #56	; 0x38
 8006b60:	4013      	ands	r3, r2
 8006b62:	2b10      	cmp	r3, #16
 8006b64:	d100      	bne.n	8006b68 <HAL_RCC_OscConfig+0x4a4>
 8006b66:	e07b      	b.n	8006c60 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d156      	bne.n	8006c1e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b70:	4b5a      	ldr	r3, [pc, #360]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	4b59      	ldr	r3, [pc, #356]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006b76:	495d      	ldr	r1, [pc, #372]	; (8006cec <HAL_RCC_OscConfig+0x628>)
 8006b78:	400a      	ands	r2, r1
 8006b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7c:	f7fd fb28 	bl	80041d0 <HAL_GetTick>
 8006b80:	0003      	movs	r3, r0
 8006b82:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b84:	e008      	b.n	8006b98 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b86:	f7fd fb23 	bl	80041d0 <HAL_GetTick>
 8006b8a:	0002      	movs	r2, r0
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e09d      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b98:	4b50      	ldr	r3, [pc, #320]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	2380      	movs	r3, #128	; 0x80
 8006b9e:	049b      	lsls	r3, r3, #18
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	d1f0      	bne.n	8006b86 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ba4:	4b4d      	ldr	r3, [pc, #308]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	4a51      	ldr	r2, [pc, #324]	; (8006cf0 <HAL_RCC_OscConfig+0x62c>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	0019      	movs	r1, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1a      	ldr	r2, [r3, #32]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	4b42      	ldr	r3, [pc, #264]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bd8:	4b40      	ldr	r3, [pc, #256]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	4b3f      	ldr	r3, [pc, #252]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006bde:	2180      	movs	r1, #128	; 0x80
 8006be0:	0449      	lsls	r1, r1, #17
 8006be2:	430a      	orrs	r2, r1
 8006be4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006be6:	4b3d      	ldr	r3, [pc, #244]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	4b3c      	ldr	r3, [pc, #240]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006bec:	2180      	movs	r1, #128	; 0x80
 8006bee:	0549      	lsls	r1, r1, #21
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf4:	f7fd faec 	bl	80041d0 <HAL_GetTick>
 8006bf8:	0003      	movs	r3, r0
 8006bfa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bfe:	f7fd fae7 	bl	80041d0 <HAL_GetTick>
 8006c02:	0002      	movs	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e061      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c10:	4b32      	ldr	r3, [pc, #200]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	2380      	movs	r3, #128	; 0x80
 8006c16:	049b      	lsls	r3, r3, #18
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d0f0      	beq.n	8006bfe <HAL_RCC_OscConfig+0x53a>
 8006c1c:	e059      	b.n	8006cd2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1e:	4b2f      	ldr	r3, [pc, #188]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	4b2e      	ldr	r3, [pc, #184]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006c24:	4931      	ldr	r1, [pc, #196]	; (8006cec <HAL_RCC_OscConfig+0x628>)
 8006c26:	400a      	ands	r2, r1
 8006c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2a:	f7fd fad1 	bl	80041d0 <HAL_GetTick>
 8006c2e:	0003      	movs	r3, r0
 8006c30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c34:	f7fd facc 	bl	80041d0 <HAL_GetTick>
 8006c38:	0002      	movs	r2, r0
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e046      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c46:	4b25      	ldr	r3, [pc, #148]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	2380      	movs	r3, #128	; 0x80
 8006c4c:	049b      	lsls	r3, r3, #18
 8006c4e:	4013      	ands	r3, r2
 8006c50:	d1f0      	bne.n	8006c34 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006c52:	4b22      	ldr	r3, [pc, #136]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	4b21      	ldr	r3, [pc, #132]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006c58:	4926      	ldr	r1, [pc, #152]	; (8006cf4 <HAL_RCC_OscConfig+0x630>)
 8006c5a:	400a      	ands	r2, r1
 8006c5c:	60da      	str	r2, [r3, #12]
 8006c5e:	e038      	b.n	8006cd2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d101      	bne.n	8006c6c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e033      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006c6c:	4b1b      	ldr	r3, [pc, #108]	; (8006cdc <HAL_RCC_OscConfig+0x618>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2203      	movs	r2, #3
 8006c76:	401a      	ands	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d126      	bne.n	8006cce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2270      	movs	r2, #112	; 0x70
 8006c84:	401a      	ands	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d11f      	bne.n	8006cce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	23fe      	movs	r3, #254	; 0xfe
 8006c92:	01db      	lsls	r3, r3, #7
 8006c94:	401a      	ands	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d116      	bne.n	8006cce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	23f8      	movs	r3, #248	; 0xf8
 8006ca4:	039b      	lsls	r3, r3, #14
 8006ca6:	401a      	ands	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d10e      	bne.n	8006cce <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	23e0      	movs	r3, #224	; 0xe0
 8006cb4:	051b      	lsls	r3, r3, #20
 8006cb6:	401a      	ands	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d106      	bne.n	8006cce <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	0f5b      	lsrs	r3, r3, #29
 8006cc4:	075a      	lsls	r2, r3, #29
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d001      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	b008      	add	sp, #32
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40021000 	.word	0x40021000
 8006ce0:	40007000 	.word	0x40007000
 8006ce4:	00001388 	.word	0x00001388
 8006ce8:	efffffff 	.word	0xefffffff
 8006cec:	feffffff 	.word	0xfeffffff
 8006cf0:	11c1808c 	.word	0x11c1808c
 8006cf4:	eefefffc 	.word	0xeefefffc

08006cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e0e9      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d0c:	4b76      	ldr	r3, [pc, #472]	; (8006ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2207      	movs	r2, #7
 8006d12:	4013      	ands	r3, r2
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d91e      	bls.n	8006d58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d1a:	4b73      	ldr	r3, [pc, #460]	; (8006ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2207      	movs	r2, #7
 8006d20:	4393      	bics	r3, r2
 8006d22:	0019      	movs	r1, r3
 8006d24:	4b70      	ldr	r3, [pc, #448]	; (8006ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006d2c:	f7fd fa50 	bl	80041d0 <HAL_GetTick>
 8006d30:	0003      	movs	r3, r0
 8006d32:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d34:	e009      	b.n	8006d4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d36:	f7fd fa4b 	bl	80041d0 <HAL_GetTick>
 8006d3a:	0002      	movs	r2, r0
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	4a6a      	ldr	r2, [pc, #424]	; (8006eec <HAL_RCC_ClockConfig+0x1f4>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e0ca      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d4a:	4b67      	ldr	r3, [pc, #412]	; (8006ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2207      	movs	r2, #7
 8006d50:	4013      	ands	r3, r2
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d1ee      	bne.n	8006d36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d015      	beq.n	8006d8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2204      	movs	r2, #4
 8006d68:	4013      	ands	r3, r2
 8006d6a:	d006      	beq.n	8006d7a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006d6c:	4b60      	ldr	r3, [pc, #384]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006d6e:	689a      	ldr	r2, [r3, #8]
 8006d70:	4b5f      	ldr	r3, [pc, #380]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006d72:	21e0      	movs	r1, #224	; 0xe0
 8006d74:	01c9      	lsls	r1, r1, #7
 8006d76:	430a      	orrs	r2, r1
 8006d78:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d7a:	4b5d      	ldr	r3, [pc, #372]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	4a5d      	ldr	r2, [pc, #372]	; (8006ef4 <HAL_RCC_ClockConfig+0x1fc>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	0019      	movs	r1, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	4b59      	ldr	r3, [pc, #356]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2201      	movs	r2, #1
 8006d94:	4013      	ands	r3, r2
 8006d96:	d057      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d107      	bne.n	8006db0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006da0:	4b53      	ldr	r3, [pc, #332]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	2380      	movs	r3, #128	; 0x80
 8006da6:	029b      	lsls	r3, r3, #10
 8006da8:	4013      	ands	r3, r2
 8006daa:	d12b      	bne.n	8006e04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e097      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d107      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006db8:	4b4d      	ldr	r3, [pc, #308]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	2380      	movs	r3, #128	; 0x80
 8006dbe:	049b      	lsls	r3, r3, #18
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	d11f      	bne.n	8006e04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e08b      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d107      	bne.n	8006de0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006dd0:	4b47      	ldr	r3, [pc, #284]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	2380      	movs	r3, #128	; 0x80
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	4013      	ands	r3, r2
 8006dda:	d113      	bne.n	8006e04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e07f      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d106      	bne.n	8006df6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006de8:	4b41      	ldr	r3, [pc, #260]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dec:	2202      	movs	r2, #2
 8006dee:	4013      	ands	r3, r2
 8006df0:	d108      	bne.n	8006e04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e074      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006df6:	4b3e      	ldr	r3, [pc, #248]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d101      	bne.n	8006e04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e06d      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e04:	4b3a      	ldr	r3, [pc, #232]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2207      	movs	r2, #7
 8006e0a:	4393      	bics	r3, r2
 8006e0c:	0019      	movs	r1, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	4b37      	ldr	r3, [pc, #220]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006e14:	430a      	orrs	r2, r1
 8006e16:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e18:	f7fd f9da 	bl	80041d0 <HAL_GetTick>
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e20:	e009      	b.n	8006e36 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e22:	f7fd f9d5 	bl	80041d0 <HAL_GetTick>
 8006e26:	0002      	movs	r2, r0
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	4a2f      	ldr	r2, [pc, #188]	; (8006eec <HAL_RCC_ClockConfig+0x1f4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e054      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e36:	4b2e      	ldr	r3, [pc, #184]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	2238      	movs	r2, #56	; 0x38
 8006e3c:	401a      	ands	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d1ec      	bne.n	8006e22 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e48:	4b27      	ldr	r3, [pc, #156]	; (8006ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2207      	movs	r2, #7
 8006e4e:	4013      	ands	r3, r2
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d21e      	bcs.n	8006e94 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e56:	4b24      	ldr	r3, [pc, #144]	; (8006ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2207      	movs	r2, #7
 8006e5c:	4393      	bics	r3, r2
 8006e5e:	0019      	movs	r1, r3
 8006e60:	4b21      	ldr	r3, [pc, #132]	; (8006ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006e68:	f7fd f9b2 	bl	80041d0 <HAL_GetTick>
 8006e6c:	0003      	movs	r3, r0
 8006e6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006e70:	e009      	b.n	8006e86 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e72:	f7fd f9ad 	bl	80041d0 <HAL_GetTick>
 8006e76:	0002      	movs	r2, r0
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <HAL_RCC_ClockConfig+0x1f4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e02c      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006e86:	4b18      	ldr	r3, [pc, #96]	; (8006ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2207      	movs	r2, #7
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d1ee      	bne.n	8006e72 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2204      	movs	r2, #4
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	d009      	beq.n	8006eb2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006e9e:	4b14      	ldr	r3, [pc, #80]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	4a15      	ldr	r2, [pc, #84]	; (8006ef8 <HAL_RCC_ClockConfig+0x200>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	0019      	movs	r1, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	4b10      	ldr	r3, [pc, #64]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006eb2:	f000 f829 	bl	8006f08 <HAL_RCC_GetSysClockFreq>
 8006eb6:	0001      	movs	r1, r0
 8006eb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	0a1b      	lsrs	r3, r3, #8
 8006ebe:	220f      	movs	r2, #15
 8006ec0:	401a      	ands	r2, r3
 8006ec2:	4b0e      	ldr	r3, [pc, #56]	; (8006efc <HAL_RCC_ClockConfig+0x204>)
 8006ec4:	0092      	lsls	r2, r2, #2
 8006ec6:	58d3      	ldr	r3, [r2, r3]
 8006ec8:	221f      	movs	r2, #31
 8006eca:	4013      	ands	r3, r2
 8006ecc:	000a      	movs	r2, r1
 8006ece:	40da      	lsrs	r2, r3
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <HAL_RCC_ClockConfig+0x208>)
 8006ed2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <HAL_RCC_ClockConfig+0x20c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	0018      	movs	r0, r3
 8006eda:	f7fd f91d 	bl	8004118 <HAL_InitTick>
 8006ede:	0003      	movs	r3, r0
}
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	b004      	add	sp, #16
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40022000 	.word	0x40022000
 8006eec:	00001388 	.word	0x00001388
 8006ef0:	40021000 	.word	0x40021000
 8006ef4:	fffff0ff 	.word	0xfffff0ff
 8006ef8:	ffff8fff 	.word	0xffff8fff
 8006efc:	080093f8 	.word	0x080093f8
 8006f00:	20000104 	.word	0x20000104
 8006f04:	20000108 	.word	0x20000108

08006f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f0e:	4b3c      	ldr	r3, [pc, #240]	; (8007000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2238      	movs	r2, #56	; 0x38
 8006f14:	4013      	ands	r3, r2
 8006f16:	d10f      	bne.n	8006f38 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006f18:	4b39      	ldr	r3, [pc, #228]	; (8007000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	0adb      	lsrs	r3, r3, #11
 8006f1e:	2207      	movs	r2, #7
 8006f20:	4013      	ands	r3, r2
 8006f22:	2201      	movs	r2, #1
 8006f24:	409a      	lsls	r2, r3
 8006f26:	0013      	movs	r3, r2
 8006f28:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	4835      	ldr	r0, [pc, #212]	; (8007004 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006f2e:	f7f9 f8e7 	bl	8000100 <__udivsi3>
 8006f32:	0003      	movs	r3, r0
 8006f34:	613b      	str	r3, [r7, #16]
 8006f36:	e05d      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f38:	4b31      	ldr	r3, [pc, #196]	; (8007000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	2238      	movs	r2, #56	; 0x38
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d102      	bne.n	8006f4a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f44:	4b30      	ldr	r3, [pc, #192]	; (8007008 <HAL_RCC_GetSysClockFreq+0x100>)
 8006f46:	613b      	str	r3, [r7, #16]
 8006f48:	e054      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f4a:	4b2d      	ldr	r3, [pc, #180]	; (8007000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	2238      	movs	r2, #56	; 0x38
 8006f50:	4013      	ands	r3, r2
 8006f52:	2b10      	cmp	r3, #16
 8006f54:	d138      	bne.n	8006fc8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006f56:	4b2a      	ldr	r3, [pc, #168]	; (8007000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	2203      	movs	r2, #3
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f60:	4b27      	ldr	r3, [pc, #156]	; (8007000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	091b      	lsrs	r3, r3, #4
 8006f66:	2207      	movs	r2, #7
 8006f68:	4013      	ands	r3, r2
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d10d      	bne.n	8006f90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f74:	68b9      	ldr	r1, [r7, #8]
 8006f76:	4824      	ldr	r0, [pc, #144]	; (8007008 <HAL_RCC_GetSysClockFreq+0x100>)
 8006f78:	f7f9 f8c2 	bl	8000100 <__udivsi3>
 8006f7c:	0003      	movs	r3, r0
 8006f7e:	0019      	movs	r1, r3
 8006f80:	4b1f      	ldr	r3, [pc, #124]	; (8007000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	0a1b      	lsrs	r3, r3, #8
 8006f86:	227f      	movs	r2, #127	; 0x7f
 8006f88:	4013      	ands	r3, r2
 8006f8a:	434b      	muls	r3, r1
 8006f8c:	617b      	str	r3, [r7, #20]
        break;
 8006f8e:	e00d      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006f90:	68b9      	ldr	r1, [r7, #8]
 8006f92:	481c      	ldr	r0, [pc, #112]	; (8007004 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006f94:	f7f9 f8b4 	bl	8000100 <__udivsi3>
 8006f98:	0003      	movs	r3, r0
 8006f9a:	0019      	movs	r1, r3
 8006f9c:	4b18      	ldr	r3, [pc, #96]	; (8007000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	0a1b      	lsrs	r3, r3, #8
 8006fa2:	227f      	movs	r2, #127	; 0x7f
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	434b      	muls	r3, r1
 8006fa8:	617b      	str	r3, [r7, #20]
        break;
 8006faa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006fac:	4b14      	ldr	r3, [pc, #80]	; (8007000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	0f5b      	lsrs	r3, r3, #29
 8006fb2:	2207      	movs	r2, #7
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	6978      	ldr	r0, [r7, #20]
 8006fbe:	f7f9 f89f 	bl	8000100 <__udivsi3>
 8006fc2:	0003      	movs	r3, r0
 8006fc4:	613b      	str	r3, [r7, #16]
 8006fc6:	e015      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006fc8:	4b0d      	ldr	r3, [pc, #52]	; (8007000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	2238      	movs	r2, #56	; 0x38
 8006fce:	4013      	ands	r3, r2
 8006fd0:	2b20      	cmp	r3, #32
 8006fd2:	d103      	bne.n	8006fdc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006fd4:	2380      	movs	r3, #128	; 0x80
 8006fd6:	021b      	lsls	r3, r3, #8
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	e00b      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006fdc:	4b08      	ldr	r3, [pc, #32]	; (8007000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	2238      	movs	r2, #56	; 0x38
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	2b18      	cmp	r3, #24
 8006fe6:	d103      	bne.n	8006ff0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006fe8:	23fa      	movs	r3, #250	; 0xfa
 8006fea:	01db      	lsls	r3, r3, #7
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	e001      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006ff4:	693b      	ldr	r3, [r7, #16]
}
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	b006      	add	sp, #24
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	40021000 	.word	0x40021000
 8007004:	00f42400 	.word	0x00f42400
 8007008:	007a1200 	.word	0x007a1200

0800700c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007010:	4b02      	ldr	r3, [pc, #8]	; (800701c <HAL_RCC_GetHCLKFreq+0x10>)
 8007012:	681b      	ldr	r3, [r3, #0]
}
 8007014:	0018      	movs	r0, r3
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	20000104 	.word	0x20000104

08007020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007020:	b5b0      	push	{r4, r5, r7, lr}
 8007022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007024:	f7ff fff2 	bl	800700c <HAL_RCC_GetHCLKFreq>
 8007028:	0004      	movs	r4, r0
 800702a:	f7ff fb3f 	bl	80066ac <LL_RCC_GetAPB1Prescaler>
 800702e:	0003      	movs	r3, r0
 8007030:	0b1a      	lsrs	r2, r3, #12
 8007032:	4b05      	ldr	r3, [pc, #20]	; (8007048 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007034:	0092      	lsls	r2, r2, #2
 8007036:	58d3      	ldr	r3, [r2, r3]
 8007038:	221f      	movs	r2, #31
 800703a:	4013      	ands	r3, r2
 800703c:	40dc      	lsrs	r4, r3
 800703e:	0023      	movs	r3, r4
}
 8007040:	0018      	movs	r0, r3
 8007042:	46bd      	mov	sp, r7
 8007044:	bdb0      	pop	{r4, r5, r7, pc}
 8007046:	46c0      	nop			; (mov r8, r8)
 8007048:	08009438 	.word	0x08009438

0800704c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007054:	2313      	movs	r3, #19
 8007056:	18fb      	adds	r3, r7, r3
 8007058:	2200      	movs	r2, #0
 800705a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800705c:	2312      	movs	r3, #18
 800705e:	18fb      	adds	r3, r7, r3
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	2380      	movs	r3, #128	; 0x80
 800706a:	029b      	lsls	r3, r3, #10
 800706c:	4013      	ands	r3, r2
 800706e:	d100      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007070:	e0a3      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007072:	2011      	movs	r0, #17
 8007074:	183b      	adds	r3, r7, r0
 8007076:	2200      	movs	r2, #0
 8007078:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800707a:	4bb3      	ldr	r3, [pc, #716]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800707c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800707e:	2380      	movs	r3, #128	; 0x80
 8007080:	055b      	lsls	r3, r3, #21
 8007082:	4013      	ands	r3, r2
 8007084:	d110      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007086:	4bb0      	ldr	r3, [pc, #704]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800708a:	4baf      	ldr	r3, [pc, #700]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800708c:	2180      	movs	r1, #128	; 0x80
 800708e:	0549      	lsls	r1, r1, #21
 8007090:	430a      	orrs	r2, r1
 8007092:	63da      	str	r2, [r3, #60]	; 0x3c
 8007094:	4bac      	ldr	r3, [pc, #688]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007098:	2380      	movs	r3, #128	; 0x80
 800709a:	055b      	lsls	r3, r3, #21
 800709c:	4013      	ands	r3, r2
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070a2:	183b      	adds	r3, r7, r0
 80070a4:	2201      	movs	r2, #1
 80070a6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070a8:	4ba8      	ldr	r3, [pc, #672]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	4ba7      	ldr	r3, [pc, #668]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070ae:	2180      	movs	r1, #128	; 0x80
 80070b0:	0049      	lsls	r1, r1, #1
 80070b2:	430a      	orrs	r2, r1
 80070b4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070b6:	f7fd f88b 	bl	80041d0 <HAL_GetTick>
 80070ba:	0003      	movs	r3, r0
 80070bc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070be:	e00b      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070c0:	f7fd f886 	bl	80041d0 <HAL_GetTick>
 80070c4:	0002      	movs	r2, r0
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d904      	bls.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80070ce:	2313      	movs	r3, #19
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	2203      	movs	r2, #3
 80070d4:	701a      	strb	r2, [r3, #0]
        break;
 80070d6:	e005      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070d8:	4b9c      	ldr	r3, [pc, #624]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	2380      	movs	r3, #128	; 0x80
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	4013      	ands	r3, r2
 80070e2:	d0ed      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80070e4:	2313      	movs	r3, #19
 80070e6:	18fb      	adds	r3, r7, r3
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d154      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80070ee:	4b96      	ldr	r3, [pc, #600]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80070f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070f2:	23c0      	movs	r3, #192	; 0xc0
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4013      	ands	r3, r2
 80070f8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d019      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	429a      	cmp	r2, r3
 8007108:	d014      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800710a:	4b8f      	ldr	r3, [pc, #572]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800710c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800710e:	4a90      	ldr	r2, [pc, #576]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007110:	4013      	ands	r3, r2
 8007112:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007114:	4b8c      	ldr	r3, [pc, #560]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007116:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007118:	4b8b      	ldr	r3, [pc, #556]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800711a:	2180      	movs	r1, #128	; 0x80
 800711c:	0249      	lsls	r1, r1, #9
 800711e:	430a      	orrs	r2, r1
 8007120:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007122:	4b89      	ldr	r3, [pc, #548]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007124:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007126:	4b88      	ldr	r3, [pc, #544]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007128:	498a      	ldr	r1, [pc, #552]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800712a:	400a      	ands	r2, r1
 800712c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800712e:	4b86      	ldr	r3, [pc, #536]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2201      	movs	r2, #1
 8007138:	4013      	ands	r3, r2
 800713a:	d016      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713c:	f7fd f848 	bl	80041d0 <HAL_GetTick>
 8007140:	0003      	movs	r3, r0
 8007142:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007144:	e00c      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007146:	f7fd f843 	bl	80041d0 <HAL_GetTick>
 800714a:	0002      	movs	r2, r0
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	4a81      	ldr	r2, [pc, #516]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d904      	bls.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007156:	2313      	movs	r3, #19
 8007158:	18fb      	adds	r3, r7, r3
 800715a:	2203      	movs	r2, #3
 800715c:	701a      	strb	r2, [r3, #0]
            break;
 800715e:	e004      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007160:	4b79      	ldr	r3, [pc, #484]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007164:	2202      	movs	r2, #2
 8007166:	4013      	ands	r3, r2
 8007168:	d0ed      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800716a:	2313      	movs	r3, #19
 800716c:	18fb      	adds	r3, r7, r3
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007174:	4b74      	ldr	r3, [pc, #464]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007178:	4a75      	ldr	r2, [pc, #468]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800717a:	4013      	ands	r3, r2
 800717c:	0019      	movs	r1, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007182:	4b71      	ldr	r3, [pc, #452]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007184:	430a      	orrs	r2, r1
 8007186:	65da      	str	r2, [r3, #92]	; 0x5c
 8007188:	e00c      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800718a:	2312      	movs	r3, #18
 800718c:	18fb      	adds	r3, r7, r3
 800718e:	2213      	movs	r2, #19
 8007190:	18ba      	adds	r2, r7, r2
 8007192:	7812      	ldrb	r2, [r2, #0]
 8007194:	701a      	strb	r2, [r3, #0]
 8007196:	e005      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007198:	2312      	movs	r3, #18
 800719a:	18fb      	adds	r3, r7, r3
 800719c:	2213      	movs	r2, #19
 800719e:	18ba      	adds	r2, r7, r2
 80071a0:	7812      	ldrb	r2, [r2, #0]
 80071a2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071a4:	2311      	movs	r3, #17
 80071a6:	18fb      	adds	r3, r7, r3
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d105      	bne.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071ae:	4b66      	ldr	r3, [pc, #408]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80071b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071b2:	4b65      	ldr	r3, [pc, #404]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80071b4:	4969      	ldr	r1, [pc, #420]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80071b6:	400a      	ands	r2, r1
 80071b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2201      	movs	r2, #1
 80071c0:	4013      	ands	r3, r2
 80071c2:	d009      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071c4:	4b60      	ldr	r3, [pc, #384]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80071c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c8:	2203      	movs	r2, #3
 80071ca:	4393      	bics	r3, r2
 80071cc:	0019      	movs	r1, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	4b5d      	ldr	r3, [pc, #372]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80071d4:	430a      	orrs	r2, r1
 80071d6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2210      	movs	r2, #16
 80071de:	4013      	ands	r3, r2
 80071e0:	d009      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071e2:	4b59      	ldr	r3, [pc, #356]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80071e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e6:	4a5e      	ldr	r2, [pc, #376]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	0019      	movs	r1, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	4b55      	ldr	r3, [pc, #340]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80071f2:	430a      	orrs	r2, r1
 80071f4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	2380      	movs	r3, #128	; 0x80
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4013      	ands	r3, r2
 8007200:	d009      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007202:	4b51      	ldr	r3, [pc, #324]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007206:	4a57      	ldr	r2, [pc, #348]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8007208:	4013      	ands	r3, r2
 800720a:	0019      	movs	r1, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	695a      	ldr	r2, [r3, #20]
 8007210:	4b4d      	ldr	r3, [pc, #308]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007212:	430a      	orrs	r2, r1
 8007214:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	2380      	movs	r3, #128	; 0x80
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	4013      	ands	r3, r2
 8007220:	d009      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007222:	4b49      	ldr	r3, [pc, #292]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007226:	4a50      	ldr	r2, [pc, #320]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007228:	4013      	ands	r3, r2
 800722a:	0019      	movs	r1, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	699a      	ldr	r2, [r3, #24]
 8007230:	4b45      	ldr	r3, [pc, #276]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007232:	430a      	orrs	r2, r1
 8007234:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2220      	movs	r2, #32
 800723c:	4013      	ands	r3, r2
 800723e:	d009      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007240:	4b41      	ldr	r3, [pc, #260]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007244:	4a49      	ldr	r2, [pc, #292]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007246:	4013      	ands	r3, r2
 8007248:	0019      	movs	r1, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	4b3e      	ldr	r3, [pc, #248]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007250:	430a      	orrs	r2, r1
 8007252:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	2380      	movs	r3, #128	; 0x80
 800725a:	01db      	lsls	r3, r3, #7
 800725c:	4013      	ands	r3, r2
 800725e:	d015      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007260:	4b39      	ldr	r3, [pc, #228]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	0899      	lsrs	r1, r3, #2
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	69da      	ldr	r2, [r3, #28]
 800726c:	4b36      	ldr	r3, [pc, #216]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800726e:	430a      	orrs	r2, r1
 8007270:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	69da      	ldr	r2, [r3, #28]
 8007276:	2380      	movs	r3, #128	; 0x80
 8007278:	05db      	lsls	r3, r3, #23
 800727a:	429a      	cmp	r2, r3
 800727c:	d106      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800727e:	4b32      	ldr	r3, [pc, #200]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	4b31      	ldr	r3, [pc, #196]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007284:	2180      	movs	r1, #128	; 0x80
 8007286:	0249      	lsls	r1, r1, #9
 8007288:	430a      	orrs	r2, r1
 800728a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	2380      	movs	r3, #128	; 0x80
 8007292:	039b      	lsls	r3, r3, #14
 8007294:	4013      	ands	r3, r2
 8007296:	d016      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007298:	4b2b      	ldr	r3, [pc, #172]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800729a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729c:	4a34      	ldr	r2, [pc, #208]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800729e:	4013      	ands	r3, r2
 80072a0:	0019      	movs	r1, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1a      	ldr	r2, [r3, #32]
 80072a6:	4b28      	ldr	r3, [pc, #160]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80072a8:	430a      	orrs	r2, r1
 80072aa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a1a      	ldr	r2, [r3, #32]
 80072b0:	2380      	movs	r3, #128	; 0x80
 80072b2:	03db      	lsls	r3, r3, #15
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d106      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80072b8:	4b23      	ldr	r3, [pc, #140]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	4b22      	ldr	r3, [pc, #136]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80072be:	2180      	movs	r1, #128	; 0x80
 80072c0:	0449      	lsls	r1, r1, #17
 80072c2:	430a      	orrs	r2, r1
 80072c4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	2380      	movs	r3, #128	; 0x80
 80072cc:	03db      	lsls	r3, r3, #15
 80072ce:	4013      	ands	r3, r2
 80072d0:	d016      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80072d2:	4b1d      	ldr	r3, [pc, #116]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80072d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d6:	4a27      	ldr	r2, [pc, #156]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80072d8:	4013      	ands	r3, r2
 80072da:	0019      	movs	r1, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072e0:	4b19      	ldr	r3, [pc, #100]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80072e2:	430a      	orrs	r2, r1
 80072e4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072ea:	2380      	movs	r3, #128	; 0x80
 80072ec:	045b      	lsls	r3, r3, #17
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d106      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80072f2:	4b15      	ldr	r3, [pc, #84]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	4b14      	ldr	r3, [pc, #80]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80072f8:	2180      	movs	r1, #128	; 0x80
 80072fa:	0449      	lsls	r1, r1, #17
 80072fc:	430a      	orrs	r2, r1
 80072fe:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	2380      	movs	r3, #128	; 0x80
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	4013      	ands	r3, r2
 800730a:	d016      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800730c:	4b0e      	ldr	r3, [pc, #56]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800730e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007310:	4a19      	ldr	r2, [pc, #100]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8007312:	4013      	ands	r3, r2
 8007314:	0019      	movs	r1, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	691a      	ldr	r2, [r3, #16]
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800731c:	430a      	orrs	r2, r1
 800731e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691a      	ldr	r2, [r3, #16]
 8007324:	2380      	movs	r3, #128	; 0x80
 8007326:	01db      	lsls	r3, r3, #7
 8007328:	429a      	cmp	r2, r3
 800732a:	d106      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	4b05      	ldr	r3, [pc, #20]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007332:	2180      	movs	r1, #128	; 0x80
 8007334:	0249      	lsls	r1, r1, #9
 8007336:	430a      	orrs	r2, r1
 8007338:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800733a:	2312      	movs	r3, #18
 800733c:	18fb      	adds	r3, r7, r3
 800733e:	781b      	ldrb	r3, [r3, #0]
}
 8007340:	0018      	movs	r0, r3
 8007342:	46bd      	mov	sp, r7
 8007344:	b006      	add	sp, #24
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40021000 	.word	0x40021000
 800734c:	40007000 	.word	0x40007000
 8007350:	fffffcff 	.word	0xfffffcff
 8007354:	fffeffff 	.word	0xfffeffff
 8007358:	00001388 	.word	0x00001388
 800735c:	efffffff 	.word	0xefffffff
 8007360:	fffff3ff 	.word	0xfffff3ff
 8007364:	fff3ffff 	.word	0xfff3ffff
 8007368:	ffcfffff 	.word	0xffcfffff
 800736c:	ffffcfff 	.word	0xffffcfff
 8007370:	ffbfffff 	.word	0xffbfffff
 8007374:	feffffff 	.word	0xfeffffff
 8007378:	ffff3fff 	.word	0xffff3fff

0800737c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e04a      	b.n	8007424 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	223d      	movs	r2, #61	; 0x3d
 8007392:	5c9b      	ldrb	r3, [r3, r2]
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d107      	bne.n	80073aa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	223c      	movs	r2, #60	; 0x3c
 800739e:	2100      	movs	r1, #0
 80073a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	0018      	movs	r0, r3
 80073a6:	f7fc fc01 	bl	8003bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	223d      	movs	r2, #61	; 0x3d
 80073ae:	2102      	movs	r1, #2
 80073b0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3304      	adds	r3, #4
 80073ba:	0019      	movs	r1, r3
 80073bc:	0010      	movs	r0, r2
 80073be:	f000 f90b 	bl	80075d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2248      	movs	r2, #72	; 0x48
 80073c6:	2101      	movs	r1, #1
 80073c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	223e      	movs	r2, #62	; 0x3e
 80073ce:	2101      	movs	r1, #1
 80073d0:	5499      	strb	r1, [r3, r2]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	223f      	movs	r2, #63	; 0x3f
 80073d6:	2101      	movs	r1, #1
 80073d8:	5499      	strb	r1, [r3, r2]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2240      	movs	r2, #64	; 0x40
 80073de:	2101      	movs	r1, #1
 80073e0:	5499      	strb	r1, [r3, r2]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2241      	movs	r2, #65	; 0x41
 80073e6:	2101      	movs	r1, #1
 80073e8:	5499      	strb	r1, [r3, r2]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2242      	movs	r2, #66	; 0x42
 80073ee:	2101      	movs	r1, #1
 80073f0:	5499      	strb	r1, [r3, r2]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2243      	movs	r2, #67	; 0x43
 80073f6:	2101      	movs	r1, #1
 80073f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2244      	movs	r2, #68	; 0x44
 80073fe:	2101      	movs	r1, #1
 8007400:	5499      	strb	r1, [r3, r2]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2245      	movs	r2, #69	; 0x45
 8007406:	2101      	movs	r1, #1
 8007408:	5499      	strb	r1, [r3, r2]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2246      	movs	r2, #70	; 0x46
 800740e:	2101      	movs	r1, #1
 8007410:	5499      	strb	r1, [r3, r2]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2247      	movs	r2, #71	; 0x47
 8007416:	2101      	movs	r1, #1
 8007418:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	223d      	movs	r2, #61	; 0x3d
 800741e:	2101      	movs	r1, #1
 8007420:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	0018      	movs	r0, r3
 8007426:	46bd      	mov	sp, r7
 8007428:	b002      	add	sp, #8
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007436:	230f      	movs	r3, #15
 8007438:	18fb      	adds	r3, r7, r3
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	223c      	movs	r2, #60	; 0x3c
 8007442:	5c9b      	ldrb	r3, [r3, r2]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d101      	bne.n	800744c <HAL_TIM_ConfigClockSource+0x20>
 8007448:	2302      	movs	r3, #2
 800744a:	e0bc      	b.n	80075c6 <HAL_TIM_ConfigClockSource+0x19a>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	223c      	movs	r2, #60	; 0x3c
 8007450:	2101      	movs	r1, #1
 8007452:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	223d      	movs	r2, #61	; 0x3d
 8007458:	2102      	movs	r1, #2
 800745a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4a5a      	ldr	r2, [pc, #360]	; (80075d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007468:	4013      	ands	r3, r2
 800746a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4a59      	ldr	r2, [pc, #356]	; (80075d4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8007470:	4013      	ands	r3, r2
 8007472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2280      	movs	r2, #128	; 0x80
 8007482:	0192      	lsls	r2, r2, #6
 8007484:	4293      	cmp	r3, r2
 8007486:	d040      	beq.n	800750a <HAL_TIM_ConfigClockSource+0xde>
 8007488:	2280      	movs	r2, #128	; 0x80
 800748a:	0192      	lsls	r2, r2, #6
 800748c:	4293      	cmp	r3, r2
 800748e:	d900      	bls.n	8007492 <HAL_TIM_ConfigClockSource+0x66>
 8007490:	e088      	b.n	80075a4 <HAL_TIM_ConfigClockSource+0x178>
 8007492:	2280      	movs	r2, #128	; 0x80
 8007494:	0152      	lsls	r2, r2, #5
 8007496:	4293      	cmp	r3, r2
 8007498:	d100      	bne.n	800749c <HAL_TIM_ConfigClockSource+0x70>
 800749a:	e088      	b.n	80075ae <HAL_TIM_ConfigClockSource+0x182>
 800749c:	2280      	movs	r2, #128	; 0x80
 800749e:	0152      	lsls	r2, r2, #5
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d900      	bls.n	80074a6 <HAL_TIM_ConfigClockSource+0x7a>
 80074a4:	e07e      	b.n	80075a4 <HAL_TIM_ConfigClockSource+0x178>
 80074a6:	2b70      	cmp	r3, #112	; 0x70
 80074a8:	d018      	beq.n	80074dc <HAL_TIM_ConfigClockSource+0xb0>
 80074aa:	d900      	bls.n	80074ae <HAL_TIM_ConfigClockSource+0x82>
 80074ac:	e07a      	b.n	80075a4 <HAL_TIM_ConfigClockSource+0x178>
 80074ae:	2b60      	cmp	r3, #96	; 0x60
 80074b0:	d04f      	beq.n	8007552 <HAL_TIM_ConfigClockSource+0x126>
 80074b2:	d900      	bls.n	80074b6 <HAL_TIM_ConfigClockSource+0x8a>
 80074b4:	e076      	b.n	80075a4 <HAL_TIM_ConfigClockSource+0x178>
 80074b6:	2b50      	cmp	r3, #80	; 0x50
 80074b8:	d03b      	beq.n	8007532 <HAL_TIM_ConfigClockSource+0x106>
 80074ba:	d900      	bls.n	80074be <HAL_TIM_ConfigClockSource+0x92>
 80074bc:	e072      	b.n	80075a4 <HAL_TIM_ConfigClockSource+0x178>
 80074be:	2b40      	cmp	r3, #64	; 0x40
 80074c0:	d057      	beq.n	8007572 <HAL_TIM_ConfigClockSource+0x146>
 80074c2:	d900      	bls.n	80074c6 <HAL_TIM_ConfigClockSource+0x9a>
 80074c4:	e06e      	b.n	80075a4 <HAL_TIM_ConfigClockSource+0x178>
 80074c6:	2b30      	cmp	r3, #48	; 0x30
 80074c8:	d063      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0x166>
 80074ca:	d86b      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x178>
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d060      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0x166>
 80074d0:	d868      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x178>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d05d      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0x166>
 80074d6:	2b10      	cmp	r3, #16
 80074d8:	d05b      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0x166>
 80074da:	e063      	b.n	80075a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6818      	ldr	r0, [r3, #0]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	6899      	ldr	r1, [r3, #8]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f000 f970 	bl	80077d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2277      	movs	r2, #119	; 0x77
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	609a      	str	r2, [r3, #8]
      break;
 8007508:	e052      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6818      	ldr	r0, [r3, #0]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	6899      	ldr	r1, [r3, #8]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	f000 f959 	bl	80077d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2180      	movs	r1, #128	; 0x80
 800752a:	01c9      	lsls	r1, r1, #7
 800752c:	430a      	orrs	r2, r1
 800752e:	609a      	str	r2, [r3, #8]
      break;
 8007530:	e03e      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	6859      	ldr	r1, [r3, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	001a      	movs	r2, r3
 8007540:	f000 f8ca 	bl	80076d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2150      	movs	r1, #80	; 0x50
 800754a:	0018      	movs	r0, r3
 800754c:	f000 f924 	bl	8007798 <TIM_ITRx_SetConfig>
      break;
 8007550:	e02e      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	6859      	ldr	r1, [r3, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	001a      	movs	r2, r3
 8007560:	f000 f8e8 	bl	8007734 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2160      	movs	r1, #96	; 0x60
 800756a:	0018      	movs	r0, r3
 800756c:	f000 f914 	bl	8007798 <TIM_ITRx_SetConfig>
      break;
 8007570:	e01e      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6818      	ldr	r0, [r3, #0]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	6859      	ldr	r1, [r3, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	001a      	movs	r2, r3
 8007580:	f000 f8aa 	bl	80076d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2140      	movs	r1, #64	; 0x40
 800758a:	0018      	movs	r0, r3
 800758c:	f000 f904 	bl	8007798 <TIM_ITRx_SetConfig>
      break;
 8007590:	e00e      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	0019      	movs	r1, r3
 800759c:	0010      	movs	r0, r2
 800759e:	f000 f8fb 	bl	8007798 <TIM_ITRx_SetConfig>
      break;
 80075a2:	e005      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80075a4:	230f      	movs	r3, #15
 80075a6:	18fb      	adds	r3, r7, r3
 80075a8:	2201      	movs	r2, #1
 80075aa:	701a      	strb	r2, [r3, #0]
      break;
 80075ac:	e000      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80075ae:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	223d      	movs	r2, #61	; 0x3d
 80075b4:	2101      	movs	r1, #1
 80075b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	223c      	movs	r2, #60	; 0x3c
 80075bc:	2100      	movs	r1, #0
 80075be:	5499      	strb	r1, [r3, r2]

  return status;
 80075c0:	230f      	movs	r3, #15
 80075c2:	18fb      	adds	r3, r7, r3
 80075c4:	781b      	ldrb	r3, [r3, #0]
}
 80075c6:	0018      	movs	r0, r3
 80075c8:	46bd      	mov	sp, r7
 80075ca:	b004      	add	sp, #16
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	46c0      	nop			; (mov r8, r8)
 80075d0:	ffceff88 	.word	0xffceff88
 80075d4:	ffff00ff 	.word	0xffff00ff

080075d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a34      	ldr	r2, [pc, #208]	; (80076bc <TIM_Base_SetConfig+0xe4>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d008      	beq.n	8007602 <TIM_Base_SetConfig+0x2a>
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	2380      	movs	r3, #128	; 0x80
 80075f4:	05db      	lsls	r3, r3, #23
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d003      	beq.n	8007602 <TIM_Base_SetConfig+0x2a>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a30      	ldr	r2, [pc, #192]	; (80076c0 <TIM_Base_SetConfig+0xe8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d108      	bne.n	8007614 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2270      	movs	r2, #112	; 0x70
 8007606:	4393      	bics	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4313      	orrs	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a29      	ldr	r2, [pc, #164]	; (80076bc <TIM_Base_SetConfig+0xe4>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d018      	beq.n	800764e <TIM_Base_SetConfig+0x76>
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	2380      	movs	r3, #128	; 0x80
 8007620:	05db      	lsls	r3, r3, #23
 8007622:	429a      	cmp	r2, r3
 8007624:	d013      	beq.n	800764e <TIM_Base_SetConfig+0x76>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a25      	ldr	r2, [pc, #148]	; (80076c0 <TIM_Base_SetConfig+0xe8>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d00f      	beq.n	800764e <TIM_Base_SetConfig+0x76>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a24      	ldr	r2, [pc, #144]	; (80076c4 <TIM_Base_SetConfig+0xec>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00b      	beq.n	800764e <TIM_Base_SetConfig+0x76>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a23      	ldr	r2, [pc, #140]	; (80076c8 <TIM_Base_SetConfig+0xf0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d007      	beq.n	800764e <TIM_Base_SetConfig+0x76>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a22      	ldr	r2, [pc, #136]	; (80076cc <TIM_Base_SetConfig+0xf4>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d003      	beq.n	800764e <TIM_Base_SetConfig+0x76>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a21      	ldr	r2, [pc, #132]	; (80076d0 <TIM_Base_SetConfig+0xf8>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d108      	bne.n	8007660 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4a20      	ldr	r2, [pc, #128]	; (80076d4 <TIM_Base_SetConfig+0xfc>)
 8007652:	4013      	ands	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2280      	movs	r2, #128	; 0x80
 8007664:	4393      	bics	r3, r2
 8007666:	001a      	movs	r2, r3
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a0c      	ldr	r2, [pc, #48]	; (80076bc <TIM_Base_SetConfig+0xe4>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d00b      	beq.n	80076a6 <TIM_Base_SetConfig+0xce>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a0d      	ldr	r2, [pc, #52]	; (80076c8 <TIM_Base_SetConfig+0xf0>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d007      	beq.n	80076a6 <TIM_Base_SetConfig+0xce>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a0c      	ldr	r2, [pc, #48]	; (80076cc <TIM_Base_SetConfig+0xf4>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d003      	beq.n	80076a6 <TIM_Base_SetConfig+0xce>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a0b      	ldr	r2, [pc, #44]	; (80076d0 <TIM_Base_SetConfig+0xf8>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d103      	bne.n	80076ae <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	615a      	str	r2, [r3, #20]
}
 80076b4:	46c0      	nop			; (mov r8, r8)
 80076b6:	46bd      	mov	sp, r7
 80076b8:	b004      	add	sp, #16
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40012c00 	.word	0x40012c00
 80076c0:	40000400 	.word	0x40000400
 80076c4:	40002000 	.word	0x40002000
 80076c8:	40014000 	.word	0x40014000
 80076cc:	40014400 	.word	0x40014400
 80076d0:	40014800 	.word	0x40014800
 80076d4:	fffffcff 	.word	0xfffffcff

080076d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	2201      	movs	r2, #1
 80076f0:	4393      	bics	r3, r2
 80076f2:	001a      	movs	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	22f0      	movs	r2, #240	; 0xf0
 8007702:	4393      	bics	r3, r2
 8007704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	011b      	lsls	r3, r3, #4
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	220a      	movs	r2, #10
 8007714:	4393      	bics	r3, r2
 8007716:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	621a      	str	r2, [r3, #32]
}
 800772c:	46c0      	nop			; (mov r8, r8)
 800772e:	46bd      	mov	sp, r7
 8007730:	b006      	add	sp, #24
 8007732:	bd80      	pop	{r7, pc}

08007734 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6a1b      	ldr	r3, [r3, #32]
 8007744:	2210      	movs	r2, #16
 8007746:	4393      	bics	r3, r2
 8007748:	001a      	movs	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	4a0d      	ldr	r2, [pc, #52]	; (8007794 <TIM_TI2_ConfigInputStage+0x60>)
 800775e:	4013      	ands	r3, r2
 8007760:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	031b      	lsls	r3, r3, #12
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	4313      	orrs	r3, r2
 800776a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	22a0      	movs	r2, #160	; 0xa0
 8007770:	4393      	bics	r3, r2
 8007772:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	621a      	str	r2, [r3, #32]
}
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	46bd      	mov	sp, r7
 800778e:	b006      	add	sp, #24
 8007790:	bd80      	pop	{r7, pc}
 8007792:	46c0      	nop			; (mov r8, r8)
 8007794:	ffff0fff 	.word	0xffff0fff

08007798 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4a08      	ldr	r2, [pc, #32]	; (80077cc <TIM_ITRx_SetConfig+0x34>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	2207      	movs	r2, #7
 80077b8:	4313      	orrs	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	609a      	str	r2, [r3, #8]
}
 80077c2:	46c0      	nop			; (mov r8, r8)
 80077c4:	46bd      	mov	sp, r7
 80077c6:	b004      	add	sp, #16
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	46c0      	nop			; (mov r8, r8)
 80077cc:	ffcfff8f 	.word	0xffcfff8f

080077d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	4a09      	ldr	r2, [pc, #36]	; (800780c <TIM_ETR_SetConfig+0x3c>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	021a      	lsls	r2, r3, #8
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	609a      	str	r2, [r3, #8]
}
 8007804:	46c0      	nop			; (mov r8, r8)
 8007806:	46bd      	mov	sp, r7
 8007808:	b006      	add	sp, #24
 800780a:	bd80      	pop	{r7, pc}
 800780c:	ffff00ff 	.word	0xffff00ff

08007810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	223c      	movs	r2, #60	; 0x3c
 800781e:	5c9b      	ldrb	r3, [r3, r2]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007824:	2302      	movs	r3, #2
 8007826:	e055      	b.n	80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	223c      	movs	r2, #60	; 0x3c
 800782c:	2101      	movs	r1, #1
 800782e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	223d      	movs	r2, #61	; 0x3d
 8007834:	2102      	movs	r1, #2
 8007836:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a23      	ldr	r2, [pc, #140]	; (80078dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d108      	bne.n	8007864 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	4a22      	ldr	r2, [pc, #136]	; (80078e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007856:	4013      	ands	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	4313      	orrs	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2270      	movs	r2, #112	; 0x70
 8007868:	4393      	bics	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a16      	ldr	r2, [pc, #88]	; (80078dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d00f      	beq.n	80078a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	2380      	movs	r3, #128	; 0x80
 800788e:	05db      	lsls	r3, r3, #23
 8007890:	429a      	cmp	r2, r3
 8007892:	d009      	beq.n	80078a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a12      	ldr	r2, [pc, #72]	; (80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d004      	beq.n	80078a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a11      	ldr	r2, [pc, #68]	; (80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d10c      	bne.n	80078c2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2280      	movs	r2, #128	; 0x80
 80078ac:	4393      	bics	r3, r2
 80078ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	223d      	movs	r2, #61	; 0x3d
 80078c6:	2101      	movs	r1, #1
 80078c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	223c      	movs	r2, #60	; 0x3c
 80078ce:	2100      	movs	r1, #0
 80078d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	0018      	movs	r0, r3
 80078d6:	46bd      	mov	sp, r7
 80078d8:	b004      	add	sp, #16
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	40012c00 	.word	0x40012c00
 80078e0:	ff0fffff 	.word	0xff0fffff
 80078e4:	40000400 	.word	0x40000400
 80078e8:	40014000 	.word	0x40014000

080078ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e046      	b.n	800798c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2288      	movs	r2, #136	; 0x88
 8007902:	589b      	ldr	r3, [r3, r2]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d107      	bne.n	8007918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2284      	movs	r2, #132	; 0x84
 800790c:	2100      	movs	r1, #0
 800790e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	0018      	movs	r0, r3
 8007914:	f7fc fa46 	bl	8003da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2288      	movs	r2, #136	; 0x88
 800791c:	2124      	movs	r1, #36	; 0x24
 800791e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2101      	movs	r1, #1
 800792c:	438a      	bics	r2, r1
 800792e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	0018      	movs	r0, r3
 8007934:	f000 fc12 	bl	800815c <UART_SetConfig>
 8007938:	0003      	movs	r3, r0
 800793a:	2b01      	cmp	r3, #1
 800793c:	d101      	bne.n	8007942 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e024      	b.n	800798c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	0018      	movs	r0, r3
 800794e:	f000 fe7d 	bl	800864c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	490d      	ldr	r1, [pc, #52]	; (8007994 <HAL_UART_Init+0xa8>)
 800795e:	400a      	ands	r2, r1
 8007960:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	212a      	movs	r1, #42	; 0x2a
 800796e:	438a      	bics	r2, r1
 8007970:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2101      	movs	r1, #1
 800797e:	430a      	orrs	r2, r1
 8007980:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	0018      	movs	r0, r3
 8007986:	f000 ff15 	bl	80087b4 <UART_CheckIdleState>
 800798a:	0003      	movs	r3, r0
}
 800798c:	0018      	movs	r0, r3
 800798e:	46bd      	mov	sp, r7
 8007990:	b002      	add	sp, #8
 8007992:	bd80      	pop	{r7, pc}
 8007994:	ffffb7ff 	.word	0xffffb7ff

08007998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08a      	sub	sp, #40	; 0x28
 800799c:	af02      	add	r7, sp, #8
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	603b      	str	r3, [r7, #0]
 80079a4:	1dbb      	adds	r3, r7, #6
 80079a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2288      	movs	r2, #136	; 0x88
 80079ac:	589b      	ldr	r3, [r3, r2]
 80079ae:	2b20      	cmp	r3, #32
 80079b0:	d000      	beq.n	80079b4 <HAL_UART_Transmit+0x1c>
 80079b2:	e088      	b.n	8007ac6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <HAL_UART_Transmit+0x2a>
 80079ba:	1dbb      	adds	r3, r7, #6
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e080      	b.n	8007ac8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	2380      	movs	r3, #128	; 0x80
 80079cc:	015b      	lsls	r3, r3, #5
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d109      	bne.n	80079e6 <HAL_UART_Transmit+0x4e>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2201      	movs	r2, #1
 80079de:	4013      	ands	r3, r2
 80079e0:	d001      	beq.n	80079e6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e070      	b.n	8007ac8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2290      	movs	r2, #144	; 0x90
 80079ea:	2100      	movs	r1, #0
 80079ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2288      	movs	r2, #136	; 0x88
 80079f2:	2121      	movs	r1, #33	; 0x21
 80079f4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079f6:	f7fc fbeb 	bl	80041d0 <HAL_GetTick>
 80079fa:	0003      	movs	r3, r0
 80079fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	1dba      	adds	r2, r7, #6
 8007a02:	2154      	movs	r1, #84	; 0x54
 8007a04:	8812      	ldrh	r2, [r2, #0]
 8007a06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	1dba      	adds	r2, r7, #6
 8007a0c:	2156      	movs	r1, #86	; 0x56
 8007a0e:	8812      	ldrh	r2, [r2, #0]
 8007a10:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	2380      	movs	r3, #128	; 0x80
 8007a18:	015b      	lsls	r3, r3, #5
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d108      	bne.n	8007a30 <HAL_UART_Transmit+0x98>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d104      	bne.n	8007a30 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	61bb      	str	r3, [r7, #24]
 8007a2e:	e003      	b.n	8007a38 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a34:	2300      	movs	r3, #0
 8007a36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a38:	e02c      	b.n	8007a94 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	0013      	movs	r3, r2
 8007a44:	2200      	movs	r2, #0
 8007a46:	2180      	movs	r1, #128	; 0x80
 8007a48:	f000 ff02 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 8007a4c:	1e03      	subs	r3, r0, #0
 8007a4e:	d001      	beq.n	8007a54 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e039      	b.n	8007ac8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10b      	bne.n	8007a72 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	001a      	movs	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	05d2      	lsls	r2, r2, #23
 8007a66:	0dd2      	lsrs	r2, r2, #23
 8007a68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	3302      	adds	r3, #2
 8007a6e:	61bb      	str	r3, [r7, #24]
 8007a70:	e007      	b.n	8007a82 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	781a      	ldrb	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2256      	movs	r2, #86	; 0x56
 8007a86:	5a9b      	ldrh	r3, [r3, r2]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	b299      	uxth	r1, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2256      	movs	r2, #86	; 0x56
 8007a92:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2256      	movs	r2, #86	; 0x56
 8007a98:	5a9b      	ldrh	r3, [r3, r2]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1cc      	bne.n	8007a3a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	0013      	movs	r3, r2
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2140      	movs	r1, #64	; 0x40
 8007aae:	f000 fecf 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 8007ab2:	1e03      	subs	r3, r0, #0
 8007ab4:	d001      	beq.n	8007aba <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e006      	b.n	8007ac8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2288      	movs	r2, #136	; 0x88
 8007abe:	2120      	movs	r1, #32
 8007ac0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	e000      	b.n	8007ac8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007ac6:	2302      	movs	r3, #2
  }
}
 8007ac8:	0018      	movs	r0, r3
 8007aca:	46bd      	mov	sp, r7
 8007acc:	b008      	add	sp, #32
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ad0:	b5b0      	push	{r4, r5, r7, lr}
 8007ad2:	b0aa      	sub	sp, #168	; 0xa8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	22a4      	movs	r2, #164	; 0xa4
 8007ae0:	18b9      	adds	r1, r7, r2
 8007ae2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	20a0      	movs	r0, #160	; 0xa0
 8007aec:	1839      	adds	r1, r7, r0
 8007aee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	249c      	movs	r4, #156	; 0x9c
 8007af8:	1939      	adds	r1, r7, r4
 8007afa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007afc:	0011      	movs	r1, r2
 8007afe:	18bb      	adds	r3, r7, r2
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4aa2      	ldr	r2, [pc, #648]	; (8007d8c <HAL_UART_IRQHandler+0x2bc>)
 8007b04:	4013      	ands	r3, r2
 8007b06:	2298      	movs	r2, #152	; 0x98
 8007b08:	18bd      	adds	r5, r7, r2
 8007b0a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8007b0c:	18bb      	adds	r3, r7, r2
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d11a      	bne.n	8007b4a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b14:	187b      	adds	r3, r7, r1
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	d015      	beq.n	8007b4a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b1e:	183b      	adds	r3, r7, r0
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2220      	movs	r2, #32
 8007b24:	4013      	ands	r3, r2
 8007b26:	d105      	bne.n	8007b34 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b28:	193b      	adds	r3, r7, r4
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	2380      	movs	r3, #128	; 0x80
 8007b2e:	055b      	lsls	r3, r3, #21
 8007b30:	4013      	ands	r3, r2
 8007b32:	d00a      	beq.n	8007b4a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d100      	bne.n	8007b3e <HAL_UART_IRQHandler+0x6e>
 8007b3c:	e2dc      	b.n	80080f8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	0010      	movs	r0, r2
 8007b46:	4798      	blx	r3
      }
      return;
 8007b48:	e2d6      	b.n	80080f8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b4a:	2398      	movs	r3, #152	; 0x98
 8007b4c:	18fb      	adds	r3, r7, r3
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d100      	bne.n	8007b56 <HAL_UART_IRQHandler+0x86>
 8007b54:	e122      	b.n	8007d9c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b56:	239c      	movs	r3, #156	; 0x9c
 8007b58:	18fb      	adds	r3, r7, r3
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a8c      	ldr	r2, [pc, #560]	; (8007d90 <HAL_UART_IRQHandler+0x2c0>)
 8007b5e:	4013      	ands	r3, r2
 8007b60:	d106      	bne.n	8007b70 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b62:	23a0      	movs	r3, #160	; 0xa0
 8007b64:	18fb      	adds	r3, r7, r3
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a8a      	ldr	r2, [pc, #552]	; (8007d94 <HAL_UART_IRQHandler+0x2c4>)
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	d100      	bne.n	8007b70 <HAL_UART_IRQHandler+0xa0>
 8007b6e:	e115      	b.n	8007d9c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b70:	23a4      	movs	r3, #164	; 0xa4
 8007b72:	18fb      	adds	r3, r7, r3
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2201      	movs	r2, #1
 8007b78:	4013      	ands	r3, r2
 8007b7a:	d012      	beq.n	8007ba2 <HAL_UART_IRQHandler+0xd2>
 8007b7c:	23a0      	movs	r3, #160	; 0xa0
 8007b7e:	18fb      	adds	r3, r7, r3
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	2380      	movs	r3, #128	; 0x80
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	4013      	ands	r3, r2
 8007b88:	d00b      	beq.n	8007ba2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2290      	movs	r2, #144	; 0x90
 8007b96:	589b      	ldr	r3, [r3, r2]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2190      	movs	r1, #144	; 0x90
 8007ba0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ba2:	23a4      	movs	r3, #164	; 0xa4
 8007ba4:	18fb      	adds	r3, r7, r3
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	4013      	ands	r3, r2
 8007bac:	d011      	beq.n	8007bd2 <HAL_UART_IRQHandler+0x102>
 8007bae:	239c      	movs	r3, #156	; 0x9c
 8007bb0:	18fb      	adds	r3, r7, r3
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	d00b      	beq.n	8007bd2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2290      	movs	r2, #144	; 0x90
 8007bc6:	589b      	ldr	r3, [r3, r2]
 8007bc8:	2204      	movs	r2, #4
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2190      	movs	r1, #144	; 0x90
 8007bd0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bd2:	23a4      	movs	r3, #164	; 0xa4
 8007bd4:	18fb      	adds	r3, r7, r3
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2204      	movs	r2, #4
 8007bda:	4013      	ands	r3, r2
 8007bdc:	d011      	beq.n	8007c02 <HAL_UART_IRQHandler+0x132>
 8007bde:	239c      	movs	r3, #156	; 0x9c
 8007be0:	18fb      	adds	r3, r7, r3
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2201      	movs	r2, #1
 8007be6:	4013      	ands	r3, r2
 8007be8:	d00b      	beq.n	8007c02 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2204      	movs	r2, #4
 8007bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2290      	movs	r2, #144	; 0x90
 8007bf6:	589b      	ldr	r3, [r3, r2]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2190      	movs	r1, #144	; 0x90
 8007c00:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c02:	23a4      	movs	r3, #164	; 0xa4
 8007c04:	18fb      	adds	r3, r7, r3
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2208      	movs	r2, #8
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	d017      	beq.n	8007c3e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c0e:	23a0      	movs	r3, #160	; 0xa0
 8007c10:	18fb      	adds	r3, r7, r3
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2220      	movs	r2, #32
 8007c16:	4013      	ands	r3, r2
 8007c18:	d105      	bne.n	8007c26 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c1a:	239c      	movs	r3, #156	; 0x9c
 8007c1c:	18fb      	adds	r3, r7, r3
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a5b      	ldr	r2, [pc, #364]	; (8007d90 <HAL_UART_IRQHandler+0x2c0>)
 8007c22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c24:	d00b      	beq.n	8007c3e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2290      	movs	r2, #144	; 0x90
 8007c32:	589b      	ldr	r3, [r3, r2]
 8007c34:	2208      	movs	r2, #8
 8007c36:	431a      	orrs	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2190      	movs	r1, #144	; 0x90
 8007c3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c3e:	23a4      	movs	r3, #164	; 0xa4
 8007c40:	18fb      	adds	r3, r7, r3
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	2380      	movs	r3, #128	; 0x80
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	4013      	ands	r3, r2
 8007c4a:	d013      	beq.n	8007c74 <HAL_UART_IRQHandler+0x1a4>
 8007c4c:	23a0      	movs	r3, #160	; 0xa0
 8007c4e:	18fb      	adds	r3, r7, r3
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	2380      	movs	r3, #128	; 0x80
 8007c54:	04db      	lsls	r3, r3, #19
 8007c56:	4013      	ands	r3, r2
 8007c58:	d00c      	beq.n	8007c74 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2280      	movs	r2, #128	; 0x80
 8007c60:	0112      	lsls	r2, r2, #4
 8007c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2290      	movs	r2, #144	; 0x90
 8007c68:	589b      	ldr	r3, [r3, r2]
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2190      	movs	r1, #144	; 0x90
 8007c72:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2290      	movs	r2, #144	; 0x90
 8007c78:	589b      	ldr	r3, [r3, r2]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d100      	bne.n	8007c80 <HAL_UART_IRQHandler+0x1b0>
 8007c7e:	e23d      	b.n	80080fc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c80:	23a4      	movs	r3, #164	; 0xa4
 8007c82:	18fb      	adds	r3, r7, r3
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2220      	movs	r2, #32
 8007c88:	4013      	ands	r3, r2
 8007c8a:	d015      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c8c:	23a0      	movs	r3, #160	; 0xa0
 8007c8e:	18fb      	adds	r3, r7, r3
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2220      	movs	r2, #32
 8007c94:	4013      	ands	r3, r2
 8007c96:	d106      	bne.n	8007ca6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c98:	239c      	movs	r3, #156	; 0x9c
 8007c9a:	18fb      	adds	r3, r7, r3
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	2380      	movs	r3, #128	; 0x80
 8007ca0:	055b      	lsls	r3, r3, #21
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	d008      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d004      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	0010      	movs	r0, r2
 8007cb6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2290      	movs	r2, #144	; 0x90
 8007cbc:	589b      	ldr	r3, [r3, r2]
 8007cbe:	2194      	movs	r1, #148	; 0x94
 8007cc0:	187a      	adds	r2, r7, r1
 8007cc2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	2240      	movs	r2, #64	; 0x40
 8007ccc:	4013      	ands	r3, r2
 8007cce:	2b40      	cmp	r3, #64	; 0x40
 8007cd0:	d004      	beq.n	8007cdc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007cd2:	187b      	adds	r3, r7, r1
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2228      	movs	r2, #40	; 0x28
 8007cd8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cda:	d04c      	beq.n	8007d76 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f000 ff64 	bl	8008bac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	2240      	movs	r2, #64	; 0x40
 8007cec:	4013      	ands	r3, r2
 8007cee:	2b40      	cmp	r3, #64	; 0x40
 8007cf0:	d13c      	bne.n	8007d6c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8007cf6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cfa:	2090      	movs	r0, #144	; 0x90
 8007cfc:	183a      	adds	r2, r7, r0
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	2301      	movs	r3, #1
 8007d02:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d06:	f383 8810 	msr	PRIMASK, r3
}
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2140      	movs	r1, #64	; 0x40
 8007d18:	438a      	bics	r2, r1
 8007d1a:	609a      	str	r2, [r3, #8]
 8007d1c:	183b      	adds	r3, r7, r0
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d24:	f383 8810 	msr	PRIMASK, r3
}
 8007d28:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2280      	movs	r2, #128	; 0x80
 8007d2e:	589b      	ldr	r3, [r3, r2]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d016      	beq.n	8007d62 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2280      	movs	r2, #128	; 0x80
 8007d38:	589b      	ldr	r3, [r3, r2]
 8007d3a:	4a17      	ldr	r2, [pc, #92]	; (8007d98 <HAL_UART_IRQHandler+0x2c8>)
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2280      	movs	r2, #128	; 0x80
 8007d42:	589b      	ldr	r3, [r3, r2]
 8007d44:	0018      	movs	r0, r3
 8007d46:	f7fd fb1d 	bl	8005384 <HAL_DMA_Abort_IT>
 8007d4a:	1e03      	subs	r3, r0, #0
 8007d4c:	d01c      	beq.n	8007d88 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2280      	movs	r2, #128	; 0x80
 8007d52:	589b      	ldr	r3, [r3, r2]
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	2180      	movs	r1, #128	; 0x80
 8007d5a:	5852      	ldr	r2, [r2, r1]
 8007d5c:	0010      	movs	r0, r2
 8007d5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d60:	e012      	b.n	8007d88 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	0018      	movs	r0, r3
 8007d66:	f000 f9f1 	bl	800814c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6a:	e00d      	b.n	8007d88 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	0018      	movs	r0, r3
 8007d70:	f000 f9ec 	bl	800814c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d74:	e008      	b.n	8007d88 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f000 f9e7 	bl	800814c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2290      	movs	r2, #144	; 0x90
 8007d82:	2100      	movs	r1, #0
 8007d84:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007d86:	e1b9      	b.n	80080fc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d88:	46c0      	nop			; (mov r8, r8)
    return;
 8007d8a:	e1b7      	b.n	80080fc <HAL_UART_IRQHandler+0x62c>
 8007d8c:	0000080f 	.word	0x0000080f
 8007d90:	10000001 	.word	0x10000001
 8007d94:	04000120 	.word	0x04000120
 8007d98:	08008e71 	.word	0x08008e71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d000      	beq.n	8007da6 <HAL_UART_IRQHandler+0x2d6>
 8007da4:	e13e      	b.n	8008024 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007da6:	23a4      	movs	r3, #164	; 0xa4
 8007da8:	18fb      	adds	r3, r7, r3
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2210      	movs	r2, #16
 8007dae:	4013      	ands	r3, r2
 8007db0:	d100      	bne.n	8007db4 <HAL_UART_IRQHandler+0x2e4>
 8007db2:	e137      	b.n	8008024 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007db4:	23a0      	movs	r3, #160	; 0xa0
 8007db6:	18fb      	adds	r3, r7, r3
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2210      	movs	r2, #16
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	d100      	bne.n	8007dc2 <HAL_UART_IRQHandler+0x2f2>
 8007dc0:	e130      	b.n	8008024 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2210      	movs	r2, #16
 8007dc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	2240      	movs	r2, #64	; 0x40
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	2b40      	cmp	r3, #64	; 0x40
 8007dd6:	d000      	beq.n	8007dda <HAL_UART_IRQHandler+0x30a>
 8007dd8:	e0a4      	b.n	8007f24 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2280      	movs	r2, #128	; 0x80
 8007dde:	589b      	ldr	r3, [r3, r2]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	217e      	movs	r1, #126	; 0x7e
 8007de6:	187b      	adds	r3, r7, r1
 8007de8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007dea:	187b      	adds	r3, r7, r1
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d100      	bne.n	8007df4 <HAL_UART_IRQHandler+0x324>
 8007df2:	e185      	b.n	8008100 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	225c      	movs	r2, #92	; 0x5c
 8007df8:	5a9b      	ldrh	r3, [r3, r2]
 8007dfa:	187a      	adds	r2, r7, r1
 8007dfc:	8812      	ldrh	r2, [r2, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d300      	bcc.n	8007e04 <HAL_UART_IRQHandler+0x334>
 8007e02:	e17d      	b.n	8008100 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	187a      	adds	r2, r7, r1
 8007e08:	215e      	movs	r1, #94	; 0x5e
 8007e0a:	8812      	ldrh	r2, [r2, #0]
 8007e0c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2280      	movs	r2, #128	; 0x80
 8007e12:	589b      	ldr	r3, [r3, r2]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	d170      	bne.n	8007f00 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e22:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e26:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e28:	2301      	movs	r3, #1
 8007e2a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2e:	f383 8810 	msr	PRIMASK, r3
}
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	49b4      	ldr	r1, [pc, #720]	; (8008110 <HAL_UART_IRQHandler+0x640>)
 8007e40:	400a      	ands	r2, r1
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e46:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4a:	f383 8810 	msr	PRIMASK, r3
}
 8007e4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e50:	f3ef 8310 	mrs	r3, PRIMASK
 8007e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e58:	677b      	str	r3, [r7, #116]	; 0x74
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e60:	f383 8810 	msr	PRIMASK, r3
}
 8007e64:	46c0      	nop			; (mov r8, r8)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2101      	movs	r1, #1
 8007e72:	438a      	bics	r2, r1
 8007e74:	609a      	str	r2, [r3, #8]
 8007e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e78:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e7c:	f383 8810 	msr	PRIMASK, r3
}
 8007e80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e82:	f3ef 8310 	mrs	r3, PRIMASK
 8007e86:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e8a:	673b      	str	r3, [r7, #112]	; 0x70
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e92:	f383 8810 	msr	PRIMASK, r3
}
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689a      	ldr	r2, [r3, #8]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2140      	movs	r1, #64	; 0x40
 8007ea4:	438a      	bics	r2, r1
 8007ea6:	609a      	str	r2, [r3, #8]
 8007ea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eaa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eae:	f383 8810 	msr	PRIMASK, r3
}
 8007eb2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	228c      	movs	r2, #140	; 0x8c
 8007eb8:	2120      	movs	r1, #32
 8007eba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ec6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ecc:	2301      	movs	r3, #1
 8007ece:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ed2:	f383 8810 	msr	PRIMASK, r3
}
 8007ed6:	46c0      	nop			; (mov r8, r8)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2110      	movs	r1, #16
 8007ee4:	438a      	bics	r2, r1
 8007ee6:	601a      	str	r2, [r3, #0]
 8007ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eea:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eee:	f383 8810 	msr	PRIMASK, r3
}
 8007ef2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2280      	movs	r2, #128	; 0x80
 8007ef8:	589b      	ldr	r3, [r3, r2]
 8007efa:	0018      	movs	r0, r3
 8007efc:	f7fd f9e0 	bl	80052c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	225c      	movs	r2, #92	; 0x5c
 8007f0a:	5a9a      	ldrh	r2, [r3, r2]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	215e      	movs	r1, #94	; 0x5e
 8007f10:	5a5b      	ldrh	r3, [r3, r1]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	0011      	movs	r1, r2
 8007f1c:	0018      	movs	r0, r3
 8007f1e:	f7fa fd2d 	bl	800297c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f22:	e0ed      	b.n	8008100 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	225c      	movs	r2, #92	; 0x5c
 8007f28:	5a99      	ldrh	r1, [r3, r2]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	225e      	movs	r2, #94	; 0x5e
 8007f2e:	5a9b      	ldrh	r3, [r3, r2]
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	208e      	movs	r0, #142	; 0x8e
 8007f34:	183b      	adds	r3, r7, r0
 8007f36:	1a8a      	subs	r2, r1, r2
 8007f38:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	225e      	movs	r2, #94	; 0x5e
 8007f3e:	5a9b      	ldrh	r3, [r3, r2]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d100      	bne.n	8007f48 <HAL_UART_IRQHandler+0x478>
 8007f46:	e0dd      	b.n	8008104 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8007f48:	183b      	adds	r3, r7, r0
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d100      	bne.n	8007f52 <HAL_UART_IRQHandler+0x482>
 8007f50:	e0d8      	b.n	8008104 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f52:	f3ef 8310 	mrs	r3, PRIMASK
 8007f56:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f58:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f5a:	2488      	movs	r4, #136	; 0x88
 8007f5c:	193a      	adds	r2, r7, r4
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	2301      	movs	r3, #1
 8007f62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	f383 8810 	msr	PRIMASK, r3
}
 8007f6a:	46c0      	nop			; (mov r8, r8)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4967      	ldr	r1, [pc, #412]	; (8008114 <HAL_UART_IRQHandler+0x644>)
 8007f78:	400a      	ands	r2, r1
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	193b      	adds	r3, r7, r4
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f383 8810 	msr	PRIMASK, r3
}
 8007f88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f90:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f92:	2484      	movs	r4, #132	; 0x84
 8007f94:	193a      	adds	r2, r7, r4
 8007f96:	6013      	str	r3, [r2, #0]
 8007f98:	2301      	movs	r3, #1
 8007f9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	f383 8810 	msr	PRIMASK, r3
}
 8007fa2:	46c0      	nop			; (mov r8, r8)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689a      	ldr	r2, [r3, #8]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	495a      	ldr	r1, [pc, #360]	; (8008118 <HAL_UART_IRQHandler+0x648>)
 8007fb0:	400a      	ands	r2, r1
 8007fb2:	609a      	str	r2, [r3, #8]
 8007fb4:	193b      	adds	r3, r7, r4
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	f383 8810 	msr	PRIMASK, r3
}
 8007fc0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	228c      	movs	r2, #140	; 0x8c
 8007fc6:	2120      	movs	r1, #32
 8007fc8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8007fda:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fde:	2480      	movs	r4, #128	; 0x80
 8007fe0:	193a      	adds	r2, r7, r4
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	f383 8810 	msr	PRIMASK, r3
}
 8007fee:	46c0      	nop			; (mov r8, r8)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2110      	movs	r1, #16
 8007ffc:	438a      	bics	r2, r1
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	193b      	adds	r3, r7, r4
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	f383 8810 	msr	PRIMASK, r3
}
 800800c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2202      	movs	r2, #2
 8008012:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008014:	183b      	adds	r3, r7, r0
 8008016:	881a      	ldrh	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	0011      	movs	r1, r2
 800801c:	0018      	movs	r0, r3
 800801e:	f7fa fcad 	bl	800297c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008022:	e06f      	b.n	8008104 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008024:	23a4      	movs	r3, #164	; 0xa4
 8008026:	18fb      	adds	r3, r7, r3
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	2380      	movs	r3, #128	; 0x80
 800802c:	035b      	lsls	r3, r3, #13
 800802e:	4013      	ands	r3, r2
 8008030:	d010      	beq.n	8008054 <HAL_UART_IRQHandler+0x584>
 8008032:	239c      	movs	r3, #156	; 0x9c
 8008034:	18fb      	adds	r3, r7, r3
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	2380      	movs	r3, #128	; 0x80
 800803a:	03db      	lsls	r3, r3, #15
 800803c:	4013      	ands	r3, r2
 800803e:	d009      	beq.n	8008054 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2280      	movs	r2, #128	; 0x80
 8008046:	0352      	lsls	r2, r2, #13
 8008048:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	0018      	movs	r0, r3
 800804e:	f000 ff52 	bl	8008ef6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008052:	e05a      	b.n	800810a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008054:	23a4      	movs	r3, #164	; 0xa4
 8008056:	18fb      	adds	r3, r7, r3
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2280      	movs	r2, #128	; 0x80
 800805c:	4013      	ands	r3, r2
 800805e:	d016      	beq.n	800808e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008060:	23a0      	movs	r3, #160	; 0xa0
 8008062:	18fb      	adds	r3, r7, r3
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2280      	movs	r2, #128	; 0x80
 8008068:	4013      	ands	r3, r2
 800806a:	d106      	bne.n	800807a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800806c:	239c      	movs	r3, #156	; 0x9c
 800806e:	18fb      	adds	r3, r7, r3
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	2380      	movs	r3, #128	; 0x80
 8008074:	041b      	lsls	r3, r3, #16
 8008076:	4013      	ands	r3, r2
 8008078:	d009      	beq.n	800808e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800807e:	2b00      	cmp	r3, #0
 8008080:	d042      	beq.n	8008108 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	0010      	movs	r0, r2
 800808a:	4798      	blx	r3
    }
    return;
 800808c:	e03c      	b.n	8008108 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800808e:	23a4      	movs	r3, #164	; 0xa4
 8008090:	18fb      	adds	r3, r7, r3
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2240      	movs	r2, #64	; 0x40
 8008096:	4013      	ands	r3, r2
 8008098:	d00a      	beq.n	80080b0 <HAL_UART_IRQHandler+0x5e0>
 800809a:	23a0      	movs	r3, #160	; 0xa0
 800809c:	18fb      	adds	r3, r7, r3
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2240      	movs	r2, #64	; 0x40
 80080a2:	4013      	ands	r3, r2
 80080a4:	d004      	beq.n	80080b0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	0018      	movs	r0, r3
 80080aa:	f000 fef8 	bl	8008e9e <UART_EndTransmit_IT>
    return;
 80080ae:	e02c      	b.n	800810a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080b0:	23a4      	movs	r3, #164	; 0xa4
 80080b2:	18fb      	adds	r3, r7, r3
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	2380      	movs	r3, #128	; 0x80
 80080b8:	041b      	lsls	r3, r3, #16
 80080ba:	4013      	ands	r3, r2
 80080bc:	d00b      	beq.n	80080d6 <HAL_UART_IRQHandler+0x606>
 80080be:	23a0      	movs	r3, #160	; 0xa0
 80080c0:	18fb      	adds	r3, r7, r3
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	2380      	movs	r3, #128	; 0x80
 80080c6:	05db      	lsls	r3, r3, #23
 80080c8:	4013      	ands	r3, r2
 80080ca:	d004      	beq.n	80080d6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	0018      	movs	r0, r3
 80080d0:	f000 ff21 	bl	8008f16 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080d4:	e019      	b.n	800810a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080d6:	23a4      	movs	r3, #164	; 0xa4
 80080d8:	18fb      	adds	r3, r7, r3
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	2380      	movs	r3, #128	; 0x80
 80080de:	045b      	lsls	r3, r3, #17
 80080e0:	4013      	ands	r3, r2
 80080e2:	d012      	beq.n	800810a <HAL_UART_IRQHandler+0x63a>
 80080e4:	23a0      	movs	r3, #160	; 0xa0
 80080e6:	18fb      	adds	r3, r7, r3
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	da0d      	bge.n	800810a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	0018      	movs	r0, r3
 80080f2:	f000 ff08 	bl	8008f06 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080f6:	e008      	b.n	800810a <HAL_UART_IRQHandler+0x63a>
      return;
 80080f8:	46c0      	nop			; (mov r8, r8)
 80080fa:	e006      	b.n	800810a <HAL_UART_IRQHandler+0x63a>
    return;
 80080fc:	46c0      	nop			; (mov r8, r8)
 80080fe:	e004      	b.n	800810a <HAL_UART_IRQHandler+0x63a>
      return;
 8008100:	46c0      	nop			; (mov r8, r8)
 8008102:	e002      	b.n	800810a <HAL_UART_IRQHandler+0x63a>
      return;
 8008104:	46c0      	nop			; (mov r8, r8)
 8008106:	e000      	b.n	800810a <HAL_UART_IRQHandler+0x63a>
    return;
 8008108:	46c0      	nop			; (mov r8, r8)
  }
}
 800810a:	46bd      	mov	sp, r7
 800810c:	b02a      	add	sp, #168	; 0xa8
 800810e:	bdb0      	pop	{r4, r5, r7, pc}
 8008110:	fffffeff 	.word	0xfffffeff
 8008114:	fffffedf 	.word	0xfffffedf
 8008118:	effffffe 	.word	0xeffffffe

0800811c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008124:	46c0      	nop			; (mov r8, r8)
 8008126:	46bd      	mov	sp, r7
 8008128:	b002      	add	sp, #8
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008134:	46c0      	nop			; (mov r8, r8)
 8008136:	46bd      	mov	sp, r7
 8008138:	b002      	add	sp, #8
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008144:	46c0      	nop			; (mov r8, r8)
 8008146:	46bd      	mov	sp, r7
 8008148:	b002      	add	sp, #8
 800814a:	bd80      	pop	{r7, pc}

0800814c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008154:	46c0      	nop			; (mov r8, r8)
 8008156:	46bd      	mov	sp, r7
 8008158:	b002      	add	sp, #8
 800815a:	bd80      	pop	{r7, pc}

0800815c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800815c:	b5b0      	push	{r4, r5, r7, lr}
 800815e:	b090      	sub	sp, #64	; 0x40
 8008160:	af00      	add	r7, sp, #0
 8008162:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008164:	231a      	movs	r3, #26
 8008166:	2220      	movs	r2, #32
 8008168:	189b      	adds	r3, r3, r2
 800816a:	19db      	adds	r3, r3, r7
 800816c:	2200      	movs	r2, #0
 800816e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	431a      	orrs	r2, r3
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	431a      	orrs	r2, r3
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	4313      	orrs	r3, r2
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4ac4      	ldr	r2, [pc, #784]	; (80084a0 <UART_SetConfig+0x344>)
 8008190:	4013      	ands	r3, r2
 8008192:	0019      	movs	r1, r3
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800819a:	430b      	orrs	r3, r1
 800819c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	4abf      	ldr	r2, [pc, #764]	; (80084a4 <UART_SetConfig+0x348>)
 80081a6:	4013      	ands	r3, r2
 80081a8:	0018      	movs	r0, r3
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	68d9      	ldr	r1, [r3, #12]
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	0003      	movs	r3, r0
 80081b4:	430b      	orrs	r3, r1
 80081b6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4ab9      	ldr	r2, [pc, #740]	; (80084a8 <UART_SetConfig+0x34c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d004      	beq.n	80081d2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081ce:	4313      	orrs	r3, r2
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	4ab4      	ldr	r2, [pc, #720]	; (80084ac <UART_SetConfig+0x350>)
 80081da:	4013      	ands	r3, r2
 80081dc:	0019      	movs	r1, r3
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e4:	430b      	orrs	r3, r1
 80081e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	220f      	movs	r2, #15
 80081f0:	4393      	bics	r3, r2
 80081f2:	0018      	movs	r0, r3
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	0003      	movs	r3, r0
 80081fe:	430b      	orrs	r3, r1
 8008200:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4aaa      	ldr	r2, [pc, #680]	; (80084b0 <UART_SetConfig+0x354>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d131      	bne.n	8008270 <UART_SetConfig+0x114>
 800820c:	4ba9      	ldr	r3, [pc, #676]	; (80084b4 <UART_SetConfig+0x358>)
 800820e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008210:	2203      	movs	r2, #3
 8008212:	4013      	ands	r3, r2
 8008214:	2b03      	cmp	r3, #3
 8008216:	d01d      	beq.n	8008254 <UART_SetConfig+0xf8>
 8008218:	d823      	bhi.n	8008262 <UART_SetConfig+0x106>
 800821a:	2b02      	cmp	r3, #2
 800821c:	d00c      	beq.n	8008238 <UART_SetConfig+0xdc>
 800821e:	d820      	bhi.n	8008262 <UART_SetConfig+0x106>
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <UART_SetConfig+0xce>
 8008224:	2b01      	cmp	r3, #1
 8008226:	d00e      	beq.n	8008246 <UART_SetConfig+0xea>
 8008228:	e01b      	b.n	8008262 <UART_SetConfig+0x106>
 800822a:	231b      	movs	r3, #27
 800822c:	2220      	movs	r2, #32
 800822e:	189b      	adds	r3, r3, r2
 8008230:	19db      	adds	r3, r3, r7
 8008232:	2200      	movs	r2, #0
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	e071      	b.n	800831c <UART_SetConfig+0x1c0>
 8008238:	231b      	movs	r3, #27
 800823a:	2220      	movs	r2, #32
 800823c:	189b      	adds	r3, r3, r2
 800823e:	19db      	adds	r3, r3, r7
 8008240:	2202      	movs	r2, #2
 8008242:	701a      	strb	r2, [r3, #0]
 8008244:	e06a      	b.n	800831c <UART_SetConfig+0x1c0>
 8008246:	231b      	movs	r3, #27
 8008248:	2220      	movs	r2, #32
 800824a:	189b      	adds	r3, r3, r2
 800824c:	19db      	adds	r3, r3, r7
 800824e:	2204      	movs	r2, #4
 8008250:	701a      	strb	r2, [r3, #0]
 8008252:	e063      	b.n	800831c <UART_SetConfig+0x1c0>
 8008254:	231b      	movs	r3, #27
 8008256:	2220      	movs	r2, #32
 8008258:	189b      	adds	r3, r3, r2
 800825a:	19db      	adds	r3, r3, r7
 800825c:	2208      	movs	r2, #8
 800825e:	701a      	strb	r2, [r3, #0]
 8008260:	e05c      	b.n	800831c <UART_SetConfig+0x1c0>
 8008262:	231b      	movs	r3, #27
 8008264:	2220      	movs	r2, #32
 8008266:	189b      	adds	r3, r3, r2
 8008268:	19db      	adds	r3, r3, r7
 800826a:	2210      	movs	r2, #16
 800826c:	701a      	strb	r2, [r3, #0]
 800826e:	e055      	b.n	800831c <UART_SetConfig+0x1c0>
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a90      	ldr	r2, [pc, #576]	; (80084b8 <UART_SetConfig+0x35c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d106      	bne.n	8008288 <UART_SetConfig+0x12c>
 800827a:	231b      	movs	r3, #27
 800827c:	2220      	movs	r2, #32
 800827e:	189b      	adds	r3, r3, r2
 8008280:	19db      	adds	r3, r3, r7
 8008282:	2200      	movs	r2, #0
 8008284:	701a      	strb	r2, [r3, #0]
 8008286:	e049      	b.n	800831c <UART_SetConfig+0x1c0>
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a86      	ldr	r2, [pc, #536]	; (80084a8 <UART_SetConfig+0x34c>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d13e      	bne.n	8008310 <UART_SetConfig+0x1b4>
 8008292:	4b88      	ldr	r3, [pc, #544]	; (80084b4 <UART_SetConfig+0x358>)
 8008294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008296:	23c0      	movs	r3, #192	; 0xc0
 8008298:	011b      	lsls	r3, r3, #4
 800829a:	4013      	ands	r3, r2
 800829c:	22c0      	movs	r2, #192	; 0xc0
 800829e:	0112      	lsls	r2, r2, #4
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d027      	beq.n	80082f4 <UART_SetConfig+0x198>
 80082a4:	22c0      	movs	r2, #192	; 0xc0
 80082a6:	0112      	lsls	r2, r2, #4
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d82a      	bhi.n	8008302 <UART_SetConfig+0x1a6>
 80082ac:	2280      	movs	r2, #128	; 0x80
 80082ae:	0112      	lsls	r2, r2, #4
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d011      	beq.n	80082d8 <UART_SetConfig+0x17c>
 80082b4:	2280      	movs	r2, #128	; 0x80
 80082b6:	0112      	lsls	r2, r2, #4
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d822      	bhi.n	8008302 <UART_SetConfig+0x1a6>
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d004      	beq.n	80082ca <UART_SetConfig+0x16e>
 80082c0:	2280      	movs	r2, #128	; 0x80
 80082c2:	00d2      	lsls	r2, r2, #3
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d00e      	beq.n	80082e6 <UART_SetConfig+0x18a>
 80082c8:	e01b      	b.n	8008302 <UART_SetConfig+0x1a6>
 80082ca:	231b      	movs	r3, #27
 80082cc:	2220      	movs	r2, #32
 80082ce:	189b      	adds	r3, r3, r2
 80082d0:	19db      	adds	r3, r3, r7
 80082d2:	2200      	movs	r2, #0
 80082d4:	701a      	strb	r2, [r3, #0]
 80082d6:	e021      	b.n	800831c <UART_SetConfig+0x1c0>
 80082d8:	231b      	movs	r3, #27
 80082da:	2220      	movs	r2, #32
 80082dc:	189b      	adds	r3, r3, r2
 80082de:	19db      	adds	r3, r3, r7
 80082e0:	2202      	movs	r2, #2
 80082e2:	701a      	strb	r2, [r3, #0]
 80082e4:	e01a      	b.n	800831c <UART_SetConfig+0x1c0>
 80082e6:	231b      	movs	r3, #27
 80082e8:	2220      	movs	r2, #32
 80082ea:	189b      	adds	r3, r3, r2
 80082ec:	19db      	adds	r3, r3, r7
 80082ee:	2204      	movs	r2, #4
 80082f0:	701a      	strb	r2, [r3, #0]
 80082f2:	e013      	b.n	800831c <UART_SetConfig+0x1c0>
 80082f4:	231b      	movs	r3, #27
 80082f6:	2220      	movs	r2, #32
 80082f8:	189b      	adds	r3, r3, r2
 80082fa:	19db      	adds	r3, r3, r7
 80082fc:	2208      	movs	r2, #8
 80082fe:	701a      	strb	r2, [r3, #0]
 8008300:	e00c      	b.n	800831c <UART_SetConfig+0x1c0>
 8008302:	231b      	movs	r3, #27
 8008304:	2220      	movs	r2, #32
 8008306:	189b      	adds	r3, r3, r2
 8008308:	19db      	adds	r3, r3, r7
 800830a:	2210      	movs	r2, #16
 800830c:	701a      	strb	r2, [r3, #0]
 800830e:	e005      	b.n	800831c <UART_SetConfig+0x1c0>
 8008310:	231b      	movs	r3, #27
 8008312:	2220      	movs	r2, #32
 8008314:	189b      	adds	r3, r3, r2
 8008316:	19db      	adds	r3, r3, r7
 8008318:	2210      	movs	r2, #16
 800831a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a61      	ldr	r2, [pc, #388]	; (80084a8 <UART_SetConfig+0x34c>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d000      	beq.n	8008328 <UART_SetConfig+0x1cc>
 8008326:	e092      	b.n	800844e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008328:	231b      	movs	r3, #27
 800832a:	2220      	movs	r2, #32
 800832c:	189b      	adds	r3, r3, r2
 800832e:	19db      	adds	r3, r3, r7
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b08      	cmp	r3, #8
 8008334:	d015      	beq.n	8008362 <UART_SetConfig+0x206>
 8008336:	dc18      	bgt.n	800836a <UART_SetConfig+0x20e>
 8008338:	2b04      	cmp	r3, #4
 800833a:	d00d      	beq.n	8008358 <UART_SetConfig+0x1fc>
 800833c:	dc15      	bgt.n	800836a <UART_SetConfig+0x20e>
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <UART_SetConfig+0x1ec>
 8008342:	2b02      	cmp	r3, #2
 8008344:	d005      	beq.n	8008352 <UART_SetConfig+0x1f6>
 8008346:	e010      	b.n	800836a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008348:	f7fe fe6a 	bl	8007020 <HAL_RCC_GetPCLK1Freq>
 800834c:	0003      	movs	r3, r0
 800834e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008350:	e014      	b.n	800837c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008352:	4b5a      	ldr	r3, [pc, #360]	; (80084bc <UART_SetConfig+0x360>)
 8008354:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008356:	e011      	b.n	800837c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008358:	f7fe fdd6 	bl	8006f08 <HAL_RCC_GetSysClockFreq>
 800835c:	0003      	movs	r3, r0
 800835e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008360:	e00c      	b.n	800837c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008362:	2380      	movs	r3, #128	; 0x80
 8008364:	021b      	lsls	r3, r3, #8
 8008366:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008368:	e008      	b.n	800837c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800836e:	231a      	movs	r3, #26
 8008370:	2220      	movs	r2, #32
 8008372:	189b      	adds	r3, r3, r2
 8008374:	19db      	adds	r3, r3, r7
 8008376:	2201      	movs	r2, #1
 8008378:	701a      	strb	r2, [r3, #0]
        break;
 800837a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800837c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837e:	2b00      	cmp	r3, #0
 8008380:	d100      	bne.n	8008384 <UART_SetConfig+0x228>
 8008382:	e147      	b.n	8008614 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008388:	4b4d      	ldr	r3, [pc, #308]	; (80084c0 <UART_SetConfig+0x364>)
 800838a:	0052      	lsls	r2, r2, #1
 800838c:	5ad3      	ldrh	r3, [r2, r3]
 800838e:	0019      	movs	r1, r3
 8008390:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008392:	f7f7 feb5 	bl	8000100 <__udivsi3>
 8008396:	0003      	movs	r3, r0
 8008398:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	0013      	movs	r3, r2
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	189b      	adds	r3, r3, r2
 80083a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d305      	bcc.n	80083b6 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d906      	bls.n	80083c4 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80083b6:	231a      	movs	r3, #26
 80083b8:	2220      	movs	r2, #32
 80083ba:	189b      	adds	r3, r3, r2
 80083bc:	19db      	adds	r3, r3, r7
 80083be:	2201      	movs	r2, #1
 80083c0:	701a      	strb	r2, [r3, #0]
 80083c2:	e127      	b.n	8008614 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c6:	61bb      	str	r3, [r7, #24]
 80083c8:	2300      	movs	r3, #0
 80083ca:	61fb      	str	r3, [r7, #28]
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083d0:	4b3b      	ldr	r3, [pc, #236]	; (80084c0 <UART_SetConfig+0x364>)
 80083d2:	0052      	lsls	r2, r2, #1
 80083d4:	5ad3      	ldrh	r3, [r2, r3]
 80083d6:	613b      	str	r3, [r7, #16]
 80083d8:	2300      	movs	r3, #0
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	69b8      	ldr	r0, [r7, #24]
 80083e2:	69f9      	ldr	r1, [r7, #28]
 80083e4:	f7f8 f802 	bl	80003ec <__aeabi_uldivmod>
 80083e8:	0002      	movs	r2, r0
 80083ea:	000b      	movs	r3, r1
 80083ec:	0e11      	lsrs	r1, r2, #24
 80083ee:	021d      	lsls	r5, r3, #8
 80083f0:	430d      	orrs	r5, r1
 80083f2:	0214      	lsls	r4, r2, #8
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	085b      	lsrs	r3, r3, #1
 80083fa:	60bb      	str	r3, [r7, #8]
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	68b8      	ldr	r0, [r7, #8]
 8008402:	68f9      	ldr	r1, [r7, #12]
 8008404:	1900      	adds	r0, r0, r4
 8008406:	4169      	adcs	r1, r5
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	603b      	str	r3, [r7, #0]
 800840e:	2300      	movs	r3, #0
 8008410:	607b      	str	r3, [r7, #4]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f7f7 ffe9 	bl	80003ec <__aeabi_uldivmod>
 800841a:	0002      	movs	r2, r0
 800841c:	000b      	movs	r3, r1
 800841e:	0013      	movs	r3, r2
 8008420:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008424:	23c0      	movs	r3, #192	; 0xc0
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	429a      	cmp	r2, r3
 800842a:	d309      	bcc.n	8008440 <UART_SetConfig+0x2e4>
 800842c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800842e:	2380      	movs	r3, #128	; 0x80
 8008430:	035b      	lsls	r3, r3, #13
 8008432:	429a      	cmp	r2, r3
 8008434:	d204      	bcs.n	8008440 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800843c:	60da      	str	r2, [r3, #12]
 800843e:	e0e9      	b.n	8008614 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8008440:	231a      	movs	r3, #26
 8008442:	2220      	movs	r2, #32
 8008444:	189b      	adds	r3, r3, r2
 8008446:	19db      	adds	r3, r3, r7
 8008448:	2201      	movs	r2, #1
 800844a:	701a      	strb	r2, [r3, #0]
 800844c:	e0e2      	b.n	8008614 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	69da      	ldr	r2, [r3, #28]
 8008452:	2380      	movs	r3, #128	; 0x80
 8008454:	021b      	lsls	r3, r3, #8
 8008456:	429a      	cmp	r2, r3
 8008458:	d000      	beq.n	800845c <UART_SetConfig+0x300>
 800845a:	e083      	b.n	8008564 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800845c:	231b      	movs	r3, #27
 800845e:	2220      	movs	r2, #32
 8008460:	189b      	adds	r3, r3, r2
 8008462:	19db      	adds	r3, r3, r7
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b08      	cmp	r3, #8
 8008468:	d015      	beq.n	8008496 <UART_SetConfig+0x33a>
 800846a:	dc2b      	bgt.n	80084c4 <UART_SetConfig+0x368>
 800846c:	2b04      	cmp	r3, #4
 800846e:	d00d      	beq.n	800848c <UART_SetConfig+0x330>
 8008470:	dc28      	bgt.n	80084c4 <UART_SetConfig+0x368>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d002      	beq.n	800847c <UART_SetConfig+0x320>
 8008476:	2b02      	cmp	r3, #2
 8008478:	d005      	beq.n	8008486 <UART_SetConfig+0x32a>
 800847a:	e023      	b.n	80084c4 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800847c:	f7fe fdd0 	bl	8007020 <HAL_RCC_GetPCLK1Freq>
 8008480:	0003      	movs	r3, r0
 8008482:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008484:	e027      	b.n	80084d6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008486:	4b0d      	ldr	r3, [pc, #52]	; (80084bc <UART_SetConfig+0x360>)
 8008488:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800848a:	e024      	b.n	80084d6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800848c:	f7fe fd3c 	bl	8006f08 <HAL_RCC_GetSysClockFreq>
 8008490:	0003      	movs	r3, r0
 8008492:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008494:	e01f      	b.n	80084d6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008496:	2380      	movs	r3, #128	; 0x80
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800849c:	e01b      	b.n	80084d6 <UART_SetConfig+0x37a>
 800849e:	46c0      	nop			; (mov r8, r8)
 80084a0:	cfff69f3 	.word	0xcfff69f3
 80084a4:	ffffcfff 	.word	0xffffcfff
 80084a8:	40008000 	.word	0x40008000
 80084ac:	11fff4ff 	.word	0x11fff4ff
 80084b0:	40013800 	.word	0x40013800
 80084b4:	40021000 	.word	0x40021000
 80084b8:	40004400 	.word	0x40004400
 80084bc:	00f42400 	.word	0x00f42400
 80084c0:	08009458 	.word	0x08009458
      default:
        pclk = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80084c8:	231a      	movs	r3, #26
 80084ca:	2220      	movs	r2, #32
 80084cc:	189b      	adds	r3, r3, r2
 80084ce:	19db      	adds	r3, r3, r7
 80084d0:	2201      	movs	r2, #1
 80084d2:	701a      	strb	r2, [r3, #0]
        break;
 80084d4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d100      	bne.n	80084de <UART_SetConfig+0x382>
 80084dc:	e09a      	b.n	8008614 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084e2:	4b58      	ldr	r3, [pc, #352]	; (8008644 <UART_SetConfig+0x4e8>)
 80084e4:	0052      	lsls	r2, r2, #1
 80084e6:	5ad3      	ldrh	r3, [r2, r3]
 80084e8:	0019      	movs	r1, r3
 80084ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80084ec:	f7f7 fe08 	bl	8000100 <__udivsi3>
 80084f0:	0003      	movs	r3, r0
 80084f2:	005a      	lsls	r2, r3, #1
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	085b      	lsrs	r3, r3, #1
 80084fa:	18d2      	adds	r2, r2, r3
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	0019      	movs	r1, r3
 8008502:	0010      	movs	r0, r2
 8008504:	f7f7 fdfc 	bl	8000100 <__udivsi3>
 8008508:	0003      	movs	r3, r0
 800850a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	2b0f      	cmp	r3, #15
 8008510:	d921      	bls.n	8008556 <UART_SetConfig+0x3fa>
 8008512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008514:	2380      	movs	r3, #128	; 0x80
 8008516:	025b      	lsls	r3, r3, #9
 8008518:	429a      	cmp	r2, r3
 800851a:	d21c      	bcs.n	8008556 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	b29a      	uxth	r2, r3
 8008520:	200e      	movs	r0, #14
 8008522:	2420      	movs	r4, #32
 8008524:	1903      	adds	r3, r0, r4
 8008526:	19db      	adds	r3, r3, r7
 8008528:	210f      	movs	r1, #15
 800852a:	438a      	bics	r2, r1
 800852c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	085b      	lsrs	r3, r3, #1
 8008532:	b29b      	uxth	r3, r3
 8008534:	2207      	movs	r2, #7
 8008536:	4013      	ands	r3, r2
 8008538:	b299      	uxth	r1, r3
 800853a:	1903      	adds	r3, r0, r4
 800853c:	19db      	adds	r3, r3, r7
 800853e:	1902      	adds	r2, r0, r4
 8008540:	19d2      	adds	r2, r2, r7
 8008542:	8812      	ldrh	r2, [r2, #0]
 8008544:	430a      	orrs	r2, r1
 8008546:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	1902      	adds	r2, r0, r4
 800854e:	19d2      	adds	r2, r2, r7
 8008550:	8812      	ldrh	r2, [r2, #0]
 8008552:	60da      	str	r2, [r3, #12]
 8008554:	e05e      	b.n	8008614 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8008556:	231a      	movs	r3, #26
 8008558:	2220      	movs	r2, #32
 800855a:	189b      	adds	r3, r3, r2
 800855c:	19db      	adds	r3, r3, r7
 800855e:	2201      	movs	r2, #1
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	e057      	b.n	8008614 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008564:	231b      	movs	r3, #27
 8008566:	2220      	movs	r2, #32
 8008568:	189b      	adds	r3, r3, r2
 800856a:	19db      	adds	r3, r3, r7
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	2b08      	cmp	r3, #8
 8008570:	d015      	beq.n	800859e <UART_SetConfig+0x442>
 8008572:	dc18      	bgt.n	80085a6 <UART_SetConfig+0x44a>
 8008574:	2b04      	cmp	r3, #4
 8008576:	d00d      	beq.n	8008594 <UART_SetConfig+0x438>
 8008578:	dc15      	bgt.n	80085a6 <UART_SetConfig+0x44a>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <UART_SetConfig+0x428>
 800857e:	2b02      	cmp	r3, #2
 8008580:	d005      	beq.n	800858e <UART_SetConfig+0x432>
 8008582:	e010      	b.n	80085a6 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008584:	f7fe fd4c 	bl	8007020 <HAL_RCC_GetPCLK1Freq>
 8008588:	0003      	movs	r3, r0
 800858a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800858c:	e014      	b.n	80085b8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800858e:	4b2e      	ldr	r3, [pc, #184]	; (8008648 <UART_SetConfig+0x4ec>)
 8008590:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008592:	e011      	b.n	80085b8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008594:	f7fe fcb8 	bl	8006f08 <HAL_RCC_GetSysClockFreq>
 8008598:	0003      	movs	r3, r0
 800859a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800859c:	e00c      	b.n	80085b8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800859e:	2380      	movs	r3, #128	; 0x80
 80085a0:	021b      	lsls	r3, r3, #8
 80085a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085a4:	e008      	b.n	80085b8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80085aa:	231a      	movs	r3, #26
 80085ac:	2220      	movs	r2, #32
 80085ae:	189b      	adds	r3, r3, r2
 80085b0:	19db      	adds	r3, r3, r7
 80085b2:	2201      	movs	r2, #1
 80085b4:	701a      	strb	r2, [r3, #0]
        break;
 80085b6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80085b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d02a      	beq.n	8008614 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085c2:	4b20      	ldr	r3, [pc, #128]	; (8008644 <UART_SetConfig+0x4e8>)
 80085c4:	0052      	lsls	r2, r2, #1
 80085c6:	5ad3      	ldrh	r3, [r2, r3]
 80085c8:	0019      	movs	r1, r3
 80085ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80085cc:	f7f7 fd98 	bl	8000100 <__udivsi3>
 80085d0:	0003      	movs	r3, r0
 80085d2:	001a      	movs	r2, r3
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	085b      	lsrs	r3, r3, #1
 80085da:	18d2      	adds	r2, r2, r3
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	0019      	movs	r1, r3
 80085e2:	0010      	movs	r0, r2
 80085e4:	f7f7 fd8c 	bl	8000100 <__udivsi3>
 80085e8:	0003      	movs	r3, r0
 80085ea:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	2b0f      	cmp	r3, #15
 80085f0:	d90a      	bls.n	8008608 <UART_SetConfig+0x4ac>
 80085f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085f4:	2380      	movs	r3, #128	; 0x80
 80085f6:	025b      	lsls	r3, r3, #9
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d205      	bcs.n	8008608 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	b29a      	uxth	r2, r3
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	60da      	str	r2, [r3, #12]
 8008606:	e005      	b.n	8008614 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8008608:	231a      	movs	r3, #26
 800860a:	2220      	movs	r2, #32
 800860c:	189b      	adds	r3, r3, r2
 800860e:	19db      	adds	r3, r3, r7
 8008610:	2201      	movs	r2, #1
 8008612:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	226a      	movs	r2, #106	; 0x6a
 8008618:	2101      	movs	r1, #1
 800861a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	2268      	movs	r2, #104	; 0x68
 8008620:	2101      	movs	r1, #1
 8008622:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	2200      	movs	r2, #0
 8008628:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	2200      	movs	r2, #0
 800862e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008630:	231a      	movs	r3, #26
 8008632:	2220      	movs	r2, #32
 8008634:	189b      	adds	r3, r3, r2
 8008636:	19db      	adds	r3, r3, r7
 8008638:	781b      	ldrb	r3, [r3, #0]
}
 800863a:	0018      	movs	r0, r3
 800863c:	46bd      	mov	sp, r7
 800863e:	b010      	add	sp, #64	; 0x40
 8008640:	bdb0      	pop	{r4, r5, r7, pc}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	08009458 	.word	0x08009458
 8008648:	00f42400 	.word	0x00f42400

0800864c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008658:	2201      	movs	r2, #1
 800865a:	4013      	ands	r3, r2
 800865c:	d00b      	beq.n	8008676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	4a4a      	ldr	r2, [pc, #296]	; (8008790 <UART_AdvFeatureConfig+0x144>)
 8008666:	4013      	ands	r3, r2
 8008668:	0019      	movs	r1, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	430a      	orrs	r2, r1
 8008674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	2202      	movs	r2, #2
 800867c:	4013      	ands	r3, r2
 800867e:	d00b      	beq.n	8008698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	4a43      	ldr	r2, [pc, #268]	; (8008794 <UART_AdvFeatureConfig+0x148>)
 8008688:	4013      	ands	r3, r2
 800868a:	0019      	movs	r1, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	430a      	orrs	r2, r1
 8008696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869c:	2204      	movs	r2, #4
 800869e:	4013      	ands	r3, r2
 80086a0:	d00b      	beq.n	80086ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	4a3b      	ldr	r2, [pc, #236]	; (8008798 <UART_AdvFeatureConfig+0x14c>)
 80086aa:	4013      	ands	r3, r2
 80086ac:	0019      	movs	r1, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	430a      	orrs	r2, r1
 80086b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086be:	2208      	movs	r2, #8
 80086c0:	4013      	ands	r3, r2
 80086c2:	d00b      	beq.n	80086dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	4a34      	ldr	r2, [pc, #208]	; (800879c <UART_AdvFeatureConfig+0x150>)
 80086cc:	4013      	ands	r3, r2
 80086ce:	0019      	movs	r1, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	430a      	orrs	r2, r1
 80086da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	2210      	movs	r2, #16
 80086e2:	4013      	ands	r3, r2
 80086e4:	d00b      	beq.n	80086fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	4a2c      	ldr	r2, [pc, #176]	; (80087a0 <UART_AdvFeatureConfig+0x154>)
 80086ee:	4013      	ands	r3, r2
 80086f0:	0019      	movs	r1, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008702:	2220      	movs	r2, #32
 8008704:	4013      	ands	r3, r2
 8008706:	d00b      	beq.n	8008720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	4a25      	ldr	r2, [pc, #148]	; (80087a4 <UART_AdvFeatureConfig+0x158>)
 8008710:	4013      	ands	r3, r2
 8008712:	0019      	movs	r1, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	430a      	orrs	r2, r1
 800871e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008724:	2240      	movs	r2, #64	; 0x40
 8008726:	4013      	ands	r3, r2
 8008728:	d01d      	beq.n	8008766 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	4a1d      	ldr	r2, [pc, #116]	; (80087a8 <UART_AdvFeatureConfig+0x15c>)
 8008732:	4013      	ands	r3, r2
 8008734:	0019      	movs	r1, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008746:	2380      	movs	r3, #128	; 0x80
 8008748:	035b      	lsls	r3, r3, #13
 800874a:	429a      	cmp	r2, r3
 800874c:	d10b      	bne.n	8008766 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	4a15      	ldr	r2, [pc, #84]	; (80087ac <UART_AdvFeatureConfig+0x160>)
 8008756:	4013      	ands	r3, r2
 8008758:	0019      	movs	r1, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876a:	2280      	movs	r2, #128	; 0x80
 800876c:	4013      	ands	r3, r2
 800876e:	d00b      	beq.n	8008788 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	4a0e      	ldr	r2, [pc, #56]	; (80087b0 <UART_AdvFeatureConfig+0x164>)
 8008778:	4013      	ands	r3, r2
 800877a:	0019      	movs	r1, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	605a      	str	r2, [r3, #4]
  }
}
 8008788:	46c0      	nop			; (mov r8, r8)
 800878a:	46bd      	mov	sp, r7
 800878c:	b002      	add	sp, #8
 800878e:	bd80      	pop	{r7, pc}
 8008790:	fffdffff 	.word	0xfffdffff
 8008794:	fffeffff 	.word	0xfffeffff
 8008798:	fffbffff 	.word	0xfffbffff
 800879c:	ffff7fff 	.word	0xffff7fff
 80087a0:	ffffefff 	.word	0xffffefff
 80087a4:	ffffdfff 	.word	0xffffdfff
 80087a8:	ffefffff 	.word	0xffefffff
 80087ac:	ff9fffff 	.word	0xff9fffff
 80087b0:	fff7ffff 	.word	0xfff7ffff

080087b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2290      	movs	r2, #144	; 0x90
 80087c0:	2100      	movs	r1, #0
 80087c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087c4:	f7fb fd04 	bl	80041d0 <HAL_GetTick>
 80087c8:	0003      	movs	r3, r0
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2208      	movs	r2, #8
 80087d4:	4013      	ands	r3, r2
 80087d6:	2b08      	cmp	r3, #8
 80087d8:	d10c      	bne.n	80087f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2280      	movs	r2, #128	; 0x80
 80087de:	0391      	lsls	r1, r2, #14
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	4a1a      	ldr	r2, [pc, #104]	; (800884c <UART_CheckIdleState+0x98>)
 80087e4:	9200      	str	r2, [sp, #0]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f000 f832 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 80087ec:	1e03      	subs	r3, r0, #0
 80087ee:	d001      	beq.n	80087f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e026      	b.n	8008842 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2204      	movs	r2, #4
 80087fc:	4013      	ands	r3, r2
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d10c      	bne.n	800881c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2280      	movs	r2, #128	; 0x80
 8008806:	03d1      	lsls	r1, r2, #15
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	4a10      	ldr	r2, [pc, #64]	; (800884c <UART_CheckIdleState+0x98>)
 800880c:	9200      	str	r2, [sp, #0]
 800880e:	2200      	movs	r2, #0
 8008810:	f000 f81e 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 8008814:	1e03      	subs	r3, r0, #0
 8008816:	d001      	beq.n	800881c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e012      	b.n	8008842 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2288      	movs	r2, #136	; 0x88
 8008820:	2120      	movs	r1, #32
 8008822:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	228c      	movs	r2, #140	; 0x8c
 8008828:	2120      	movs	r1, #32
 800882a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2284      	movs	r2, #132	; 0x84
 800883c:	2100      	movs	r1, #0
 800883e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	0018      	movs	r0, r3
 8008844:	46bd      	mov	sp, r7
 8008846:	b004      	add	sp, #16
 8008848:	bd80      	pop	{r7, pc}
 800884a:	46c0      	nop			; (mov r8, r8)
 800884c:	01ffffff 	.word	0x01ffffff

08008850 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b094      	sub	sp, #80	; 0x50
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	1dfb      	adds	r3, r7, #7
 800885e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008860:	e0a7      	b.n	80089b2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008864:	3301      	adds	r3, #1
 8008866:	d100      	bne.n	800886a <UART_WaitOnFlagUntilTimeout+0x1a>
 8008868:	e0a3      	b.n	80089b2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800886a:	f7fb fcb1 	bl	80041d0 <HAL_GetTick>
 800886e:	0002      	movs	r2, r0
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008876:	429a      	cmp	r2, r3
 8008878:	d302      	bcc.n	8008880 <UART_WaitOnFlagUntilTimeout+0x30>
 800887a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800887c:	2b00      	cmp	r3, #0
 800887e:	d13f      	bne.n	8008900 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008880:	f3ef 8310 	mrs	r3, PRIMASK
 8008884:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008888:	647b      	str	r3, [r7, #68]	; 0x44
 800888a:	2301      	movs	r3, #1
 800888c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800888e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008890:	f383 8810 	msr	PRIMASK, r3
}
 8008894:	46c0      	nop			; (mov r8, r8)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	494e      	ldr	r1, [pc, #312]	; (80089dc <UART_WaitOnFlagUntilTimeout+0x18c>)
 80088a2:	400a      	ands	r2, r1
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	f383 8810 	msr	PRIMASK, r3
}
 80088b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088b2:	f3ef 8310 	mrs	r3, PRIMASK
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80088b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ba:	643b      	str	r3, [r7, #64]	; 0x40
 80088bc:	2301      	movs	r3, #1
 80088be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	f383 8810 	msr	PRIMASK, r3
}
 80088c6:	46c0      	nop			; (mov r8, r8)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2101      	movs	r1, #1
 80088d4:	438a      	bics	r2, r1
 80088d6:	609a      	str	r2, [r3, #8]
 80088d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088da:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088de:	f383 8810 	msr	PRIMASK, r3
}
 80088e2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2288      	movs	r2, #136	; 0x88
 80088e8:	2120      	movs	r1, #32
 80088ea:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	228c      	movs	r2, #140	; 0x8c
 80088f0:	2120      	movs	r1, #32
 80088f2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2284      	movs	r2, #132	; 0x84
 80088f8:	2100      	movs	r1, #0
 80088fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e069      	b.n	80089d4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2204      	movs	r2, #4
 8008908:	4013      	ands	r3, r2
 800890a:	d052      	beq.n	80089b2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	69da      	ldr	r2, [r3, #28]
 8008912:	2380      	movs	r3, #128	; 0x80
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	401a      	ands	r2, r3
 8008918:	2380      	movs	r3, #128	; 0x80
 800891a:	011b      	lsls	r3, r3, #4
 800891c:	429a      	cmp	r2, r3
 800891e:	d148      	bne.n	80089b2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2280      	movs	r2, #128	; 0x80
 8008926:	0112      	lsls	r2, r2, #4
 8008928:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800892a:	f3ef 8310 	mrs	r3, PRIMASK
 800892e:	613b      	str	r3, [r7, #16]
  return(result);
 8008930:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008934:	2301      	movs	r3, #1
 8008936:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f383 8810 	msr	PRIMASK, r3
}
 800893e:	46c0      	nop			; (mov r8, r8)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4924      	ldr	r1, [pc, #144]	; (80089dc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800894c:	400a      	ands	r2, r1
 800894e:	601a      	str	r2, [r3, #0]
 8008950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008952:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	f383 8810 	msr	PRIMASK, r3
}
 800895a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800895c:	f3ef 8310 	mrs	r3, PRIMASK
 8008960:	61fb      	str	r3, [r7, #28]
  return(result);
 8008962:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008964:	64bb      	str	r3, [r7, #72]	; 0x48
 8008966:	2301      	movs	r3, #1
 8008968:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	f383 8810 	msr	PRIMASK, r3
}
 8008970:	46c0      	nop			; (mov r8, r8)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2101      	movs	r1, #1
 800897e:	438a      	bics	r2, r1
 8008980:	609a      	str	r2, [r3, #8]
 8008982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	f383 8810 	msr	PRIMASK, r3
}
 800898c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2288      	movs	r2, #136	; 0x88
 8008992:	2120      	movs	r1, #32
 8008994:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	228c      	movs	r2, #140	; 0x8c
 800899a:	2120      	movs	r1, #32
 800899c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2290      	movs	r2, #144	; 0x90
 80089a2:	2120      	movs	r1, #32
 80089a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2284      	movs	r2, #132	; 0x84
 80089aa:	2100      	movs	r1, #0
 80089ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e010      	b.n	80089d4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	4013      	ands	r3, r2
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	425a      	negs	r2, r3
 80089c2:	4153      	adcs	r3, r2
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	001a      	movs	r2, r3
 80089c8:	1dfb      	adds	r3, r7, #7
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d100      	bne.n	80089d2 <UART_WaitOnFlagUntilTimeout+0x182>
 80089d0:	e747      	b.n	8008862 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	0018      	movs	r0, r3
 80089d6:	46bd      	mov	sp, r7
 80089d8:	b014      	add	sp, #80	; 0x50
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	fffffe5f 	.word	0xfffffe5f

080089e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b090      	sub	sp, #64	; 0x40
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	1dbb      	adds	r3, r7, #6
 80089ec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	1dba      	adds	r2, r7, #6
 80089f8:	215c      	movs	r1, #92	; 0x5c
 80089fa:	8812      	ldrh	r2, [r2, #0]
 80089fc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2290      	movs	r2, #144	; 0x90
 8008a02:	2100      	movs	r1, #0
 8008a04:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	228c      	movs	r2, #140	; 0x8c
 8008a0a:	2122      	movs	r1, #34	; 0x22
 8008a0c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2280      	movs	r2, #128	; 0x80
 8008a12:	589b      	ldr	r3, [r3, r2]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d02d      	beq.n	8008a74 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2280      	movs	r2, #128	; 0x80
 8008a1c:	589b      	ldr	r3, [r3, r2]
 8008a1e:	4a40      	ldr	r2, [pc, #256]	; (8008b20 <UART_Start_Receive_DMA+0x140>)
 8008a20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2280      	movs	r2, #128	; 0x80
 8008a26:	589b      	ldr	r3, [r3, r2]
 8008a28:	4a3e      	ldr	r2, [pc, #248]	; (8008b24 <UART_Start_Receive_DMA+0x144>)
 8008a2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2280      	movs	r2, #128	; 0x80
 8008a30:	589b      	ldr	r3, [r3, r2]
 8008a32:	4a3d      	ldr	r2, [pc, #244]	; (8008b28 <UART_Start_Receive_DMA+0x148>)
 8008a34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2280      	movs	r2, #128	; 0x80
 8008a3a:	589b      	ldr	r3, [r3, r2]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2280      	movs	r2, #128	; 0x80
 8008a44:	5898      	ldr	r0, [r3, r2]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3324      	adds	r3, #36	; 0x24
 8008a4c:	0019      	movs	r1, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a52:	001a      	movs	r2, r3
 8008a54:	1dbb      	adds	r3, r7, #6
 8008a56:	881b      	ldrh	r3, [r3, #0]
 8008a58:	f7fc fbac 	bl	80051b4 <HAL_DMA_Start_IT>
 8008a5c:	1e03      	subs	r3, r0, #0
 8008a5e:	d009      	beq.n	8008a74 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2290      	movs	r2, #144	; 0x90
 8008a64:	2110      	movs	r1, #16
 8008a66:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	228c      	movs	r2, #140	; 0x8c
 8008a6c:	2120      	movs	r1, #32
 8008a6e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e050      	b.n	8008b16 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d019      	beq.n	8008ab0 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a80:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a86:	2301      	movs	r3, #1
 8008a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8c:	f383 8810 	msr	PRIMASK, r3
}
 8008a90:	46c0      	nop			; (mov r8, r8)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2180      	movs	r1, #128	; 0x80
 8008a9e:	0049      	lsls	r1, r1, #1
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aaa:	f383 8810 	msr	PRIMASK, r3
}
 8008aae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ab4:	613b      	str	r3, [r7, #16]
  return(result);
 8008ab6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008aba:	2301      	movs	r3, #1
 8008abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f383 8810 	msr	PRIMASK, r3
}
 8008ac4:	46c0      	nop			; (mov r8, r8)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	689a      	ldr	r2, [r3, #8]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	609a      	str	r2, [r3, #8]
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	f383 8810 	msr	PRIMASK, r3
}
 8008ae0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ae6:	61fb      	str	r3, [r7, #28]
  return(result);
 8008ae8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aea:	637b      	str	r3, [r7, #52]	; 0x34
 8008aec:	2301      	movs	r3, #1
 8008aee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	f383 8810 	msr	PRIMASK, r3
}
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	689a      	ldr	r2, [r3, #8]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2140      	movs	r1, #64	; 0x40
 8008b04:	430a      	orrs	r2, r1
 8008b06:	609a      	str	r2, [r3, #8]
 8008b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	f383 8810 	msr	PRIMASK, r3
}
 8008b12:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	0018      	movs	r0, r3
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	b010      	add	sp, #64	; 0x40
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	46c0      	nop			; (mov r8, r8)
 8008b20:	08008c79 	.word	0x08008c79
 8008b24:	08008da9 	.word	0x08008da9
 8008b28:	08008deb 	.word	0x08008deb

08008b2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08a      	sub	sp, #40	; 0x28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b34:	f3ef 8310 	mrs	r3, PRIMASK
 8008b38:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b3a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b3e:	2301      	movs	r3, #1
 8008b40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f383 8810 	msr	PRIMASK, r3
}
 8008b48:	46c0      	nop			; (mov r8, r8)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	21c0      	movs	r1, #192	; 0xc0
 8008b56:	438a      	bics	r2, r1
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	f383 8810 	msr	PRIMASK, r3
}
 8008b64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b66:	f3ef 8310 	mrs	r3, PRIMASK
 8008b6a:	617b      	str	r3, [r7, #20]
  return(result);
 8008b6c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008b6e:	623b      	str	r3, [r7, #32]
 8008b70:	2301      	movs	r3, #1
 8008b72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	f383 8810 	msr	PRIMASK, r3
}
 8008b7a:	46c0      	nop			; (mov r8, r8)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689a      	ldr	r2, [r3, #8]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4908      	ldr	r1, [pc, #32]	; (8008ba8 <UART_EndTxTransfer+0x7c>)
 8008b88:	400a      	ands	r2, r1
 8008b8a:	609a      	str	r2, [r3, #8]
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	f383 8810 	msr	PRIMASK, r3
}
 8008b96:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2288      	movs	r2, #136	; 0x88
 8008b9c:	2120      	movs	r1, #32
 8008b9e:	5099      	str	r1, [r3, r2]
}
 8008ba0:	46c0      	nop			; (mov r8, r8)
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	b00a      	add	sp, #40	; 0x28
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	ff7fffff 	.word	0xff7fffff

08008bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08e      	sub	sp, #56	; 0x38
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008bb8:	617b      	str	r3, [r7, #20]
  return(result);
 8008bba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	f383 8810 	msr	PRIMASK, r3
}
 8008bc8:	46c0      	nop			; (mov r8, r8)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4926      	ldr	r1, [pc, #152]	; (8008c70 <UART_EndRxTransfer+0xc4>)
 8008bd6:	400a      	ands	r2, r1
 8008bd8:	601a      	str	r2, [r3, #0]
 8008bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	f383 8810 	msr	PRIMASK, r3
}
 8008be4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008be6:	f3ef 8310 	mrs	r3, PRIMASK
 8008bea:	623b      	str	r3, [r7, #32]
  return(result);
 8008bec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bee:	633b      	str	r3, [r7, #48]	; 0x30
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	f383 8810 	msr	PRIMASK, r3
}
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	491b      	ldr	r1, [pc, #108]	; (8008c74 <UART_EndRxTransfer+0xc8>)
 8008c08:	400a      	ands	r2, r1
 8008c0a:	609a      	str	r2, [r3, #8]
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	f383 8810 	msr	PRIMASK, r3
}
 8008c16:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d118      	bne.n	8008c52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c20:	f3ef 8310 	mrs	r3, PRIMASK
 8008c24:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f383 8810 	msr	PRIMASK, r3
}
 8008c34:	46c0      	nop			; (mov r8, r8)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2110      	movs	r1, #16
 8008c42:	438a      	bics	r2, r1
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	f383 8810 	msr	PRIMASK, r3
}
 8008c50:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	228c      	movs	r2, #140	; 0x8c
 8008c56:	2120      	movs	r1, #32
 8008c58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c66:	46c0      	nop			; (mov r8, r8)
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	b00e      	add	sp, #56	; 0x38
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	46c0      	nop			; (mov r8, r8)
 8008c70:	fffffedf 	.word	0xfffffedf
 8008c74:	effffffe 	.word	0xeffffffe

08008c78 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b094      	sub	sp, #80	; 0x50
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c84:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	4013      	ands	r3, r2
 8008c90:	d16f      	bne.n	8008d72 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c94:	225e      	movs	r2, #94	; 0x5e
 8008c96:	2100      	movs	r1, #0
 8008c98:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008ca0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	f383 8810 	msr	PRIMASK, r3
}
 8008cae:	46c0      	nop			; (mov r8, r8)
 8008cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	493a      	ldr	r1, [pc, #232]	; (8008da4 <UART_DMAReceiveCplt+0x12c>)
 8008cbc:	400a      	ands	r2, r1
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	f383 8810 	msr	PRIMASK, r3
}
 8008cca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8008cd0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	f383 8810 	msr	PRIMASK, r3
}
 8008ce0:	46c0      	nop			; (mov r8, r8)
 8008ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	689a      	ldr	r2, [r3, #8]
 8008ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2101      	movs	r1, #1
 8008cee:	438a      	bics	r2, r1
 8008cf0:	609a      	str	r2, [r3, #8]
 8008cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf8:	f383 8810 	msr	PRIMASK, r3
}
 8008cfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8008d02:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d06:	643b      	str	r3, [r7, #64]	; 0x40
 8008d08:	2301      	movs	r3, #1
 8008d0a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0e:	f383 8810 	msr	PRIMASK, r3
}
 8008d12:	46c0      	nop			; (mov r8, r8)
 8008d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2140      	movs	r1, #64	; 0x40
 8008d20:	438a      	bics	r2, r1
 8008d22:	609a      	str	r2, [r3, #8]
 8008d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2a:	f383 8810 	msr	PRIMASK, r3
}
 8008d2e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d32:	228c      	movs	r2, #140	; 0x8c
 8008d34:	2120      	movs	r1, #32
 8008d36:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d118      	bne.n	8008d72 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d40:	f3ef 8310 	mrs	r3, PRIMASK
 8008d44:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d46:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f383 8810 	msr	PRIMASK, r3
}
 8008d54:	46c0      	nop			; (mov r8, r8)
 8008d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2110      	movs	r1, #16
 8008d62:	438a      	bics	r2, r1
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f383 8810 	msr	PRIMASK, r3
}
 8008d70:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d74:	2200      	movs	r2, #0
 8008d76:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d108      	bne.n	8008d92 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d82:	225c      	movs	r2, #92	; 0x5c
 8008d84:	5a9a      	ldrh	r2, [r3, r2]
 8008d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d88:	0011      	movs	r1, r2
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f7f9 fdf6 	bl	800297c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d90:	e003      	b.n	8008d9a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8008d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d94:	0018      	movs	r0, r3
 8008d96:	f7ff f9c9 	bl	800812c <HAL_UART_RxCpltCallback>
}
 8008d9a:	46c0      	nop			; (mov r8, r8)
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	b014      	add	sp, #80	; 0x50
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	46c0      	nop			; (mov r8, r8)
 8008da4:	fffffeff 	.word	0xfffffeff

08008da8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2201      	movs	r2, #1
 8008dba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d10a      	bne.n	8008dda <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	225c      	movs	r2, #92	; 0x5c
 8008dc8:	5a9b      	ldrh	r3, [r3, r2]
 8008dca:	085b      	lsrs	r3, r3, #1
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	0011      	movs	r1, r2
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	f7f9 fdd2 	bl	800297c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008dd8:	e003      	b.n	8008de2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	0018      	movs	r0, r3
 8008dde:	f7ff f9ad 	bl	800813c <HAL_UART_RxHalfCpltCallback>
}
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	46bd      	mov	sp, r7
 8008de6:	b004      	add	sp, #16
 8008de8:	bd80      	pop	{r7, pc}

08008dea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b086      	sub	sp, #24
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	2288      	movs	r2, #136	; 0x88
 8008dfc:	589b      	ldr	r3, [r3, r2]
 8008dfe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	228c      	movs	r2, #140	; 0x8c
 8008e04:	589b      	ldr	r3, [r3, r2]
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	2280      	movs	r2, #128	; 0x80
 8008e10:	4013      	ands	r3, r2
 8008e12:	2b80      	cmp	r3, #128	; 0x80
 8008e14:	d10a      	bne.n	8008e2c <UART_DMAError+0x42>
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	2b21      	cmp	r3, #33	; 0x21
 8008e1a:	d107      	bne.n	8008e2c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	2256      	movs	r2, #86	; 0x56
 8008e20:	2100      	movs	r1, #0
 8008e22:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	0018      	movs	r0, r3
 8008e28:	f7ff fe80 	bl	8008b2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	2240      	movs	r2, #64	; 0x40
 8008e34:	4013      	ands	r3, r2
 8008e36:	2b40      	cmp	r3, #64	; 0x40
 8008e38:	d10a      	bne.n	8008e50 <UART_DMAError+0x66>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b22      	cmp	r3, #34	; 0x22
 8008e3e:	d107      	bne.n	8008e50 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	225e      	movs	r2, #94	; 0x5e
 8008e44:	2100      	movs	r1, #0
 8008e46:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	f7ff feae 	bl	8008bac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2290      	movs	r2, #144	; 0x90
 8008e54:	589b      	ldr	r3, [r3, r2]
 8008e56:	2210      	movs	r2, #16
 8008e58:	431a      	orrs	r2, r3
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2190      	movs	r1, #144	; 0x90
 8008e5e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	0018      	movs	r0, r3
 8008e64:	f7ff f972 	bl	800814c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e68:	46c0      	nop			; (mov r8, r8)
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	b006      	add	sp, #24
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	225e      	movs	r2, #94	; 0x5e
 8008e82:	2100      	movs	r1, #0
 8008e84:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2256      	movs	r2, #86	; 0x56
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	0018      	movs	r0, r3
 8008e92:	f7ff f95b 	bl	800814c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e96:	46c0      	nop			; (mov r8, r8)
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	b004      	add	sp, #16
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b086      	sub	sp, #24
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8008eaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8008eac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008eae:	617b      	str	r3, [r7, #20]
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f383 8810 	msr	PRIMASK, r3
}
 8008eba:	46c0      	nop			; (mov r8, r8)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2140      	movs	r1, #64	; 0x40
 8008ec8:	438a      	bics	r2, r1
 8008eca:	601a      	str	r2, [r3, #0]
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	f383 8810 	msr	PRIMASK, r3
}
 8008ed6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2288      	movs	r2, #136	; 0x88
 8008edc:	2120      	movs	r1, #32
 8008ede:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	0018      	movs	r0, r3
 8008eea:	f7ff f917 	bl	800811c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eee:	46c0      	nop			; (mov r8, r8)
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	b006      	add	sp, #24
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008efe:	46c0      	nop			; (mov r8, r8)
 8008f00:	46bd      	mov	sp, r7
 8008f02:	b002      	add	sp, #8
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b082      	sub	sp, #8
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008f0e:	46c0      	nop			; (mov r8, r8)
 8008f10:	46bd      	mov	sp, r7
 8008f12:	b002      	add	sp, #8
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b082      	sub	sp, #8
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008f1e:	46c0      	nop			; (mov r8, r8)
 8008f20:	46bd      	mov	sp, r7
 8008f22:	b002      	add	sp, #8
 8008f24:	bd80      	pop	{r7, pc}
	...

08008f28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2284      	movs	r2, #132	; 0x84
 8008f34:	5c9b      	ldrb	r3, [r3, r2]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <HAL_UARTEx_DisableFifoMode+0x16>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e027      	b.n	8008f8e <HAL_UARTEx_DisableFifoMode+0x66>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2284      	movs	r2, #132	; 0x84
 8008f42:	2101      	movs	r1, #1
 8008f44:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2288      	movs	r2, #136	; 0x88
 8008f4a:	2124      	movs	r1, #36	; 0x24
 8008f4c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2101      	movs	r1, #1
 8008f62:	438a      	bics	r2, r1
 8008f64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4a0b      	ldr	r2, [pc, #44]	; (8008f98 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2288      	movs	r2, #136	; 0x88
 8008f80:	2120      	movs	r1, #32
 8008f82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2284      	movs	r2, #132	; 0x84
 8008f88:	2100      	movs	r1, #0
 8008f8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	0018      	movs	r0, r3
 8008f90:	46bd      	mov	sp, r7
 8008f92:	b004      	add	sp, #16
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	46c0      	nop			; (mov r8, r8)
 8008f98:	dfffffff 	.word	0xdfffffff

08008f9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2284      	movs	r2, #132	; 0x84
 8008faa:	5c9b      	ldrb	r3, [r3, r2]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d101      	bne.n	8008fb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	e02e      	b.n	8009012 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2284      	movs	r2, #132	; 0x84
 8008fb8:	2101      	movs	r1, #1
 8008fba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2288      	movs	r2, #136	; 0x88
 8008fc0:	2124      	movs	r1, #36	; 0x24
 8008fc2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	438a      	bics	r2, r1
 8008fda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	08d9      	lsrs	r1, r3, #3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	430a      	orrs	r2, r1
 8008fee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f000 f8bc 	bl	8009170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2288      	movs	r2, #136	; 0x88
 8009004:	2120      	movs	r1, #32
 8009006:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2284      	movs	r2, #132	; 0x84
 800900c:	2100      	movs	r1, #0
 800900e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	0018      	movs	r0, r3
 8009014:	46bd      	mov	sp, r7
 8009016:	b004      	add	sp, #16
 8009018:	bd80      	pop	{r7, pc}
	...

0800901c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2284      	movs	r2, #132	; 0x84
 800902a:	5c9b      	ldrb	r3, [r3, r2]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d101      	bne.n	8009034 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009030:	2302      	movs	r3, #2
 8009032:	e02f      	b.n	8009094 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2284      	movs	r2, #132	; 0x84
 8009038:	2101      	movs	r1, #1
 800903a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2288      	movs	r2, #136	; 0x88
 8009040:	2124      	movs	r1, #36	; 0x24
 8009042:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2101      	movs	r1, #1
 8009058:	438a      	bics	r2, r1
 800905a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	4a0e      	ldr	r2, [pc, #56]	; (800909c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009064:	4013      	ands	r3, r2
 8009066:	0019      	movs	r1, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	0018      	movs	r0, r3
 8009076:	f000 f87b 	bl	8009170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2288      	movs	r2, #136	; 0x88
 8009086:	2120      	movs	r1, #32
 8009088:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2284      	movs	r2, #132	; 0x84
 800908e:	2100      	movs	r1, #0
 8009090:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	0018      	movs	r0, r3
 8009096:	46bd      	mov	sp, r7
 8009098:	b004      	add	sp, #16
 800909a:	bd80      	pop	{r7, pc}
 800909c:	f1ffffff 	.word	0xf1ffffff

080090a0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090a0:	b5b0      	push	{r4, r5, r7, lr}
 80090a2:	b08a      	sub	sp, #40	; 0x28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	1dbb      	adds	r3, r7, #6
 80090ac:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	228c      	movs	r2, #140	; 0x8c
 80090b2:	589b      	ldr	r3, [r3, r2]
 80090b4:	2b20      	cmp	r3, #32
 80090b6:	d156      	bne.n	8009166 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80090be:	1dbb      	adds	r3, r7, #6
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d101      	bne.n	80090ca <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e04e      	b.n	8009168 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	689a      	ldr	r2, [r3, #8]
 80090ce:	2380      	movs	r3, #128	; 0x80
 80090d0:	015b      	lsls	r3, r3, #5
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d109      	bne.n	80090ea <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d105      	bne.n	80090ea <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2201      	movs	r2, #1
 80090e2:	4013      	ands	r3, r2
 80090e4:	d001      	beq.n	80090ea <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e03e      	b.n	8009168 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2201      	movs	r2, #1
 80090ee:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80090f6:	2527      	movs	r5, #39	; 0x27
 80090f8:	197c      	adds	r4, r7, r5
 80090fa:	1dbb      	adds	r3, r7, #6
 80090fc:	881a      	ldrh	r2, [r3, #0]
 80090fe:	68b9      	ldr	r1, [r7, #8]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	0018      	movs	r0, r3
 8009104:	f7ff fc6c 	bl	80089e0 <UART_Start_Receive_DMA>
 8009108:	0003      	movs	r3, r0
 800910a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800910c:	197b      	adds	r3, r7, r5
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d124      	bne.n	800915e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009118:	2b01      	cmp	r3, #1
 800911a:	d11c      	bne.n	8009156 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2210      	movs	r2, #16
 8009122:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009124:	f3ef 8310 	mrs	r3, PRIMASK
 8009128:	617b      	str	r3, [r7, #20]
  return(result);
 800912a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800912c:	623b      	str	r3, [r7, #32]
 800912e:	2301      	movs	r3, #1
 8009130:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	f383 8810 	msr	PRIMASK, r3
}
 8009138:	46c0      	nop			; (mov r8, r8)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2110      	movs	r1, #16
 8009146:	430a      	orrs	r2, r1
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	f383 8810 	msr	PRIMASK, r3
}
 8009154:	e003      	b.n	800915e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009156:	2327      	movs	r3, #39	; 0x27
 8009158:	18fb      	adds	r3, r7, r3
 800915a:	2201      	movs	r2, #1
 800915c:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800915e:	2327      	movs	r3, #39	; 0x27
 8009160:	18fb      	adds	r3, r7, r3
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	e000      	b.n	8009168 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8009166:	2302      	movs	r3, #2
  }
}
 8009168:	0018      	movs	r0, r3
 800916a:	46bd      	mov	sp, r7
 800916c:	b00a      	add	sp, #40	; 0x28
 800916e:	bdb0      	pop	{r4, r5, r7, pc}

08009170 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800917c:	2b00      	cmp	r3, #0
 800917e:	d108      	bne.n	8009192 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	226a      	movs	r2, #106	; 0x6a
 8009184:	2101      	movs	r1, #1
 8009186:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2268      	movs	r2, #104	; 0x68
 800918c:	2101      	movs	r1, #1
 800918e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009190:	e043      	b.n	800921a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009192:	260f      	movs	r6, #15
 8009194:	19bb      	adds	r3, r7, r6
 8009196:	2208      	movs	r2, #8
 8009198:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800919a:	200e      	movs	r0, #14
 800919c:	183b      	adds	r3, r7, r0
 800919e:	2208      	movs	r2, #8
 80091a0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	0e5b      	lsrs	r3, r3, #25
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	240d      	movs	r4, #13
 80091ae:	193b      	adds	r3, r7, r4
 80091b0:	2107      	movs	r1, #7
 80091b2:	400a      	ands	r2, r1
 80091b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	0f5b      	lsrs	r3, r3, #29
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	250c      	movs	r5, #12
 80091c2:	197b      	adds	r3, r7, r5
 80091c4:	2107      	movs	r1, #7
 80091c6:	400a      	ands	r2, r1
 80091c8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091ca:	183b      	adds	r3, r7, r0
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	197a      	adds	r2, r7, r5
 80091d0:	7812      	ldrb	r2, [r2, #0]
 80091d2:	4914      	ldr	r1, [pc, #80]	; (8009224 <UARTEx_SetNbDataToProcess+0xb4>)
 80091d4:	5c8a      	ldrb	r2, [r1, r2]
 80091d6:	435a      	muls	r2, r3
 80091d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80091da:	197b      	adds	r3, r7, r5
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	4a12      	ldr	r2, [pc, #72]	; (8009228 <UARTEx_SetNbDataToProcess+0xb8>)
 80091e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091e2:	0019      	movs	r1, r3
 80091e4:	f7f7 f816 	bl	8000214 <__divsi3>
 80091e8:	0003      	movs	r3, r0
 80091ea:	b299      	uxth	r1, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	226a      	movs	r2, #106	; 0x6a
 80091f0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091f2:	19bb      	adds	r3, r7, r6
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	193a      	adds	r2, r7, r4
 80091f8:	7812      	ldrb	r2, [r2, #0]
 80091fa:	490a      	ldr	r1, [pc, #40]	; (8009224 <UARTEx_SetNbDataToProcess+0xb4>)
 80091fc:	5c8a      	ldrb	r2, [r1, r2]
 80091fe:	435a      	muls	r2, r3
 8009200:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009202:	193b      	adds	r3, r7, r4
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	4a08      	ldr	r2, [pc, #32]	; (8009228 <UARTEx_SetNbDataToProcess+0xb8>)
 8009208:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800920a:	0019      	movs	r1, r3
 800920c:	f7f7 f802 	bl	8000214 <__divsi3>
 8009210:	0003      	movs	r3, r0
 8009212:	b299      	uxth	r1, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2268      	movs	r2, #104	; 0x68
 8009218:	5299      	strh	r1, [r3, r2]
}
 800921a:	46c0      	nop			; (mov r8, r8)
 800921c:	46bd      	mov	sp, r7
 800921e:	b005      	add	sp, #20
 8009220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009222:	46c0      	nop			; (mov r8, r8)
 8009224:	08009470 	.word	0x08009470
 8009228:	08009478 	.word	0x08009478

0800922c <__libc_init_array>:
 800922c:	b570      	push	{r4, r5, r6, lr}
 800922e:	2600      	movs	r6, #0
 8009230:	4d0c      	ldr	r5, [pc, #48]	; (8009264 <__libc_init_array+0x38>)
 8009232:	4c0d      	ldr	r4, [pc, #52]	; (8009268 <__libc_init_array+0x3c>)
 8009234:	1b64      	subs	r4, r4, r5
 8009236:	10a4      	asrs	r4, r4, #2
 8009238:	42a6      	cmp	r6, r4
 800923a:	d109      	bne.n	8009250 <__libc_init_array+0x24>
 800923c:	2600      	movs	r6, #0
 800923e:	f000 f88d 	bl	800935c <_init>
 8009242:	4d0a      	ldr	r5, [pc, #40]	; (800926c <__libc_init_array+0x40>)
 8009244:	4c0a      	ldr	r4, [pc, #40]	; (8009270 <__libc_init_array+0x44>)
 8009246:	1b64      	subs	r4, r4, r5
 8009248:	10a4      	asrs	r4, r4, #2
 800924a:	42a6      	cmp	r6, r4
 800924c:	d105      	bne.n	800925a <__libc_init_array+0x2e>
 800924e:	bd70      	pop	{r4, r5, r6, pc}
 8009250:	00b3      	lsls	r3, r6, #2
 8009252:	58eb      	ldr	r3, [r5, r3]
 8009254:	4798      	blx	r3
 8009256:	3601      	adds	r6, #1
 8009258:	e7ee      	b.n	8009238 <__libc_init_array+0xc>
 800925a:	00b3      	lsls	r3, r6, #2
 800925c:	58eb      	ldr	r3, [r5, r3]
 800925e:	4798      	blx	r3
 8009260:	3601      	adds	r6, #1
 8009262:	e7f2      	b.n	800924a <__libc_init_array+0x1e>
 8009264:	0800948c 	.word	0x0800948c
 8009268:	0800948c 	.word	0x0800948c
 800926c:	0800948c 	.word	0x0800948c
 8009270:	08009494 	.word	0x08009494

08009274 <memset>:
 8009274:	0003      	movs	r3, r0
 8009276:	1882      	adds	r2, r0, r2
 8009278:	4293      	cmp	r3, r2
 800927a:	d100      	bne.n	800927e <memset+0xa>
 800927c:	4770      	bx	lr
 800927e:	7019      	strb	r1, [r3, #0]
 8009280:	3301      	adds	r3, #1
 8009282:	e7f9      	b.n	8009278 <memset+0x4>

08009284 <register_fini>:
 8009284:	4b03      	ldr	r3, [pc, #12]	; (8009294 <register_fini+0x10>)
 8009286:	b510      	push	{r4, lr}
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <register_fini+0xe>
 800928c:	4802      	ldr	r0, [pc, #8]	; (8009298 <register_fini+0x14>)
 800928e:	f000 f805 	bl	800929c <atexit>
 8009292:	bd10      	pop	{r4, pc}
 8009294:	00000000 	.word	0x00000000
 8009298:	080092ad 	.word	0x080092ad

0800929c <atexit>:
 800929c:	2300      	movs	r3, #0
 800929e:	b510      	push	{r4, lr}
 80092a0:	0001      	movs	r1, r0
 80092a2:	001a      	movs	r2, r3
 80092a4:	0018      	movs	r0, r3
 80092a6:	f000 f817 	bl	80092d8 <__register_exitproc>
 80092aa:	bd10      	pop	{r4, pc}

080092ac <__libc_fini_array>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	4d07      	ldr	r5, [pc, #28]	; (80092cc <__libc_fini_array+0x20>)
 80092b0:	4c07      	ldr	r4, [pc, #28]	; (80092d0 <__libc_fini_array+0x24>)
 80092b2:	1b64      	subs	r4, r4, r5
 80092b4:	10a4      	asrs	r4, r4, #2
 80092b6:	2c00      	cmp	r4, #0
 80092b8:	d102      	bne.n	80092c0 <__libc_fini_array+0x14>
 80092ba:	f000 f855 	bl	8009368 <_fini>
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	3c01      	subs	r4, #1
 80092c2:	00a3      	lsls	r3, r4, #2
 80092c4:	58eb      	ldr	r3, [r5, r3]
 80092c6:	4798      	blx	r3
 80092c8:	e7f5      	b.n	80092b6 <__libc_fini_array+0xa>
 80092ca:	46c0      	nop			; (mov r8, r8)
 80092cc:	08009494 	.word	0x08009494
 80092d0:	08009498 	.word	0x08009498

080092d4 <__retarget_lock_acquire_recursive>:
 80092d4:	4770      	bx	lr

080092d6 <__retarget_lock_release_recursive>:
 80092d6:	4770      	bx	lr

080092d8 <__register_exitproc>:
 80092d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092da:	4f1e      	ldr	r7, [pc, #120]	; (8009354 <__register_exitproc+0x7c>)
 80092dc:	0004      	movs	r4, r0
 80092de:	6838      	ldr	r0, [r7, #0]
 80092e0:	0016      	movs	r6, r2
 80092e2:	9100      	str	r1, [sp, #0]
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	f7ff fff5 	bl	80092d4 <__retarget_lock_acquire_recursive>
 80092ea:	4b1b      	ldr	r3, [pc, #108]	; (8009358 <__register_exitproc+0x80>)
 80092ec:	6819      	ldr	r1, [r3, #0]
 80092ee:	000b      	movs	r3, r1
 80092f0:	33fc      	adds	r3, #252	; 0xfc
 80092f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092f4:	2a00      	cmp	r2, #0
 80092f6:	d103      	bne.n	8009300 <__register_exitproc+0x28>
 80092f8:	000a      	movs	r2, r1
 80092fa:	324d      	adds	r2, #77	; 0x4d
 80092fc:	32ff      	adds	r2, #255	; 0xff
 80092fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8009300:	6853      	ldr	r3, [r2, #4]
 8009302:	6838      	ldr	r0, [r7, #0]
 8009304:	2b1f      	cmp	r3, #31
 8009306:	dd04      	ble.n	8009312 <__register_exitproc+0x3a>
 8009308:	f7ff ffe5 	bl	80092d6 <__retarget_lock_release_recursive>
 800930c:	2001      	movs	r0, #1
 800930e:	4240      	negs	r0, r0
 8009310:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009312:	2c00      	cmp	r4, #0
 8009314:	d014      	beq.n	8009340 <__register_exitproc+0x68>
 8009316:	0099      	lsls	r1, r3, #2
 8009318:	1851      	adds	r1, r2, r1
 800931a:	000f      	movs	r7, r1
 800931c:	3788      	adds	r7, #136	; 0x88
 800931e:	603e      	str	r6, [r7, #0]
 8009320:	2701      	movs	r7, #1
 8009322:	0016      	movs	r6, r2
 8009324:	409f      	lsls	r7, r3
 8009326:	3685      	adds	r6, #133	; 0x85
 8009328:	36ff      	adds	r6, #255	; 0xff
 800932a:	6875      	ldr	r5, [r6, #4]
 800932c:	31fc      	adds	r1, #252	; 0xfc
 800932e:	433d      	orrs	r5, r7
 8009330:	6075      	str	r5, [r6, #4]
 8009332:	9d01      	ldr	r5, [sp, #4]
 8009334:	60cd      	str	r5, [r1, #12]
 8009336:	2c02      	cmp	r4, #2
 8009338:	d102      	bne.n	8009340 <__register_exitproc+0x68>
 800933a:	68b1      	ldr	r1, [r6, #8]
 800933c:	430f      	orrs	r7, r1
 800933e:	60b7      	str	r7, [r6, #8]
 8009340:	1c59      	adds	r1, r3, #1
 8009342:	6051      	str	r1, [r2, #4]
 8009344:	3302      	adds	r3, #2
 8009346:	9900      	ldr	r1, [sp, #0]
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	5099      	str	r1, [r3, r2]
 800934c:	f7ff ffc3 	bl	80092d6 <__retarget_lock_release_recursive>
 8009350:	2000      	movs	r0, #0
 8009352:	e7dd      	b.n	8009310 <__register_exitproc+0x38>
 8009354:	20000538 	.word	0x20000538
 8009358:	08009480 	.word	0x08009480

0800935c <_init>:
 800935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935e:	46c0      	nop			; (mov r8, r8)
 8009360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009362:	bc08      	pop	{r3}
 8009364:	469e      	mov	lr, r3
 8009366:	4770      	bx	lr

08009368 <_fini>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936e:	bc08      	pop	{r3}
 8009370:	469e      	mov	lr, r3
 8009372:	4770      	bx	lr
