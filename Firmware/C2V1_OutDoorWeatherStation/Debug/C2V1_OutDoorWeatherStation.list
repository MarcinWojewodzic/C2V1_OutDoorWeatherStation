
C2V1_OutDoorWeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000850c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080085c4  080085c4  000185c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d4  080086d4  0002053c  2**0
                  CONTENTS
  4 .ARM          00000008  080086d4  080086d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086dc  080086dc  0002053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080086dc  080086dc  000186dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086e4  080086e4  000186e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000053c  20000000  080086e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  2000053c  08008c24  0002053c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000a90  08008c24  00020a90  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002053c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bac2  00000000  00000000  00020564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000405c  00000000  00000000  0003c026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  00040088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001530  00000000  00000000  00041790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015100  00000000  00000000  00042cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006fae  00000000  00000000  00057dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0005ed6e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000053e4  00000000  00000000  0005edc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000053c 	.word	0x2000053c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080085ac 	.word	0x080085ac

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000540 	.word	0x20000540
 80000fc:	080085ac 	.word	0x080085ac

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_uldivmod>:
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d111      	bne.n	8000414 <__aeabi_uldivmod+0x28>
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	d10f      	bne.n	8000414 <__aeabi_uldivmod+0x28>
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d100      	bne.n	80003fa <__aeabi_uldivmod+0xe>
 80003f8:	2800      	cmp	r0, #0
 80003fa:	d002      	beq.n	8000402 <__aeabi_uldivmod+0x16>
 80003fc:	2100      	movs	r1, #0
 80003fe:	43c9      	mvns	r1, r1
 8000400:	0008      	movs	r0, r1
 8000402:	b407      	push	{r0, r1, r2}
 8000404:	4802      	ldr	r0, [pc, #8]	; (8000410 <__aeabi_uldivmod+0x24>)
 8000406:	a102      	add	r1, pc, #8	; (adr r1, 8000410 <__aeabi_uldivmod+0x24>)
 8000408:	1840      	adds	r0, r0, r1
 800040a:	9002      	str	r0, [sp, #8]
 800040c:	bd03      	pop	{r0, r1, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	ffffffd9 	.word	0xffffffd9
 8000414:	b403      	push	{r0, r1}
 8000416:	4668      	mov	r0, sp
 8000418:	b501      	push	{r0, lr}
 800041a:	9802      	ldr	r0, [sp, #8]
 800041c:	f000 f806 	bl	800042c <__udivmoddi4>
 8000420:	9b01      	ldr	r3, [sp, #4]
 8000422:	469e      	mov	lr, r3
 8000424:	b002      	add	sp, #8
 8000426:	bc0c      	pop	{r2, r3}
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__udivmoddi4>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	4657      	mov	r7, sl
 8000430:	464e      	mov	r6, r9
 8000432:	4645      	mov	r5, r8
 8000434:	46de      	mov	lr, fp
 8000436:	b5e0      	push	{r5, r6, r7, lr}
 8000438:	0004      	movs	r4, r0
 800043a:	000d      	movs	r5, r1
 800043c:	4692      	mov	sl, r2
 800043e:	4699      	mov	r9, r3
 8000440:	b083      	sub	sp, #12
 8000442:	428b      	cmp	r3, r1
 8000444:	d830      	bhi.n	80004a8 <__udivmoddi4+0x7c>
 8000446:	d02d      	beq.n	80004a4 <__udivmoddi4+0x78>
 8000448:	4649      	mov	r1, r9
 800044a:	4650      	mov	r0, sl
 800044c:	f001 fa7a 	bl	8001944 <__clzdi2>
 8000450:	0029      	movs	r1, r5
 8000452:	0006      	movs	r6, r0
 8000454:	0020      	movs	r0, r4
 8000456:	f001 fa75 	bl	8001944 <__clzdi2>
 800045a:	1a33      	subs	r3, r6, r0
 800045c:	4698      	mov	r8, r3
 800045e:	3b20      	subs	r3, #32
 8000460:	469b      	mov	fp, r3
 8000462:	d433      	bmi.n	80004cc <__udivmoddi4+0xa0>
 8000464:	465a      	mov	r2, fp
 8000466:	4653      	mov	r3, sl
 8000468:	4093      	lsls	r3, r2
 800046a:	4642      	mov	r2, r8
 800046c:	001f      	movs	r7, r3
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001e      	movs	r6, r3
 8000474:	42af      	cmp	r7, r5
 8000476:	d83a      	bhi.n	80004ee <__udivmoddi4+0xc2>
 8000478:	42af      	cmp	r7, r5
 800047a:	d100      	bne.n	800047e <__udivmoddi4+0x52>
 800047c:	e078      	b.n	8000570 <__udivmoddi4+0x144>
 800047e:	465b      	mov	r3, fp
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5e>
 8000488:	e075      	b.n	8000576 <__udivmoddi4+0x14a>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	465a      	mov	r2, fp
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4642      	mov	r2, r8
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e028      	b.n	80004f6 <__udivmoddi4+0xca>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9cf      	bls.n	8000448 <__udivmoddi4+0x1c>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8e>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b003      	add	sp, #12
 80004c0:	bcf0      	pop	{r4, r5, r6, r7}
 80004c2:	46bb      	mov	fp, r7
 80004c4:	46b2      	mov	sl, r6
 80004c6:	46a9      	mov	r9, r5
 80004c8:	46a0      	mov	r8, r4
 80004ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004cc:	4642      	mov	r2, r8
 80004ce:	2320      	movs	r3, #32
 80004d0:	1a9b      	subs	r3, r3, r2
 80004d2:	4652      	mov	r2, sl
 80004d4:	40da      	lsrs	r2, r3
 80004d6:	4641      	mov	r1, r8
 80004d8:	0013      	movs	r3, r2
 80004da:	464a      	mov	r2, r9
 80004dc:	408a      	lsls	r2, r1
 80004de:	0017      	movs	r7, r2
 80004e0:	4642      	mov	r2, r8
 80004e2:	431f      	orrs	r7, r3
 80004e4:	4653      	mov	r3, sl
 80004e6:	4093      	lsls	r3, r2
 80004e8:	001e      	movs	r6, r3
 80004ea:	42af      	cmp	r7, r5
 80004ec:	d9c4      	bls.n	8000478 <__udivmoddi4+0x4c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	4643      	mov	r3, r8
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0d9      	beq.n	80004b0 <__udivmoddi4+0x84>
 80004fc:	07fb      	lsls	r3, r7, #31
 80004fe:	0872      	lsrs	r2, r6, #1
 8000500:	431a      	orrs	r2, r3
 8000502:	4646      	mov	r6, r8
 8000504:	087b      	lsrs	r3, r7, #1
 8000506:	e00e      	b.n	8000526 <__udivmoddi4+0xfa>
 8000508:	42ab      	cmp	r3, r5
 800050a:	d101      	bne.n	8000510 <__udivmoddi4+0xe4>
 800050c:	42a2      	cmp	r2, r4
 800050e:	d80c      	bhi.n	800052a <__udivmoddi4+0xfe>
 8000510:	1aa4      	subs	r4, r4, r2
 8000512:	419d      	sbcs	r5, r3
 8000514:	2001      	movs	r0, #1
 8000516:	1924      	adds	r4, r4, r4
 8000518:	416d      	adcs	r5, r5
 800051a:	2100      	movs	r1, #0
 800051c:	3e01      	subs	r6, #1
 800051e:	1824      	adds	r4, r4, r0
 8000520:	414d      	adcs	r5, r1
 8000522:	2e00      	cmp	r6, #0
 8000524:	d006      	beq.n	8000534 <__udivmoddi4+0x108>
 8000526:	42ab      	cmp	r3, r5
 8000528:	d9ee      	bls.n	8000508 <__udivmoddi4+0xdc>
 800052a:	3e01      	subs	r6, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2e00      	cmp	r6, #0
 8000532:	d1f8      	bne.n	8000526 <__udivmoddi4+0xfa>
 8000534:	9800      	ldr	r0, [sp, #0]
 8000536:	9901      	ldr	r1, [sp, #4]
 8000538:	465b      	mov	r3, fp
 800053a:	1900      	adds	r0, r0, r4
 800053c:	4169      	adcs	r1, r5
 800053e:	2b00      	cmp	r3, #0
 8000540:	db24      	blt.n	800058c <__udivmoddi4+0x160>
 8000542:	002b      	movs	r3, r5
 8000544:	465a      	mov	r2, fp
 8000546:	4644      	mov	r4, r8
 8000548:	40d3      	lsrs	r3, r2
 800054a:	002a      	movs	r2, r5
 800054c:	40e2      	lsrs	r2, r4
 800054e:	001c      	movs	r4, r3
 8000550:	465b      	mov	r3, fp
 8000552:	0015      	movs	r5, r2
 8000554:	2b00      	cmp	r3, #0
 8000556:	db2a      	blt.n	80005ae <__udivmoddi4+0x182>
 8000558:	0026      	movs	r6, r4
 800055a:	409e      	lsls	r6, r3
 800055c:	0033      	movs	r3, r6
 800055e:	0026      	movs	r6, r4
 8000560:	4647      	mov	r7, r8
 8000562:	40be      	lsls	r6, r7
 8000564:	0032      	movs	r2, r6
 8000566:	1a80      	subs	r0, r0, r2
 8000568:	4199      	sbcs	r1, r3
 800056a:	9000      	str	r0, [sp, #0]
 800056c:	9101      	str	r1, [sp, #4]
 800056e:	e79f      	b.n	80004b0 <__udivmoddi4+0x84>
 8000570:	42a3      	cmp	r3, r4
 8000572:	d8bc      	bhi.n	80004ee <__udivmoddi4+0xc2>
 8000574:	e783      	b.n	800047e <__udivmoddi4+0x52>
 8000576:	4642      	mov	r2, r8
 8000578:	2320      	movs	r3, #32
 800057a:	2100      	movs	r1, #0
 800057c:	1a9b      	subs	r3, r3, r2
 800057e:	2200      	movs	r2, #0
 8000580:	9100      	str	r1, [sp, #0]
 8000582:	9201      	str	r2, [sp, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	40da      	lsrs	r2, r3
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	e786      	b.n	800049a <__udivmoddi4+0x6e>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	002a      	movs	r2, r5
 8000594:	4646      	mov	r6, r8
 8000596:	409a      	lsls	r2, r3
 8000598:	0023      	movs	r3, r4
 800059a:	40f3      	lsrs	r3, r6
 800059c:	4644      	mov	r4, r8
 800059e:	4313      	orrs	r3, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	40e2      	lsrs	r2, r4
 80005a4:	001c      	movs	r4, r3
 80005a6:	465b      	mov	r3, fp
 80005a8:	0015      	movs	r5, r2
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	dad4      	bge.n	8000558 <__udivmoddi4+0x12c>
 80005ae:	4642      	mov	r2, r8
 80005b0:	002f      	movs	r7, r5
 80005b2:	2320      	movs	r3, #32
 80005b4:	0026      	movs	r6, r4
 80005b6:	4097      	lsls	r7, r2
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	40de      	lsrs	r6, r3
 80005bc:	003b      	movs	r3, r7
 80005be:	4333      	orrs	r3, r6
 80005c0:	e7cd      	b.n	800055e <__udivmoddi4+0x132>
 80005c2:	46c0      	nop			; (mov r8, r8)

080005c4 <__aeabi_ddiv>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	4657      	mov	r7, sl
 80005c8:	464e      	mov	r6, r9
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	b5e0      	push	{r5, r6, r7, lr}
 80005d0:	4681      	mov	r9, r0
 80005d2:	0005      	movs	r5, r0
 80005d4:	030c      	lsls	r4, r1, #12
 80005d6:	0048      	lsls	r0, r1, #1
 80005d8:	4692      	mov	sl, r2
 80005da:	001f      	movs	r7, r3
 80005dc:	b085      	sub	sp, #20
 80005de:	0b24      	lsrs	r4, r4, #12
 80005e0:	0d40      	lsrs	r0, r0, #21
 80005e2:	0fce      	lsrs	r6, r1, #31
 80005e4:	2800      	cmp	r0, #0
 80005e6:	d100      	bne.n	80005ea <__aeabi_ddiv+0x26>
 80005e8:	e156      	b.n	8000898 <__aeabi_ddiv+0x2d4>
 80005ea:	4bd4      	ldr	r3, [pc, #848]	; (800093c <__aeabi_ddiv+0x378>)
 80005ec:	4298      	cmp	r0, r3
 80005ee:	d100      	bne.n	80005f2 <__aeabi_ddiv+0x2e>
 80005f0:	e172      	b.n	80008d8 <__aeabi_ddiv+0x314>
 80005f2:	0f6b      	lsrs	r3, r5, #29
 80005f4:	00e4      	lsls	r4, r4, #3
 80005f6:	431c      	orrs	r4, r3
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	041b      	lsls	r3, r3, #16
 80005fc:	4323      	orrs	r3, r4
 80005fe:	4698      	mov	r8, r3
 8000600:	4bcf      	ldr	r3, [pc, #828]	; (8000940 <__aeabi_ddiv+0x37c>)
 8000602:	00ed      	lsls	r5, r5, #3
 8000604:	469b      	mov	fp, r3
 8000606:	2300      	movs	r3, #0
 8000608:	4699      	mov	r9, r3
 800060a:	4483      	add	fp, r0
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	033c      	lsls	r4, r7, #12
 8000610:	007b      	lsls	r3, r7, #1
 8000612:	4650      	mov	r0, sl
 8000614:	0b24      	lsrs	r4, r4, #12
 8000616:	0d5b      	lsrs	r3, r3, #21
 8000618:	0fff      	lsrs	r7, r7, #31
 800061a:	2b00      	cmp	r3, #0
 800061c:	d100      	bne.n	8000620 <__aeabi_ddiv+0x5c>
 800061e:	e11f      	b.n	8000860 <__aeabi_ddiv+0x29c>
 8000620:	4ac6      	ldr	r2, [pc, #792]	; (800093c <__aeabi_ddiv+0x378>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d100      	bne.n	8000628 <__aeabi_ddiv+0x64>
 8000626:	e162      	b.n	80008ee <__aeabi_ddiv+0x32a>
 8000628:	49c5      	ldr	r1, [pc, #788]	; (8000940 <__aeabi_ddiv+0x37c>)
 800062a:	0f42      	lsrs	r2, r0, #29
 800062c:	468c      	mov	ip, r1
 800062e:	00e4      	lsls	r4, r4, #3
 8000630:	4659      	mov	r1, fp
 8000632:	4314      	orrs	r4, r2
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	4463      	add	r3, ip
 8000638:	0412      	lsls	r2, r2, #16
 800063a:	1acb      	subs	r3, r1, r3
 800063c:	4314      	orrs	r4, r2
 800063e:	469b      	mov	fp, r3
 8000640:	00c2      	lsls	r2, r0, #3
 8000642:	2000      	movs	r0, #0
 8000644:	0033      	movs	r3, r6
 8000646:	407b      	eors	r3, r7
 8000648:	469a      	mov	sl, r3
 800064a:	464b      	mov	r3, r9
 800064c:	2b0f      	cmp	r3, #15
 800064e:	d827      	bhi.n	80006a0 <__aeabi_ddiv+0xdc>
 8000650:	49bc      	ldr	r1, [pc, #752]	; (8000944 <__aeabi_ddiv+0x380>)
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	58cb      	ldr	r3, [r1, r3]
 8000656:	469f      	mov	pc, r3
 8000658:	46b2      	mov	sl, r6
 800065a:	9b00      	ldr	r3, [sp, #0]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d016      	beq.n	800068e <__aeabi_ddiv+0xca>
 8000660:	2b03      	cmp	r3, #3
 8000662:	d100      	bne.n	8000666 <__aeabi_ddiv+0xa2>
 8000664:	e28e      	b.n	8000b84 <__aeabi_ddiv+0x5c0>
 8000666:	2b01      	cmp	r3, #1
 8000668:	d000      	beq.n	800066c <__aeabi_ddiv+0xa8>
 800066a:	e0d9      	b.n	8000820 <__aeabi_ddiv+0x25c>
 800066c:	2300      	movs	r3, #0
 800066e:	2400      	movs	r4, #0
 8000670:	2500      	movs	r5, #0
 8000672:	4652      	mov	r2, sl
 8000674:	051b      	lsls	r3, r3, #20
 8000676:	4323      	orrs	r3, r4
 8000678:	07d2      	lsls	r2, r2, #31
 800067a:	4313      	orrs	r3, r2
 800067c:	0028      	movs	r0, r5
 800067e:	0019      	movs	r1, r3
 8000680:	b005      	add	sp, #20
 8000682:	bcf0      	pop	{r4, r5, r6, r7}
 8000684:	46bb      	mov	fp, r7
 8000686:	46b2      	mov	sl, r6
 8000688:	46a9      	mov	r9, r5
 800068a:	46a0      	mov	r8, r4
 800068c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800068e:	2400      	movs	r4, #0
 8000690:	2500      	movs	r5, #0
 8000692:	4baa      	ldr	r3, [pc, #680]	; (800093c <__aeabi_ddiv+0x378>)
 8000694:	e7ed      	b.n	8000672 <__aeabi_ddiv+0xae>
 8000696:	46ba      	mov	sl, r7
 8000698:	46a0      	mov	r8, r4
 800069a:	0015      	movs	r5, r2
 800069c:	9000      	str	r0, [sp, #0]
 800069e:	e7dc      	b.n	800065a <__aeabi_ddiv+0x96>
 80006a0:	4544      	cmp	r4, r8
 80006a2:	d200      	bcs.n	80006a6 <__aeabi_ddiv+0xe2>
 80006a4:	e1c7      	b.n	8000a36 <__aeabi_ddiv+0x472>
 80006a6:	d100      	bne.n	80006aa <__aeabi_ddiv+0xe6>
 80006a8:	e1c2      	b.n	8000a30 <__aeabi_ddiv+0x46c>
 80006aa:	2301      	movs	r3, #1
 80006ac:	425b      	negs	r3, r3
 80006ae:	469c      	mov	ip, r3
 80006b0:	002e      	movs	r6, r5
 80006b2:	4640      	mov	r0, r8
 80006b4:	2500      	movs	r5, #0
 80006b6:	44e3      	add	fp, ip
 80006b8:	0223      	lsls	r3, r4, #8
 80006ba:	0e14      	lsrs	r4, r2, #24
 80006bc:	431c      	orrs	r4, r3
 80006be:	0c1b      	lsrs	r3, r3, #16
 80006c0:	4699      	mov	r9, r3
 80006c2:	0423      	lsls	r3, r4, #16
 80006c4:	0c1f      	lsrs	r7, r3, #16
 80006c6:	0212      	lsls	r2, r2, #8
 80006c8:	4649      	mov	r1, r9
 80006ca:	9200      	str	r2, [sp, #0]
 80006cc:	9701      	str	r7, [sp, #4]
 80006ce:	f7ff fd9d 	bl	800020c <__aeabi_uidivmod>
 80006d2:	0002      	movs	r2, r0
 80006d4:	437a      	muls	r2, r7
 80006d6:	040b      	lsls	r3, r1, #16
 80006d8:	0c31      	lsrs	r1, r6, #16
 80006da:	4680      	mov	r8, r0
 80006dc:	4319      	orrs	r1, r3
 80006de:	428a      	cmp	r2, r1
 80006e0:	d907      	bls.n	80006f2 <__aeabi_ddiv+0x12e>
 80006e2:	2301      	movs	r3, #1
 80006e4:	425b      	negs	r3, r3
 80006e6:	469c      	mov	ip, r3
 80006e8:	1909      	adds	r1, r1, r4
 80006ea:	44e0      	add	r8, ip
 80006ec:	428c      	cmp	r4, r1
 80006ee:	d800      	bhi.n	80006f2 <__aeabi_ddiv+0x12e>
 80006f0:	e207      	b.n	8000b02 <__aeabi_ddiv+0x53e>
 80006f2:	1a88      	subs	r0, r1, r2
 80006f4:	4649      	mov	r1, r9
 80006f6:	f7ff fd89 	bl	800020c <__aeabi_uidivmod>
 80006fa:	0409      	lsls	r1, r1, #16
 80006fc:	468c      	mov	ip, r1
 80006fe:	0431      	lsls	r1, r6, #16
 8000700:	4666      	mov	r6, ip
 8000702:	9a01      	ldr	r2, [sp, #4]
 8000704:	0c09      	lsrs	r1, r1, #16
 8000706:	4342      	muls	r2, r0
 8000708:	0003      	movs	r3, r0
 800070a:	4331      	orrs	r1, r6
 800070c:	428a      	cmp	r2, r1
 800070e:	d904      	bls.n	800071a <__aeabi_ddiv+0x156>
 8000710:	1909      	adds	r1, r1, r4
 8000712:	3b01      	subs	r3, #1
 8000714:	428c      	cmp	r4, r1
 8000716:	d800      	bhi.n	800071a <__aeabi_ddiv+0x156>
 8000718:	e1ed      	b.n	8000af6 <__aeabi_ddiv+0x532>
 800071a:	1a88      	subs	r0, r1, r2
 800071c:	4642      	mov	r2, r8
 800071e:	0412      	lsls	r2, r2, #16
 8000720:	431a      	orrs	r2, r3
 8000722:	4690      	mov	r8, r2
 8000724:	4641      	mov	r1, r8
 8000726:	9b00      	ldr	r3, [sp, #0]
 8000728:	040e      	lsls	r6, r1, #16
 800072a:	0c1b      	lsrs	r3, r3, #16
 800072c:	001f      	movs	r7, r3
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	9b00      	ldr	r3, [sp, #0]
 8000732:	0c36      	lsrs	r6, r6, #16
 8000734:	041b      	lsls	r3, r3, #16
 8000736:	0c19      	lsrs	r1, r3, #16
 8000738:	000b      	movs	r3, r1
 800073a:	4373      	muls	r3, r6
 800073c:	0c12      	lsrs	r2, r2, #16
 800073e:	437e      	muls	r6, r7
 8000740:	9103      	str	r1, [sp, #12]
 8000742:	4351      	muls	r1, r2
 8000744:	437a      	muls	r2, r7
 8000746:	0c1f      	lsrs	r7, r3, #16
 8000748:	46bc      	mov	ip, r7
 800074a:	1876      	adds	r6, r6, r1
 800074c:	4466      	add	r6, ip
 800074e:	42b1      	cmp	r1, r6
 8000750:	d903      	bls.n	800075a <__aeabi_ddiv+0x196>
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	0249      	lsls	r1, r1, #9
 8000756:	468c      	mov	ip, r1
 8000758:	4462      	add	r2, ip
 800075a:	0c31      	lsrs	r1, r6, #16
 800075c:	188a      	adds	r2, r1, r2
 800075e:	0431      	lsls	r1, r6, #16
 8000760:	041e      	lsls	r6, r3, #16
 8000762:	0c36      	lsrs	r6, r6, #16
 8000764:	198e      	adds	r6, r1, r6
 8000766:	4290      	cmp	r0, r2
 8000768:	d302      	bcc.n	8000770 <__aeabi_ddiv+0x1ac>
 800076a:	d112      	bne.n	8000792 <__aeabi_ddiv+0x1ce>
 800076c:	42b5      	cmp	r5, r6
 800076e:	d210      	bcs.n	8000792 <__aeabi_ddiv+0x1ce>
 8000770:	4643      	mov	r3, r8
 8000772:	1e59      	subs	r1, r3, #1
 8000774:	9b00      	ldr	r3, [sp, #0]
 8000776:	469c      	mov	ip, r3
 8000778:	4465      	add	r5, ip
 800077a:	001f      	movs	r7, r3
 800077c:	429d      	cmp	r5, r3
 800077e:	419b      	sbcs	r3, r3
 8000780:	425b      	negs	r3, r3
 8000782:	191b      	adds	r3, r3, r4
 8000784:	18c0      	adds	r0, r0, r3
 8000786:	4284      	cmp	r4, r0
 8000788:	d200      	bcs.n	800078c <__aeabi_ddiv+0x1c8>
 800078a:	e1a0      	b.n	8000ace <__aeabi_ddiv+0x50a>
 800078c:	d100      	bne.n	8000790 <__aeabi_ddiv+0x1cc>
 800078e:	e19b      	b.n	8000ac8 <__aeabi_ddiv+0x504>
 8000790:	4688      	mov	r8, r1
 8000792:	1bae      	subs	r6, r5, r6
 8000794:	42b5      	cmp	r5, r6
 8000796:	41ad      	sbcs	r5, r5
 8000798:	1a80      	subs	r0, r0, r2
 800079a:	426d      	negs	r5, r5
 800079c:	1b40      	subs	r0, r0, r5
 800079e:	4284      	cmp	r4, r0
 80007a0:	d100      	bne.n	80007a4 <__aeabi_ddiv+0x1e0>
 80007a2:	e1d5      	b.n	8000b50 <__aeabi_ddiv+0x58c>
 80007a4:	4649      	mov	r1, r9
 80007a6:	f7ff fd31 	bl	800020c <__aeabi_uidivmod>
 80007aa:	9a01      	ldr	r2, [sp, #4]
 80007ac:	040b      	lsls	r3, r1, #16
 80007ae:	4342      	muls	r2, r0
 80007b0:	0c31      	lsrs	r1, r6, #16
 80007b2:	0005      	movs	r5, r0
 80007b4:	4319      	orrs	r1, r3
 80007b6:	428a      	cmp	r2, r1
 80007b8:	d900      	bls.n	80007bc <__aeabi_ddiv+0x1f8>
 80007ba:	e16c      	b.n	8000a96 <__aeabi_ddiv+0x4d2>
 80007bc:	1a88      	subs	r0, r1, r2
 80007be:	4649      	mov	r1, r9
 80007c0:	f7ff fd24 	bl	800020c <__aeabi_uidivmod>
 80007c4:	9a01      	ldr	r2, [sp, #4]
 80007c6:	0436      	lsls	r6, r6, #16
 80007c8:	4342      	muls	r2, r0
 80007ca:	0409      	lsls	r1, r1, #16
 80007cc:	0c36      	lsrs	r6, r6, #16
 80007ce:	0003      	movs	r3, r0
 80007d0:	430e      	orrs	r6, r1
 80007d2:	42b2      	cmp	r2, r6
 80007d4:	d900      	bls.n	80007d8 <__aeabi_ddiv+0x214>
 80007d6:	e153      	b.n	8000a80 <__aeabi_ddiv+0x4bc>
 80007d8:	9803      	ldr	r0, [sp, #12]
 80007da:	1ab6      	subs	r6, r6, r2
 80007dc:	0002      	movs	r2, r0
 80007de:	042d      	lsls	r5, r5, #16
 80007e0:	431d      	orrs	r5, r3
 80007e2:	9f02      	ldr	r7, [sp, #8]
 80007e4:	042b      	lsls	r3, r5, #16
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	435a      	muls	r2, r3
 80007ea:	437b      	muls	r3, r7
 80007ec:	469c      	mov	ip, r3
 80007ee:	0c29      	lsrs	r1, r5, #16
 80007f0:	4348      	muls	r0, r1
 80007f2:	0c13      	lsrs	r3, r2, #16
 80007f4:	4484      	add	ip, r0
 80007f6:	4463      	add	r3, ip
 80007f8:	4379      	muls	r1, r7
 80007fa:	4298      	cmp	r0, r3
 80007fc:	d903      	bls.n	8000806 <__aeabi_ddiv+0x242>
 80007fe:	2080      	movs	r0, #128	; 0x80
 8000800:	0240      	lsls	r0, r0, #9
 8000802:	4684      	mov	ip, r0
 8000804:	4461      	add	r1, ip
 8000806:	0c18      	lsrs	r0, r3, #16
 8000808:	0412      	lsls	r2, r2, #16
 800080a:	041b      	lsls	r3, r3, #16
 800080c:	0c12      	lsrs	r2, r2, #16
 800080e:	1841      	adds	r1, r0, r1
 8000810:	189b      	adds	r3, r3, r2
 8000812:	428e      	cmp	r6, r1
 8000814:	d200      	bcs.n	8000818 <__aeabi_ddiv+0x254>
 8000816:	e0ff      	b.n	8000a18 <__aeabi_ddiv+0x454>
 8000818:	d100      	bne.n	800081c <__aeabi_ddiv+0x258>
 800081a:	e0fa      	b.n	8000a12 <__aeabi_ddiv+0x44e>
 800081c:	2301      	movs	r3, #1
 800081e:	431d      	orrs	r5, r3
 8000820:	4a49      	ldr	r2, [pc, #292]	; (8000948 <__aeabi_ddiv+0x384>)
 8000822:	445a      	add	r2, fp
 8000824:	2a00      	cmp	r2, #0
 8000826:	dc00      	bgt.n	800082a <__aeabi_ddiv+0x266>
 8000828:	e0aa      	b.n	8000980 <__aeabi_ddiv+0x3bc>
 800082a:	076b      	lsls	r3, r5, #29
 800082c:	d000      	beq.n	8000830 <__aeabi_ddiv+0x26c>
 800082e:	e13d      	b.n	8000aac <__aeabi_ddiv+0x4e8>
 8000830:	08ed      	lsrs	r5, r5, #3
 8000832:	4643      	mov	r3, r8
 8000834:	01db      	lsls	r3, r3, #7
 8000836:	d506      	bpl.n	8000846 <__aeabi_ddiv+0x282>
 8000838:	4642      	mov	r2, r8
 800083a:	4b44      	ldr	r3, [pc, #272]	; (800094c <__aeabi_ddiv+0x388>)
 800083c:	401a      	ands	r2, r3
 800083e:	4690      	mov	r8, r2
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	00d2      	lsls	r2, r2, #3
 8000844:	445a      	add	r2, fp
 8000846:	4b42      	ldr	r3, [pc, #264]	; (8000950 <__aeabi_ddiv+0x38c>)
 8000848:	429a      	cmp	r2, r3
 800084a:	dd00      	ble.n	800084e <__aeabi_ddiv+0x28a>
 800084c:	e71f      	b.n	800068e <__aeabi_ddiv+0xca>
 800084e:	4643      	mov	r3, r8
 8000850:	075b      	lsls	r3, r3, #29
 8000852:	431d      	orrs	r5, r3
 8000854:	4643      	mov	r3, r8
 8000856:	0552      	lsls	r2, r2, #21
 8000858:	025c      	lsls	r4, r3, #9
 800085a:	0b24      	lsrs	r4, r4, #12
 800085c:	0d53      	lsrs	r3, r2, #21
 800085e:	e708      	b.n	8000672 <__aeabi_ddiv+0xae>
 8000860:	4652      	mov	r2, sl
 8000862:	4322      	orrs	r2, r4
 8000864:	d100      	bne.n	8000868 <__aeabi_ddiv+0x2a4>
 8000866:	e07b      	b.n	8000960 <__aeabi_ddiv+0x39c>
 8000868:	2c00      	cmp	r4, #0
 800086a:	d100      	bne.n	800086e <__aeabi_ddiv+0x2aa>
 800086c:	e0fa      	b.n	8000a64 <__aeabi_ddiv+0x4a0>
 800086e:	0020      	movs	r0, r4
 8000870:	f001 f84a 	bl	8001908 <__clzsi2>
 8000874:	0002      	movs	r2, r0
 8000876:	3a0b      	subs	r2, #11
 8000878:	231d      	movs	r3, #29
 800087a:	0001      	movs	r1, r0
 800087c:	1a9b      	subs	r3, r3, r2
 800087e:	4652      	mov	r2, sl
 8000880:	3908      	subs	r1, #8
 8000882:	40da      	lsrs	r2, r3
 8000884:	408c      	lsls	r4, r1
 8000886:	4314      	orrs	r4, r2
 8000888:	4652      	mov	r2, sl
 800088a:	408a      	lsls	r2, r1
 800088c:	4b31      	ldr	r3, [pc, #196]	; (8000954 <__aeabi_ddiv+0x390>)
 800088e:	4458      	add	r0, fp
 8000890:	469b      	mov	fp, r3
 8000892:	4483      	add	fp, r0
 8000894:	2000      	movs	r0, #0
 8000896:	e6d5      	b.n	8000644 <__aeabi_ddiv+0x80>
 8000898:	464b      	mov	r3, r9
 800089a:	4323      	orrs	r3, r4
 800089c:	4698      	mov	r8, r3
 800089e:	d044      	beq.n	800092a <__aeabi_ddiv+0x366>
 80008a0:	2c00      	cmp	r4, #0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_ddiv+0x2e2>
 80008a4:	e0ce      	b.n	8000a44 <__aeabi_ddiv+0x480>
 80008a6:	0020      	movs	r0, r4
 80008a8:	f001 f82e 	bl	8001908 <__clzsi2>
 80008ac:	0001      	movs	r1, r0
 80008ae:	0002      	movs	r2, r0
 80008b0:	390b      	subs	r1, #11
 80008b2:	231d      	movs	r3, #29
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	4649      	mov	r1, r9
 80008b8:	0010      	movs	r0, r2
 80008ba:	40d9      	lsrs	r1, r3
 80008bc:	3808      	subs	r0, #8
 80008be:	4084      	lsls	r4, r0
 80008c0:	000b      	movs	r3, r1
 80008c2:	464d      	mov	r5, r9
 80008c4:	4323      	orrs	r3, r4
 80008c6:	4698      	mov	r8, r3
 80008c8:	4085      	lsls	r5, r0
 80008ca:	4823      	ldr	r0, [pc, #140]	; (8000958 <__aeabi_ddiv+0x394>)
 80008cc:	1a83      	subs	r3, r0, r2
 80008ce:	469b      	mov	fp, r3
 80008d0:	2300      	movs	r3, #0
 80008d2:	4699      	mov	r9, r3
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	e69a      	b.n	800060e <__aeabi_ddiv+0x4a>
 80008d8:	464b      	mov	r3, r9
 80008da:	4323      	orrs	r3, r4
 80008dc:	4698      	mov	r8, r3
 80008de:	d11d      	bne.n	800091c <__aeabi_ddiv+0x358>
 80008e0:	2308      	movs	r3, #8
 80008e2:	4699      	mov	r9, r3
 80008e4:	3b06      	subs	r3, #6
 80008e6:	2500      	movs	r5, #0
 80008e8:	4683      	mov	fp, r0
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	e68f      	b.n	800060e <__aeabi_ddiv+0x4a>
 80008ee:	4652      	mov	r2, sl
 80008f0:	4322      	orrs	r2, r4
 80008f2:	d109      	bne.n	8000908 <__aeabi_ddiv+0x344>
 80008f4:	2302      	movs	r3, #2
 80008f6:	4649      	mov	r1, r9
 80008f8:	4319      	orrs	r1, r3
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <__aeabi_ddiv+0x398>)
 80008fc:	4689      	mov	r9, r1
 80008fe:	469c      	mov	ip, r3
 8000900:	2400      	movs	r4, #0
 8000902:	2002      	movs	r0, #2
 8000904:	44e3      	add	fp, ip
 8000906:	e69d      	b.n	8000644 <__aeabi_ddiv+0x80>
 8000908:	2303      	movs	r3, #3
 800090a:	464a      	mov	r2, r9
 800090c:	431a      	orrs	r2, r3
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <__aeabi_ddiv+0x398>)
 8000910:	4691      	mov	r9, r2
 8000912:	469c      	mov	ip, r3
 8000914:	4652      	mov	r2, sl
 8000916:	2003      	movs	r0, #3
 8000918:	44e3      	add	fp, ip
 800091a:	e693      	b.n	8000644 <__aeabi_ddiv+0x80>
 800091c:	230c      	movs	r3, #12
 800091e:	4699      	mov	r9, r3
 8000920:	3b09      	subs	r3, #9
 8000922:	46a0      	mov	r8, r4
 8000924:	4683      	mov	fp, r0
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	e671      	b.n	800060e <__aeabi_ddiv+0x4a>
 800092a:	2304      	movs	r3, #4
 800092c:	4699      	mov	r9, r3
 800092e:	2300      	movs	r3, #0
 8000930:	469b      	mov	fp, r3
 8000932:	3301      	adds	r3, #1
 8000934:	2500      	movs	r5, #0
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	e669      	b.n	800060e <__aeabi_ddiv+0x4a>
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	000007ff 	.word	0x000007ff
 8000940:	fffffc01 	.word	0xfffffc01
 8000944:	080085c8 	.word	0x080085c8
 8000948:	000003ff 	.word	0x000003ff
 800094c:	feffffff 	.word	0xfeffffff
 8000950:	000007fe 	.word	0x000007fe
 8000954:	000003f3 	.word	0x000003f3
 8000958:	fffffc0d 	.word	0xfffffc0d
 800095c:	fffff801 	.word	0xfffff801
 8000960:	4649      	mov	r1, r9
 8000962:	2301      	movs	r3, #1
 8000964:	4319      	orrs	r1, r3
 8000966:	4689      	mov	r9, r1
 8000968:	2400      	movs	r4, #0
 800096a:	2001      	movs	r0, #1
 800096c:	e66a      	b.n	8000644 <__aeabi_ddiv+0x80>
 800096e:	2300      	movs	r3, #0
 8000970:	2480      	movs	r4, #128	; 0x80
 8000972:	469a      	mov	sl, r3
 8000974:	2500      	movs	r5, #0
 8000976:	4b8a      	ldr	r3, [pc, #552]	; (8000ba0 <__aeabi_ddiv+0x5dc>)
 8000978:	0324      	lsls	r4, r4, #12
 800097a:	e67a      	b.n	8000672 <__aeabi_ddiv+0xae>
 800097c:	2501      	movs	r5, #1
 800097e:	426d      	negs	r5, r5
 8000980:	2301      	movs	r3, #1
 8000982:	1a9b      	subs	r3, r3, r2
 8000984:	2b38      	cmp	r3, #56	; 0x38
 8000986:	dd00      	ble.n	800098a <__aeabi_ddiv+0x3c6>
 8000988:	e670      	b.n	800066c <__aeabi_ddiv+0xa8>
 800098a:	2b1f      	cmp	r3, #31
 800098c:	dc00      	bgt.n	8000990 <__aeabi_ddiv+0x3cc>
 800098e:	e0bf      	b.n	8000b10 <__aeabi_ddiv+0x54c>
 8000990:	211f      	movs	r1, #31
 8000992:	4249      	negs	r1, r1
 8000994:	1a8a      	subs	r2, r1, r2
 8000996:	4641      	mov	r1, r8
 8000998:	40d1      	lsrs	r1, r2
 800099a:	000a      	movs	r2, r1
 800099c:	2b20      	cmp	r3, #32
 800099e:	d004      	beq.n	80009aa <__aeabi_ddiv+0x3e6>
 80009a0:	4641      	mov	r1, r8
 80009a2:	4b80      	ldr	r3, [pc, #512]	; (8000ba4 <__aeabi_ddiv+0x5e0>)
 80009a4:	445b      	add	r3, fp
 80009a6:	4099      	lsls	r1, r3
 80009a8:	430d      	orrs	r5, r1
 80009aa:	1e6b      	subs	r3, r5, #1
 80009ac:	419d      	sbcs	r5, r3
 80009ae:	2307      	movs	r3, #7
 80009b0:	432a      	orrs	r2, r5
 80009b2:	001d      	movs	r5, r3
 80009b4:	2400      	movs	r4, #0
 80009b6:	4015      	ands	r5, r2
 80009b8:	4213      	tst	r3, r2
 80009ba:	d100      	bne.n	80009be <__aeabi_ddiv+0x3fa>
 80009bc:	e0d4      	b.n	8000b68 <__aeabi_ddiv+0x5a4>
 80009be:	210f      	movs	r1, #15
 80009c0:	2300      	movs	r3, #0
 80009c2:	4011      	ands	r1, r2
 80009c4:	2904      	cmp	r1, #4
 80009c6:	d100      	bne.n	80009ca <__aeabi_ddiv+0x406>
 80009c8:	e0cb      	b.n	8000b62 <__aeabi_ddiv+0x59e>
 80009ca:	1d11      	adds	r1, r2, #4
 80009cc:	4291      	cmp	r1, r2
 80009ce:	4192      	sbcs	r2, r2
 80009d0:	4252      	negs	r2, r2
 80009d2:	189b      	adds	r3, r3, r2
 80009d4:	000a      	movs	r2, r1
 80009d6:	0219      	lsls	r1, r3, #8
 80009d8:	d400      	bmi.n	80009dc <__aeabi_ddiv+0x418>
 80009da:	e0c2      	b.n	8000b62 <__aeabi_ddiv+0x59e>
 80009dc:	2301      	movs	r3, #1
 80009de:	2400      	movs	r4, #0
 80009e0:	2500      	movs	r5, #0
 80009e2:	e646      	b.n	8000672 <__aeabi_ddiv+0xae>
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	4641      	mov	r1, r8
 80009e8:	031b      	lsls	r3, r3, #12
 80009ea:	4219      	tst	r1, r3
 80009ec:	d008      	beq.n	8000a00 <__aeabi_ddiv+0x43c>
 80009ee:	421c      	tst	r4, r3
 80009f0:	d106      	bne.n	8000a00 <__aeabi_ddiv+0x43c>
 80009f2:	431c      	orrs	r4, r3
 80009f4:	0324      	lsls	r4, r4, #12
 80009f6:	46ba      	mov	sl, r7
 80009f8:	0015      	movs	r5, r2
 80009fa:	4b69      	ldr	r3, [pc, #420]	; (8000ba0 <__aeabi_ddiv+0x5dc>)
 80009fc:	0b24      	lsrs	r4, r4, #12
 80009fe:	e638      	b.n	8000672 <__aeabi_ddiv+0xae>
 8000a00:	2480      	movs	r4, #128	; 0x80
 8000a02:	4643      	mov	r3, r8
 8000a04:	0324      	lsls	r4, r4, #12
 8000a06:	431c      	orrs	r4, r3
 8000a08:	0324      	lsls	r4, r4, #12
 8000a0a:	46b2      	mov	sl, r6
 8000a0c:	4b64      	ldr	r3, [pc, #400]	; (8000ba0 <__aeabi_ddiv+0x5dc>)
 8000a0e:	0b24      	lsrs	r4, r4, #12
 8000a10:	e62f      	b.n	8000672 <__aeabi_ddiv+0xae>
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d100      	bne.n	8000a18 <__aeabi_ddiv+0x454>
 8000a16:	e703      	b.n	8000820 <__aeabi_ddiv+0x25c>
 8000a18:	19a6      	adds	r6, r4, r6
 8000a1a:	1e68      	subs	r0, r5, #1
 8000a1c:	42a6      	cmp	r6, r4
 8000a1e:	d200      	bcs.n	8000a22 <__aeabi_ddiv+0x45e>
 8000a20:	e08d      	b.n	8000b3e <__aeabi_ddiv+0x57a>
 8000a22:	428e      	cmp	r6, r1
 8000a24:	d200      	bcs.n	8000a28 <__aeabi_ddiv+0x464>
 8000a26:	e0a3      	b.n	8000b70 <__aeabi_ddiv+0x5ac>
 8000a28:	d100      	bne.n	8000a2c <__aeabi_ddiv+0x468>
 8000a2a:	e0b3      	b.n	8000b94 <__aeabi_ddiv+0x5d0>
 8000a2c:	0005      	movs	r5, r0
 8000a2e:	e6f5      	b.n	800081c <__aeabi_ddiv+0x258>
 8000a30:	42aa      	cmp	r2, r5
 8000a32:	d900      	bls.n	8000a36 <__aeabi_ddiv+0x472>
 8000a34:	e639      	b.n	80006aa <__aeabi_ddiv+0xe6>
 8000a36:	4643      	mov	r3, r8
 8000a38:	07de      	lsls	r6, r3, #31
 8000a3a:	0858      	lsrs	r0, r3, #1
 8000a3c:	086b      	lsrs	r3, r5, #1
 8000a3e:	431e      	orrs	r6, r3
 8000a40:	07ed      	lsls	r5, r5, #31
 8000a42:	e639      	b.n	80006b8 <__aeabi_ddiv+0xf4>
 8000a44:	4648      	mov	r0, r9
 8000a46:	f000 ff5f 	bl	8001908 <__clzsi2>
 8000a4a:	0001      	movs	r1, r0
 8000a4c:	0002      	movs	r2, r0
 8000a4e:	3115      	adds	r1, #21
 8000a50:	3220      	adds	r2, #32
 8000a52:	291c      	cmp	r1, #28
 8000a54:	dc00      	bgt.n	8000a58 <__aeabi_ddiv+0x494>
 8000a56:	e72c      	b.n	80008b2 <__aeabi_ddiv+0x2ee>
 8000a58:	464b      	mov	r3, r9
 8000a5a:	3808      	subs	r0, #8
 8000a5c:	4083      	lsls	r3, r0
 8000a5e:	2500      	movs	r5, #0
 8000a60:	4698      	mov	r8, r3
 8000a62:	e732      	b.n	80008ca <__aeabi_ddiv+0x306>
 8000a64:	f000 ff50 	bl	8001908 <__clzsi2>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	3215      	adds	r2, #21
 8000a6e:	3020      	adds	r0, #32
 8000a70:	2a1c      	cmp	r2, #28
 8000a72:	dc00      	bgt.n	8000a76 <__aeabi_ddiv+0x4b2>
 8000a74:	e700      	b.n	8000878 <__aeabi_ddiv+0x2b4>
 8000a76:	4654      	mov	r4, sl
 8000a78:	3b08      	subs	r3, #8
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	409c      	lsls	r4, r3
 8000a7e:	e705      	b.n	800088c <__aeabi_ddiv+0x2c8>
 8000a80:	1936      	adds	r6, r6, r4
 8000a82:	3b01      	subs	r3, #1
 8000a84:	42b4      	cmp	r4, r6
 8000a86:	d900      	bls.n	8000a8a <__aeabi_ddiv+0x4c6>
 8000a88:	e6a6      	b.n	80007d8 <__aeabi_ddiv+0x214>
 8000a8a:	42b2      	cmp	r2, r6
 8000a8c:	d800      	bhi.n	8000a90 <__aeabi_ddiv+0x4cc>
 8000a8e:	e6a3      	b.n	80007d8 <__aeabi_ddiv+0x214>
 8000a90:	1e83      	subs	r3, r0, #2
 8000a92:	1936      	adds	r6, r6, r4
 8000a94:	e6a0      	b.n	80007d8 <__aeabi_ddiv+0x214>
 8000a96:	1909      	adds	r1, r1, r4
 8000a98:	3d01      	subs	r5, #1
 8000a9a:	428c      	cmp	r4, r1
 8000a9c:	d900      	bls.n	8000aa0 <__aeabi_ddiv+0x4dc>
 8000a9e:	e68d      	b.n	80007bc <__aeabi_ddiv+0x1f8>
 8000aa0:	428a      	cmp	r2, r1
 8000aa2:	d800      	bhi.n	8000aa6 <__aeabi_ddiv+0x4e2>
 8000aa4:	e68a      	b.n	80007bc <__aeabi_ddiv+0x1f8>
 8000aa6:	1e85      	subs	r5, r0, #2
 8000aa8:	1909      	adds	r1, r1, r4
 8000aaa:	e687      	b.n	80007bc <__aeabi_ddiv+0x1f8>
 8000aac:	230f      	movs	r3, #15
 8000aae:	402b      	ands	r3, r5
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_ddiv+0x4f2>
 8000ab4:	e6bc      	b.n	8000830 <__aeabi_ddiv+0x26c>
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	425b      	negs	r3, r3
 8000aba:	42ab      	cmp	r3, r5
 8000abc:	419b      	sbcs	r3, r3
 8000abe:	3504      	adds	r5, #4
 8000ac0:	425b      	negs	r3, r3
 8000ac2:	08ed      	lsrs	r5, r5, #3
 8000ac4:	4498      	add	r8, r3
 8000ac6:	e6b4      	b.n	8000832 <__aeabi_ddiv+0x26e>
 8000ac8:	42af      	cmp	r7, r5
 8000aca:	d900      	bls.n	8000ace <__aeabi_ddiv+0x50a>
 8000acc:	e660      	b.n	8000790 <__aeabi_ddiv+0x1cc>
 8000ace:	4282      	cmp	r2, r0
 8000ad0:	d804      	bhi.n	8000adc <__aeabi_ddiv+0x518>
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_ddiv+0x512>
 8000ad4:	e65c      	b.n	8000790 <__aeabi_ddiv+0x1cc>
 8000ad6:	42ae      	cmp	r6, r5
 8000ad8:	d800      	bhi.n	8000adc <__aeabi_ddiv+0x518>
 8000ada:	e659      	b.n	8000790 <__aeabi_ddiv+0x1cc>
 8000adc:	2302      	movs	r3, #2
 8000ade:	425b      	negs	r3, r3
 8000ae0:	469c      	mov	ip, r3
 8000ae2:	9b00      	ldr	r3, [sp, #0]
 8000ae4:	44e0      	add	r8, ip
 8000ae6:	469c      	mov	ip, r3
 8000ae8:	4465      	add	r5, ip
 8000aea:	429d      	cmp	r5, r3
 8000aec:	419b      	sbcs	r3, r3
 8000aee:	425b      	negs	r3, r3
 8000af0:	191b      	adds	r3, r3, r4
 8000af2:	18c0      	adds	r0, r0, r3
 8000af4:	e64d      	b.n	8000792 <__aeabi_ddiv+0x1ce>
 8000af6:	428a      	cmp	r2, r1
 8000af8:	d800      	bhi.n	8000afc <__aeabi_ddiv+0x538>
 8000afa:	e60e      	b.n	800071a <__aeabi_ddiv+0x156>
 8000afc:	1e83      	subs	r3, r0, #2
 8000afe:	1909      	adds	r1, r1, r4
 8000b00:	e60b      	b.n	800071a <__aeabi_ddiv+0x156>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	d800      	bhi.n	8000b08 <__aeabi_ddiv+0x544>
 8000b06:	e5f4      	b.n	80006f2 <__aeabi_ddiv+0x12e>
 8000b08:	1e83      	subs	r3, r0, #2
 8000b0a:	4698      	mov	r8, r3
 8000b0c:	1909      	adds	r1, r1, r4
 8000b0e:	e5f0      	b.n	80006f2 <__aeabi_ddiv+0x12e>
 8000b10:	4925      	ldr	r1, [pc, #148]	; (8000ba8 <__aeabi_ddiv+0x5e4>)
 8000b12:	0028      	movs	r0, r5
 8000b14:	4459      	add	r1, fp
 8000b16:	408d      	lsls	r5, r1
 8000b18:	4642      	mov	r2, r8
 8000b1a:	408a      	lsls	r2, r1
 8000b1c:	1e69      	subs	r1, r5, #1
 8000b1e:	418d      	sbcs	r5, r1
 8000b20:	4641      	mov	r1, r8
 8000b22:	40d8      	lsrs	r0, r3
 8000b24:	40d9      	lsrs	r1, r3
 8000b26:	4302      	orrs	r2, r0
 8000b28:	432a      	orrs	r2, r5
 8000b2a:	000b      	movs	r3, r1
 8000b2c:	0751      	lsls	r1, r2, #29
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_ddiv+0x56e>
 8000b30:	e751      	b.n	80009d6 <__aeabi_ddiv+0x412>
 8000b32:	210f      	movs	r1, #15
 8000b34:	4011      	ands	r1, r2
 8000b36:	2904      	cmp	r1, #4
 8000b38:	d000      	beq.n	8000b3c <__aeabi_ddiv+0x578>
 8000b3a:	e746      	b.n	80009ca <__aeabi_ddiv+0x406>
 8000b3c:	e74b      	b.n	80009d6 <__aeabi_ddiv+0x412>
 8000b3e:	0005      	movs	r5, r0
 8000b40:	428e      	cmp	r6, r1
 8000b42:	d000      	beq.n	8000b46 <__aeabi_ddiv+0x582>
 8000b44:	e66a      	b.n	800081c <__aeabi_ddiv+0x258>
 8000b46:	9a00      	ldr	r2, [sp, #0]
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_ddiv+0x58a>
 8000b4c:	e666      	b.n	800081c <__aeabi_ddiv+0x258>
 8000b4e:	e667      	b.n	8000820 <__aeabi_ddiv+0x25c>
 8000b50:	4a16      	ldr	r2, [pc, #88]	; (8000bac <__aeabi_ddiv+0x5e8>)
 8000b52:	445a      	add	r2, fp
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	dc00      	bgt.n	8000b5a <__aeabi_ddiv+0x596>
 8000b58:	e710      	b.n	800097c <__aeabi_ddiv+0x3b8>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	4498      	add	r8, r3
 8000b60:	e667      	b.n	8000832 <__aeabi_ddiv+0x26e>
 8000b62:	075d      	lsls	r5, r3, #29
 8000b64:	025b      	lsls	r3, r3, #9
 8000b66:	0b1c      	lsrs	r4, r3, #12
 8000b68:	08d2      	lsrs	r2, r2, #3
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	4315      	orrs	r5, r2
 8000b6e:	e580      	b.n	8000672 <__aeabi_ddiv+0xae>
 8000b70:	9800      	ldr	r0, [sp, #0]
 8000b72:	3d02      	subs	r5, #2
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	4282      	cmp	r2, r0
 8000b78:	41bf      	sbcs	r7, r7
 8000b7a:	427f      	negs	r7, r7
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	1936      	adds	r6, r6, r4
 8000b80:	9200      	str	r2, [sp, #0]
 8000b82:	e7dd      	b.n	8000b40 <__aeabi_ddiv+0x57c>
 8000b84:	2480      	movs	r4, #128	; 0x80
 8000b86:	4643      	mov	r3, r8
 8000b88:	0324      	lsls	r4, r4, #12
 8000b8a:	431c      	orrs	r4, r3
 8000b8c:	0324      	lsls	r4, r4, #12
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__aeabi_ddiv+0x5dc>)
 8000b90:	0b24      	lsrs	r4, r4, #12
 8000b92:	e56e      	b.n	8000672 <__aeabi_ddiv+0xae>
 8000b94:	9a00      	ldr	r2, [sp, #0]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d3ea      	bcc.n	8000b70 <__aeabi_ddiv+0x5ac>
 8000b9a:	0005      	movs	r5, r0
 8000b9c:	e7d3      	b.n	8000b46 <__aeabi_ddiv+0x582>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	000007ff 	.word	0x000007ff
 8000ba4:	0000043e 	.word	0x0000043e
 8000ba8:	0000041e 	.word	0x0000041e
 8000bac:	000003ff 	.word	0x000003ff

08000bb0 <__aeabi_dmul>:
 8000bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb2:	4657      	mov	r7, sl
 8000bb4:	464e      	mov	r6, r9
 8000bb6:	4645      	mov	r5, r8
 8000bb8:	46de      	mov	lr, fp
 8000bba:	b5e0      	push	{r5, r6, r7, lr}
 8000bbc:	4698      	mov	r8, r3
 8000bbe:	030c      	lsls	r4, r1, #12
 8000bc0:	004b      	lsls	r3, r1, #1
 8000bc2:	0006      	movs	r6, r0
 8000bc4:	4692      	mov	sl, r2
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	0b24      	lsrs	r4, r4, #12
 8000bca:	0d5b      	lsrs	r3, r3, #21
 8000bcc:	0fcf      	lsrs	r7, r1, #31
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dmul+0x24>
 8000bd2:	e15c      	b.n	8000e8e <__aeabi_dmul+0x2de>
 8000bd4:	4ad9      	ldr	r2, [pc, #868]	; (8000f3c <__aeabi_dmul+0x38c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_dmul+0x2c>
 8000bda:	e175      	b.n	8000ec8 <__aeabi_dmul+0x318>
 8000bdc:	0f42      	lsrs	r2, r0, #29
 8000bde:	00e4      	lsls	r4, r4, #3
 8000be0:	4314      	orrs	r4, r2
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	0412      	lsls	r2, r2, #16
 8000be6:	4314      	orrs	r4, r2
 8000be8:	4ad5      	ldr	r2, [pc, #852]	; (8000f40 <__aeabi_dmul+0x390>)
 8000bea:	00c5      	lsls	r5, r0, #3
 8000bec:	4694      	mov	ip, r2
 8000bee:	4463      	add	r3, ip
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	4699      	mov	r9, r3
 8000bf6:	469b      	mov	fp, r3
 8000bf8:	4643      	mov	r3, r8
 8000bfa:	4642      	mov	r2, r8
 8000bfc:	031e      	lsls	r6, r3, #12
 8000bfe:	0fd2      	lsrs	r2, r2, #31
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4650      	mov	r0, sl
 8000c04:	4690      	mov	r8, r2
 8000c06:	0b36      	lsrs	r6, r6, #12
 8000c08:	0d5b      	lsrs	r3, r3, #21
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dmul+0x5e>
 8000c0c:	e120      	b.n	8000e50 <__aeabi_dmul+0x2a0>
 8000c0e:	4acb      	ldr	r2, [pc, #812]	; (8000f3c <__aeabi_dmul+0x38c>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dmul+0x66>
 8000c14:	e162      	b.n	8000edc <__aeabi_dmul+0x32c>
 8000c16:	49ca      	ldr	r1, [pc, #808]	; (8000f40 <__aeabi_dmul+0x390>)
 8000c18:	0f42      	lsrs	r2, r0, #29
 8000c1a:	468c      	mov	ip, r1
 8000c1c:	9900      	ldr	r1, [sp, #0]
 8000c1e:	4463      	add	r3, ip
 8000c20:	00f6      	lsls	r6, r6, #3
 8000c22:	468c      	mov	ip, r1
 8000c24:	4316      	orrs	r6, r2
 8000c26:	2280      	movs	r2, #128	; 0x80
 8000c28:	449c      	add	ip, r3
 8000c2a:	0412      	lsls	r2, r2, #16
 8000c2c:	4663      	mov	r3, ip
 8000c2e:	4316      	orrs	r6, r2
 8000c30:	00c2      	lsls	r2, r0, #3
 8000c32:	2000      	movs	r0, #0
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	9900      	ldr	r1, [sp, #0]
 8000c38:	4643      	mov	r3, r8
 8000c3a:	3101      	adds	r1, #1
 8000c3c:	468c      	mov	ip, r1
 8000c3e:	4649      	mov	r1, r9
 8000c40:	407b      	eors	r3, r7
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	290f      	cmp	r1, #15
 8000c46:	d826      	bhi.n	8000c96 <__aeabi_dmul+0xe6>
 8000c48:	4bbe      	ldr	r3, [pc, #760]	; (8000f44 <__aeabi_dmul+0x394>)
 8000c4a:	0089      	lsls	r1, r1, #2
 8000c4c:	5859      	ldr	r1, [r3, r1]
 8000c4e:	468f      	mov	pc, r1
 8000c50:	4643      	mov	r3, r8
 8000c52:	9301      	str	r3, [sp, #4]
 8000c54:	0034      	movs	r4, r6
 8000c56:	0015      	movs	r5, r2
 8000c58:	4683      	mov	fp, r0
 8000c5a:	465b      	mov	r3, fp
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d016      	beq.n	8000c8e <__aeabi_dmul+0xde>
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dmul+0xb6>
 8000c64:	e203      	b.n	800106e <__aeabi_dmul+0x4be>
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d000      	beq.n	8000c6c <__aeabi_dmul+0xbc>
 8000c6a:	e0cd      	b.n	8000e08 <__aeabi_dmul+0x258>
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2400      	movs	r4, #0
 8000c70:	2500      	movs	r5, #0
 8000c72:	9b01      	ldr	r3, [sp, #4]
 8000c74:	0512      	lsls	r2, r2, #20
 8000c76:	4322      	orrs	r2, r4
 8000c78:	07db      	lsls	r3, r3, #31
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	0028      	movs	r0, r5
 8000c7e:	0011      	movs	r1, r2
 8000c80:	b007      	add	sp, #28
 8000c82:	bcf0      	pop	{r4, r5, r6, r7}
 8000c84:	46bb      	mov	fp, r7
 8000c86:	46b2      	mov	sl, r6
 8000c88:	46a9      	mov	r9, r5
 8000c8a:	46a0      	mov	r8, r4
 8000c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c8e:	2400      	movs	r4, #0
 8000c90:	2500      	movs	r5, #0
 8000c92:	4aaa      	ldr	r2, [pc, #680]	; (8000f3c <__aeabi_dmul+0x38c>)
 8000c94:	e7ed      	b.n	8000c72 <__aeabi_dmul+0xc2>
 8000c96:	0c28      	lsrs	r0, r5, #16
 8000c98:	042d      	lsls	r5, r5, #16
 8000c9a:	0c2d      	lsrs	r5, r5, #16
 8000c9c:	002b      	movs	r3, r5
 8000c9e:	0c11      	lsrs	r1, r2, #16
 8000ca0:	0412      	lsls	r2, r2, #16
 8000ca2:	0c12      	lsrs	r2, r2, #16
 8000ca4:	4353      	muls	r3, r2
 8000ca6:	4698      	mov	r8, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	002f      	movs	r7, r5
 8000cac:	4343      	muls	r3, r0
 8000cae:	4699      	mov	r9, r3
 8000cb0:	434f      	muls	r7, r1
 8000cb2:	444f      	add	r7, r9
 8000cb4:	46bb      	mov	fp, r7
 8000cb6:	4647      	mov	r7, r8
 8000cb8:	000b      	movs	r3, r1
 8000cba:	0c3f      	lsrs	r7, r7, #16
 8000cbc:	46ba      	mov	sl, r7
 8000cbe:	4343      	muls	r3, r0
 8000cc0:	44da      	add	sl, fp
 8000cc2:	9302      	str	r3, [sp, #8]
 8000cc4:	45d1      	cmp	r9, sl
 8000cc6:	d904      	bls.n	8000cd2 <__aeabi_dmul+0x122>
 8000cc8:	2780      	movs	r7, #128	; 0x80
 8000cca:	027f      	lsls	r7, r7, #9
 8000ccc:	46b9      	mov	r9, r7
 8000cce:	444b      	add	r3, r9
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	4653      	mov	r3, sl
 8000cd4:	0c1b      	lsrs	r3, r3, #16
 8000cd6:	469b      	mov	fp, r3
 8000cd8:	4653      	mov	r3, sl
 8000cda:	041f      	lsls	r7, r3, #16
 8000cdc:	4643      	mov	r3, r8
 8000cde:	041b      	lsls	r3, r3, #16
 8000ce0:	0c1b      	lsrs	r3, r3, #16
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	003b      	movs	r3, r7
 8000ce6:	4443      	add	r3, r8
 8000ce8:	9304      	str	r3, [sp, #16]
 8000cea:	0c33      	lsrs	r3, r6, #16
 8000cec:	0436      	lsls	r6, r6, #16
 8000cee:	0c36      	lsrs	r6, r6, #16
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	0033      	movs	r3, r6
 8000cf4:	4343      	muls	r3, r0
 8000cf6:	4699      	mov	r9, r3
 8000cf8:	4643      	mov	r3, r8
 8000cfa:	4343      	muls	r3, r0
 8000cfc:	002f      	movs	r7, r5
 8000cfe:	469a      	mov	sl, r3
 8000d00:	4643      	mov	r3, r8
 8000d02:	4377      	muls	r7, r6
 8000d04:	435d      	muls	r5, r3
 8000d06:	0c38      	lsrs	r0, r7, #16
 8000d08:	444d      	add	r5, r9
 8000d0a:	1945      	adds	r5, r0, r5
 8000d0c:	45a9      	cmp	r9, r5
 8000d0e:	d903      	bls.n	8000d18 <__aeabi_dmul+0x168>
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	025b      	lsls	r3, r3, #9
 8000d14:	4699      	mov	r9, r3
 8000d16:	44ca      	add	sl, r9
 8000d18:	043f      	lsls	r7, r7, #16
 8000d1a:	0c28      	lsrs	r0, r5, #16
 8000d1c:	0c3f      	lsrs	r7, r7, #16
 8000d1e:	042d      	lsls	r5, r5, #16
 8000d20:	19ed      	adds	r5, r5, r7
 8000d22:	0c27      	lsrs	r7, r4, #16
 8000d24:	0424      	lsls	r4, r4, #16
 8000d26:	0c24      	lsrs	r4, r4, #16
 8000d28:	0003      	movs	r3, r0
 8000d2a:	0020      	movs	r0, r4
 8000d2c:	4350      	muls	r0, r2
 8000d2e:	437a      	muls	r2, r7
 8000d30:	4691      	mov	r9, r2
 8000d32:	003a      	movs	r2, r7
 8000d34:	4453      	add	r3, sl
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	0c03      	lsrs	r3, r0, #16
 8000d3a:	469a      	mov	sl, r3
 8000d3c:	434a      	muls	r2, r1
 8000d3e:	4361      	muls	r1, r4
 8000d40:	4449      	add	r1, r9
 8000d42:	4451      	add	r1, sl
 8000d44:	44ab      	add	fp, r5
 8000d46:	4589      	cmp	r9, r1
 8000d48:	d903      	bls.n	8000d52 <__aeabi_dmul+0x1a2>
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	4699      	mov	r9, r3
 8000d50:	444a      	add	r2, r9
 8000d52:	0400      	lsls	r0, r0, #16
 8000d54:	0c0b      	lsrs	r3, r1, #16
 8000d56:	0c00      	lsrs	r0, r0, #16
 8000d58:	0409      	lsls	r1, r1, #16
 8000d5a:	1809      	adds	r1, r1, r0
 8000d5c:	0020      	movs	r0, r4
 8000d5e:	4699      	mov	r9, r3
 8000d60:	4643      	mov	r3, r8
 8000d62:	4370      	muls	r0, r6
 8000d64:	435c      	muls	r4, r3
 8000d66:	437e      	muls	r6, r7
 8000d68:	435f      	muls	r7, r3
 8000d6a:	0c03      	lsrs	r3, r0, #16
 8000d6c:	4698      	mov	r8, r3
 8000d6e:	19a4      	adds	r4, r4, r6
 8000d70:	4444      	add	r4, r8
 8000d72:	444a      	add	r2, r9
 8000d74:	9703      	str	r7, [sp, #12]
 8000d76:	42a6      	cmp	r6, r4
 8000d78:	d904      	bls.n	8000d84 <__aeabi_dmul+0x1d4>
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	025b      	lsls	r3, r3, #9
 8000d7e:	4698      	mov	r8, r3
 8000d80:	4447      	add	r7, r8
 8000d82:	9703      	str	r7, [sp, #12]
 8000d84:	0423      	lsls	r3, r4, #16
 8000d86:	9e02      	ldr	r6, [sp, #8]
 8000d88:	469a      	mov	sl, r3
 8000d8a:	9b05      	ldr	r3, [sp, #20]
 8000d8c:	445e      	add	r6, fp
 8000d8e:	4698      	mov	r8, r3
 8000d90:	42ae      	cmp	r6, r5
 8000d92:	41ad      	sbcs	r5, r5
 8000d94:	1876      	adds	r6, r6, r1
 8000d96:	428e      	cmp	r6, r1
 8000d98:	4189      	sbcs	r1, r1
 8000d9a:	0400      	lsls	r0, r0, #16
 8000d9c:	0c00      	lsrs	r0, r0, #16
 8000d9e:	4450      	add	r0, sl
 8000da0:	4440      	add	r0, r8
 8000da2:	426d      	negs	r5, r5
 8000da4:	1947      	adds	r7, r0, r5
 8000da6:	46b8      	mov	r8, r7
 8000da8:	4693      	mov	fp, r2
 8000daa:	4249      	negs	r1, r1
 8000dac:	4689      	mov	r9, r1
 8000dae:	44c3      	add	fp, r8
 8000db0:	44d9      	add	r9, fp
 8000db2:	4298      	cmp	r0, r3
 8000db4:	4180      	sbcs	r0, r0
 8000db6:	45a8      	cmp	r8, r5
 8000db8:	41ad      	sbcs	r5, r5
 8000dba:	4593      	cmp	fp, r2
 8000dbc:	4192      	sbcs	r2, r2
 8000dbe:	4589      	cmp	r9, r1
 8000dc0:	4189      	sbcs	r1, r1
 8000dc2:	426d      	negs	r5, r5
 8000dc4:	4240      	negs	r0, r0
 8000dc6:	4328      	orrs	r0, r5
 8000dc8:	0c24      	lsrs	r4, r4, #16
 8000dca:	4252      	negs	r2, r2
 8000dcc:	4249      	negs	r1, r1
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	9b03      	ldr	r3, [sp, #12]
 8000dd2:	1900      	adds	r0, r0, r4
 8000dd4:	1880      	adds	r0, r0, r2
 8000dd6:	18c7      	adds	r7, r0, r3
 8000dd8:	464b      	mov	r3, r9
 8000dda:	0ddc      	lsrs	r4, r3, #23
 8000ddc:	9b04      	ldr	r3, [sp, #16]
 8000dde:	0275      	lsls	r5, r6, #9
 8000de0:	431d      	orrs	r5, r3
 8000de2:	1e6a      	subs	r2, r5, #1
 8000de4:	4195      	sbcs	r5, r2
 8000de6:	464b      	mov	r3, r9
 8000de8:	0df6      	lsrs	r6, r6, #23
 8000dea:	027f      	lsls	r7, r7, #9
 8000dec:	4335      	orrs	r5, r6
 8000dee:	025a      	lsls	r2, r3, #9
 8000df0:	433c      	orrs	r4, r7
 8000df2:	4315      	orrs	r5, r2
 8000df4:	01fb      	lsls	r3, r7, #7
 8000df6:	d400      	bmi.n	8000dfa <__aeabi_dmul+0x24a>
 8000df8:	e11c      	b.n	8001034 <__aeabi_dmul+0x484>
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	086a      	lsrs	r2, r5, #1
 8000dfe:	400d      	ands	r5, r1
 8000e00:	4315      	orrs	r5, r2
 8000e02:	07e2      	lsls	r2, r4, #31
 8000e04:	4315      	orrs	r5, r2
 8000e06:	0864      	lsrs	r4, r4, #1
 8000e08:	494f      	ldr	r1, [pc, #316]	; (8000f48 <__aeabi_dmul+0x398>)
 8000e0a:	4461      	add	r1, ip
 8000e0c:	2900      	cmp	r1, #0
 8000e0e:	dc00      	bgt.n	8000e12 <__aeabi_dmul+0x262>
 8000e10:	e0b0      	b.n	8000f74 <__aeabi_dmul+0x3c4>
 8000e12:	076b      	lsls	r3, r5, #29
 8000e14:	d009      	beq.n	8000e2a <__aeabi_dmul+0x27a>
 8000e16:	220f      	movs	r2, #15
 8000e18:	402a      	ands	r2, r5
 8000e1a:	2a04      	cmp	r2, #4
 8000e1c:	d005      	beq.n	8000e2a <__aeabi_dmul+0x27a>
 8000e1e:	1d2a      	adds	r2, r5, #4
 8000e20:	42aa      	cmp	r2, r5
 8000e22:	41ad      	sbcs	r5, r5
 8000e24:	426d      	negs	r5, r5
 8000e26:	1964      	adds	r4, r4, r5
 8000e28:	0015      	movs	r5, r2
 8000e2a:	01e3      	lsls	r3, r4, #7
 8000e2c:	d504      	bpl.n	8000e38 <__aeabi_dmul+0x288>
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	4a46      	ldr	r2, [pc, #280]	; (8000f4c <__aeabi_dmul+0x39c>)
 8000e32:	00c9      	lsls	r1, r1, #3
 8000e34:	4014      	ands	r4, r2
 8000e36:	4461      	add	r1, ip
 8000e38:	4a45      	ldr	r2, [pc, #276]	; (8000f50 <__aeabi_dmul+0x3a0>)
 8000e3a:	4291      	cmp	r1, r2
 8000e3c:	dd00      	ble.n	8000e40 <__aeabi_dmul+0x290>
 8000e3e:	e726      	b.n	8000c8e <__aeabi_dmul+0xde>
 8000e40:	0762      	lsls	r2, r4, #29
 8000e42:	08ed      	lsrs	r5, r5, #3
 8000e44:	0264      	lsls	r4, r4, #9
 8000e46:	0549      	lsls	r1, r1, #21
 8000e48:	4315      	orrs	r5, r2
 8000e4a:	0b24      	lsrs	r4, r4, #12
 8000e4c:	0d4a      	lsrs	r2, r1, #21
 8000e4e:	e710      	b.n	8000c72 <__aeabi_dmul+0xc2>
 8000e50:	4652      	mov	r2, sl
 8000e52:	4332      	orrs	r2, r6
 8000e54:	d100      	bne.n	8000e58 <__aeabi_dmul+0x2a8>
 8000e56:	e07f      	b.n	8000f58 <__aeabi_dmul+0x3a8>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_dmul+0x2ae>
 8000e5c:	e0dc      	b.n	8001018 <__aeabi_dmul+0x468>
 8000e5e:	0030      	movs	r0, r6
 8000e60:	f000 fd52 	bl	8001908 <__clzsi2>
 8000e64:	0002      	movs	r2, r0
 8000e66:	3a0b      	subs	r2, #11
 8000e68:	231d      	movs	r3, #29
 8000e6a:	0001      	movs	r1, r0
 8000e6c:	1a9b      	subs	r3, r3, r2
 8000e6e:	4652      	mov	r2, sl
 8000e70:	3908      	subs	r1, #8
 8000e72:	40da      	lsrs	r2, r3
 8000e74:	408e      	lsls	r6, r1
 8000e76:	4316      	orrs	r6, r2
 8000e78:	4652      	mov	r2, sl
 8000e7a:	408a      	lsls	r2, r1
 8000e7c:	9b00      	ldr	r3, [sp, #0]
 8000e7e:	4935      	ldr	r1, [pc, #212]	; (8000f54 <__aeabi_dmul+0x3a4>)
 8000e80:	1a18      	subs	r0, r3, r0
 8000e82:	0003      	movs	r3, r0
 8000e84:	468c      	mov	ip, r1
 8000e86:	4463      	add	r3, ip
 8000e88:	2000      	movs	r0, #0
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	e6d3      	b.n	8000c36 <__aeabi_dmul+0x86>
 8000e8e:	0025      	movs	r5, r4
 8000e90:	4305      	orrs	r5, r0
 8000e92:	d04a      	beq.n	8000f2a <__aeabi_dmul+0x37a>
 8000e94:	2c00      	cmp	r4, #0
 8000e96:	d100      	bne.n	8000e9a <__aeabi_dmul+0x2ea>
 8000e98:	e0b0      	b.n	8000ffc <__aeabi_dmul+0x44c>
 8000e9a:	0020      	movs	r0, r4
 8000e9c:	f000 fd34 	bl	8001908 <__clzsi2>
 8000ea0:	0001      	movs	r1, r0
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	390b      	subs	r1, #11
 8000ea6:	231d      	movs	r3, #29
 8000ea8:	0010      	movs	r0, r2
 8000eaa:	1a5b      	subs	r3, r3, r1
 8000eac:	0031      	movs	r1, r6
 8000eae:	0035      	movs	r5, r6
 8000eb0:	3808      	subs	r0, #8
 8000eb2:	4084      	lsls	r4, r0
 8000eb4:	40d9      	lsrs	r1, r3
 8000eb6:	4085      	lsls	r5, r0
 8000eb8:	430c      	orrs	r4, r1
 8000eba:	4826      	ldr	r0, [pc, #152]	; (8000f54 <__aeabi_dmul+0x3a4>)
 8000ebc:	1a83      	subs	r3, r0, r2
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	469b      	mov	fp, r3
 8000ec6:	e697      	b.n	8000bf8 <__aeabi_dmul+0x48>
 8000ec8:	0005      	movs	r5, r0
 8000eca:	4325      	orrs	r5, r4
 8000ecc:	d126      	bne.n	8000f1c <__aeabi_dmul+0x36c>
 8000ece:	2208      	movs	r2, #8
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	2400      	movs	r4, #0
 8000ed6:	4691      	mov	r9, r2
 8000ed8:	469b      	mov	fp, r3
 8000eda:	e68d      	b.n	8000bf8 <__aeabi_dmul+0x48>
 8000edc:	4652      	mov	r2, sl
 8000ede:	9b00      	ldr	r3, [sp, #0]
 8000ee0:	4332      	orrs	r2, r6
 8000ee2:	d110      	bne.n	8000f06 <__aeabi_dmul+0x356>
 8000ee4:	4915      	ldr	r1, [pc, #84]	; (8000f3c <__aeabi_dmul+0x38c>)
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	468c      	mov	ip, r1
 8000eea:	4463      	add	r3, ip
 8000eec:	4649      	mov	r1, r9
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	4319      	orrs	r1, r3
 8000ef4:	4689      	mov	r9, r1
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	e69d      	b.n	8000c36 <__aeabi_dmul+0x86>
 8000efa:	465b      	mov	r3, fp
 8000efc:	9701      	str	r7, [sp, #4]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d000      	beq.n	8000f04 <__aeabi_dmul+0x354>
 8000f02:	e6ad      	b.n	8000c60 <__aeabi_dmul+0xb0>
 8000f04:	e6c3      	b.n	8000c8e <__aeabi_dmul+0xde>
 8000f06:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <__aeabi_dmul+0x38c>)
 8000f08:	2003      	movs	r0, #3
 8000f0a:	4694      	mov	ip, r2
 8000f0c:	4463      	add	r3, ip
 8000f0e:	464a      	mov	r2, r9
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2303      	movs	r3, #3
 8000f14:	431a      	orrs	r2, r3
 8000f16:	4691      	mov	r9, r2
 8000f18:	4652      	mov	r2, sl
 8000f1a:	e68c      	b.n	8000c36 <__aeabi_dmul+0x86>
 8000f1c:	220c      	movs	r2, #12
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2303      	movs	r3, #3
 8000f22:	0005      	movs	r5, r0
 8000f24:	4691      	mov	r9, r2
 8000f26:	469b      	mov	fp, r3
 8000f28:	e666      	b.n	8000bf8 <__aeabi_dmul+0x48>
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	4699      	mov	r9, r3
 8000f2e:	2300      	movs	r3, #0
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	2400      	movs	r4, #0
 8000f36:	469b      	mov	fp, r3
 8000f38:	e65e      	b.n	8000bf8 <__aeabi_dmul+0x48>
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	000007ff 	.word	0x000007ff
 8000f40:	fffffc01 	.word	0xfffffc01
 8000f44:	08008608 	.word	0x08008608
 8000f48:	000003ff 	.word	0x000003ff
 8000f4c:	feffffff 	.word	0xfeffffff
 8000f50:	000007fe 	.word	0x000007fe
 8000f54:	fffffc0d 	.word	0xfffffc0d
 8000f58:	4649      	mov	r1, r9
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	4319      	orrs	r1, r3
 8000f5e:	4689      	mov	r9, r1
 8000f60:	2600      	movs	r6, #0
 8000f62:	2001      	movs	r0, #1
 8000f64:	e667      	b.n	8000c36 <__aeabi_dmul+0x86>
 8000f66:	2300      	movs	r3, #0
 8000f68:	2480      	movs	r4, #128	; 0x80
 8000f6a:	2500      	movs	r5, #0
 8000f6c:	4a43      	ldr	r2, [pc, #268]	; (800107c <__aeabi_dmul+0x4cc>)
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	0324      	lsls	r4, r4, #12
 8000f72:	e67e      	b.n	8000c72 <__aeabi_dmul+0xc2>
 8000f74:	2001      	movs	r0, #1
 8000f76:	1a40      	subs	r0, r0, r1
 8000f78:	2838      	cmp	r0, #56	; 0x38
 8000f7a:	dd00      	ble.n	8000f7e <__aeabi_dmul+0x3ce>
 8000f7c:	e676      	b.n	8000c6c <__aeabi_dmul+0xbc>
 8000f7e:	281f      	cmp	r0, #31
 8000f80:	dd5b      	ble.n	800103a <__aeabi_dmul+0x48a>
 8000f82:	221f      	movs	r2, #31
 8000f84:	0023      	movs	r3, r4
 8000f86:	4252      	negs	r2, r2
 8000f88:	1a51      	subs	r1, r2, r1
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	2820      	cmp	r0, #32
 8000f90:	d003      	beq.n	8000f9a <__aeabi_dmul+0x3ea>
 8000f92:	4a3b      	ldr	r2, [pc, #236]	; (8001080 <__aeabi_dmul+0x4d0>)
 8000f94:	4462      	add	r2, ip
 8000f96:	4094      	lsls	r4, r2
 8000f98:	4325      	orrs	r5, r4
 8000f9a:	1e6a      	subs	r2, r5, #1
 8000f9c:	4195      	sbcs	r5, r2
 8000f9e:	002a      	movs	r2, r5
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	2107      	movs	r1, #7
 8000fa4:	000d      	movs	r5, r1
 8000fa6:	2400      	movs	r4, #0
 8000fa8:	4015      	ands	r5, r2
 8000faa:	4211      	tst	r1, r2
 8000fac:	d05b      	beq.n	8001066 <__aeabi_dmul+0x4b6>
 8000fae:	210f      	movs	r1, #15
 8000fb0:	2400      	movs	r4, #0
 8000fb2:	4011      	ands	r1, r2
 8000fb4:	2904      	cmp	r1, #4
 8000fb6:	d053      	beq.n	8001060 <__aeabi_dmul+0x4b0>
 8000fb8:	1d11      	adds	r1, r2, #4
 8000fba:	4291      	cmp	r1, r2
 8000fbc:	4192      	sbcs	r2, r2
 8000fbe:	4252      	negs	r2, r2
 8000fc0:	18a4      	adds	r4, r4, r2
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	0223      	lsls	r3, r4, #8
 8000fc6:	d54b      	bpl.n	8001060 <__aeabi_dmul+0x4b0>
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2400      	movs	r4, #0
 8000fcc:	2500      	movs	r5, #0
 8000fce:	e650      	b.n	8000c72 <__aeabi_dmul+0xc2>
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	031b      	lsls	r3, r3, #12
 8000fd4:	421c      	tst	r4, r3
 8000fd6:	d009      	beq.n	8000fec <__aeabi_dmul+0x43c>
 8000fd8:	421e      	tst	r6, r3
 8000fda:	d107      	bne.n	8000fec <__aeabi_dmul+0x43c>
 8000fdc:	4333      	orrs	r3, r6
 8000fde:	031c      	lsls	r4, r3, #12
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	0015      	movs	r5, r2
 8000fe4:	0b24      	lsrs	r4, r4, #12
 8000fe6:	4a25      	ldr	r2, [pc, #148]	; (800107c <__aeabi_dmul+0x4cc>)
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	e642      	b.n	8000c72 <__aeabi_dmul+0xc2>
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	0312      	lsls	r2, r2, #12
 8000ff0:	4314      	orrs	r4, r2
 8000ff2:	0324      	lsls	r4, r4, #12
 8000ff4:	4a21      	ldr	r2, [pc, #132]	; (800107c <__aeabi_dmul+0x4cc>)
 8000ff6:	0b24      	lsrs	r4, r4, #12
 8000ff8:	9701      	str	r7, [sp, #4]
 8000ffa:	e63a      	b.n	8000c72 <__aeabi_dmul+0xc2>
 8000ffc:	f000 fc84 	bl	8001908 <__clzsi2>
 8001000:	0001      	movs	r1, r0
 8001002:	0002      	movs	r2, r0
 8001004:	3115      	adds	r1, #21
 8001006:	3220      	adds	r2, #32
 8001008:	291c      	cmp	r1, #28
 800100a:	dc00      	bgt.n	800100e <__aeabi_dmul+0x45e>
 800100c:	e74b      	b.n	8000ea6 <__aeabi_dmul+0x2f6>
 800100e:	0034      	movs	r4, r6
 8001010:	3808      	subs	r0, #8
 8001012:	2500      	movs	r5, #0
 8001014:	4084      	lsls	r4, r0
 8001016:	e750      	b.n	8000eba <__aeabi_dmul+0x30a>
 8001018:	f000 fc76 	bl	8001908 <__clzsi2>
 800101c:	0003      	movs	r3, r0
 800101e:	001a      	movs	r2, r3
 8001020:	3215      	adds	r2, #21
 8001022:	3020      	adds	r0, #32
 8001024:	2a1c      	cmp	r2, #28
 8001026:	dc00      	bgt.n	800102a <__aeabi_dmul+0x47a>
 8001028:	e71e      	b.n	8000e68 <__aeabi_dmul+0x2b8>
 800102a:	4656      	mov	r6, sl
 800102c:	3b08      	subs	r3, #8
 800102e:	2200      	movs	r2, #0
 8001030:	409e      	lsls	r6, r3
 8001032:	e723      	b.n	8000e7c <__aeabi_dmul+0x2cc>
 8001034:	9b00      	ldr	r3, [sp, #0]
 8001036:	469c      	mov	ip, r3
 8001038:	e6e6      	b.n	8000e08 <__aeabi_dmul+0x258>
 800103a:	4912      	ldr	r1, [pc, #72]	; (8001084 <__aeabi_dmul+0x4d4>)
 800103c:	0022      	movs	r2, r4
 800103e:	4461      	add	r1, ip
 8001040:	002e      	movs	r6, r5
 8001042:	408d      	lsls	r5, r1
 8001044:	408a      	lsls	r2, r1
 8001046:	40c6      	lsrs	r6, r0
 8001048:	1e69      	subs	r1, r5, #1
 800104a:	418d      	sbcs	r5, r1
 800104c:	4332      	orrs	r2, r6
 800104e:	432a      	orrs	r2, r5
 8001050:	40c4      	lsrs	r4, r0
 8001052:	0753      	lsls	r3, r2, #29
 8001054:	d0b6      	beq.n	8000fc4 <__aeabi_dmul+0x414>
 8001056:	210f      	movs	r1, #15
 8001058:	4011      	ands	r1, r2
 800105a:	2904      	cmp	r1, #4
 800105c:	d1ac      	bne.n	8000fb8 <__aeabi_dmul+0x408>
 800105e:	e7b1      	b.n	8000fc4 <__aeabi_dmul+0x414>
 8001060:	0765      	lsls	r5, r4, #29
 8001062:	0264      	lsls	r4, r4, #9
 8001064:	0b24      	lsrs	r4, r4, #12
 8001066:	08d2      	lsrs	r2, r2, #3
 8001068:	4315      	orrs	r5, r2
 800106a:	2200      	movs	r2, #0
 800106c:	e601      	b.n	8000c72 <__aeabi_dmul+0xc2>
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	0312      	lsls	r2, r2, #12
 8001072:	4314      	orrs	r4, r2
 8001074:	0324      	lsls	r4, r4, #12
 8001076:	4a01      	ldr	r2, [pc, #4]	; (800107c <__aeabi_dmul+0x4cc>)
 8001078:	0b24      	lsrs	r4, r4, #12
 800107a:	e5fa      	b.n	8000c72 <__aeabi_dmul+0xc2>
 800107c:	000007ff 	.word	0x000007ff
 8001080:	0000043e 	.word	0x0000043e
 8001084:	0000041e 	.word	0x0000041e

08001088 <__aeabi_dsub>:
 8001088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108a:	4657      	mov	r7, sl
 800108c:	464e      	mov	r6, r9
 800108e:	4645      	mov	r5, r8
 8001090:	46de      	mov	lr, fp
 8001092:	b5e0      	push	{r5, r6, r7, lr}
 8001094:	001e      	movs	r6, r3
 8001096:	0017      	movs	r7, r2
 8001098:	004a      	lsls	r2, r1, #1
 800109a:	030b      	lsls	r3, r1, #12
 800109c:	0d52      	lsrs	r2, r2, #21
 800109e:	0a5b      	lsrs	r3, r3, #9
 80010a0:	4690      	mov	r8, r2
 80010a2:	0f42      	lsrs	r2, r0, #29
 80010a4:	431a      	orrs	r2, r3
 80010a6:	0fcd      	lsrs	r5, r1, #31
 80010a8:	4ccd      	ldr	r4, [pc, #820]	; (80013e0 <__aeabi_dsub+0x358>)
 80010aa:	0331      	lsls	r1, r6, #12
 80010ac:	00c3      	lsls	r3, r0, #3
 80010ae:	4694      	mov	ip, r2
 80010b0:	0070      	lsls	r0, r6, #1
 80010b2:	0f7a      	lsrs	r2, r7, #29
 80010b4:	0a49      	lsrs	r1, r1, #9
 80010b6:	00ff      	lsls	r7, r7, #3
 80010b8:	469a      	mov	sl, r3
 80010ba:	46b9      	mov	r9, r7
 80010bc:	0d40      	lsrs	r0, r0, #21
 80010be:	0ff6      	lsrs	r6, r6, #31
 80010c0:	4311      	orrs	r1, r2
 80010c2:	42a0      	cmp	r0, r4
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dsub+0x40>
 80010c6:	e0b1      	b.n	800122c <__aeabi_dsub+0x1a4>
 80010c8:	2201      	movs	r2, #1
 80010ca:	4056      	eors	r6, r2
 80010cc:	46b3      	mov	fp, r6
 80010ce:	42b5      	cmp	r5, r6
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dsub+0x4c>
 80010d2:	e088      	b.n	80011e6 <__aeabi_dsub+0x15e>
 80010d4:	4642      	mov	r2, r8
 80010d6:	1a12      	subs	r2, r2, r0
 80010d8:	2a00      	cmp	r2, #0
 80010da:	dc00      	bgt.n	80010de <__aeabi_dsub+0x56>
 80010dc:	e0ae      	b.n	800123c <__aeabi_dsub+0x1b4>
 80010de:	2800      	cmp	r0, #0
 80010e0:	d100      	bne.n	80010e4 <__aeabi_dsub+0x5c>
 80010e2:	e0c1      	b.n	8001268 <__aeabi_dsub+0x1e0>
 80010e4:	48be      	ldr	r0, [pc, #760]	; (80013e0 <__aeabi_dsub+0x358>)
 80010e6:	4580      	cmp	r8, r0
 80010e8:	d100      	bne.n	80010ec <__aeabi_dsub+0x64>
 80010ea:	e151      	b.n	8001390 <__aeabi_dsub+0x308>
 80010ec:	2080      	movs	r0, #128	; 0x80
 80010ee:	0400      	lsls	r0, r0, #16
 80010f0:	4301      	orrs	r1, r0
 80010f2:	2a38      	cmp	r2, #56	; 0x38
 80010f4:	dd00      	ble.n	80010f8 <__aeabi_dsub+0x70>
 80010f6:	e17b      	b.n	80013f0 <__aeabi_dsub+0x368>
 80010f8:	2a1f      	cmp	r2, #31
 80010fa:	dd00      	ble.n	80010fe <__aeabi_dsub+0x76>
 80010fc:	e1ee      	b.n	80014dc <__aeabi_dsub+0x454>
 80010fe:	2020      	movs	r0, #32
 8001100:	003e      	movs	r6, r7
 8001102:	1a80      	subs	r0, r0, r2
 8001104:	000c      	movs	r4, r1
 8001106:	40d6      	lsrs	r6, r2
 8001108:	40d1      	lsrs	r1, r2
 800110a:	4087      	lsls	r7, r0
 800110c:	4662      	mov	r2, ip
 800110e:	4084      	lsls	r4, r0
 8001110:	1a52      	subs	r2, r2, r1
 8001112:	1e78      	subs	r0, r7, #1
 8001114:	4187      	sbcs	r7, r0
 8001116:	4694      	mov	ip, r2
 8001118:	4334      	orrs	r4, r6
 800111a:	4327      	orrs	r7, r4
 800111c:	1bdc      	subs	r4, r3, r7
 800111e:	42a3      	cmp	r3, r4
 8001120:	419b      	sbcs	r3, r3
 8001122:	4662      	mov	r2, ip
 8001124:	425b      	negs	r3, r3
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	4699      	mov	r9, r3
 800112a:	464b      	mov	r3, r9
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	d400      	bmi.n	8001132 <__aeabi_dsub+0xaa>
 8001130:	e118      	b.n	8001364 <__aeabi_dsub+0x2dc>
 8001132:	464b      	mov	r3, r9
 8001134:	0258      	lsls	r0, r3, #9
 8001136:	0a43      	lsrs	r3, r0, #9
 8001138:	4699      	mov	r9, r3
 800113a:	464b      	mov	r3, r9
 800113c:	2b00      	cmp	r3, #0
 800113e:	d100      	bne.n	8001142 <__aeabi_dsub+0xba>
 8001140:	e137      	b.n	80013b2 <__aeabi_dsub+0x32a>
 8001142:	4648      	mov	r0, r9
 8001144:	f000 fbe0 	bl	8001908 <__clzsi2>
 8001148:	0001      	movs	r1, r0
 800114a:	3908      	subs	r1, #8
 800114c:	2320      	movs	r3, #32
 800114e:	0022      	movs	r2, r4
 8001150:	4648      	mov	r0, r9
 8001152:	1a5b      	subs	r3, r3, r1
 8001154:	40da      	lsrs	r2, r3
 8001156:	4088      	lsls	r0, r1
 8001158:	408c      	lsls	r4, r1
 800115a:	4643      	mov	r3, r8
 800115c:	4310      	orrs	r0, r2
 800115e:	4588      	cmp	r8, r1
 8001160:	dd00      	ble.n	8001164 <__aeabi_dsub+0xdc>
 8001162:	e136      	b.n	80013d2 <__aeabi_dsub+0x34a>
 8001164:	1ac9      	subs	r1, r1, r3
 8001166:	1c4b      	adds	r3, r1, #1
 8001168:	2b1f      	cmp	r3, #31
 800116a:	dd00      	ble.n	800116e <__aeabi_dsub+0xe6>
 800116c:	e0ea      	b.n	8001344 <__aeabi_dsub+0x2bc>
 800116e:	2220      	movs	r2, #32
 8001170:	0026      	movs	r6, r4
 8001172:	1ad2      	subs	r2, r2, r3
 8001174:	0001      	movs	r1, r0
 8001176:	4094      	lsls	r4, r2
 8001178:	40de      	lsrs	r6, r3
 800117a:	40d8      	lsrs	r0, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4091      	lsls	r1, r2
 8001180:	1e62      	subs	r2, r4, #1
 8001182:	4194      	sbcs	r4, r2
 8001184:	4681      	mov	r9, r0
 8001186:	4698      	mov	r8, r3
 8001188:	4331      	orrs	r1, r6
 800118a:	430c      	orrs	r4, r1
 800118c:	0763      	lsls	r3, r4, #29
 800118e:	d009      	beq.n	80011a4 <__aeabi_dsub+0x11c>
 8001190:	230f      	movs	r3, #15
 8001192:	4023      	ands	r3, r4
 8001194:	2b04      	cmp	r3, #4
 8001196:	d005      	beq.n	80011a4 <__aeabi_dsub+0x11c>
 8001198:	1d23      	adds	r3, r4, #4
 800119a:	42a3      	cmp	r3, r4
 800119c:	41a4      	sbcs	r4, r4
 800119e:	4264      	negs	r4, r4
 80011a0:	44a1      	add	r9, r4
 80011a2:	001c      	movs	r4, r3
 80011a4:	464b      	mov	r3, r9
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	d400      	bmi.n	80011ac <__aeabi_dsub+0x124>
 80011aa:	e0de      	b.n	800136a <__aeabi_dsub+0x2e2>
 80011ac:	4641      	mov	r1, r8
 80011ae:	4b8c      	ldr	r3, [pc, #560]	; (80013e0 <__aeabi_dsub+0x358>)
 80011b0:	3101      	adds	r1, #1
 80011b2:	4299      	cmp	r1, r3
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dsub+0x130>
 80011b6:	e0e7      	b.n	8001388 <__aeabi_dsub+0x300>
 80011b8:	464b      	mov	r3, r9
 80011ba:	488a      	ldr	r0, [pc, #552]	; (80013e4 <__aeabi_dsub+0x35c>)
 80011bc:	08e4      	lsrs	r4, r4, #3
 80011be:	4003      	ands	r3, r0
 80011c0:	0018      	movs	r0, r3
 80011c2:	0549      	lsls	r1, r1, #21
 80011c4:	075b      	lsls	r3, r3, #29
 80011c6:	0240      	lsls	r0, r0, #9
 80011c8:	4323      	orrs	r3, r4
 80011ca:	0d4a      	lsrs	r2, r1, #21
 80011cc:	0b04      	lsrs	r4, r0, #12
 80011ce:	0512      	lsls	r2, r2, #20
 80011d0:	07ed      	lsls	r5, r5, #31
 80011d2:	4322      	orrs	r2, r4
 80011d4:	432a      	orrs	r2, r5
 80011d6:	0018      	movs	r0, r3
 80011d8:	0011      	movs	r1, r2
 80011da:	bcf0      	pop	{r4, r5, r6, r7}
 80011dc:	46bb      	mov	fp, r7
 80011de:	46b2      	mov	sl, r6
 80011e0:	46a9      	mov	r9, r5
 80011e2:	46a0      	mov	r8, r4
 80011e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011e6:	4642      	mov	r2, r8
 80011e8:	1a12      	subs	r2, r2, r0
 80011ea:	2a00      	cmp	r2, #0
 80011ec:	dd52      	ble.n	8001294 <__aeabi_dsub+0x20c>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d100      	bne.n	80011f4 <__aeabi_dsub+0x16c>
 80011f2:	e09c      	b.n	800132e <__aeabi_dsub+0x2a6>
 80011f4:	45a0      	cmp	r8, r4
 80011f6:	d100      	bne.n	80011fa <__aeabi_dsub+0x172>
 80011f8:	e0ca      	b.n	8001390 <__aeabi_dsub+0x308>
 80011fa:	2080      	movs	r0, #128	; 0x80
 80011fc:	0400      	lsls	r0, r0, #16
 80011fe:	4301      	orrs	r1, r0
 8001200:	2a38      	cmp	r2, #56	; 0x38
 8001202:	dd00      	ble.n	8001206 <__aeabi_dsub+0x17e>
 8001204:	e149      	b.n	800149a <__aeabi_dsub+0x412>
 8001206:	2a1f      	cmp	r2, #31
 8001208:	dc00      	bgt.n	800120c <__aeabi_dsub+0x184>
 800120a:	e197      	b.n	800153c <__aeabi_dsub+0x4b4>
 800120c:	0010      	movs	r0, r2
 800120e:	000e      	movs	r6, r1
 8001210:	3820      	subs	r0, #32
 8001212:	40c6      	lsrs	r6, r0
 8001214:	2a20      	cmp	r2, #32
 8001216:	d004      	beq.n	8001222 <__aeabi_dsub+0x19a>
 8001218:	2040      	movs	r0, #64	; 0x40
 800121a:	1a82      	subs	r2, r0, r2
 800121c:	4091      	lsls	r1, r2
 800121e:	430f      	orrs	r7, r1
 8001220:	46b9      	mov	r9, r7
 8001222:	464c      	mov	r4, r9
 8001224:	1e62      	subs	r2, r4, #1
 8001226:	4194      	sbcs	r4, r2
 8001228:	4334      	orrs	r4, r6
 800122a:	e13a      	b.n	80014a2 <__aeabi_dsub+0x41a>
 800122c:	000a      	movs	r2, r1
 800122e:	433a      	orrs	r2, r7
 8001230:	d028      	beq.n	8001284 <__aeabi_dsub+0x1fc>
 8001232:	46b3      	mov	fp, r6
 8001234:	42b5      	cmp	r5, r6
 8001236:	d02b      	beq.n	8001290 <__aeabi_dsub+0x208>
 8001238:	4a6b      	ldr	r2, [pc, #428]	; (80013e8 <__aeabi_dsub+0x360>)
 800123a:	4442      	add	r2, r8
 800123c:	2a00      	cmp	r2, #0
 800123e:	d05d      	beq.n	80012fc <__aeabi_dsub+0x274>
 8001240:	4642      	mov	r2, r8
 8001242:	4644      	mov	r4, r8
 8001244:	1a82      	subs	r2, r0, r2
 8001246:	2c00      	cmp	r4, #0
 8001248:	d000      	beq.n	800124c <__aeabi_dsub+0x1c4>
 800124a:	e0f5      	b.n	8001438 <__aeabi_dsub+0x3b0>
 800124c:	4665      	mov	r5, ip
 800124e:	431d      	orrs	r5, r3
 8001250:	d100      	bne.n	8001254 <__aeabi_dsub+0x1cc>
 8001252:	e19c      	b.n	800158e <__aeabi_dsub+0x506>
 8001254:	1e55      	subs	r5, r2, #1
 8001256:	2a01      	cmp	r2, #1
 8001258:	d100      	bne.n	800125c <__aeabi_dsub+0x1d4>
 800125a:	e1fb      	b.n	8001654 <__aeabi_dsub+0x5cc>
 800125c:	4c60      	ldr	r4, [pc, #384]	; (80013e0 <__aeabi_dsub+0x358>)
 800125e:	42a2      	cmp	r2, r4
 8001260:	d100      	bne.n	8001264 <__aeabi_dsub+0x1dc>
 8001262:	e1bd      	b.n	80015e0 <__aeabi_dsub+0x558>
 8001264:	002a      	movs	r2, r5
 8001266:	e0f0      	b.n	800144a <__aeabi_dsub+0x3c2>
 8001268:	0008      	movs	r0, r1
 800126a:	4338      	orrs	r0, r7
 800126c:	d100      	bne.n	8001270 <__aeabi_dsub+0x1e8>
 800126e:	e0c3      	b.n	80013f8 <__aeabi_dsub+0x370>
 8001270:	1e50      	subs	r0, r2, #1
 8001272:	2a01      	cmp	r2, #1
 8001274:	d100      	bne.n	8001278 <__aeabi_dsub+0x1f0>
 8001276:	e1a8      	b.n	80015ca <__aeabi_dsub+0x542>
 8001278:	4c59      	ldr	r4, [pc, #356]	; (80013e0 <__aeabi_dsub+0x358>)
 800127a:	42a2      	cmp	r2, r4
 800127c:	d100      	bne.n	8001280 <__aeabi_dsub+0x1f8>
 800127e:	e087      	b.n	8001390 <__aeabi_dsub+0x308>
 8001280:	0002      	movs	r2, r0
 8001282:	e736      	b.n	80010f2 <__aeabi_dsub+0x6a>
 8001284:	2201      	movs	r2, #1
 8001286:	4056      	eors	r6, r2
 8001288:	46b3      	mov	fp, r6
 800128a:	42b5      	cmp	r5, r6
 800128c:	d000      	beq.n	8001290 <__aeabi_dsub+0x208>
 800128e:	e721      	b.n	80010d4 <__aeabi_dsub+0x4c>
 8001290:	4a55      	ldr	r2, [pc, #340]	; (80013e8 <__aeabi_dsub+0x360>)
 8001292:	4442      	add	r2, r8
 8001294:	2a00      	cmp	r2, #0
 8001296:	d100      	bne.n	800129a <__aeabi_dsub+0x212>
 8001298:	e0b5      	b.n	8001406 <__aeabi_dsub+0x37e>
 800129a:	4642      	mov	r2, r8
 800129c:	4644      	mov	r4, r8
 800129e:	1a82      	subs	r2, r0, r2
 80012a0:	2c00      	cmp	r4, #0
 80012a2:	d100      	bne.n	80012a6 <__aeabi_dsub+0x21e>
 80012a4:	e138      	b.n	8001518 <__aeabi_dsub+0x490>
 80012a6:	4e4e      	ldr	r6, [pc, #312]	; (80013e0 <__aeabi_dsub+0x358>)
 80012a8:	42b0      	cmp	r0, r6
 80012aa:	d100      	bne.n	80012ae <__aeabi_dsub+0x226>
 80012ac:	e1de      	b.n	800166c <__aeabi_dsub+0x5e4>
 80012ae:	2680      	movs	r6, #128	; 0x80
 80012b0:	4664      	mov	r4, ip
 80012b2:	0436      	lsls	r6, r6, #16
 80012b4:	4334      	orrs	r4, r6
 80012b6:	46a4      	mov	ip, r4
 80012b8:	2a38      	cmp	r2, #56	; 0x38
 80012ba:	dd00      	ble.n	80012be <__aeabi_dsub+0x236>
 80012bc:	e196      	b.n	80015ec <__aeabi_dsub+0x564>
 80012be:	2a1f      	cmp	r2, #31
 80012c0:	dd00      	ble.n	80012c4 <__aeabi_dsub+0x23c>
 80012c2:	e224      	b.n	800170e <__aeabi_dsub+0x686>
 80012c4:	2620      	movs	r6, #32
 80012c6:	1ab4      	subs	r4, r6, r2
 80012c8:	46a2      	mov	sl, r4
 80012ca:	4664      	mov	r4, ip
 80012cc:	4656      	mov	r6, sl
 80012ce:	40b4      	lsls	r4, r6
 80012d0:	46a1      	mov	r9, r4
 80012d2:	001c      	movs	r4, r3
 80012d4:	464e      	mov	r6, r9
 80012d6:	40d4      	lsrs	r4, r2
 80012d8:	4326      	orrs	r6, r4
 80012da:	0034      	movs	r4, r6
 80012dc:	4656      	mov	r6, sl
 80012de:	40b3      	lsls	r3, r6
 80012e0:	1e5e      	subs	r6, r3, #1
 80012e2:	41b3      	sbcs	r3, r6
 80012e4:	431c      	orrs	r4, r3
 80012e6:	4663      	mov	r3, ip
 80012e8:	40d3      	lsrs	r3, r2
 80012ea:	18c9      	adds	r1, r1, r3
 80012ec:	19e4      	adds	r4, r4, r7
 80012ee:	42bc      	cmp	r4, r7
 80012f0:	41bf      	sbcs	r7, r7
 80012f2:	427f      	negs	r7, r7
 80012f4:	46b9      	mov	r9, r7
 80012f6:	4680      	mov	r8, r0
 80012f8:	4489      	add	r9, r1
 80012fa:	e0d8      	b.n	80014ae <__aeabi_dsub+0x426>
 80012fc:	4640      	mov	r0, r8
 80012fe:	4c3b      	ldr	r4, [pc, #236]	; (80013ec <__aeabi_dsub+0x364>)
 8001300:	3001      	adds	r0, #1
 8001302:	4220      	tst	r0, r4
 8001304:	d000      	beq.n	8001308 <__aeabi_dsub+0x280>
 8001306:	e0b4      	b.n	8001472 <__aeabi_dsub+0x3ea>
 8001308:	4640      	mov	r0, r8
 800130a:	2800      	cmp	r0, #0
 800130c:	d000      	beq.n	8001310 <__aeabi_dsub+0x288>
 800130e:	e144      	b.n	800159a <__aeabi_dsub+0x512>
 8001310:	4660      	mov	r0, ip
 8001312:	4318      	orrs	r0, r3
 8001314:	d100      	bne.n	8001318 <__aeabi_dsub+0x290>
 8001316:	e190      	b.n	800163a <__aeabi_dsub+0x5b2>
 8001318:	0008      	movs	r0, r1
 800131a:	4338      	orrs	r0, r7
 800131c:	d000      	beq.n	8001320 <__aeabi_dsub+0x298>
 800131e:	e1aa      	b.n	8001676 <__aeabi_dsub+0x5ee>
 8001320:	4661      	mov	r1, ip
 8001322:	08db      	lsrs	r3, r3, #3
 8001324:	0749      	lsls	r1, r1, #29
 8001326:	430b      	orrs	r3, r1
 8001328:	4661      	mov	r1, ip
 800132a:	08cc      	lsrs	r4, r1, #3
 800132c:	e027      	b.n	800137e <__aeabi_dsub+0x2f6>
 800132e:	0008      	movs	r0, r1
 8001330:	4338      	orrs	r0, r7
 8001332:	d061      	beq.n	80013f8 <__aeabi_dsub+0x370>
 8001334:	1e50      	subs	r0, r2, #1
 8001336:	2a01      	cmp	r2, #1
 8001338:	d100      	bne.n	800133c <__aeabi_dsub+0x2b4>
 800133a:	e139      	b.n	80015b0 <__aeabi_dsub+0x528>
 800133c:	42a2      	cmp	r2, r4
 800133e:	d027      	beq.n	8001390 <__aeabi_dsub+0x308>
 8001340:	0002      	movs	r2, r0
 8001342:	e75d      	b.n	8001200 <__aeabi_dsub+0x178>
 8001344:	0002      	movs	r2, r0
 8001346:	391f      	subs	r1, #31
 8001348:	40ca      	lsrs	r2, r1
 800134a:	0011      	movs	r1, r2
 800134c:	2b20      	cmp	r3, #32
 800134e:	d003      	beq.n	8001358 <__aeabi_dsub+0x2d0>
 8001350:	2240      	movs	r2, #64	; 0x40
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	4098      	lsls	r0, r3
 8001356:	4304      	orrs	r4, r0
 8001358:	1e63      	subs	r3, r4, #1
 800135a:	419c      	sbcs	r4, r3
 800135c:	2300      	movs	r3, #0
 800135e:	4699      	mov	r9, r3
 8001360:	4698      	mov	r8, r3
 8001362:	430c      	orrs	r4, r1
 8001364:	0763      	lsls	r3, r4, #29
 8001366:	d000      	beq.n	800136a <__aeabi_dsub+0x2e2>
 8001368:	e712      	b.n	8001190 <__aeabi_dsub+0x108>
 800136a:	464b      	mov	r3, r9
 800136c:	464a      	mov	r2, r9
 800136e:	08e4      	lsrs	r4, r4, #3
 8001370:	075b      	lsls	r3, r3, #29
 8001372:	4323      	orrs	r3, r4
 8001374:	08d4      	lsrs	r4, r2, #3
 8001376:	4642      	mov	r2, r8
 8001378:	4919      	ldr	r1, [pc, #100]	; (80013e0 <__aeabi_dsub+0x358>)
 800137a:	428a      	cmp	r2, r1
 800137c:	d00e      	beq.n	800139c <__aeabi_dsub+0x314>
 800137e:	0324      	lsls	r4, r4, #12
 8001380:	0552      	lsls	r2, r2, #21
 8001382:	0b24      	lsrs	r4, r4, #12
 8001384:	0d52      	lsrs	r2, r2, #21
 8001386:	e722      	b.n	80011ce <__aeabi_dsub+0x146>
 8001388:	000a      	movs	r2, r1
 800138a:	2400      	movs	r4, #0
 800138c:	2300      	movs	r3, #0
 800138e:	e71e      	b.n	80011ce <__aeabi_dsub+0x146>
 8001390:	08db      	lsrs	r3, r3, #3
 8001392:	4662      	mov	r2, ip
 8001394:	0752      	lsls	r2, r2, #29
 8001396:	4313      	orrs	r3, r2
 8001398:	4662      	mov	r2, ip
 800139a:	08d4      	lsrs	r4, r2, #3
 800139c:	001a      	movs	r2, r3
 800139e:	4322      	orrs	r2, r4
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dsub+0x31c>
 80013a2:	e1fc      	b.n	800179e <__aeabi_dsub+0x716>
 80013a4:	2280      	movs	r2, #128	; 0x80
 80013a6:	0312      	lsls	r2, r2, #12
 80013a8:	4314      	orrs	r4, r2
 80013aa:	0324      	lsls	r4, r4, #12
 80013ac:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <__aeabi_dsub+0x358>)
 80013ae:	0b24      	lsrs	r4, r4, #12
 80013b0:	e70d      	b.n	80011ce <__aeabi_dsub+0x146>
 80013b2:	0020      	movs	r0, r4
 80013b4:	f000 faa8 	bl	8001908 <__clzsi2>
 80013b8:	0001      	movs	r1, r0
 80013ba:	3118      	adds	r1, #24
 80013bc:	291f      	cmp	r1, #31
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_dsub+0x33a>
 80013c0:	e6c4      	b.n	800114c <__aeabi_dsub+0xc4>
 80013c2:	3808      	subs	r0, #8
 80013c4:	4084      	lsls	r4, r0
 80013c6:	4643      	mov	r3, r8
 80013c8:	0020      	movs	r0, r4
 80013ca:	2400      	movs	r4, #0
 80013cc:	4588      	cmp	r8, r1
 80013ce:	dc00      	bgt.n	80013d2 <__aeabi_dsub+0x34a>
 80013d0:	e6c8      	b.n	8001164 <__aeabi_dsub+0xdc>
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <__aeabi_dsub+0x35c>)
 80013d4:	1a5b      	subs	r3, r3, r1
 80013d6:	4010      	ands	r0, r2
 80013d8:	4698      	mov	r8, r3
 80013da:	4681      	mov	r9, r0
 80013dc:	e6d6      	b.n	800118c <__aeabi_dsub+0x104>
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	000007ff 	.word	0x000007ff
 80013e4:	ff7fffff 	.word	0xff7fffff
 80013e8:	fffff801 	.word	0xfffff801
 80013ec:	000007fe 	.word	0x000007fe
 80013f0:	430f      	orrs	r7, r1
 80013f2:	1e7a      	subs	r2, r7, #1
 80013f4:	4197      	sbcs	r7, r2
 80013f6:	e691      	b.n	800111c <__aeabi_dsub+0x94>
 80013f8:	4661      	mov	r1, ip
 80013fa:	08db      	lsrs	r3, r3, #3
 80013fc:	0749      	lsls	r1, r1, #29
 80013fe:	430b      	orrs	r3, r1
 8001400:	4661      	mov	r1, ip
 8001402:	08cc      	lsrs	r4, r1, #3
 8001404:	e7b8      	b.n	8001378 <__aeabi_dsub+0x2f0>
 8001406:	4640      	mov	r0, r8
 8001408:	4cd3      	ldr	r4, [pc, #844]	; (8001758 <__aeabi_dsub+0x6d0>)
 800140a:	3001      	adds	r0, #1
 800140c:	4220      	tst	r0, r4
 800140e:	d000      	beq.n	8001412 <__aeabi_dsub+0x38a>
 8001410:	e0a2      	b.n	8001558 <__aeabi_dsub+0x4d0>
 8001412:	4640      	mov	r0, r8
 8001414:	2800      	cmp	r0, #0
 8001416:	d000      	beq.n	800141a <__aeabi_dsub+0x392>
 8001418:	e101      	b.n	800161e <__aeabi_dsub+0x596>
 800141a:	4660      	mov	r0, ip
 800141c:	4318      	orrs	r0, r3
 800141e:	d100      	bne.n	8001422 <__aeabi_dsub+0x39a>
 8001420:	e15e      	b.n	80016e0 <__aeabi_dsub+0x658>
 8001422:	0008      	movs	r0, r1
 8001424:	4338      	orrs	r0, r7
 8001426:	d000      	beq.n	800142a <__aeabi_dsub+0x3a2>
 8001428:	e15f      	b.n	80016ea <__aeabi_dsub+0x662>
 800142a:	4661      	mov	r1, ip
 800142c:	08db      	lsrs	r3, r3, #3
 800142e:	0749      	lsls	r1, r1, #29
 8001430:	430b      	orrs	r3, r1
 8001432:	4661      	mov	r1, ip
 8001434:	08cc      	lsrs	r4, r1, #3
 8001436:	e7a2      	b.n	800137e <__aeabi_dsub+0x2f6>
 8001438:	4dc8      	ldr	r5, [pc, #800]	; (800175c <__aeabi_dsub+0x6d4>)
 800143a:	42a8      	cmp	r0, r5
 800143c:	d100      	bne.n	8001440 <__aeabi_dsub+0x3b8>
 800143e:	e0cf      	b.n	80015e0 <__aeabi_dsub+0x558>
 8001440:	2580      	movs	r5, #128	; 0x80
 8001442:	4664      	mov	r4, ip
 8001444:	042d      	lsls	r5, r5, #16
 8001446:	432c      	orrs	r4, r5
 8001448:	46a4      	mov	ip, r4
 800144a:	2a38      	cmp	r2, #56	; 0x38
 800144c:	dc56      	bgt.n	80014fc <__aeabi_dsub+0x474>
 800144e:	2a1f      	cmp	r2, #31
 8001450:	dd00      	ble.n	8001454 <__aeabi_dsub+0x3cc>
 8001452:	e0d1      	b.n	80015f8 <__aeabi_dsub+0x570>
 8001454:	2520      	movs	r5, #32
 8001456:	001e      	movs	r6, r3
 8001458:	1aad      	subs	r5, r5, r2
 800145a:	4664      	mov	r4, ip
 800145c:	40ab      	lsls	r3, r5
 800145e:	40ac      	lsls	r4, r5
 8001460:	40d6      	lsrs	r6, r2
 8001462:	1e5d      	subs	r5, r3, #1
 8001464:	41ab      	sbcs	r3, r5
 8001466:	4334      	orrs	r4, r6
 8001468:	4323      	orrs	r3, r4
 800146a:	4664      	mov	r4, ip
 800146c:	40d4      	lsrs	r4, r2
 800146e:	1b09      	subs	r1, r1, r4
 8001470:	e049      	b.n	8001506 <__aeabi_dsub+0x47e>
 8001472:	4660      	mov	r0, ip
 8001474:	1bdc      	subs	r4, r3, r7
 8001476:	1a46      	subs	r6, r0, r1
 8001478:	42a3      	cmp	r3, r4
 800147a:	4180      	sbcs	r0, r0
 800147c:	4240      	negs	r0, r0
 800147e:	4681      	mov	r9, r0
 8001480:	0030      	movs	r0, r6
 8001482:	464e      	mov	r6, r9
 8001484:	1b80      	subs	r0, r0, r6
 8001486:	4681      	mov	r9, r0
 8001488:	0200      	lsls	r0, r0, #8
 800148a:	d476      	bmi.n	800157a <__aeabi_dsub+0x4f2>
 800148c:	464b      	mov	r3, r9
 800148e:	4323      	orrs	r3, r4
 8001490:	d000      	beq.n	8001494 <__aeabi_dsub+0x40c>
 8001492:	e652      	b.n	800113a <__aeabi_dsub+0xb2>
 8001494:	2400      	movs	r4, #0
 8001496:	2500      	movs	r5, #0
 8001498:	e771      	b.n	800137e <__aeabi_dsub+0x2f6>
 800149a:	4339      	orrs	r1, r7
 800149c:	000c      	movs	r4, r1
 800149e:	1e62      	subs	r2, r4, #1
 80014a0:	4194      	sbcs	r4, r2
 80014a2:	18e4      	adds	r4, r4, r3
 80014a4:	429c      	cmp	r4, r3
 80014a6:	419b      	sbcs	r3, r3
 80014a8:	425b      	negs	r3, r3
 80014aa:	4463      	add	r3, ip
 80014ac:	4699      	mov	r9, r3
 80014ae:	464b      	mov	r3, r9
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	d400      	bmi.n	80014b6 <__aeabi_dsub+0x42e>
 80014b4:	e756      	b.n	8001364 <__aeabi_dsub+0x2dc>
 80014b6:	2301      	movs	r3, #1
 80014b8:	469c      	mov	ip, r3
 80014ba:	4ba8      	ldr	r3, [pc, #672]	; (800175c <__aeabi_dsub+0x6d4>)
 80014bc:	44e0      	add	r8, ip
 80014be:	4598      	cmp	r8, r3
 80014c0:	d038      	beq.n	8001534 <__aeabi_dsub+0x4ac>
 80014c2:	464b      	mov	r3, r9
 80014c4:	48a6      	ldr	r0, [pc, #664]	; (8001760 <__aeabi_dsub+0x6d8>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	4003      	ands	r3, r0
 80014ca:	0018      	movs	r0, r3
 80014cc:	0863      	lsrs	r3, r4, #1
 80014ce:	4014      	ands	r4, r2
 80014d0:	431c      	orrs	r4, r3
 80014d2:	07c3      	lsls	r3, r0, #31
 80014d4:	431c      	orrs	r4, r3
 80014d6:	0843      	lsrs	r3, r0, #1
 80014d8:	4699      	mov	r9, r3
 80014da:	e657      	b.n	800118c <__aeabi_dsub+0x104>
 80014dc:	0010      	movs	r0, r2
 80014de:	000e      	movs	r6, r1
 80014e0:	3820      	subs	r0, #32
 80014e2:	40c6      	lsrs	r6, r0
 80014e4:	2a20      	cmp	r2, #32
 80014e6:	d004      	beq.n	80014f2 <__aeabi_dsub+0x46a>
 80014e8:	2040      	movs	r0, #64	; 0x40
 80014ea:	1a82      	subs	r2, r0, r2
 80014ec:	4091      	lsls	r1, r2
 80014ee:	430f      	orrs	r7, r1
 80014f0:	46b9      	mov	r9, r7
 80014f2:	464f      	mov	r7, r9
 80014f4:	1e7a      	subs	r2, r7, #1
 80014f6:	4197      	sbcs	r7, r2
 80014f8:	4337      	orrs	r7, r6
 80014fa:	e60f      	b.n	800111c <__aeabi_dsub+0x94>
 80014fc:	4662      	mov	r2, ip
 80014fe:	431a      	orrs	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	1e5a      	subs	r2, r3, #1
 8001504:	4193      	sbcs	r3, r2
 8001506:	1afc      	subs	r4, r7, r3
 8001508:	42a7      	cmp	r7, r4
 800150a:	41bf      	sbcs	r7, r7
 800150c:	427f      	negs	r7, r7
 800150e:	1bcb      	subs	r3, r1, r7
 8001510:	4699      	mov	r9, r3
 8001512:	465d      	mov	r5, fp
 8001514:	4680      	mov	r8, r0
 8001516:	e608      	b.n	800112a <__aeabi_dsub+0xa2>
 8001518:	4666      	mov	r6, ip
 800151a:	431e      	orrs	r6, r3
 800151c:	d100      	bne.n	8001520 <__aeabi_dsub+0x498>
 800151e:	e0be      	b.n	800169e <__aeabi_dsub+0x616>
 8001520:	1e56      	subs	r6, r2, #1
 8001522:	2a01      	cmp	r2, #1
 8001524:	d100      	bne.n	8001528 <__aeabi_dsub+0x4a0>
 8001526:	e109      	b.n	800173c <__aeabi_dsub+0x6b4>
 8001528:	4c8c      	ldr	r4, [pc, #560]	; (800175c <__aeabi_dsub+0x6d4>)
 800152a:	42a2      	cmp	r2, r4
 800152c:	d100      	bne.n	8001530 <__aeabi_dsub+0x4a8>
 800152e:	e119      	b.n	8001764 <__aeabi_dsub+0x6dc>
 8001530:	0032      	movs	r2, r6
 8001532:	e6c1      	b.n	80012b8 <__aeabi_dsub+0x230>
 8001534:	4642      	mov	r2, r8
 8001536:	2400      	movs	r4, #0
 8001538:	2300      	movs	r3, #0
 800153a:	e648      	b.n	80011ce <__aeabi_dsub+0x146>
 800153c:	2020      	movs	r0, #32
 800153e:	000c      	movs	r4, r1
 8001540:	1a80      	subs	r0, r0, r2
 8001542:	003e      	movs	r6, r7
 8001544:	4087      	lsls	r7, r0
 8001546:	4084      	lsls	r4, r0
 8001548:	40d6      	lsrs	r6, r2
 800154a:	1e78      	subs	r0, r7, #1
 800154c:	4187      	sbcs	r7, r0
 800154e:	40d1      	lsrs	r1, r2
 8001550:	4334      	orrs	r4, r6
 8001552:	433c      	orrs	r4, r7
 8001554:	448c      	add	ip, r1
 8001556:	e7a4      	b.n	80014a2 <__aeabi_dsub+0x41a>
 8001558:	4a80      	ldr	r2, [pc, #512]	; (800175c <__aeabi_dsub+0x6d4>)
 800155a:	4290      	cmp	r0, r2
 800155c:	d100      	bne.n	8001560 <__aeabi_dsub+0x4d8>
 800155e:	e0e9      	b.n	8001734 <__aeabi_dsub+0x6ac>
 8001560:	19df      	adds	r7, r3, r7
 8001562:	429f      	cmp	r7, r3
 8001564:	419b      	sbcs	r3, r3
 8001566:	4461      	add	r1, ip
 8001568:	425b      	negs	r3, r3
 800156a:	18c9      	adds	r1, r1, r3
 800156c:	07cc      	lsls	r4, r1, #31
 800156e:	087f      	lsrs	r7, r7, #1
 8001570:	084b      	lsrs	r3, r1, #1
 8001572:	4699      	mov	r9, r3
 8001574:	4680      	mov	r8, r0
 8001576:	433c      	orrs	r4, r7
 8001578:	e6f4      	b.n	8001364 <__aeabi_dsub+0x2dc>
 800157a:	1afc      	subs	r4, r7, r3
 800157c:	42a7      	cmp	r7, r4
 800157e:	41bf      	sbcs	r7, r7
 8001580:	4663      	mov	r3, ip
 8001582:	427f      	negs	r7, r7
 8001584:	1ac9      	subs	r1, r1, r3
 8001586:	1bcb      	subs	r3, r1, r7
 8001588:	4699      	mov	r9, r3
 800158a:	465d      	mov	r5, fp
 800158c:	e5d5      	b.n	800113a <__aeabi_dsub+0xb2>
 800158e:	08ff      	lsrs	r7, r7, #3
 8001590:	074b      	lsls	r3, r1, #29
 8001592:	465d      	mov	r5, fp
 8001594:	433b      	orrs	r3, r7
 8001596:	08cc      	lsrs	r4, r1, #3
 8001598:	e6ee      	b.n	8001378 <__aeabi_dsub+0x2f0>
 800159a:	4662      	mov	r2, ip
 800159c:	431a      	orrs	r2, r3
 800159e:	d000      	beq.n	80015a2 <__aeabi_dsub+0x51a>
 80015a0:	e082      	b.n	80016a8 <__aeabi_dsub+0x620>
 80015a2:	000b      	movs	r3, r1
 80015a4:	433b      	orrs	r3, r7
 80015a6:	d11b      	bne.n	80015e0 <__aeabi_dsub+0x558>
 80015a8:	2480      	movs	r4, #128	; 0x80
 80015aa:	2500      	movs	r5, #0
 80015ac:	0324      	lsls	r4, r4, #12
 80015ae:	e6f9      	b.n	80013a4 <__aeabi_dsub+0x31c>
 80015b0:	19dc      	adds	r4, r3, r7
 80015b2:	429c      	cmp	r4, r3
 80015b4:	419b      	sbcs	r3, r3
 80015b6:	4461      	add	r1, ip
 80015b8:	4689      	mov	r9, r1
 80015ba:	425b      	negs	r3, r3
 80015bc:	4499      	add	r9, r3
 80015be:	464b      	mov	r3, r9
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	d444      	bmi.n	800164e <__aeabi_dsub+0x5c6>
 80015c4:	2301      	movs	r3, #1
 80015c6:	4698      	mov	r8, r3
 80015c8:	e6cc      	b.n	8001364 <__aeabi_dsub+0x2dc>
 80015ca:	1bdc      	subs	r4, r3, r7
 80015cc:	4662      	mov	r2, ip
 80015ce:	42a3      	cmp	r3, r4
 80015d0:	419b      	sbcs	r3, r3
 80015d2:	1a51      	subs	r1, r2, r1
 80015d4:	425b      	negs	r3, r3
 80015d6:	1acb      	subs	r3, r1, r3
 80015d8:	4699      	mov	r9, r3
 80015da:	2301      	movs	r3, #1
 80015dc:	4698      	mov	r8, r3
 80015de:	e5a4      	b.n	800112a <__aeabi_dsub+0xa2>
 80015e0:	08ff      	lsrs	r7, r7, #3
 80015e2:	074b      	lsls	r3, r1, #29
 80015e4:	465d      	mov	r5, fp
 80015e6:	433b      	orrs	r3, r7
 80015e8:	08cc      	lsrs	r4, r1, #3
 80015ea:	e6d7      	b.n	800139c <__aeabi_dsub+0x314>
 80015ec:	4662      	mov	r2, ip
 80015ee:	431a      	orrs	r2, r3
 80015f0:	0014      	movs	r4, r2
 80015f2:	1e63      	subs	r3, r4, #1
 80015f4:	419c      	sbcs	r4, r3
 80015f6:	e679      	b.n	80012ec <__aeabi_dsub+0x264>
 80015f8:	0015      	movs	r5, r2
 80015fa:	4664      	mov	r4, ip
 80015fc:	3d20      	subs	r5, #32
 80015fe:	40ec      	lsrs	r4, r5
 8001600:	46a0      	mov	r8, r4
 8001602:	2a20      	cmp	r2, #32
 8001604:	d005      	beq.n	8001612 <__aeabi_dsub+0x58a>
 8001606:	2540      	movs	r5, #64	; 0x40
 8001608:	4664      	mov	r4, ip
 800160a:	1aaa      	subs	r2, r5, r2
 800160c:	4094      	lsls	r4, r2
 800160e:	4323      	orrs	r3, r4
 8001610:	469a      	mov	sl, r3
 8001612:	4654      	mov	r4, sl
 8001614:	1e63      	subs	r3, r4, #1
 8001616:	419c      	sbcs	r4, r3
 8001618:	4643      	mov	r3, r8
 800161a:	4323      	orrs	r3, r4
 800161c:	e773      	b.n	8001506 <__aeabi_dsub+0x47e>
 800161e:	4662      	mov	r2, ip
 8001620:	431a      	orrs	r2, r3
 8001622:	d023      	beq.n	800166c <__aeabi_dsub+0x5e4>
 8001624:	000a      	movs	r2, r1
 8001626:	433a      	orrs	r2, r7
 8001628:	d000      	beq.n	800162c <__aeabi_dsub+0x5a4>
 800162a:	e0a0      	b.n	800176e <__aeabi_dsub+0x6e6>
 800162c:	4662      	mov	r2, ip
 800162e:	08db      	lsrs	r3, r3, #3
 8001630:	0752      	lsls	r2, r2, #29
 8001632:	4313      	orrs	r3, r2
 8001634:	4662      	mov	r2, ip
 8001636:	08d4      	lsrs	r4, r2, #3
 8001638:	e6b0      	b.n	800139c <__aeabi_dsub+0x314>
 800163a:	000b      	movs	r3, r1
 800163c:	433b      	orrs	r3, r7
 800163e:	d100      	bne.n	8001642 <__aeabi_dsub+0x5ba>
 8001640:	e728      	b.n	8001494 <__aeabi_dsub+0x40c>
 8001642:	08ff      	lsrs	r7, r7, #3
 8001644:	074b      	lsls	r3, r1, #29
 8001646:	465d      	mov	r5, fp
 8001648:	433b      	orrs	r3, r7
 800164a:	08cc      	lsrs	r4, r1, #3
 800164c:	e697      	b.n	800137e <__aeabi_dsub+0x2f6>
 800164e:	2302      	movs	r3, #2
 8001650:	4698      	mov	r8, r3
 8001652:	e736      	b.n	80014c2 <__aeabi_dsub+0x43a>
 8001654:	1afc      	subs	r4, r7, r3
 8001656:	42a7      	cmp	r7, r4
 8001658:	41bf      	sbcs	r7, r7
 800165a:	4663      	mov	r3, ip
 800165c:	427f      	negs	r7, r7
 800165e:	1ac9      	subs	r1, r1, r3
 8001660:	1bcb      	subs	r3, r1, r7
 8001662:	4699      	mov	r9, r3
 8001664:	2301      	movs	r3, #1
 8001666:	465d      	mov	r5, fp
 8001668:	4698      	mov	r8, r3
 800166a:	e55e      	b.n	800112a <__aeabi_dsub+0xa2>
 800166c:	074b      	lsls	r3, r1, #29
 800166e:	08ff      	lsrs	r7, r7, #3
 8001670:	433b      	orrs	r3, r7
 8001672:	08cc      	lsrs	r4, r1, #3
 8001674:	e692      	b.n	800139c <__aeabi_dsub+0x314>
 8001676:	1bdc      	subs	r4, r3, r7
 8001678:	4660      	mov	r0, ip
 800167a:	42a3      	cmp	r3, r4
 800167c:	41b6      	sbcs	r6, r6
 800167e:	1a40      	subs	r0, r0, r1
 8001680:	4276      	negs	r6, r6
 8001682:	1b80      	subs	r0, r0, r6
 8001684:	4681      	mov	r9, r0
 8001686:	0200      	lsls	r0, r0, #8
 8001688:	d560      	bpl.n	800174c <__aeabi_dsub+0x6c4>
 800168a:	1afc      	subs	r4, r7, r3
 800168c:	42a7      	cmp	r7, r4
 800168e:	41bf      	sbcs	r7, r7
 8001690:	4663      	mov	r3, ip
 8001692:	427f      	negs	r7, r7
 8001694:	1ac9      	subs	r1, r1, r3
 8001696:	1bcb      	subs	r3, r1, r7
 8001698:	4699      	mov	r9, r3
 800169a:	465d      	mov	r5, fp
 800169c:	e576      	b.n	800118c <__aeabi_dsub+0x104>
 800169e:	08ff      	lsrs	r7, r7, #3
 80016a0:	074b      	lsls	r3, r1, #29
 80016a2:	433b      	orrs	r3, r7
 80016a4:	08cc      	lsrs	r4, r1, #3
 80016a6:	e667      	b.n	8001378 <__aeabi_dsub+0x2f0>
 80016a8:	000a      	movs	r2, r1
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	433a      	orrs	r2, r7
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dsub+0x62a>
 80016b0:	e66f      	b.n	8001392 <__aeabi_dsub+0x30a>
 80016b2:	4662      	mov	r2, ip
 80016b4:	0752      	lsls	r2, r2, #29
 80016b6:	4313      	orrs	r3, r2
 80016b8:	4662      	mov	r2, ip
 80016ba:	08d4      	lsrs	r4, r2, #3
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	0312      	lsls	r2, r2, #12
 80016c0:	4214      	tst	r4, r2
 80016c2:	d007      	beq.n	80016d4 <__aeabi_dsub+0x64c>
 80016c4:	08c8      	lsrs	r0, r1, #3
 80016c6:	4210      	tst	r0, r2
 80016c8:	d104      	bne.n	80016d4 <__aeabi_dsub+0x64c>
 80016ca:	465d      	mov	r5, fp
 80016cc:	0004      	movs	r4, r0
 80016ce:	08fb      	lsrs	r3, r7, #3
 80016d0:	0749      	lsls	r1, r1, #29
 80016d2:	430b      	orrs	r3, r1
 80016d4:	0f5a      	lsrs	r2, r3, #29
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	0752      	lsls	r2, r2, #29
 80016dc:	4313      	orrs	r3, r2
 80016de:	e65d      	b.n	800139c <__aeabi_dsub+0x314>
 80016e0:	074b      	lsls	r3, r1, #29
 80016e2:	08ff      	lsrs	r7, r7, #3
 80016e4:	433b      	orrs	r3, r7
 80016e6:	08cc      	lsrs	r4, r1, #3
 80016e8:	e649      	b.n	800137e <__aeabi_dsub+0x2f6>
 80016ea:	19dc      	adds	r4, r3, r7
 80016ec:	429c      	cmp	r4, r3
 80016ee:	419b      	sbcs	r3, r3
 80016f0:	4461      	add	r1, ip
 80016f2:	4689      	mov	r9, r1
 80016f4:	425b      	negs	r3, r3
 80016f6:	4499      	add	r9, r3
 80016f8:	464b      	mov	r3, r9
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	d400      	bmi.n	8001700 <__aeabi_dsub+0x678>
 80016fe:	e631      	b.n	8001364 <__aeabi_dsub+0x2dc>
 8001700:	464a      	mov	r2, r9
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <__aeabi_dsub+0x6d8>)
 8001704:	401a      	ands	r2, r3
 8001706:	2301      	movs	r3, #1
 8001708:	4691      	mov	r9, r2
 800170a:	4698      	mov	r8, r3
 800170c:	e62a      	b.n	8001364 <__aeabi_dsub+0x2dc>
 800170e:	0016      	movs	r6, r2
 8001710:	4664      	mov	r4, ip
 8001712:	3e20      	subs	r6, #32
 8001714:	40f4      	lsrs	r4, r6
 8001716:	46a0      	mov	r8, r4
 8001718:	2a20      	cmp	r2, #32
 800171a:	d005      	beq.n	8001728 <__aeabi_dsub+0x6a0>
 800171c:	2640      	movs	r6, #64	; 0x40
 800171e:	4664      	mov	r4, ip
 8001720:	1ab2      	subs	r2, r6, r2
 8001722:	4094      	lsls	r4, r2
 8001724:	4323      	orrs	r3, r4
 8001726:	469a      	mov	sl, r3
 8001728:	4654      	mov	r4, sl
 800172a:	1e63      	subs	r3, r4, #1
 800172c:	419c      	sbcs	r4, r3
 800172e:	4643      	mov	r3, r8
 8001730:	431c      	orrs	r4, r3
 8001732:	e5db      	b.n	80012ec <__aeabi_dsub+0x264>
 8001734:	0002      	movs	r2, r0
 8001736:	2400      	movs	r4, #0
 8001738:	2300      	movs	r3, #0
 800173a:	e548      	b.n	80011ce <__aeabi_dsub+0x146>
 800173c:	19dc      	adds	r4, r3, r7
 800173e:	42bc      	cmp	r4, r7
 8001740:	41bf      	sbcs	r7, r7
 8001742:	4461      	add	r1, ip
 8001744:	4689      	mov	r9, r1
 8001746:	427f      	negs	r7, r7
 8001748:	44b9      	add	r9, r7
 800174a:	e738      	b.n	80015be <__aeabi_dsub+0x536>
 800174c:	464b      	mov	r3, r9
 800174e:	4323      	orrs	r3, r4
 8001750:	d100      	bne.n	8001754 <__aeabi_dsub+0x6cc>
 8001752:	e69f      	b.n	8001494 <__aeabi_dsub+0x40c>
 8001754:	e606      	b.n	8001364 <__aeabi_dsub+0x2dc>
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	000007fe 	.word	0x000007fe
 800175c:	000007ff 	.word	0x000007ff
 8001760:	ff7fffff 	.word	0xff7fffff
 8001764:	08ff      	lsrs	r7, r7, #3
 8001766:	074b      	lsls	r3, r1, #29
 8001768:	433b      	orrs	r3, r7
 800176a:	08cc      	lsrs	r4, r1, #3
 800176c:	e616      	b.n	800139c <__aeabi_dsub+0x314>
 800176e:	4662      	mov	r2, ip
 8001770:	08db      	lsrs	r3, r3, #3
 8001772:	0752      	lsls	r2, r2, #29
 8001774:	4313      	orrs	r3, r2
 8001776:	4662      	mov	r2, ip
 8001778:	08d4      	lsrs	r4, r2, #3
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	0312      	lsls	r2, r2, #12
 800177e:	4214      	tst	r4, r2
 8001780:	d007      	beq.n	8001792 <__aeabi_dsub+0x70a>
 8001782:	08c8      	lsrs	r0, r1, #3
 8001784:	4210      	tst	r0, r2
 8001786:	d104      	bne.n	8001792 <__aeabi_dsub+0x70a>
 8001788:	465d      	mov	r5, fp
 800178a:	0004      	movs	r4, r0
 800178c:	08fb      	lsrs	r3, r7, #3
 800178e:	0749      	lsls	r1, r1, #29
 8001790:	430b      	orrs	r3, r1
 8001792:	0f5a      	lsrs	r2, r3, #29
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	0752      	lsls	r2, r2, #29
 8001798:	08db      	lsrs	r3, r3, #3
 800179a:	4313      	orrs	r3, r2
 800179c:	e5fe      	b.n	800139c <__aeabi_dsub+0x314>
 800179e:	2300      	movs	r3, #0
 80017a0:	4a01      	ldr	r2, [pc, #4]	; (80017a8 <__aeabi_dsub+0x720>)
 80017a2:	001c      	movs	r4, r3
 80017a4:	e513      	b.n	80011ce <__aeabi_dsub+0x146>
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	000007ff 	.word	0x000007ff

080017ac <__aeabi_ui2d>:
 80017ac:	b510      	push	{r4, lr}
 80017ae:	1e04      	subs	r4, r0, #0
 80017b0:	d010      	beq.n	80017d4 <__aeabi_ui2d+0x28>
 80017b2:	f000 f8a9 	bl	8001908 <__clzsi2>
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <__aeabi_ui2d+0x48>)
 80017b8:	1a1b      	subs	r3, r3, r0
 80017ba:	280a      	cmp	r0, #10
 80017bc:	dc11      	bgt.n	80017e2 <__aeabi_ui2d+0x36>
 80017be:	220b      	movs	r2, #11
 80017c0:	0021      	movs	r1, r4
 80017c2:	1a12      	subs	r2, r2, r0
 80017c4:	40d1      	lsrs	r1, r2
 80017c6:	3015      	adds	r0, #21
 80017c8:	030a      	lsls	r2, r1, #12
 80017ca:	055b      	lsls	r3, r3, #21
 80017cc:	4084      	lsls	r4, r0
 80017ce:	0b12      	lsrs	r2, r2, #12
 80017d0:	0d5b      	lsrs	r3, r3, #21
 80017d2:	e001      	b.n	80017d8 <__aeabi_ui2d+0x2c>
 80017d4:	2300      	movs	r3, #0
 80017d6:	2200      	movs	r2, #0
 80017d8:	051b      	lsls	r3, r3, #20
 80017da:	4313      	orrs	r3, r2
 80017dc:	0020      	movs	r0, r4
 80017de:	0019      	movs	r1, r3
 80017e0:	bd10      	pop	{r4, pc}
 80017e2:	0022      	movs	r2, r4
 80017e4:	380b      	subs	r0, #11
 80017e6:	4082      	lsls	r2, r0
 80017e8:	055b      	lsls	r3, r3, #21
 80017ea:	0312      	lsls	r2, r2, #12
 80017ec:	2400      	movs	r4, #0
 80017ee:	0b12      	lsrs	r2, r2, #12
 80017f0:	0d5b      	lsrs	r3, r3, #21
 80017f2:	e7f1      	b.n	80017d8 <__aeabi_ui2d+0x2c>
 80017f4:	0000041e 	.word	0x0000041e

080017f8 <__aeabi_d2f>:
 80017f8:	0002      	movs	r2, r0
 80017fa:	004b      	lsls	r3, r1, #1
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	0d5b      	lsrs	r3, r3, #21
 8001800:	030c      	lsls	r4, r1, #12
 8001802:	4e3d      	ldr	r6, [pc, #244]	; (80018f8 <__aeabi_d2f+0x100>)
 8001804:	0a64      	lsrs	r4, r4, #9
 8001806:	0f40      	lsrs	r0, r0, #29
 8001808:	1c5f      	adds	r7, r3, #1
 800180a:	0fc9      	lsrs	r1, r1, #31
 800180c:	4304      	orrs	r4, r0
 800180e:	00d5      	lsls	r5, r2, #3
 8001810:	4237      	tst	r7, r6
 8001812:	d00a      	beq.n	800182a <__aeabi_d2f+0x32>
 8001814:	4839      	ldr	r0, [pc, #228]	; (80018fc <__aeabi_d2f+0x104>)
 8001816:	181e      	adds	r6, r3, r0
 8001818:	2efe      	cmp	r6, #254	; 0xfe
 800181a:	dd16      	ble.n	800184a <__aeabi_d2f+0x52>
 800181c:	20ff      	movs	r0, #255	; 0xff
 800181e:	2400      	movs	r4, #0
 8001820:	05c0      	lsls	r0, r0, #23
 8001822:	4320      	orrs	r0, r4
 8001824:	07c9      	lsls	r1, r1, #31
 8001826:	4308      	orrs	r0, r1
 8001828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182a:	2b00      	cmp	r3, #0
 800182c:	d106      	bne.n	800183c <__aeabi_d2f+0x44>
 800182e:	432c      	orrs	r4, r5
 8001830:	d026      	beq.n	8001880 <__aeabi_d2f+0x88>
 8001832:	2205      	movs	r2, #5
 8001834:	0192      	lsls	r2, r2, #6
 8001836:	0a54      	lsrs	r4, r2, #9
 8001838:	b2d8      	uxtb	r0, r3
 800183a:	e7f1      	b.n	8001820 <__aeabi_d2f+0x28>
 800183c:	4325      	orrs	r5, r4
 800183e:	d0ed      	beq.n	800181c <__aeabi_d2f+0x24>
 8001840:	2080      	movs	r0, #128	; 0x80
 8001842:	03c0      	lsls	r0, r0, #15
 8001844:	4304      	orrs	r4, r0
 8001846:	20ff      	movs	r0, #255	; 0xff
 8001848:	e7ea      	b.n	8001820 <__aeabi_d2f+0x28>
 800184a:	2e00      	cmp	r6, #0
 800184c:	dd1b      	ble.n	8001886 <__aeabi_d2f+0x8e>
 800184e:	0192      	lsls	r2, r2, #6
 8001850:	1e53      	subs	r3, r2, #1
 8001852:	419a      	sbcs	r2, r3
 8001854:	00e4      	lsls	r4, r4, #3
 8001856:	0f6d      	lsrs	r5, r5, #29
 8001858:	4322      	orrs	r2, r4
 800185a:	432a      	orrs	r2, r5
 800185c:	0753      	lsls	r3, r2, #29
 800185e:	d048      	beq.n	80018f2 <__aeabi_d2f+0xfa>
 8001860:	230f      	movs	r3, #15
 8001862:	4013      	ands	r3, r2
 8001864:	2b04      	cmp	r3, #4
 8001866:	d000      	beq.n	800186a <__aeabi_d2f+0x72>
 8001868:	3204      	adds	r2, #4
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	04db      	lsls	r3, r3, #19
 800186e:	4013      	ands	r3, r2
 8001870:	d03f      	beq.n	80018f2 <__aeabi_d2f+0xfa>
 8001872:	1c70      	adds	r0, r6, #1
 8001874:	2efe      	cmp	r6, #254	; 0xfe
 8001876:	d0d1      	beq.n	800181c <__aeabi_d2f+0x24>
 8001878:	0192      	lsls	r2, r2, #6
 800187a:	0a54      	lsrs	r4, r2, #9
 800187c:	b2c0      	uxtb	r0, r0
 800187e:	e7cf      	b.n	8001820 <__aeabi_d2f+0x28>
 8001880:	2000      	movs	r0, #0
 8001882:	2400      	movs	r4, #0
 8001884:	e7cc      	b.n	8001820 <__aeabi_d2f+0x28>
 8001886:	0032      	movs	r2, r6
 8001888:	3217      	adds	r2, #23
 800188a:	db22      	blt.n	80018d2 <__aeabi_d2f+0xda>
 800188c:	2080      	movs	r0, #128	; 0x80
 800188e:	0400      	lsls	r0, r0, #16
 8001890:	4320      	orrs	r0, r4
 8001892:	241e      	movs	r4, #30
 8001894:	1ba4      	subs	r4, r4, r6
 8001896:	2c1f      	cmp	r4, #31
 8001898:	dd1d      	ble.n	80018d6 <__aeabi_d2f+0xde>
 800189a:	2202      	movs	r2, #2
 800189c:	4252      	negs	r2, r2
 800189e:	1b96      	subs	r6, r2, r6
 80018a0:	0002      	movs	r2, r0
 80018a2:	40f2      	lsrs	r2, r6
 80018a4:	0016      	movs	r6, r2
 80018a6:	2c20      	cmp	r4, #32
 80018a8:	d004      	beq.n	80018b4 <__aeabi_d2f+0xbc>
 80018aa:	4a15      	ldr	r2, [pc, #84]	; (8001900 <__aeabi_d2f+0x108>)
 80018ac:	4694      	mov	ip, r2
 80018ae:	4463      	add	r3, ip
 80018b0:	4098      	lsls	r0, r3
 80018b2:	4305      	orrs	r5, r0
 80018b4:	002a      	movs	r2, r5
 80018b6:	1e53      	subs	r3, r2, #1
 80018b8:	419a      	sbcs	r2, r3
 80018ba:	4332      	orrs	r2, r6
 80018bc:	2600      	movs	r6, #0
 80018be:	0753      	lsls	r3, r2, #29
 80018c0:	d1ce      	bne.n	8001860 <__aeabi_d2f+0x68>
 80018c2:	2480      	movs	r4, #128	; 0x80
 80018c4:	0013      	movs	r3, r2
 80018c6:	04e4      	lsls	r4, r4, #19
 80018c8:	2001      	movs	r0, #1
 80018ca:	4023      	ands	r3, r4
 80018cc:	4222      	tst	r2, r4
 80018ce:	d1d3      	bne.n	8001878 <__aeabi_d2f+0x80>
 80018d0:	e7b0      	b.n	8001834 <__aeabi_d2f+0x3c>
 80018d2:	2300      	movs	r3, #0
 80018d4:	e7ad      	b.n	8001832 <__aeabi_d2f+0x3a>
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <__aeabi_d2f+0x10c>)
 80018d8:	4694      	mov	ip, r2
 80018da:	002a      	movs	r2, r5
 80018dc:	40e2      	lsrs	r2, r4
 80018de:	0014      	movs	r4, r2
 80018e0:	002a      	movs	r2, r5
 80018e2:	4463      	add	r3, ip
 80018e4:	409a      	lsls	r2, r3
 80018e6:	4098      	lsls	r0, r3
 80018e8:	1e55      	subs	r5, r2, #1
 80018ea:	41aa      	sbcs	r2, r5
 80018ec:	4302      	orrs	r2, r0
 80018ee:	4322      	orrs	r2, r4
 80018f0:	e7e4      	b.n	80018bc <__aeabi_d2f+0xc4>
 80018f2:	0033      	movs	r3, r6
 80018f4:	e79e      	b.n	8001834 <__aeabi_d2f+0x3c>
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	000007fe 	.word	0x000007fe
 80018fc:	fffffc80 	.word	0xfffffc80
 8001900:	fffffca2 	.word	0xfffffca2
 8001904:	fffffc82 	.word	0xfffffc82

08001908 <__clzsi2>:
 8001908:	211c      	movs	r1, #28
 800190a:	2301      	movs	r3, #1
 800190c:	041b      	lsls	r3, r3, #16
 800190e:	4298      	cmp	r0, r3
 8001910:	d301      	bcc.n	8001916 <__clzsi2+0xe>
 8001912:	0c00      	lsrs	r0, r0, #16
 8001914:	3910      	subs	r1, #16
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	4298      	cmp	r0, r3
 800191a:	d301      	bcc.n	8001920 <__clzsi2+0x18>
 800191c:	0a00      	lsrs	r0, r0, #8
 800191e:	3908      	subs	r1, #8
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	4298      	cmp	r0, r3
 8001924:	d301      	bcc.n	800192a <__clzsi2+0x22>
 8001926:	0900      	lsrs	r0, r0, #4
 8001928:	3904      	subs	r1, #4
 800192a:	a202      	add	r2, pc, #8	; (adr r2, 8001934 <__clzsi2+0x2c>)
 800192c:	5c10      	ldrb	r0, [r2, r0]
 800192e:	1840      	adds	r0, r0, r1
 8001930:	4770      	bx	lr
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	02020304 	.word	0x02020304
 8001938:	01010101 	.word	0x01010101
	...

08001944 <__clzdi2>:
 8001944:	b510      	push	{r4, lr}
 8001946:	2900      	cmp	r1, #0
 8001948:	d103      	bne.n	8001952 <__clzdi2+0xe>
 800194a:	f7ff ffdd 	bl	8001908 <__clzsi2>
 800194e:	3020      	adds	r0, #32
 8001950:	e002      	b.n	8001958 <__clzdi2+0x14>
 8001952:	0008      	movs	r0, r1
 8001954:	f7ff ffd8 	bl	8001908 <__clzsi2>
 8001958:	bd10      	pop	{r4, pc}
 800195a:	46c0      	nop			; (mov r8, r8)

0800195c <AHT15_Transmit>:
 */
#include "AHT15.h"
#include "main.h"
static I2C_HandleTypeDef *AHT15_I2c;
static void AHT15_Transmit(uint8_t *Data, uint8_t Length)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af02      	add	r7, sp, #8
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	000a      	movs	r2, r1
 8001966:	1cfb      	adds	r3, r7, #3
 8001968:	701a      	strb	r2, [r3, #0]
   HAL_I2C_Master_Transmit(AHT15_I2c, AHT15_ADDRESS, Data, Length, AHT15_MAX_TIMEOUT);
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <AHT15_Transmit+0x30>)
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	1cfb      	adds	r3, r7, #3
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b299      	uxth	r1, r3
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	23fa      	movs	r3, #250	; 0xfa
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	000b      	movs	r3, r1
 800197e:	2170      	movs	r1, #112	; 0x70
 8001980:	f003 fbb6 	bl	80050f0 <HAL_I2C_Master_Transmit>
}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b002      	add	sp, #8
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000558 	.word	0x20000558

08001990 <AHT15_Read>:
static void AHT15_Read(uint8_t *Data, uint8_t Length)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af02      	add	r7, sp, #8
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	000a      	movs	r2, r1
 800199a:	1cfb      	adds	r3, r7, #3
 800199c:	701a      	strb	r2, [r3, #0]
   HAL_I2C_Master_Receive(AHT15_I2c, AHT15_ADDRESS, Data, Length, AHT15_MAX_TIMEOUT);
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <AHT15_Read+0x30>)
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	1cfb      	adds	r3, r7, #3
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b299      	uxth	r1, r3
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	23fa      	movs	r3, #250	; 0xfa
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	000b      	movs	r3, r1
 80019b2:	2170      	movs	r1, #112	; 0x70
 80019b4:	f003 fca4 	bl	8005300 <HAL_I2C_Master_Receive>
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000558 	.word	0x20000558

080019c4 <AHT15_TriggerMeasurment>:
void AHT15_TriggerMeasurment(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
   uint8_t Temp[3] = { AHT15_MEASURMENT_TRIGGER_COMMAND, AHT15_DATA_1_COMMAND, AHT15_DATA_2_COMMAND };
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <AHT15_TriggerMeasurment+0x24>)
 80019ce:	8811      	ldrh	r1, [r2, #0]
 80019d0:	8019      	strh	r1, [r3, #0]
 80019d2:	7892      	ldrb	r2, [r2, #2]
 80019d4:	709a      	strb	r2, [r3, #2]
   AHT15_Transmit(Temp, 3);
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2103      	movs	r1, #3
 80019da:	0018      	movs	r0, r3
 80019dc:	f7ff ffbe 	bl	800195c <AHT15_Transmit>
}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b002      	add	sp, #8
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	080085c4 	.word	0x080085c4

080019ec <AHT15_ReadMesurmentFloat>:
void AHT15_ReadMesurmentFloat(float *Temperature, float *Humidity)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
   uint8_t Temp[6];
   uint32_t RawTemperature, RawHumidity;
   AHT15_Read(Temp, 6);
 80019f6:	2408      	movs	r4, #8
 80019f8:	193b      	adds	r3, r7, r4
 80019fa:	2106      	movs	r1, #6
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff ffc7 	bl	8001990 <AHT15_Read>
   RawTemperature = (((Temp[3] & 0x0f) << 16) | (Temp[4] << 8) | Temp[5]);
 8001a02:	0021      	movs	r1, r4
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	78db      	ldrb	r3, [r3, #3]
 8001a08:	041a      	lsls	r2, r3, #16
 8001a0a:	23f0      	movs	r3, #240	; 0xf0
 8001a0c:	031b      	lsls	r3, r3, #12
 8001a0e:	401a      	ands	r2, r3
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	791b      	ldrb	r3, [r3, #4]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	4313      	orrs	r3, r2
 8001a18:	187a      	adds	r2, r7, r1
 8001a1a:	7952      	ldrb	r2, [r2, #5]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
   RawHumidity    = (((Temp[1] << 16) | (Temp[2] << 8) | Temp[3]) >> 4);
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	785b      	ldrb	r3, [r3, #1]
 8001a24:	041a      	lsls	r2, r3, #16
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	789b      	ldrb	r3, [r3, #2]
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	187a      	adds	r2, r7, r1
 8001a30:	78d2      	ldrb	r2, [r2, #3]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	111b      	asrs	r3, r3, #4
 8001a36:	613b      	str	r3, [r7, #16]
   *Temperature   = (RawTemperature / AHT15_CONST_VALUE) * 200.0 - 50;
 8001a38:	6978      	ldr	r0, [r7, #20]
 8001a3a:	f7ff feb7 	bl	80017ac <__aeabi_ui2d>
 8001a3e:	2200      	movs	r2, #0
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <AHT15_ReadMesurmentFloat+0xc4>)
 8001a42:	f7fe fdbf 	bl	80005c4 <__aeabi_ddiv>
 8001a46:	0002      	movs	r2, r0
 8001a48:	000b      	movs	r3, r1
 8001a4a:	0010      	movs	r0, r2
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <AHT15_ReadMesurmentFloat+0xc8>)
 8001a52:	f7ff f8ad 	bl	8000bb0 <__aeabi_dmul>
 8001a56:	0002      	movs	r2, r0
 8001a58:	000b      	movs	r3, r1
 8001a5a:	0010      	movs	r0, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <AHT15_ReadMesurmentFloat+0xcc>)
 8001a62:	f7ff fb11 	bl	8001088 <__aeabi_dsub>
 8001a66:	0002      	movs	r2, r0
 8001a68:	000b      	movs	r3, r1
 8001a6a:	0010      	movs	r0, r2
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	f7ff fec3 	bl	80017f8 <__aeabi_d2f>
 8001a72:	1c02      	adds	r2, r0, #0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	601a      	str	r2, [r3, #0]
   *Humidity      = (RawHumidity / AHT15_CONST_VALUE) * 100.0;
 8001a78:	6938      	ldr	r0, [r7, #16]
 8001a7a:	f7ff fe97 	bl	80017ac <__aeabi_ui2d>
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <AHT15_ReadMesurmentFloat+0xc4>)
 8001a82:	f7fe fd9f 	bl	80005c4 <__aeabi_ddiv>
 8001a86:	0002      	movs	r2, r0
 8001a88:	000b      	movs	r3, r1
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <AHT15_ReadMesurmentFloat+0xd0>)
 8001a92:	f7ff f88d 	bl	8000bb0 <__aeabi_dmul>
 8001a96:	0002      	movs	r2, r0
 8001a98:	000b      	movs	r3, r1
 8001a9a:	0010      	movs	r0, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	f7ff feab 	bl	80017f8 <__aeabi_d2f>
 8001aa2:	1c02      	adds	r2, r0, #0
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b007      	add	sp, #28
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	41300000 	.word	0x41300000
 8001ab4:	40690000 	.word	0x40690000
 8001ab8:	40490000 	.word	0x40490000
 8001abc:	40590000 	.word	0x40590000

08001ac0 <AHT15_InitFunction>:
void AHT15_InitFunction(I2C_HandleTypeDef *I2c)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
   AHT15_I2c = I2c;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <AHT15_InitFunction+0x20>)
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	601a      	str	r2, [r3, #0]
   AHT15_Transmit((uint8_t *)AHT15_INITIALIZATION_COMMAND, 1);
 8001ace:	2101      	movs	r1, #1
 8001ad0:	20e1      	movs	r0, #225	; 0xe1
 8001ad2:	f7ff ff43 	bl	800195c <AHT15_Transmit>
}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	20000558 	.word	0x20000558

08001ae4 <HC12_ExitCommandMode>:
void HC12_EnterCommandMode(void)
{
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 0);
}
void HC12_ExitCommandMode(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 1);
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	0119      	lsls	r1, r3, #4
 8001aec:	23a0      	movs	r3, #160	; 0xa0
 8001aee:	05db      	lsls	r3, r3, #23
 8001af0:	2201      	movs	r2, #1
 8001af2:	0018      	movs	r0, r3
 8001af4:	f003 fa0a 	bl	8004f0c <HAL_GPIO_WritePin>
}
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HC12_TransmitData>:
void HC12_TransmitData(uint8_t *Data, uint32_t Length)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	23fa      	movs	r3, #250	; 0xfa
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <HC12_TransmitData+0x24>)
 8001b16:	f005 f867 	bl	8006be8 <HAL_UART_Transmit>
}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b002      	add	sp, #8
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	2000093c 	.word	0x2000093c

08001b28 <HC12_ReciveToIdleDMA>:
void HC12_ReciveToIdleDMA(uint8_t *Data, uint32_t Length)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HC12_ReciveToIdleDMA+0x20>)
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f006 fbd8 	bl	80082f0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001b40:	46c0      	nop			; (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b002      	add	sp, #8
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	2000093c 	.word	0x2000093c

08001b4c <HC12_Init>:
void HC12_Init(RFP_TypeDef *TempRfp, uint8_t *Buffer)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
   rfp      = TempRfp;
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HC12_Init+0x20>)
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	601a      	str	r2, [r3, #0]
   HC12Data = Buffer;
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <HC12_Init+0x24>)
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	601a      	str	r2, [r3, #0]
}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b002      	add	sp, #8
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	2000055c 	.word	0x2000055c
 8001b70:	20000560 	.word	0x20000560

08001b74 <MAX485_ListeningMode>:

#include "MAX485.h"
#include "main.h"
#include "usart.h"
static void MAX485_ListeningMode(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(MAX485_SEL_GPIO_Port, MAX485_SEL_Pin, 0);
 8001b78:	23a0      	movs	r3, #160	; 0xa0
 8001b7a:	05db      	lsls	r3, r3, #23
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2110      	movs	r1, #16
 8001b80:	0018      	movs	r0, r3
 8001b82:	f003 f9c3 	bl	8004f0c <HAL_GPIO_WritePin>
}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <MAX485_TransmitMode>:
static void MAX485_TransmitMode(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(MAX485_SEL_GPIO_Port, MAX485_SEL_Pin, 1);
 8001b90:	23a0      	movs	r3, #160	; 0xa0
 8001b92:	05db      	lsls	r3, r3, #23
 8001b94:	2201      	movs	r2, #1
 8001b96:	2110      	movs	r1, #16
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f003 f9b7 	bl	8004f0c <HAL_GPIO_WritePin>
}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <MAX485_ReciveToIdleDMA>:
void MAX485_ReciveToIdleDMA(uint8_t *Data, uint16_t Length)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	000a      	movs	r2, r1
 8001bae:	1cbb      	adds	r3, r7, #2
 8001bb0:	801a      	strh	r2, [r3, #0]
   MAX485_ListeningMode();
 8001bb2:	f7ff ffdf 	bl	8001b74 <MAX485_ListeningMode>
   HAL_UARTEx_ReceiveToIdle_DMA(&hlpuart1, Data, Length);
 8001bb6:	1cbb      	adds	r3, r7, #2
 8001bb8:	881a      	ldrh	r2, [r3, #0]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <MAX485_ReciveToIdleDMA+0x28>)
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f006 fb96 	bl	80082f0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001bc4:	46c0      	nop			; (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b002      	add	sp, #8
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200008a8 	.word	0x200008a8

08001bd0 <MAX485_TransmitData>:
void MAX485_TransmitData(uint8_t *Data, uint16_t Length)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	000a      	movs	r2, r1
 8001bda:	1cbb      	adds	r3, r7, #2
 8001bdc:	801a      	strh	r2, [r3, #0]
   MAX485_TransmitMode();
 8001bde:	f7ff ffd5 	bl	8001b8c <MAX485_TransmitMode>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be2:	b672      	cpsid	i
}
 8001be4:	46c0      	nop			; (mov r8, r8)
   __disable_irq();
   HAL_UART_Transmit(&hlpuart1, Data, Length, 1000);
 8001be6:	23fa      	movs	r3, #250	; 0xfa
 8001be8:	009c      	lsls	r4, r3, #2
 8001bea:	1cbb      	adds	r3, r7, #2
 8001bec:	881a      	ldrh	r2, [r3, #0]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MAX485_TransmitData+0x38>)
 8001bf2:	0023      	movs	r3, r4
 8001bf4:	f004 fff8 	bl	8006be8 <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 8001bf8:	b662      	cpsie	i
}
 8001bfa:	46c0      	nop			; (mov r8, r8)
   __enable_irq();
   MAX485_ListeningMode();
 8001bfc:	f7ff ffba 	bl	8001b74 <MAX485_ListeningMode>
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b003      	add	sp, #12
 8001c06:	bd90      	pop	{r4, r7, pc}
 8001c08:	200008a8 	.word	0x200008a8

08001c0c <MAX_Handle>:
        { MAX_WaitForResponseFunction }, { MAX_ParseResponseFunction } };
MAXCommandFunctions_TypeDef MAXCommandFunction[MAX_COMMAND_CNT];
MAXDataFunctions_TypeDef MAXDataFunctions;
MAXMessageFunctions_TypeDef MAXMessageFunction[MAX_MESSAGE_CNT];
void MAX_Handle(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
   MAX_ChangeState();
 8001c10:	f000 f856 	bl	8001cc0 <MAX_ChangeState>
   if(MAXFunction[MAX->State].MAXFunction != NULL)
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MAX_Handle+0x30>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <MAX_Handle+0x34>)
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	58d3      	ldr	r3, [r2, r3]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <MAX_Handle+0x2a>
   {
      MAXFunction[MAX->State].MAXFunction();
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <MAX_Handle+0x30>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <MAX_Handle+0x34>)
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	58d3      	ldr	r3, [r2, r3]
 8001c34:	4798      	blx	r3
   }
}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2000062c 	.word	0x2000062c
 8001c40:	20000024 	.word	0x20000024

08001c44 <MAX_Init>:
void MAX_Init(MAX_TypeDef *RadioProtocol, MAXDeviceID_TypeDef Device)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	000a      	movs	r2, r1
 8001c4e:	1cfb      	adds	r3, r7, #3
 8001c50:	701a      	strb	r2, [r3, #0]
   MAX             = RadioProtocol;
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <MAX_Init+0x6c>)
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	601a      	str	r2, [r3, #0]
   MAX->Initialize = MAX_INITIALIZE;
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <MAX_Init+0x6c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	70da      	strb	r2, [r3, #3]
   MAX->DeviceType = Device;
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <MAX_Init+0x6c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	1cfa      	adds	r2, r7, #3
 8001c66:	7812      	ldrb	r2, [r2, #0]
 8001c68:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < MAX_COMMAND_CNT; i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	e007      	b.n	8001c80 <MAX_Init+0x3c>
   {
      MAXCommandFunction[i].MAXCommandFunction = NULL;
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <MAX_Init+0x70>)
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	0092      	lsls	r2, r2, #2
 8001c76:	2100      	movs	r1, #0
 8001c78:	50d1      	str	r1, [r2, r3]
   for(int i = 0; i < MAX_COMMAND_CNT; i++)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	ddf4      	ble.n	8001c70 <MAX_Init+0x2c>
   }
   for(int i = 0; i < MAX_MESSAGE_CNT; i++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	e007      	b.n	8001c9c <MAX_Init+0x58>
   {
      MAXMessageFunction[i].MAXMessageFunction = NULL;
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <MAX_Init+0x74>)
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	2100      	movs	r1, #0
 8001c94:	50d1      	str	r1, [r2, r3]
   for(int i = 0; i < MAX_MESSAGE_CNT; i++)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	ddf4      	ble.n	8001c8c <MAX_Init+0x48>
   }
   MAXDataFunctions.MAXDataFunction = NULL;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MAX_Init+0x78>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b004      	add	sp, #16
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	2000062c 	.word	0x2000062c
 8001cb4:	20000630 	.word	0x20000630
 8001cb8:	20000640 	.word	0x20000640
 8001cbc:	2000063c 	.word	0x2000063c

08001cc0 <MAX_ChangeState>:
static void MAX_ChangeState(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
   for(int i = 0; i < MAX_TRANSITION_TABLE_SIZE; i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	e02a      	b.n	8001d22 <MAX_ChangeState+0x62>
   {
      if(MAX->State == MAXTransitionTable[i].Source && MAX->NewEvent == MAXTransitionTable[i].Event)
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <MAX_ChangeState+0x78>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	7819      	ldrb	r1, [r3, #0]
 8001cd2:	481a      	ldr	r0, [pc, #104]	; (8001d3c <MAX_ChangeState+0x7c>)
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	189b      	adds	r3, r3, r2
 8001cdc:	5c1b      	ldrb	r3, [r3, r0]
 8001cde:	4299      	cmp	r1, r3
 8001ce0:	d11c      	bne.n	8001d1c <MAX_ChangeState+0x5c>
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <MAX_ChangeState+0x78>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	7859      	ldrb	r1, [r3, #1]
 8001ce8:	4814      	ldr	r0, [pc, #80]	; (8001d3c <MAX_ChangeState+0x7c>)
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	0013      	movs	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	189b      	adds	r3, r3, r2
 8001cf2:	18c3      	adds	r3, r0, r3
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4299      	cmp	r1, r3
 8001cfa:	d10f      	bne.n	8001d1c <MAX_ChangeState+0x5c>
      {
         MAX->State    = MAXTransitionTable[i].Destination;
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MAX_ChangeState+0x78>)
 8001cfe:	6819      	ldr	r1, [r3, #0]
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <MAX_ChangeState+0x7c>)
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	0013      	movs	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	189b      	adds	r3, r3, r2
 8001d0a:	18c3      	adds	r3, r0, r3
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	700b      	strb	r3, [r1, #0]
         MAX->NewEvent = MAX_EVENT_NOTHING;
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MAX_ChangeState+0x78>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2200      	movs	r2, #0
 8001d18:	705a      	strb	r2, [r3, #1]
         return;
 8001d1a:	e009      	b.n	8001d30 <MAX_ChangeState+0x70>
   for(int i = 0; i < MAX_TRANSITION_TABLE_SIZE; i++)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b0b      	cmp	r3, #11
 8001d26:	d9d1      	bls.n	8001ccc <MAX_ChangeState+0xc>
      }
   }
   MAX->NewEvent = MAX_EVENT_NOTHING;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <MAX_ChangeState+0x78>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	705a      	strb	r2, [r3, #1]
}
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b002      	add	sp, #8
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	2000062c 	.word	0x2000062c
 8001d3c:	20000000 	.word	0x20000000

08001d40 <MAX_RegisterDataFunction>:
void MAX_RegisterCommandFunction(MAXCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   MAXCommandFunction[Command - 1].MAXCommandFunction = Callback;
}
void MAX_RegisterDataFunction(void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
   MAXDataFunctions.MAXDataFunction = Callback;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <MAX_RegisterDataFunction+0x18>)
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	601a      	str	r2, [r3, #0]
}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b002      	add	sp, #8
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	2000063c 	.word	0x2000063c

08001d5c <MAX_InterruptTask>:
void MAX_RegisterMessageFunction(MAXMessage_TypeDef Message, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   MAXMessageFunction[Message - 1].MAXMessageFunction = Callback;
}
void MAX_InterruptTask(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
   MAX->NewDataFlag = MAX_NEW_DATA_FLAG_SET;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <MAX_InterruptTask+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2201      	movs	r2, #1
 8001d66:	711a      	strb	r2, [r3, #4]
}
 8001d68:	46c0      	nop			; (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	2000062c 	.word	0x2000062c

08001d74 <MAX_InterruptErrorTask>:
void MAX_InterruptErrorTask(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
   MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <MAX_InterruptErrorTask+0x14>)
 8001d7a:	2164      	movs	r1, #100	; 0x64
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7ff ff11 	bl	8001ba4 <MAX485_ReciveToIdleDMA>
}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000564 	.word	0x20000564

08001d8c <MAX_SendData>:
void MAX_SendData(MAXDeviceID_TypeDef Destination, MAXMessageType_TypeDef Type, uint8_t *Data, uint32_t Length)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60ba      	str	r2, [r7, #8]
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	240f      	movs	r4, #15
 8001d98:	193b      	adds	r3, r7, r4
 8001d9a:	1c02      	adds	r2, r0, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
 8001d9e:	200e      	movs	r0, #14
 8001da0:	183b      	adds	r3, r7, r0
 8001da2:	1c0a      	adds	r2, r1, #0
 8001da4:	701a      	strb	r2, [r3, #0]
   MAXDataTransmit[0] = Destination;
 8001da6:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <MAX_SendData+0xbc>)
 8001da8:	193a      	adds	r2, r7, r4
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	701a      	strb	r2, [r3, #0]
   MAXDataTransmit[1] = MAX->DeviceType;
 8001dae:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <MAX_SendData+0xc0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	795a      	ldrb	r2, [r3, #5]
 8001db4:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <MAX_SendData+0xbc>)
 8001db6:	705a      	strb	r2, [r3, #1]
   MAXDataTransmit[2] = Type;
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <MAX_SendData+0xbc>)
 8001dba:	183a      	adds	r2, r7, r0
 8001dbc:	7812      	ldrb	r2, [r2, #0]
 8001dbe:	709a      	strb	r2, [r3, #2]
   for(int i = 0; i < Length; i++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e00a      	b.n	8001ddc <MAX_SendData+0x50>
   {
      MAXDataTransmit[i + 3] = Data[i];
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	18d2      	adds	r2, r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3303      	adds	r3, #3
 8001dd0:	7811      	ldrb	r1, [r2, #0]
 8001dd2:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <MAX_SendData+0xbc>)
 8001dd4:	54d1      	strb	r1, [r2, r3]
   for(int i = 0; i < Length; i++)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d8f0      	bhi.n	8001dc6 <MAX_SendData+0x3a>
   }
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, MAXDataTransmit);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	1cd9      	adds	r1, r3, #3
 8001de8:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <MAX_SendData+0xbc>)
 8001dea:	2301      	movs	r3, #1
 8001dec:	425b      	negs	r3, r3
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 fd7e 	bl	80028f0 <Crc>
 8001df4:	0003      	movs	r3, r0
 8001df6:	613b      	str	r3, [r7, #16]
   MAXDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	0e1a      	lsrs	r2, r3, #24
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3303      	adds	r3, #3
 8001e00:	b2d1      	uxtb	r1, r2
 8001e02:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <MAX_SendData+0xbc>)
 8001e04:	54d1      	strb	r1, [r2, r3]
   MAXDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	0c1a      	lsrs	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	b2d1      	uxtb	r1, r2
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <MAX_SendData+0xbc>)
 8001e12:	54d1      	strb	r1, [r2, r3]
   MAXDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	0a1a      	lsrs	r2, r3, #8
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3305      	adds	r3, #5
 8001e1c:	b2d1      	uxtb	r1, r2
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <MAX_SendData+0xbc>)
 8001e20:	54d1      	strb	r1, [r2, r3]
   MAXDataTransmit[3 + Length + 3] = (crc & 0xff);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3306      	adds	r3, #6
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	b2d1      	uxtb	r1, r2
 8001e2a:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <MAX_SendData+0xbc>)
 8001e2c:	54d1      	strb	r1, [r2, r3]
   MAX->SendFlag                   = MAX_SEND_FLAG_SET;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MAX_SendData+0xc0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2201      	movs	r2, #1
 8001e34:	735a      	strb	r2, [r3, #13]
   MAX->DatTransmitSize            = 3 + Length + 4;
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <MAX_SendData+0xc0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	3207      	adds	r2, #7
 8001e3e:	619a      	str	r2, [r3, #24]
}
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b007      	add	sp, #28
 8001e46:	bd90      	pop	{r4, r7, pc}
 8001e48:	200005c8 	.word	0x200005c8
 8001e4c:	2000062c 	.word	0x2000062c

08001e50 <MAX_SendResponseFunction>:
static void MAX_SendResponseFunction(MAXMessageType_TypeDef Response)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	0002      	movs	r2, r0
 8001e58:	1dfb      	adds	r3, r7, #7
 8001e5a:	701a      	strb	r2, [r3, #0]
   MAXDataTransmit[0] = MAX->SourceMessage;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <MAX_SendResponseFunction+0x78>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	7b1a      	ldrb	r2, [r3, #12]
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <MAX_SendResponseFunction+0x7c>)
 8001e64:	701a      	strb	r2, [r3, #0]
   MAXDataTransmit[1] = MAX->DeviceType;
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <MAX_SendResponseFunction+0x78>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	795a      	ldrb	r2, [r3, #5]
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <MAX_SendResponseFunction+0x7c>)
 8001e6e:	705a      	strb	r2, [r3, #1]
   MAXDataTransmit[2] = MAX_MESSAGE;
 8001e70:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <MAX_SendResponseFunction+0x7c>)
 8001e72:	2203      	movs	r2, #3
 8001e74:	709a      	strb	r2, [r3, #2]
   MAXDataTransmit[3] = Response;
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <MAX_SendResponseFunction+0x7c>)
 8001e78:	1dfa      	adds	r2, r7, #7
 8001e7a:	7812      	ldrb	r2, [r2, #0]
 8001e7c:	70da      	strb	r2, [r3, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, MAXDataTransmit);
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <MAX_SendResponseFunction+0x7c>)
 8001e80:	2301      	movs	r3, #1
 8001e82:	425b      	negs	r3, r3
 8001e84:	2104      	movs	r1, #4
 8001e86:	0018      	movs	r0, r3
 8001e88:	f000 fd32 	bl	80028f0 <Crc>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	60fb      	str	r3, [r7, #12]
   MAXDataTransmit[4] = ((crc >> 24) & 0xff);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	0e1b      	lsrs	r3, r3, #24
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <MAX_SendResponseFunction+0x7c>)
 8001e98:	711a      	strb	r2, [r3, #4]
   MAXDataTransmit[5] = ((crc >> 16) & 0xff);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	0c1b      	lsrs	r3, r3, #16
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <MAX_SendResponseFunction+0x7c>)
 8001ea2:	715a      	strb	r2, [r3, #5]
   MAXDataTransmit[6] = ((crc >> 8) & 0xff);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <MAX_SendResponseFunction+0x7c>)
 8001eac:	719a      	strb	r2, [r3, #6]
   MAXDataTransmit[7] = (crc & 0xff);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MAX_SendResponseFunction+0x7c>)
 8001eb4:	71da      	strb	r2, [r3, #7]
   MAX485_TransmitData(MAXDataTransmit, 8);
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <MAX_SendResponseFunction+0x7c>)
 8001eb8:	2108      	movs	r1, #8
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7ff fe88 	bl	8001bd0 <MAX485_TransmitData>
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b004      	add	sp, #16
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	2000062c 	.word	0x2000062c
 8001ecc:	200005c8 	.word	0x200005c8

08001ed0 <MAX_InitializeFunction>:
static void MAX_InitializeFunction(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
   MAX->NewEvent = MAX_EVENT_END_INITIALIZE;
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <MAX_InitializeFunction+0x1c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	705a      	strb	r2, [r3, #1]
   MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <MAX_InitializeFunction+0x20>)
 8001ede:	2164      	movs	r1, #100	; 0x64
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff fe5f 	bl	8001ba4 <MAX485_ReciveToIdleDMA>
}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	2000062c 	.word	0x2000062c
 8001ef0:	20000564 	.word	0x20000564

08001ef4 <MAX_IdleFunction>:
static void MAX_IdleFunction(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
   if(MAX->NewDataFlag == MAX_NEW_DATA_FLAG_SET)
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MAX_IdleFunction+0x4c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	791b      	ldrb	r3, [r3, #4]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d108      	bne.n	8001f16 <MAX_IdleFunction+0x22>
   {
      MAX->NewDataFlag = MAX_NEW_DATA_FLAG_RESET;
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MAX_IdleFunction+0x4c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	711a      	strb	r2, [r3, #4]
      MAX->NewEvent    = MAX_EVENT_NEW_DATA;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MAX_IdleFunction+0x4c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2201      	movs	r2, #1
 8001f12:	705a      	strb	r2, [r3, #1]
   {
      MAX->SendFlag = MAX_SEND_FLAG_RESET;
      MAX->NewEvent = MAX_EVENT_SEND;
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
   }
}
 8001f14:	e011      	b.n	8001f3a <MAX_IdleFunction+0x46>
   else if(MAX->SendFlag == MAX_SEND_FLAG_SET)
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <MAX_IdleFunction+0x4c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	7b5b      	ldrb	r3, [r3, #13]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10c      	bne.n	8001f3a <MAX_IdleFunction+0x46>
      MAX->SendFlag = MAX_SEND_FLAG_RESET;
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <MAX_IdleFunction+0x4c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2200      	movs	r2, #0
 8001f26:	735a      	strb	r2, [r3, #13]
      MAX->NewEvent = MAX_EVENT_SEND;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <MAX_IdleFunction+0x4c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2206      	movs	r2, #6
 8001f2e:	705a      	strb	r2, [r3, #1]
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <MAX_IdleFunction+0x50>)
 8001f32:	2164      	movs	r1, #100	; 0x64
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff fe35 	bl	8001ba4 <MAX485_ReciveToIdleDMA>
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2000062c 	.word	0x2000062c
 8001f44:	20000564 	.word	0x20000564

08001f48 <MAX_ParseFunction>:
static void MAX_ParseFunction(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
   MAX->SourceMessage  = MAXDataRecive[1];
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <MAX_ParseFunction+0xf8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a3b      	ldr	r2, [pc, #236]	; (8002044 <MAX_ParseFunction+0xfc>)
 8001f58:	7852      	ldrb	r2, [r2, #1]
 8001f5a:	731a      	strb	r2, [r3, #12]
   if(MAXDataRecive[0] != MAX->DeviceType)
 8001f5c:	4b39      	ldr	r3, [pc, #228]	; (8002044 <MAX_ParseFunction+0xfc>)
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	4b37      	ldr	r3, [pc, #220]	; (8002040 <MAX_ParseFunction+0xf8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	795b      	ldrb	r3, [r3, #5]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d00c      	beq.n	8001f84 <MAX_ParseFunction+0x3c>
   {
      MAX->NewEvent = MAX_EVENT_ERROR;
 8001f6a:	4b35      	ldr	r3, [pc, #212]	; (8002040 <MAX_ParseFunction+0xf8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2203      	movs	r2, #3
 8001f70:	705a      	strb	r2, [r3, #1]
      MAX_SendResponseFunction(MAX_ERROR);
 8001f72:	2001      	movs	r0, #1
 8001f74:	f7ff ff6c 	bl	8001e50 <MAX_SendResponseFunction>
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001f78:	4b32      	ldr	r3, [pc, #200]	; (8002044 <MAX_ParseFunction+0xfc>)
 8001f7a:	2164      	movs	r1, #100	; 0x64
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7ff fe11 	bl	8001ba4 <MAX485_ReciveToIdleDMA>
               MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
            }
         }
      }
   }
}
 8001f82:	e058      	b.n	8002036 <MAX_ParseFunction+0xee>
      if(MAX->DataSize != 0)
 8001f84:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <MAX_ParseFunction+0xf8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d053      	beq.n	8002036 <MAX_ParseFunction+0xee>
         MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 8001f8e:	4b2c      	ldr	r3, [pc, #176]	; (8002040 <MAX_ParseFunction+0xf8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	3b04      	subs	r3, #4
 8001f96:	4a2b      	ldr	r2, [pc, #172]	; (8002044 <MAX_ParseFunction+0xfc>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	061a      	lsls	r2, r3, #24
 8001f9c:	4b28      	ldr	r3, [pc, #160]	; (8002040 <MAX_ParseFunction+0xf8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	3b03      	subs	r3, #3
 8001fa4:	4927      	ldr	r1, [pc, #156]	; (8002044 <MAX_ParseFunction+0xfc>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	041b      	lsls	r3, r3, #16
 8001faa:	431a      	orrs	r2, r3
                       | ((uint32_t)MAXDataRecive[MAX->DataSize - 2] << 8) | ((uint32_t)MAXDataRecive[MAX->DataSize - 1]));
 8001fac:	4b24      	ldr	r3, [pc, #144]	; (8002040 <MAX_ParseFunction+0xf8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	3b02      	subs	r3, #2
 8001fb4:	4923      	ldr	r1, [pc, #140]	; (8002044 <MAX_ParseFunction+0xfc>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	4b20      	ldr	r3, [pc, #128]	; (8002040 <MAX_ParseFunction+0xf8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	491f      	ldr	r1, [pc, #124]	; (8002044 <MAX_ParseFunction+0xfc>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
         MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <MAX_ParseFunction+0xf8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	1f19      	subs	r1, r3, #4
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <MAX_ParseFunction+0xfc>)
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	425b      	negs	r3, r3
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f000 fc88 	bl	80028f0 <Crc>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d107      	bne.n	8001ff8 <MAX_ParseFunction+0xb0>
            MAX->NewEvent = MAX_EVENT_DATA_OK;
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <MAX_ParseFunction+0xf8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2204      	movs	r2, #4
 8001fee:	705a      	strb	r2, [r3, #1]
            MAX_SendResponseFunction(MAX_OK);
 8001ff0:	2004      	movs	r0, #4
 8001ff2:	f7ff ff2d 	bl	8001e50 <MAX_SendResponseFunction>
}
 8001ff6:	e01e      	b.n	8002036 <MAX_ParseFunction+0xee>
            if(RepareMessage(MessageCRC, MAXDataRecive, MAX->DataSize) == CRC_OK)
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MAX_ParseFunction+0xf8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	4911      	ldr	r1, [pc, #68]	; (8002044 <MAX_ParseFunction+0xfc>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	0018      	movs	r0, r3
 8002004:	f000 fcc2 	bl	800298c <RepareMessage>
 8002008:	0003      	movs	r3, r0
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <MAX_ParseFunction+0xd6>
               MAX->NewEvent = MAX_EVENT_DATA_OK;
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MAX_ParseFunction+0xf8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2204      	movs	r2, #4
 8002014:	705a      	strb	r2, [r3, #1]
               MAX_SendResponseFunction(MAX_OK);
 8002016:	2004      	movs	r0, #4
 8002018:	f7ff ff1a 	bl	8001e50 <MAX_SendResponseFunction>
}
 800201c:	e00b      	b.n	8002036 <MAX_ParseFunction+0xee>
               MAX->NewEvent = MAX_EVENT_ERROR;
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <MAX_ParseFunction+0xf8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2203      	movs	r2, #3
 8002024:	705a      	strb	r2, [r3, #1]
               MAX_SendResponseFunction(MAX_CRC_ERROR);
 8002026:	2002      	movs	r0, #2
 8002028:	f7ff ff12 	bl	8001e50 <MAX_SendResponseFunction>
               MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <MAX_ParseFunction+0xfc>)
 800202e:	2164      	movs	r1, #100	; 0x64
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff fdb7 	bl	8001ba4 <MAX485_ReciveToIdleDMA>
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	2000062c 	.word	0x2000062c
 8002044:	20000564 	.word	0x20000564

08002048 <MAX_RunningFunction>:
static void MAX_RunningFunction(void)
{
 8002048:	b5b0      	push	{r4, r5, r7, lr}
 800204a:	af00      	add	r7, sp, #0
   switch(MAXDataRecive[2])
 800204c:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <MAX_RunningFunction+0xac>)
 800204e:	789b      	ldrb	r3, [r3, #2]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d029      	beq.n	80020a8 <MAX_RunningFunction+0x60>
 8002054:	dc3e      	bgt.n	80020d4 <MAX_RunningFunction+0x8c>
 8002056:	2b01      	cmp	r3, #1
 8002058:	d002      	beq.n	8002060 <MAX_RunningFunction+0x18>
 800205a:	2b02      	cmp	r3, #2
 800205c:	d016      	beq.n	800208c <MAX_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 800205e:	e039      	b.n	80020d4 <MAX_RunningFunction+0x8c>
         if(MAXCommandFunction[MAXDataRecive[3] - 1].MAXCommandFunction != NULL)
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <MAX_RunningFunction+0xac>)
 8002062:	78db      	ldrb	r3, [r3, #3]
 8002064:	1e5a      	subs	r2, r3, #1
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <MAX_RunningFunction+0xb0>)
 8002068:	0092      	lsls	r2, r2, #2
 800206a:	58d3      	ldr	r3, [r2, r3]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d033      	beq.n	80020d8 <MAX_RunningFunction+0x90>
            MAXCommandFunction[MAXDataRecive[3] - 1].MAXCommandFunction(MAXDataRecive, MAX->DataSize, 4);
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <MAX_RunningFunction+0xac>)
 8002072:	78db      	ldrb	r3, [r3, #3]
 8002074:	1e5a      	subs	r2, r3, #1
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <MAX_RunningFunction+0xb0>)
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	58d4      	ldr	r4, [r2, r3]
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <MAX_RunningFunction+0xb4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6899      	ldr	r1, [r3, #8]
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <MAX_RunningFunction+0xac>)
 8002084:	2204      	movs	r2, #4
 8002086:	0018      	movs	r0, r3
 8002088:	47a0      	blx	r4
         break;
 800208a:	e025      	b.n	80020d8 <MAX_RunningFunction+0x90>
         if(MAXDataFunctions.MAXDataFunction != NULL)
 800208c:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <MAX_RunningFunction+0xb8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d023      	beq.n	80020dc <MAX_RunningFunction+0x94>
            MAXDataFunctions.MAXDataFunction(MAXDataRecive, MAX->DataSize, 4);
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <MAX_RunningFunction+0xb8>)
 8002096:	681c      	ldr	r4, [r3, #0]
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <MAX_RunningFunction+0xb4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <MAX_RunningFunction+0xac>)
 80020a0:	2204      	movs	r2, #4
 80020a2:	0018      	movs	r0, r3
 80020a4:	47a0      	blx	r4
         break;
 80020a6:	e019      	b.n	80020dc <MAX_RunningFunction+0x94>
         if(MAXMessageFunction[MAXDataRecive[3] - 1].MAXMessageFunction != NULL)
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <MAX_RunningFunction+0xac>)
 80020aa:	78db      	ldrb	r3, [r3, #3]
 80020ac:	1e5a      	subs	r2, r3, #1
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <MAX_RunningFunction+0xbc>)
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	58d3      	ldr	r3, [r2, r3]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <MAX_RunningFunction+0x98>
            MAXMessageFunction[MAXDataRecive[3] - 1].MAXMessageFunction(MAXDataRecive, MAX->DataSize, 4);
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <MAX_RunningFunction+0xac>)
 80020ba:	78db      	ldrb	r3, [r3, #3]
 80020bc:	1e5a      	subs	r2, r3, #1
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MAX_RunningFunction+0xbc>)
 80020c0:	0092      	lsls	r2, r2, #2
 80020c2:	58d4      	ldr	r4, [r2, r3]
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <MAX_RunningFunction+0xb4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6899      	ldr	r1, [r3, #8]
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <MAX_RunningFunction+0xac>)
 80020cc:	2204      	movs	r2, #4
 80020ce:	0018      	movs	r0, r3
 80020d0:	47a0      	blx	r4
         break;
 80020d2:	e005      	b.n	80020e0 <MAX_RunningFunction+0x98>
         break;
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	e004      	b.n	80020e2 <MAX_RunningFunction+0x9a>
         break;
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	e002      	b.n	80020e2 <MAX_RunningFunction+0x9a>
         break;
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	e000      	b.n	80020e2 <MAX_RunningFunction+0x9a>
         break;
 80020e0:	46c0      	nop			; (mov r8, r8)
      }
   }
   MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <MAX_RunningFunction+0xac>)
 80020e4:	2164      	movs	r1, #100	; 0x64
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7ff fd5c 	bl	8001ba4 <MAX485_ReciveToIdleDMA>
}
 80020ec:	46c0      	nop			; (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bdb0      	pop	{r4, r5, r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	20000564 	.word	0x20000564
 80020f8:	20000630 	.word	0x20000630
 80020fc:	2000062c 	.word	0x2000062c
 8002100:	2000063c 	.word	0x2000063c
 8002104:	20000640 	.word	0x20000640

08002108 <MAX_SendFunction>:
static void MAX_SendFunction(void)
{
 8002108:	b5b0      	push	{r4, r5, r7, lr}
 800210a:	af00      	add	r7, sp, #0
   if(MAX->Cnt < 5)
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <MAX_SendFunction+0x60>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b04      	cmp	r3, #4
 8002114:	d818      	bhi.n	8002148 <MAX_SendFunction+0x40>
   {
      MAX485_TransmitData(MAXDataTransmit, MAX->DatTransmitSize);
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MAX_SendFunction+0x60>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	b29a      	uxth	r2, r3
 800211e:	4b13      	ldr	r3, [pc, #76]	; (800216c <MAX_SendFunction+0x64>)
 8002120:	0011      	movs	r1, r2
 8002122:	0018      	movs	r0, r3
 8002124:	f7ff fd54 	bl	8001bd0 <MAX485_TransmitData>
      MAX->Cnt++;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MAX_SendFunction+0x60>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	3201      	adds	r2, #1
 8002130:	611a      	str	r2, [r3, #16]
      MAX->NewEvent = MAX_EVENT_WAIT_FOR_RESPONSE;
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <MAX_SendFunction+0x60>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2205      	movs	r2, #5
 8002138:	705a      	strb	r2, [r3, #1]
      MAX->LastTick = HAL_GetTick();
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MAX_SendFunction+0x60>)
 800213c:	681c      	ldr	r4, [r3, #0]
 800213e:	f001 fcd9 	bl	8003af4 <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	6163      	str	r3, [r4, #20]
   {
      MAX->Cnt      = 0;
      MAX->NewEvent = MAX_EVENT_ERROR;
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
   }
}
 8002146:	e00c      	b.n	8002162 <MAX_SendFunction+0x5a>
      MAX->Cnt      = 0;
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <MAX_SendFunction+0x60>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
      MAX->NewEvent = MAX_EVENT_ERROR;
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <MAX_SendFunction+0x60>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2203      	movs	r2, #3
 8002156:	705a      	strb	r2, [r3, #1]
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <MAX_SendFunction+0x68>)
 800215a:	2164      	movs	r1, #100	; 0x64
 800215c:	0018      	movs	r0, r3
 800215e:	f7ff fd21 	bl	8001ba4 <MAX485_ReciveToIdleDMA>
}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	bdb0      	pop	{r4, r5, r7, pc}
 8002168:	2000062c 	.word	0x2000062c
 800216c:	200005c8 	.word	0x200005c8
 8002170:	20000564 	.word	0x20000564

08002174 <MAX_WaitForResponseFunction>:
static void MAX_WaitForResponseFunction(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - MAX->LastTick > 2000)
 8002178:	f001 fcbc 	bl	8003af4 <HAL_GetTick>
 800217c:	0002      	movs	r2, r0
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <MAX_WaitForResponseFunction+0x48>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	1ad2      	subs	r2, r2, r3
 8002186:	23fa      	movs	r3, #250	; 0xfa
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	429a      	cmp	r2, r3
 800218c:	d904      	bls.n	8002198 <MAX_WaitForResponseFunction+0x24>
   {
      MAX->NewEvent = MAX_EVENT_ERROR;
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <MAX_WaitForResponseFunction+0x48>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2203      	movs	r2, #3
 8002194:	705a      	strb	r2, [r3, #1]
   else if(MAX->NewDataFlag == MAX_NEW_DATA_FLAG_SET)
   {
      MAX->NewDataFlag = MAX_NEW_DATA_FLAG_RESET;
      MAX->NewEvent    = MAX_EVENT_NEW_DATA;
   }
}
 8002196:	e00d      	b.n	80021b4 <MAX_WaitForResponseFunction+0x40>
   else if(MAX->NewDataFlag == MAX_NEW_DATA_FLAG_SET)
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <MAX_WaitForResponseFunction+0x48>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	791b      	ldrb	r3, [r3, #4]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d107      	bne.n	80021b4 <MAX_WaitForResponseFunction+0x40>
      MAX->NewDataFlag = MAX_NEW_DATA_FLAG_RESET;
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <MAX_WaitForResponseFunction+0x48>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2200      	movs	r2, #0
 80021aa:	711a      	strb	r2, [r3, #4]
      MAX->NewEvent    = MAX_EVENT_NEW_DATA;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <MAX_WaitForResponseFunction+0x48>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2201      	movs	r2, #1
 80021b2:	705a      	strb	r2, [r3, #1]
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	2000062c 	.word	0x2000062c

080021c0 <MAX_ParseResponseFunction>:
static void MAX_ParseResponseFunction(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 80021c6:	4b54      	ldr	r3, [pc, #336]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	3b04      	subs	r3, #4
 80021ce:	4a53      	ldr	r2, [pc, #332]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
 80021d2:	061a      	lsls	r2, r3, #24
 80021d4:	4b50      	ldr	r3, [pc, #320]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	3b03      	subs	r3, #3
 80021dc:	494f      	ldr	r1, [pc, #316]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	041b      	lsls	r3, r3, #16
 80021e2:	431a      	orrs	r2, r3
                          | ((uint32_t)MAXDataRecive[MAX->DataSize - 2] << 8) | ((uint32_t)MAXDataRecive[MAX->DataSize - 1]));
 80021e4:	4b4c      	ldr	r3, [pc, #304]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	3b02      	subs	r3, #2
 80021ec:	494b      	ldr	r1, [pc, #300]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	431a      	orrs	r2, r3
 80021f4:	4b48      	ldr	r3, [pc, #288]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	4947      	ldr	r1, [pc, #284]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
   uint32_t MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 8002200:	4313      	orrs	r3, r2
 8002202:	607b      	str	r3, [r7, #4]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 8002204:	4b44      	ldr	r3, [pc, #272]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	1f19      	subs	r1, r3, #4
 800220c:	4a43      	ldr	r2, [pc, #268]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 800220e:	2301      	movs	r3, #1
 8002210:	425b      	negs	r3, r3
 8002212:	0018      	movs	r0, r3
 8002214:	f000 fb6c 	bl	80028f0 <Crc>
 8002218:	0002      	movs	r2, r0
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4293      	cmp	r3, r2
 800221e:	d130      	bne.n	8002282 <MAX_ParseResponseFunction+0xc2>
   {
      if(MAXDataRecive[0] == MAX->DeviceType && MAXDataRecive[2] == MAX_MESSAGE)
 8002220:	4b3e      	ldr	r3, [pc, #248]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	4b3c      	ldr	r3, [pc, #240]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	795b      	ldrb	r3, [r3, #5]
 800222a:	429a      	cmp	r2, r3
 800222c:	d11f      	bne.n	800226e <MAX_ParseResponseFunction+0xae>
 800222e:	4b3b      	ldr	r3, [pc, #236]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 8002230:	789b      	ldrb	r3, [r3, #2]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d11b      	bne.n	800226e <MAX_ParseResponseFunction+0xae>
      {
         if(MAXDataRecive[3] == MAX_OK)
 8002236:	4b39      	ldr	r3, [pc, #228]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 8002238:	78db      	ldrb	r3, [r3, #3]
 800223a:	2b04      	cmp	r3, #4
 800223c:	d10d      	bne.n	800225a <MAX_ParseResponseFunction+0x9a>
         {
            MAX->NewEvent = MAX_EVENT_DATA_OK;
 800223e:	4b36      	ldr	r3, [pc, #216]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2204      	movs	r2, #4
 8002244:	705a      	strb	r2, [r3, #1]
            MAX->Cnt      = 0;
 8002246:	4b34      	ldr	r3, [pc, #208]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
            MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 800224e:	4b33      	ldr	r3, [pc, #204]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 8002250:	2164      	movs	r1, #100	; 0x64
 8002252:	0018      	movs	r0, r3
 8002254:	f7ff fca6 	bl	8001ba4 <MAX485_ReciveToIdleDMA>
         if(MAXDataRecive[3] == MAX_OK)
 8002258:	e059      	b.n	800230e <MAX_ParseResponseFunction+0x14e>
         }
         else
         {
            MAX->NewEvent = MAX_EVENT_ERROR;
 800225a:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2203      	movs	r2, #3
 8002260:	705a      	strb	r2, [r3, #1]
            MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 8002264:	2164      	movs	r1, #100	; 0x64
 8002266:	0018      	movs	r0, r3
 8002268:	f7ff fc9c 	bl	8001ba4 <MAX485_ReciveToIdleDMA>
         if(MAXDataRecive[3] == MAX_OK)
 800226c:	e04f      	b.n	800230e <MAX_ParseResponseFunction+0x14e>
         }
      }
      else
      {
         MAX->NewEvent = MAX_EVENT_ERROR;
 800226e:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2203      	movs	r2, #3
 8002274:	705a      	strb	r2, [r3, #1]
         MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8002276:	4b29      	ldr	r3, [pc, #164]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 8002278:	2164      	movs	r1, #100	; 0x64
 800227a:	0018      	movs	r0, r3
 800227c:	f7ff fc92 	bl	8001ba4 <MAX485_ReciveToIdleDMA>
   else
   {
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
      MAX->NewEvent = MAX_EVENT_ERROR;
   }
}
 8002280:	e045      	b.n	800230e <MAX_ParseResponseFunction+0x14e>
   else if(RepareMessage(MessageCRC, MAXDataRecive, MAX->DataSize) == CRC_OK)
 8002282:	4b25      	ldr	r3, [pc, #148]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	4924      	ldr	r1, [pc, #144]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0018      	movs	r0, r3
 800228e:	f000 fb7d 	bl	800298c <RepareMessage>
 8002292:	0003      	movs	r3, r0
 8002294:	2b01      	cmp	r3, #1
 8002296:	d130      	bne.n	80022fa <MAX_ParseResponseFunction+0x13a>
      if(MAXDataRecive[0] == MAX->DeviceType && MAXDataRecive[2] == MAX_MESSAGE)
 8002298:	4b20      	ldr	r3, [pc, #128]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 800229a:	781a      	ldrb	r2, [r3, #0]
 800229c:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	795b      	ldrb	r3, [r3, #5]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d11f      	bne.n	80022e6 <MAX_ParseResponseFunction+0x126>
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 80022a8:	789b      	ldrb	r3, [r3, #2]
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d11b      	bne.n	80022e6 <MAX_ParseResponseFunction+0x126>
         if(MAXDataRecive[3] == MAX_OK)
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 80022b0:	78db      	ldrb	r3, [r3, #3]
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d10d      	bne.n	80022d2 <MAX_ParseResponseFunction+0x112>
            MAX->NewEvent = MAX_EVENT_DATA_OK;
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2204      	movs	r2, #4
 80022bc:	705a      	strb	r2, [r3, #1]
            MAX->Cnt      = 0;
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
            MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 80022c8:	2164      	movs	r1, #100	; 0x64
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7ff fc6a 	bl	8001ba4 <MAX485_ReciveToIdleDMA>
         if(MAXDataRecive[3] == MAX_OK)
 80022d0:	e01d      	b.n	800230e <MAX_ParseResponseFunction+0x14e>
            MAX->NewEvent = MAX_EVENT_ERROR;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2203      	movs	r2, #3
 80022d8:	705a      	strb	r2, [r3, #1]
            MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 80022dc:	2164      	movs	r1, #100	; 0x64
 80022de:	0018      	movs	r0, r3
 80022e0:	f7ff fc60 	bl	8001ba4 <MAX485_ReciveToIdleDMA>
         if(MAXDataRecive[3] == MAX_OK)
 80022e4:	e013      	b.n	800230e <MAX_ParseResponseFunction+0x14e>
         MAX->NewEvent = MAX_EVENT_ERROR;
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2203      	movs	r2, #3
 80022ec:	705a      	strb	r2, [r3, #1]
         MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 80022f0:	2164      	movs	r1, #100	; 0x64
 80022f2:	0018      	movs	r0, r3
 80022f4:	f7ff fc56 	bl	8001ba4 <MAX485_ReciveToIdleDMA>
}
 80022f8:	e009      	b.n	800230e <MAX_ParseResponseFunction+0x14e>
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <MAX_ParseResponseFunction+0x15c>)
 80022fc:	2164      	movs	r1, #100	; 0x64
 80022fe:	0018      	movs	r0, r3
 8002300:	f7ff fc50 	bl	8001ba4 <MAX485_ReciveToIdleDMA>
      MAX->NewEvent = MAX_EVENT_ERROR;
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <MAX_ParseResponseFunction+0x158>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2203      	movs	r2, #3
 800230a:	705a      	strb	r2, [r3, #1]
}
 800230c:	e7ff      	b.n	800230e <MAX_ParseResponseFunction+0x14e>
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	b002      	add	sp, #8
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	2000062c 	.word	0x2000062c
 800231c:	20000564 	.word	0x20000564

08002320 <SM_Handle>:
                                                  { SM_STATE_SLEEP, SM_STATE_RUNNING, SM_EVENT_END_SLEEP },
                                                  { SM_STATE_RUNNING, SM_STATE_WAIT_FOR_MEASURMENT, SM_EVENT_WAIT_FOR_MEASURMENT },
                                                  { SM_STATE_WAIT_FOR_MEASURMENT, SM_STATE_SLEEP, SM_EVENT_SEND_DATA } };
SMFunctions_TypeDef SmFunctions[] = { { SM_InitializeFunction }, { SM_RunningFunction }, { SM_WaitForMeasurmentFunction }, { SM_SleepFunction } };
void SM_Handle(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
   if(Rfp.Initialize == RFP_INITIALIZE)
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <SM_Handle+0x60>)
 8002326:	78db      	ldrb	r3, [r3, #3]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <SM_Handle+0x10>
   {
      RFP_Handle();
 800232c:	f000 fd88 	bl	8002e40 <RFP_Handle>
   }
   if(MAX.Initialize == MAX_INITIALIZE)
 8002330:	4b14      	ldr	r3, [pc, #80]	; (8002384 <SM_Handle+0x64>)
 8002332:	78db      	ldrb	r3, [r3, #3]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <SM_Handle+0x1c>
   {
      MAX_Handle();
 8002338:	f7ff fc68 	bl	8001c0c <MAX_Handle>
   }
   if(HAL_GetTick() - Sm.LastTick > 10)
 800233c:	f001 fbda 	bl	8003af4 <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <SM_Handle+0x68>)
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b0a      	cmp	r3, #10
 800234a:	d915      	bls.n	8002378 <SM_Handle+0x58>
   {
      Sm.LastTick = HAL_GetTick();
 800234c:	f001 fbd2 	bl	8003af4 <HAL_GetTick>
 8002350:	0002      	movs	r2, r0
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <SM_Handle+0x68>)
 8002354:	611a      	str	r2, [r3, #16]
      SM_ChangeState();
 8002356:	f000 f81b 	bl	8002390 <SM_ChangeState>
      if(SmFunctions[Sm.State].SmFunction != NULL)
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <SM_Handle+0x68>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	001a      	movs	r2, r3
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <SM_Handle+0x6c>)
 8002362:	0092      	lsls	r2, r2, #2
 8002364:	58d3      	ldr	r3, [r2, r3]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <SM_Handle+0x58>
      {
         SmFunctions[Sm.State].SmFunction();
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <SM_Handle+0x68>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	001a      	movs	r2, r3
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <SM_Handle+0x6c>)
 8002372:	0092      	lsls	r2, r2, #2
 8002374:	58d3      	ldr	r3, [r2, r3]
 8002376:	4798      	blx	r3
      }
   }
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	20000678 	.word	0x20000678
 8002384:	20000694 	.word	0x20000694
 8002388:	20000650 	.word	0x20000650
 800238c:	20000050 	.word	0x20000050

08002390 <SM_ChangeState>:
static void SM_ChangeState(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
   for(int i = 0; i < SM_TRANSITION_TABLE_SIZE; i++)
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	e022      	b.n	80023e2 <SM_ChangeState+0x52>
   {
      if(Sm.State == SmTransitionTable[i].Source && Sm.NewEvent == SmTransitionTable[i].Event)
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <SM_ChangeState+0x68>)
 800239e:	7819      	ldrb	r1, [r3, #0]
 80023a0:	4816      	ldr	r0, [pc, #88]	; (80023fc <SM_ChangeState+0x6c>)
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	0013      	movs	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	189b      	adds	r3, r3, r2
 80023aa:	5c1b      	ldrb	r3, [r3, r0]
 80023ac:	4299      	cmp	r1, r3
 80023ae:	d115      	bne.n	80023dc <SM_ChangeState+0x4c>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <SM_ChangeState+0x68>)
 80023b2:	7859      	ldrb	r1, [r3, #1]
 80023b4:	4811      	ldr	r0, [pc, #68]	; (80023fc <SM_ChangeState+0x6c>)
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	0013      	movs	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	189b      	adds	r3, r3, r2
 80023be:	18c3      	adds	r3, r0, r3
 80023c0:	3302      	adds	r3, #2
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4299      	cmp	r1, r3
 80023c6:	d109      	bne.n	80023dc <SM_ChangeState+0x4c>
      {
         Sm.State = SmTransitionTable[i].Destination;
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <SM_ChangeState+0x6c>)
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	0013      	movs	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	189b      	adds	r3, r3, r2
 80023d2:	18cb      	adds	r3, r1, r3
 80023d4:	3301      	adds	r3, #1
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <SM_ChangeState+0x68>)
 80023da:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < SM_TRANSITION_TABLE_SIZE; i++)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3301      	adds	r3, #1
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d9d9      	bls.n	800239c <SM_ChangeState+0xc>
      }
   }
   Sm.NewEvent = SM_EVENT_NOTHING;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <SM_ChangeState+0x68>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	705a      	strb	r2, [r3, #1]
}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b002      	add	sp, #8
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	20000650 	.word	0x20000650
 80023fc:	20000040 	.word	0x20000040

08002400 <SM_InitializeFunction>:
static void SM_InitializeFunction(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
   Sm.Sw  = &Sw;
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <SM_InitializeFunction+0x8c>)
 8002408:	4a21      	ldr	r2, [pc, #132]	; (8002490 <SM_InitializeFunction+0x90>)
 800240a:	605a      	str	r2, [r3, #4]
   Sm.Rfp = &Rfp;
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <SM_InitializeFunction+0x8c>)
 800240e:	4a21      	ldr	r2, [pc, #132]	; (8002494 <SM_InitializeFunction+0x94>)
 8002410:	609a      	str	r2, [r3, #8]
   Sm.Max = &MAX;
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <SM_InitializeFunction+0x8c>)
 8002414:	4a20      	ldr	r2, [pc, #128]	; (8002498 <SM_InitializeFunction+0x98>)
 8002416:	60da      	str	r2, [r3, #12]
   SW_Init(&Sw);
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <SM_InitializeFunction+0x90>)
 800241a:	0018      	movs	r0, r3
 800241c:	f000 f9aa 	bl	8002774 <SW_Init>
   RFP_Init(&Rfp, RFP_ODWS);
 8002420:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <SM_InitializeFunction+0x94>)
 8002422:	2102      	movs	r1, #2
 8002424:	0018      	movs	r0, r3
 8002426:	f000 fd27 	bl	8002e78 <RFP_Init>
   MAX_Init(&MAX, MAX_ODWS);
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <SM_InitializeFunction+0x98>)
 800242c:	2102      	movs	r1, #2
 800242e:	0018      	movs	r0, r3
 8002430:	f7ff fc08 	bl	8001c44 <MAX_Init>
   AHT15_InitFunction(&hi2c1);
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <SM_InitializeFunction+0x9c>)
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff fb42 	bl	8001ac0 <AHT15_InitFunction>
   RFP_RegisterCommandFunction(RFP_TEST, RFP_CommadTestFunction);
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <SM_InitializeFunction+0xa0>)
 800243e:	0019      	movs	r1, r3
 8002440:	2001      	movs	r0, #1
 8002442:	f000 fd97 	bl	8002f74 <RFP_RegisterCommandFunction>
   RFP_RegisterCommandFunction(RFP_START_MEASURMENT, RFP_CommandStartMeasurmentFunction);
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <SM_InitializeFunction+0xa4>)
 8002448:	0019      	movs	r1, r3
 800244a:	2002      	movs	r0, #2
 800244c:	f000 fd92 	bl	8002f74 <RFP_RegisterCommandFunction>
   MAX_RegisterDataFunction(MAX_DataFunction);
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <SM_InitializeFunction+0xa8>)
 8002452:	0018      	movs	r0, r3
 8002454:	f7ff fc74 	bl	8001d40 <MAX_RegisterDataFunction>
   uint8_t Temp = MAX_START_MEASURMENT;
 8002458:	1dfb      	adds	r3, r7, #7
 800245a:	2202      	movs	r2, #2
 800245c:	701a      	strb	r2, [r3, #0]
   MAX_SendData(MAX_BS, MAX_COMMAND, &Temp, 1);
 800245e:	1dfa      	adds	r2, r7, #7
 8002460:	2301      	movs	r3, #1
 8002462:	2101      	movs	r1, #1
 8002464:	2001      	movs	r0, #1
 8002466:	f7ff fc91 	bl	8001d8c <MAX_SendData>
   HAL_Delay(15000);
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <SM_InitializeFunction+0xac>)
 800246c:	0018      	movs	r0, r3
 800246e:	f001 fb4b 	bl	8003b08 <HAL_Delay>
   MAX_SendData(MAX_BS, MAX_COMMAND, &Temp, 1);
 8002472:	1dfa      	adds	r2, r7, #7
 8002474:	2301      	movs	r3, #1
 8002476:	2101      	movs	r1, #1
 8002478:	2001      	movs	r0, #1
 800247a:	f7ff fc87 	bl	8001d8c <MAX_SendData>
   Sm.NewEvent = SM_EVENT_END_INITIALIZE;
 800247e:	4b03      	ldr	r3, [pc, #12]	; (800248c <SM_InitializeFunction+0x8c>)
 8002480:	2201      	movs	r2, #1
 8002482:	705a      	strb	r2, [r3, #1]
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000650 	.word	0x20000650
 8002490:	2000066c 	.word	0x2000066c
 8002494:	20000678 	.word	0x20000678
 8002498:	20000694 	.word	0x20000694
 800249c:	2000071c 	.word	0x2000071c
 80024a0:	08002541 	.word	0x08002541
 80024a4:	08002565 	.word	0x08002565
 80024a8:	08002585 	.word	0x08002585
 80024ac:	00003a98 	.word	0x00003a98

080024b0 <SM_RunningFunction>:
static void SM_RunningFunction(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
   Switch_Handle();
 80024b4:	f000 f8ae 	bl	8002614 <Switch_Handle>
   if(Sw.State == SW_STATE_IDLE)
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <SM_RunningFunction+0x38>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d10f      	bne.n	80024e0 <SM_RunningFunction+0x30>
   {
      if(Sm.SensorFlag == SENSOR_FLAG_SET)
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <SM_RunningFunction+0x3c>)
 80024c2:	7d1b      	ldrb	r3, [r3, #20]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d108      	bne.n	80024da <SM_RunningFunction+0x2a>
      {
         Sm.SensorFlag = SENSOR_FLAG_RESET;
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <SM_RunningFunction+0x3c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	751a      	strb	r2, [r3, #20]
         Sm.NewEvent   = SM_EVENT_WAIT_FOR_MEASURMENT;
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <SM_RunningFunction+0x3c>)
 80024d0:	2203      	movs	r2, #3
 80024d2:	705a      	strb	r2, [r3, #1]
         AHT15_TriggerMeasurment();
 80024d4:	f7ff fa76 	bl	80019c4 <AHT15_TriggerMeasurment>
      else
      {
         Sm.NewEvent = SM_EVENT_END_RUNNING;
      }
   }
}
 80024d8:	e002      	b.n	80024e0 <SM_RunningFunction+0x30>
         Sm.NewEvent = SM_EVENT_END_RUNNING;
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <SM_RunningFunction+0x3c>)
 80024dc:	2202      	movs	r2, #2
 80024de:	705a      	strb	r2, [r3, #1]
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	2000066c 	.word	0x2000066c
 80024ec:	20000650 	.word	0x20000650

080024f0 <SM_WaitForMeasurmentFunction>:
static void SM_WaitForMeasurmentFunction(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
   Sm.CntMs++;
 80024f6:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <SM_WaitForMeasurmentFunction+0x34>)
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <SM_WaitForMeasurmentFunction+0x34>)
 80024fe:	619a      	str	r2, [r3, #24]
   if(Sm.CntMs > ALL_SENSOR_DELAY)
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <SM_WaitForMeasurmentFunction+0x34>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4a08      	ldr	r2, [pc, #32]	; (8002528 <SM_WaitForMeasurmentFunction+0x38>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d908      	bls.n	800251c <SM_WaitForMeasurmentFunction+0x2c>
   {
      float t, h;
      AHT15_ReadMesurmentFloat(&t, &h);
 800250a:	003a      	movs	r2, r7
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	0011      	movs	r1, r2
 8002510:	0018      	movs	r0, r3
 8002512:	f7ff fa6b 	bl	80019ec <AHT15_ReadMesurmentFloat>
      Sm.CntMs = 0;
 8002516:	4b03      	ldr	r3, [pc, #12]	; (8002524 <SM_WaitForMeasurmentFunction+0x34>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
   }
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b002      	add	sp, #8
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000650 	.word	0x20000650
 8002528:	00002328 	.word	0x00002328

0800252c <SM_SleepFunction>:
static void SM_SleepFunction(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
   Sm.NewEvent = SM_EVENT_END_SLEEP;
 8002530:	4b02      	ldr	r3, [pc, #8]	; (800253c <SM_SleepFunction+0x10>)
 8002532:	2205      	movs	r2, #5
 8002534:	705a      	strb	r2, [r3, #1]
}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000650 	.word	0x20000650

08002540 <RFP_CommadTestFunction>:
void RFP_CommadTestFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
   HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <RFP_CommadTestFunction+0x20>)
 800254e:	2201      	movs	r2, #1
 8002550:	2102      	movs	r1, #2
 8002552:	0018      	movs	r0, r3
 8002554:	f002 fcda 	bl	8004f0c <HAL_GPIO_WritePin>
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b004      	add	sp, #16
 800255e:	bd80      	pop	{r7, pc}
 8002560:	50000400 	.word	0x50000400

08002564 <RFP_CommandStartMeasurmentFunction>:
void RFP_CommandStartMeasurmentFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
   Sm.SensorFlag = SENSOR_FLAG_SET;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <RFP_CommandStartMeasurmentFunction+0x1c>)
 8002572:	2201      	movs	r2, #1
 8002574:	751a      	strb	r2, [r3, #20]
}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	46bd      	mov	sp, r7
 800257a:	b004      	add	sp, #16
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	20000650 	.word	0x20000650

08002584 <MAX_DataFunction>:
void MAX_DataFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
   HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8002590:	23a0      	movs	r3, #160	; 0xa0
 8002592:	05db      	lsls	r3, r3, #23
 8002594:	2201      	movs	r2, #1
 8002596:	2140      	movs	r1, #64	; 0x40
 8002598:	0018      	movs	r0, r3
 800259a:	f002 fcb7 	bl	8004f0c <HAL_GPIO_WritePin>
}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b004      	add	sp, #16
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	000a      	movs	r2, r1
 80025b2:	1cbb      	adds	r3, r7, #2
 80025b4:	801a      	strh	r2, [r3, #0]
   if(huart->Instance == USART1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a12      	ldr	r2, [pc, #72]	; (8002604 <HAL_UARTEx_RxEventCallback+0x5c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d106      	bne.n	80025ce <HAL_UARTEx_RxEventCallback+0x26>
   {
      Rfp.DataSize = Size;
 80025c0:	1cbb      	adds	r3, r7, #2
 80025c2:	881a      	ldrh	r2, [r3, #0]
 80025c4:	4b10      	ldr	r3, [pc, #64]	; (8002608 <HAL_UARTEx_RxEventCallback+0x60>)
 80025c6:	609a      	str	r2, [r3, #8]
      RFP_InterruptTask();
 80025c8:	f000 fce8 	bl	8002f9c <RFP_InterruptTask>
      }
   }
   else if(huart->Instance == USART2)
   {
   }
}
 80025cc:	e015      	b.n	80025fa <HAL_UARTEx_RxEventCallback+0x52>
   else if(huart->Instance == LPUART1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <HAL_UARTEx_RxEventCallback+0x64>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d110      	bne.n	80025fa <HAL_UARTEx_RxEventCallback+0x52>
      if(Size > 4 && Size < 101)
 80025d8:	1cbb      	adds	r3, r7, #2
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d90a      	bls.n	80025f6 <HAL_UARTEx_RxEventCallback+0x4e>
 80025e0:	1cbb      	adds	r3, r7, #2
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	2b64      	cmp	r3, #100	; 0x64
 80025e6:	d806      	bhi.n	80025f6 <HAL_UARTEx_RxEventCallback+0x4e>
         MAX.DataSize = Size;
 80025e8:	1cbb      	adds	r3, r7, #2
 80025ea:	881a      	ldrh	r2, [r3, #0]
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_UARTEx_RxEventCallback+0x68>)
 80025ee:	609a      	str	r2, [r3, #8]
         MAX_InterruptTask();
 80025f0:	f7ff fbb4 	bl	8001d5c <MAX_InterruptTask>
}
 80025f4:	e001      	b.n	80025fa <HAL_UARTEx_RxEventCallback+0x52>
         MAX_InterruptErrorTask();
 80025f6:	f7ff fbbd 	bl	8001d74 <MAX_InterruptErrorTask>
}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b002      	add	sp, #8
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	40013800 	.word	0x40013800
 8002608:	20000678 	.word	0x20000678
 800260c:	40008000 	.word	0x40008000
 8002610:	20000694 	.word	0x20000694

08002614 <Switch_Handle>:
                                                  { SW_STATE_CONFIRM, SW_STATE_RELEASE, SW_EVENT_RELEASE },
                                                  { SW_STATE_RELEASE, SW_STATE_IDLE, SW_EVENT_NOTHING } };
SWFunctions_TypeDef SwFunctions[]             = { { SW_InitializeFunction }, { SW_IdleFunction },    { SW_DebounceFunction }, { SW_TickFunction },
                                                  { SW_PressFunction },      { SW_ConfirmFunction }, { SW_ReleaseFunction } };
void Switch_Handle(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
   SW_ChangeState();
 8002618:	f000 f818 	bl	800264c <SW_ChangeState>
   if(SwFunctions[Sw->State].SwFunction != NULL)
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <Switch_Handle+0x30>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	001a      	movs	r2, r3
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <Switch_Handle+0x34>)
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	58d3      	ldr	r3, [r2, r3]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <Switch_Handle+0x2a>
   {
      SwFunctions[Sw->State].SwFunction();
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <Switch_Handle+0x30>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	001a      	movs	r2, r3
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <Switch_Handle+0x34>)
 8002638:	0092      	lsls	r2, r2, #2
 800263a:	58d3      	ldr	r3, [r2, r3]
 800263c:	4798      	blx	r3
   }
}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200006b0 	.word	0x200006b0
 8002648:	20000078 	.word	0x20000078

0800264c <SW_ChangeState>:
static void SW_ChangeState(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
   for(int i = 0; i < SW_TRANSITION_TABLE_SIZE; i++)
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	e02a      	b.n	80026ae <SW_ChangeState+0x62>
   {
      if(Sw->State == SwTransitionTable[i].Source && Sw->NewEvent == SwTransitionTable[i].Event)
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <SW_ChangeState+0x78>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	7819      	ldrb	r1, [r3, #0]
 800265e:	481a      	ldr	r0, [pc, #104]	; (80026c8 <SW_ChangeState+0x7c>)
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	0013      	movs	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	189b      	adds	r3, r3, r2
 8002668:	5c1b      	ldrb	r3, [r3, r0]
 800266a:	4299      	cmp	r1, r3
 800266c:	d11c      	bne.n	80026a8 <SW_ChangeState+0x5c>
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <SW_ChangeState+0x78>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	7859      	ldrb	r1, [r3, #1]
 8002674:	4814      	ldr	r0, [pc, #80]	; (80026c8 <SW_ChangeState+0x7c>)
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	0013      	movs	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	189b      	adds	r3, r3, r2
 800267e:	18c3      	adds	r3, r0, r3
 8002680:	3302      	adds	r3, #2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4299      	cmp	r1, r3
 8002686:	d10f      	bne.n	80026a8 <SW_ChangeState+0x5c>
      {
         Sw->State = SwTransitionTable[i].Destination;
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <SW_ChangeState+0x78>)
 800268a:	6819      	ldr	r1, [r3, #0]
 800268c:	480e      	ldr	r0, [pc, #56]	; (80026c8 <SW_ChangeState+0x7c>)
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	0013      	movs	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	189b      	adds	r3, r3, r2
 8002696:	18c3      	adds	r3, r0, r3
 8002698:	3301      	adds	r3, #1
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	700b      	strb	r3, [r1, #0]
         Sw->NewEvent = SW_EVENT_NOTHING;
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <SW_ChangeState+0x78>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2201      	movs	r2, #1
 80026a4:	705a      	strb	r2, [r3, #1]
         return;
 80026a6:	e009      	b.n	80026bc <SW_ChangeState+0x70>
   for(int i = 0; i < SW_TRANSITION_TABLE_SIZE; i++)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3301      	adds	r3, #1
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b07      	cmp	r3, #7
 80026b2:	d9d1      	bls.n	8002658 <SW_ChangeState+0xc>
      }
   }
   Sw->NewEvent = SW_EVENT_NOTHING;
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <SW_ChangeState+0x78>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2201      	movs	r2, #1
 80026ba:	705a      	strb	r2, [r3, #1]
}
 80026bc:	46bd      	mov	sp, r7
 80026be:	b002      	add	sp, #8
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	200006b0 	.word	0x200006b0
 80026c8:	20000060 	.word	0x20000060

080026cc <SW_InitializeFunction>:
static void SW_InitializeFunction(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_END_INITIALIZE;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <SW_InitializeFunction+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	200006b0 	.word	0x200006b0

080026e4 <SW_IdleFunction>:
static void SW_IdleFunction(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_DEBOUNCE;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <SW_IdleFunction+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2202      	movs	r2, #2
 80026ee:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	200006b0 	.word	0x200006b0

080026fc <SW_DebounceFunction>:
static void SW_DebounceFunction(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_PRESS;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <SW_DebounceFunction+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2203      	movs	r2, #3
 8002706:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	200006b0 	.word	0x200006b0

08002714 <SW_TickFunction>:
static void SW_TickFunction(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_RELEASE;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <SW_TickFunction+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2204      	movs	r2, #4
 800271e:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
}
 8002720:	46c0      	nop			; (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	200006b0 	.word	0x200006b0

0800272c <SW_PressFunction>:
static void SW_PressFunction(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_CONFIRM;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <SW_PressFunction+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2205      	movs	r2, #5
 8002736:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	200006b0 	.word	0x200006b0

08002744 <SW_ConfirmFunction>:
static void SW_ConfirmFunction(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_RELEASE;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <SW_ConfirmFunction+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2204      	movs	r2, #4
 800274e:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
}
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	200006b0 	.word	0x200006b0

0800275c <SW_ReleaseFunction>:
static void SW_ReleaseFunction(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
   //HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
   //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
   Sw->NewEvent = SW_EVENT_NOTHING;
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <SW_ReleaseFunction+0x14>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2201      	movs	r2, #1
 8002766:	705a      	strb	r2, [r3, #1]
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	200006b0 	.word	0x200006b0

08002774 <SW_Init>:
void SW_Init(SW_TypeDef *Switch)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
   Sw = Switch;
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <SW_Init+0x18>)
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	601a      	str	r2, [r3, #0]
}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	46bd      	mov	sp, r7
 8002786:	b002      	add	sp, #8
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	200006b0 	.word	0x200006b0

08002790 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	0018      	movs	r0, r3
 800279a:	230c      	movs	r3, #12
 800279c:	001a      	movs	r2, r3
 800279e:	2100      	movs	r1, #0
 80027a0:	f005 fe90 	bl	80084c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80027a4:	4b2d      	ldr	r3, [pc, #180]	; (800285c <MX_ADC1_Init+0xcc>)
 80027a6:	4a2e      	ldr	r2, [pc, #184]	; (8002860 <MX_ADC1_Init+0xd0>)
 80027a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80027aa:	4b2c      	ldr	r3, [pc, #176]	; (800285c <MX_ADC1_Init+0xcc>)
 80027ac:	2280      	movs	r2, #128	; 0x80
 80027ae:	05d2      	lsls	r2, r2, #23
 80027b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027b2:	4b2a      	ldr	r3, [pc, #168]	; (800285c <MX_ADC1_Init+0xcc>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <MX_ADC1_Init+0xcc>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027be:	4b27      	ldr	r3, [pc, #156]	; (800285c <MX_ADC1_Init+0xcc>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027c4:	4b25      	ldr	r3, [pc, #148]	; (800285c <MX_ADC1_Init+0xcc>)
 80027c6:	2204      	movs	r2, #4
 80027c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <MX_ADC1_Init+0xcc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <MX_ADC1_Init+0xcc>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027d6:	4b21      	ldr	r3, [pc, #132]	; (800285c <MX_ADC1_Init+0xcc>)
 80027d8:	2200      	movs	r2, #0
 80027da:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80027dc:	4b1f      	ldr	r3, [pc, #124]	; (800285c <MX_ADC1_Init+0xcc>)
 80027de:	2201      	movs	r2, #1
 80027e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027e2:	4b1e      	ldr	r3, [pc, #120]	; (800285c <MX_ADC1_Init+0xcc>)
 80027e4:	2220      	movs	r2, #32
 80027e6:	2100      	movs	r1, #0
 80027e8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <MX_ADC1_Init+0xcc>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <MX_ADC1_Init+0xcc>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027f6:	4b19      	ldr	r3, [pc, #100]	; (800285c <MX_ADC1_Init+0xcc>)
 80027f8:	222c      	movs	r2, #44	; 0x2c
 80027fa:	2100      	movs	r1, #0
 80027fc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027fe:	4b17      	ldr	r3, [pc, #92]	; (800285c <MX_ADC1_Init+0xcc>)
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <MX_ADC1_Init+0xcc>)
 8002806:	2200      	movs	r2, #0
 8002808:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800280a:	4b14      	ldr	r3, [pc, #80]	; (800285c <MX_ADC1_Init+0xcc>)
 800280c:	2200      	movs	r2, #0
 800280e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <MX_ADC1_Init+0xcc>)
 8002812:	223c      	movs	r2, #60	; 0x3c
 8002814:	2100      	movs	r1, #0
 8002816:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002818:	4b10      	ldr	r3, [pc, #64]	; (800285c <MX_ADC1_Init+0xcc>)
 800281a:	2200      	movs	r2, #0
 800281c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800281e:	4b0f      	ldr	r3, [pc, #60]	; (800285c <MX_ADC1_Init+0xcc>)
 8002820:	0018      	movs	r0, r3
 8002822:	f001 fa93 	bl	8003d4c <HAL_ADC_Init>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d001      	beq.n	800282e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800282a:	f000 fb04 	bl	8002e36 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	4a0c      	ldr	r2, [pc, #48]	; (8002864 <MX_ADC1_Init+0xd4>)
 8002832:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	2200      	movs	r2, #0
 8002838:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002840:	1d3a      	adds	r2, r7, #4
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <MX_ADC1_Init+0xcc>)
 8002844:	0011      	movs	r1, r2
 8002846:	0018      	movs	r0, r3
 8002848:	f001 fc28 	bl	800409c <HAL_ADC_ConfigChannel>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d001      	beq.n	8002854 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002850:	f000 faf1 	bl	8002e36 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	b004      	add	sp, #16
 800285a:	bd80      	pop	{r7, pc}
 800285c:	200006b4 	.word	0x200006b4
 8002860:	40012400 	.word	0x40012400
 8002864:	20000100 	.word	0x20000100

08002868 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b08b      	sub	sp, #44	; 0x2c
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	2414      	movs	r4, #20
 8002872:	193b      	adds	r3, r7, r4
 8002874:	0018      	movs	r0, r3
 8002876:	2314      	movs	r3, #20
 8002878:	001a      	movs	r2, r3
 800287a:	2100      	movs	r1, #0
 800287c:	f005 fe22 	bl	80084c4 <memset>
  if(adcHandle->Instance==ADC1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_ADC_MspInit+0x7c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d128      	bne.n	80028dc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800288a:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <HAL_ADC_MspInit+0x80>)
 800288c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <HAL_ADC_MspInit+0x80>)
 8002890:	2180      	movs	r1, #128	; 0x80
 8002892:	0349      	lsls	r1, r1, #13
 8002894:	430a      	orrs	r2, r1
 8002896:	641a      	str	r2, [r3, #64]	; 0x40
 8002898:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <HAL_ADC_MspInit+0x80>)
 800289a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	035b      	lsls	r3, r3, #13
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_ADC_MspInit+0x80>)
 80028a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028aa:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <HAL_ADC_MspInit+0x80>)
 80028ac:	2102      	movs	r1, #2
 80028ae:	430a      	orrs	r2, r1
 80028b0:	635a      	str	r2, [r3, #52]	; 0x34
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_ADC_MspInit+0x80>)
 80028b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b6:	2202      	movs	r2, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028be:	193b      	adds	r3, r7, r4
 80028c0:	2201      	movs	r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028c4:	193b      	adds	r3, r7, r4
 80028c6:	2203      	movs	r2, #3
 80028c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	193b      	adds	r3, r7, r4
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	4a06      	ldr	r2, [pc, #24]	; (80028ec <HAL_ADC_MspInit+0x84>)
 80028d4:	0019      	movs	r1, r3
 80028d6:	0010      	movs	r0, r2
 80028d8:	f002 f9b4 	bl	8004c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b00b      	add	sp, #44	; 0x2c
 80028e2:	bd90      	pop	{r4, r7, pc}
 80028e4:	40012400 	.word	0x40012400
 80028e8:	40021000 	.word	0x40021000
 80028ec:	50000400 	.word	0x50000400

080028f0 <Crc>:
#include "crc.h"
#include "main.h"
int RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
int k              = 0;
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
   PreviuseCRC ^= data[0];
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	001a      	movs	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4053      	eors	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8002908:	2301      	movs	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	e02c      	b.n	8002968 <Crc+0x78>
   {
      uint32_t temp = data[i];
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	18d3      	adds	r3, r2, r3
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	613b      	str	r3, [r7, #16]
      if(temp == 0x00000000 )
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d110      	bne.n	8002940 <Crc+0x50>
      {
         temp = RandomNumber[k % (sizeof(RandomNumber)-1)];
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <Crc+0x90>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	212f      	movs	r1, #47	; 0x2f
 8002924:	0018      	movs	r0, r3
 8002926:	f7fd fc71 	bl	800020c <__aeabi_uidivmod>
 800292a:	000b      	movs	r3, r1
 800292c:	001a      	movs	r2, r3
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <Crc+0x94>)
 8002930:	0092      	lsls	r2, r2, #2
 8002932:	58d3      	ldr	r3, [r2, r3]
 8002934:	613b      	str	r3, [r7, #16]
         k++;
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <Crc+0x90>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	4b10      	ldr	r3, [pc, #64]	; (8002980 <Crc+0x90>)
 800293e:	601a      	str	r2, [r3, #0]
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4353      	muls	r3, r2
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4053      	eors	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
      if(PreviuseCRC & 0x80000000)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	da03      	bge.n	800295c <Crc+0x6c>
      {
         PreviuseCRC ^= 0xABC245C2;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a0c      	ldr	r2, [pc, #48]	; (8002988 <Crc+0x98>)
 8002958:	4053      	eors	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
      }
      PreviuseCRC <<= 1;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	429a      	cmp	r2, r3
 800296e:	d3ce      	bcc.n	800290e <Crc+0x1e>
   }
   k = 0;
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <Crc+0x90>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
   return PreviuseCRC;
 8002976:	68fb      	ldr	r3, [r7, #12]
}
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	b006      	add	sp, #24
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000718 	.word	0x20000718
 8002984:	20000094 	.word	0x20000094
 8002988:	abc245c2 	.word	0xabc245c2

0800298c <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
   uint8_t temp = 1;
 8002998:	2317      	movs	r3, #23
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < DataLength; i++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
 80029a4:	e03f      	b.n	8002a26 <RepareMessage+0x9a>
   {
      for(int j = 0; j < 8; j++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	e036      	b.n	8002a1a <RepareMessage+0x8e>
      {
         data[i] ^= (temp << j);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	18d3      	adds	r3, r2, r3
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	b25a      	sxtb	r2, r3
 80029b6:	2317      	movs	r3, #23
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	7819      	ldrb	r1, [r3, #0]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	4099      	lsls	r1, r3
 80029c0:	000b      	movs	r3, r1
 80029c2:	b25b      	sxtb	r3, r3
 80029c4:	4053      	eors	r3, r2
 80029c6:	b259      	sxtb	r1, r3
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	18d3      	adds	r3, r2, r3
 80029ce:	b2ca      	uxtb	r2, r1
 80029d0:	701a      	strb	r2, [r3, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	1f19      	subs	r1, r3, #4
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	2301      	movs	r3, #1
 80029da:	425b      	negs	r3, r3
 80029dc:	0018      	movs	r0, r3
 80029de:	f7ff ff87 	bl	80028f0 <Crc>
 80029e2:	0002      	movs	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <RepareMessage+0x62>
         {
            return CRC_OK;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e020      	b.n	8002a30 <RepareMessage+0xa4>
         }
         else
         {
            data[i] ^= (temp << j);
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	18d3      	adds	r3, r2, r3
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	b25a      	sxtb	r2, r3
 80029f8:	2317      	movs	r3, #23
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	7819      	ldrb	r1, [r3, #0]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4099      	lsls	r1, r3
 8002a02:	000b      	movs	r3, r1
 8002a04:	b25b      	sxtb	r3, r3
 8002a06:	4053      	eors	r3, r2
 8002a08:	b259      	sxtb	r1, r3
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	18d3      	adds	r3, r2, r3
 8002a10:	b2ca      	uxtb	r2, r1
 8002a12:	701a      	strb	r2, [r3, #0]
      for(int j = 0; j < 8; j++)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	3301      	adds	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b07      	cmp	r3, #7
 8002a1e:	ddc5      	ble.n	80029ac <RepareMessage+0x20>
   for(int i = 0; i < DataLength; i++)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	3301      	adds	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d8bb      	bhi.n	80029a6 <RepareMessage+0x1a>
         }
      }
   }
   return CRC_ERROR;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b008      	add	sp, #32
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <MX_DMA_Init+0x28>)
 8002a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <MX_DMA_Init+0x28>)
 8002a44:	2101      	movs	r1, #1
 8002a46:	430a      	orrs	r2, r1
 8002a48:	639a      	str	r2, [r3, #56]	; 0x38
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <MX_DMA_Init+0x28>)
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]

}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	40021000 	.word	0x40021000

08002a64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6a:	240c      	movs	r4, #12
 8002a6c:	193b      	adds	r3, r7, r4
 8002a6e:	0018      	movs	r0, r3
 8002a70:	2314      	movs	r3, #20
 8002a72:	001a      	movs	r2, r3
 8002a74:	2100      	movs	r1, #0
 8002a76:	f005 fd25 	bl	80084c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	4b44      	ldr	r3, [pc, #272]	; (8002b8c <MX_GPIO_Init+0x128>)
 8002a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7e:	4b43      	ldr	r3, [pc, #268]	; (8002b8c <MX_GPIO_Init+0x128>)
 8002a80:	2102      	movs	r1, #2
 8002a82:	430a      	orrs	r2, r1
 8002a84:	635a      	str	r2, [r3, #52]	; 0x34
 8002a86:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <MX_GPIO_Init+0x128>)
 8002a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	4b3e      	ldr	r3, [pc, #248]	; (8002b8c <MX_GPIO_Init+0x128>)
 8002a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a96:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <MX_GPIO_Init+0x128>)
 8002a98:	2101      	movs	r1, #1
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <MX_GPIO_Init+0x128>)
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAX485_SEL_Pin|LED3_Pin|LED1_Pin|LED2_Pin
 8002aaa:	4939      	ldr	r1, [pc, #228]	; (8002b90 <MX_GPIO_Init+0x12c>)
 8002aac:	23a0      	movs	r3, #160	; 0xa0
 8002aae:	05db      	lsls	r3, r3, #23
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f002 fa2a 	bl	8004f0c <HAL_GPIO_WritePin>
                          |DS18B20_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|PMS_RST_Pin|PMS_SET_Pin, GPIO_PIN_RESET);
 8002ab8:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <MX_GPIO_Init+0x130>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	211a      	movs	r1, #26
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f002 fa24 	bl	8004f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, GPIO_PIN_SET);
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	0119      	lsls	r1, r3, #4
 8002ac8:	23a0      	movs	r3, #160	; 0xa0
 8002aca:	05db      	lsls	r3, r3, #23
 8002acc:	2201      	movs	r2, #1
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f002 fa1c 	bl	8004f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COVERTER_PG_Pin;
 8002ad4:	193b      	adds	r3, r7, r4
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	0092      	lsls	r2, r2, #2
 8002ada:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002adc:	193b      	adds	r3, r7, r4
 8002ade:	2200      	movs	r2, #0
 8002ae0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	193b      	adds	r3, r7, r4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(COVERTER_PG_GPIO_Port, &GPIO_InitStruct);
 8002ae8:	193b      	adds	r3, r7, r4
 8002aea:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <MX_GPIO_Init+0x130>)
 8002aec:	0019      	movs	r1, r3
 8002aee:	0010      	movs	r0, r2
 8002af0:	f002 f8a8 	bl	8004c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BATTERY_CHRG_Pin|BATTERY_STDBY_Pin;
 8002af4:	193b      	adds	r3, r7, r4
 8002af6:	2203      	movs	r2, #3
 8002af8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afa:	193b      	adds	r3, r7, r4
 8002afc:	2200      	movs	r2, #0
 8002afe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	193b      	adds	r3, r7, r4
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b06:	193a      	adds	r2, r7, r4
 8002b08:	23a0      	movs	r3, #160	; 0xa0
 8002b0a:	05db      	lsls	r3, r3, #23
 8002b0c:	0011      	movs	r1, r2
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f002 f898 	bl	8004c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = MAX485_SEL_Pin|LED3_Pin|LED1_Pin|LED2_Pin
 8002b14:	193b      	adds	r3, r7, r4
 8002b16:	4a20      	ldr	r2, [pc, #128]	; (8002b98 <MX_GPIO_Init+0x134>)
 8002b18:	601a      	str	r2, [r3, #0]
                          |HC12_SET_Pin|DS18B20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1a:	193b      	adds	r3, r7, r4
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	193b      	adds	r3, r7, r4
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	193b      	adds	r3, r7, r4
 8002b28:	2200      	movs	r2, #0
 8002b2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2c:	193a      	adds	r2, r7, r4
 8002b2e:	23a0      	movs	r3, #160	; 0xa0
 8002b30:	05db      	lsls	r3, r3, #23
 8002b32:	0011      	movs	r1, r2
 8002b34:	0018      	movs	r0, r3
 8002b36:	f002 f885 	bl	8004c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|PMS_RST_Pin|PMS_SET_Pin;
 8002b3a:	193b      	adds	r3, r7, r4
 8002b3c:	221a      	movs	r2, #26
 8002b3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b40:	193b      	adds	r3, r7, r4
 8002b42:	2201      	movs	r2, #1
 8002b44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	193b      	adds	r3, r7, r4
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4c:	193b      	adds	r3, r7, r4
 8002b4e:	2200      	movs	r2, #0
 8002b50:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b52:	193b      	adds	r3, r7, r4
 8002b54:	4a0f      	ldr	r2, [pc, #60]	; (8002b94 <MX_GPIO_Init+0x130>)
 8002b56:	0019      	movs	r1, r3
 8002b58:	0010      	movs	r0, r2
 8002b5a:	f002 f873 	bl	8004c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8002b5e:	0021      	movs	r1, r4
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	0052      	lsls	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b68:	187b      	adds	r3, r7, r1
 8002b6a:	2284      	movs	r2, #132	; 0x84
 8002b6c:	0392      	lsls	r2, r2, #14
 8002b6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8002b76:	187a      	adds	r2, r7, r1
 8002b78:	23a0      	movs	r3, #160	; 0xa0
 8002b7a:	05db      	lsls	r3, r3, #23
 8002b7c:	0011      	movs	r1, r2
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f002 f860 	bl	8004c44 <HAL_GPIO_Init>

}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b009      	add	sp, #36	; 0x24
 8002b8a:	bd90      	pop	{r4, r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	000010f0 	.word	0x000010f0
 8002b94:	50000400 	.word	0x50000400
 8002b98:	000018f0 	.word	0x000018f0

08002b9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002ba2:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <MX_I2C1_Init+0x78>)
 8002ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <MX_I2C1_Init+0x7c>)
 8002baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002bac:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bb2:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bb8:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bbe:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bc4:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f002 f9f3 	bl	8004fc4 <HAL_I2C_Init>
 8002bde:	1e03      	subs	r3, r0, #0
 8002be0:	d001      	beq.n	8002be6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002be2:	f000 f928 	bl	8002e36 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002be8:	2100      	movs	r1, #0
 8002bea:	0018      	movs	r0, r3
 8002bec:	f002 ff20 	bl	8005a30 <HAL_I2CEx_ConfigAnalogFilter>
 8002bf0:	1e03      	subs	r3, r0, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002bf4:	f000 f91f 	bl	8002e36 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f002 ff63 	bl	8005ac8 <HAL_I2CEx_ConfigDigitalFilter>
 8002c02:	1e03      	subs	r3, r0, #0
 8002c04:	d001      	beq.n	8002c0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c06:	f000 f916 	bl	8002e36 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	2000071c 	.word	0x2000071c
 8002c14:	40005400 	.word	0x40005400
 8002c18:	10707dbc 	.word	0x10707dbc

08002c1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c1c:	b590      	push	{r4, r7, lr}
 8002c1e:	b095      	sub	sp, #84	; 0x54
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	233c      	movs	r3, #60	; 0x3c
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	0018      	movs	r0, r3
 8002c2a:	2314      	movs	r3, #20
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	2100      	movs	r1, #0
 8002c30:	f005 fc48 	bl	80084c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c34:	2410      	movs	r4, #16
 8002c36:	193b      	adds	r3, r7, r4
 8002c38:	0018      	movs	r0, r3
 8002c3a:	232c      	movs	r3, #44	; 0x2c
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	2100      	movs	r1, #0
 8002c40:	f005 fc40 	bl	80084c4 <memset>
  if(i2cHandle->Instance==I2C1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <HAL_I2C_MspInit+0xb8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d13d      	bne.n	8002cca <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	2220      	movs	r2, #32
 8002c52:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c54:	193b      	adds	r3, r7, r4
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c5a:	193b      	adds	r3, r7, r4
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f003 fc8f 	bl	8006580 <HAL_RCCEx_PeriphCLKConfig>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c66:	f000 f8e6 	bl	8002e36 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_I2C_MspInit+0xbc>)
 8002c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <HAL_I2C_MspInit+0xbc>)
 8002c70:	2102      	movs	r1, #2
 8002c72:	430a      	orrs	r2, r1
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <HAL_I2C_MspInit+0xbc>)
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c82:	213c      	movs	r1, #60	; 0x3c
 8002c84:	187b      	adds	r3, r7, r1
 8002c86:	22c0      	movs	r2, #192	; 0xc0
 8002c88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	2212      	movs	r2, #18
 8002c8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	2203      	movs	r2, #3
 8002c9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	2206      	movs	r2, #6
 8002ca0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca2:	187b      	adds	r3, r7, r1
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <HAL_I2C_MspInit+0xc0>)
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	0010      	movs	r0, r2
 8002caa:	f001 ffcb 	bl	8004c44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_I2C_MspInit+0xbc>)
 8002cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_I2C_MspInit+0xbc>)
 8002cb4:	2180      	movs	r1, #128	; 0x80
 8002cb6:	0389      	lsls	r1, r1, #14
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_I2C_MspInit+0xbc>)
 8002cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	039b      	lsls	r3, r3, #14
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b015      	add	sp, #84	; 0x54
 8002cd0:	bd90      	pop	{r4, r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	40005400 	.word	0x40005400
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	50000400 	.word	0x50000400

08002ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ce4:	f000 fe8a 	bl	80039fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ce8:	f000 f81a 	bl	8002d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cec:	f7ff feba 	bl	8002a64 <MX_GPIO_Init>
  MX_DMA_Init();
 8002cf0:	f7ff fea2 	bl	8002a38 <MX_DMA_Init>
  MX_ADC1_Init();
 8002cf4:	f7ff fd4c 	bl	8002790 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002cf8:	f7ff ff50 	bl	8002b9c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8002cfc:	f000 fcae 	bl	800365c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002d00:	f000 fcfe 	bl	8003700 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8002d04:	f000 fc50 	bl	80035a8 <MX_TIM7_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002d08:	f000 f868 	bl	8002ddc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
   HAL_Delay(10000);
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <main+0x3c>)
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 fefa 	bl	8003b08 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while(1)
   {
      SM_Handle();
 8002d14:	f7ff fb04 	bl	8002320 <SM_Handle>
 8002d18:	e7fc      	b.n	8002d14 <main+0x34>
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	00002710 	.word	0x00002710

08002d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b093      	sub	sp, #76	; 0x4c
 8002d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d26:	2410      	movs	r4, #16
 8002d28:	193b      	adds	r3, r7, r4
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	2338      	movs	r3, #56	; 0x38
 8002d2e:	001a      	movs	r2, r3
 8002d30:	2100      	movs	r1, #0
 8002d32:	f005 fbc7 	bl	80084c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d36:	003b      	movs	r3, r7
 8002d38:	0018      	movs	r0, r3
 8002d3a:	2310      	movs	r3, #16
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	2100      	movs	r1, #0
 8002d40:	f005 fbc0 	bl	80084c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f002 ff09 	bl	8005b60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d4e:	193b      	adds	r3, r7, r4
 8002d50:	2202      	movs	r2, #2
 8002d52:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d54:	193b      	adds	r3, r7, r4
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	0052      	lsls	r2, r2, #1
 8002d5a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002d5c:	0021      	movs	r1, r4
 8002d5e:	187b      	adds	r3, r7, r1
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d64:	187b      	adds	r3, r7, r1
 8002d66:	2240      	movs	r2, #64	; 0x40
 8002d68:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d70:	187b      	adds	r3, r7, r1
 8002d72:	2202      	movs	r2, #2
 8002d74:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	2200      	movs	r2, #0
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	2208      	movs	r2, #8
 8002d80:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	2280      	movs	r2, #128	; 0x80
 8002d86:	0292      	lsls	r2, r2, #10
 8002d88:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2280      	movs	r2, #128	; 0x80
 8002d8e:	0492      	lsls	r2, r2, #18
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	0592      	lsls	r2, r2, #22
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f002 ff2b 	bl	8005bf8 <HAL_RCC_OscConfig>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d001      	beq.n	8002daa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002da6:	f000 f846 	bl	8002e36 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002daa:	003b      	movs	r3, r7
 8002dac:	2207      	movs	r2, #7
 8002dae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002db0:	003b      	movs	r3, r7
 8002db2:	2202      	movs	r2, #2
 8002db4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002db6:	003b      	movs	r3, r7
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dbc:	003b      	movs	r3, r7
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002dc2:	003b      	movs	r3, r7
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f003 fa30 	bl	800622c <HAL_RCC_ClockConfig>
 8002dcc:	1e03      	subs	r3, r0, #0
 8002dce:	d001      	beq.n	8002dd4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002dd0:	f000 f831 	bl	8002e36 <Error_Handler>
  }
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b013      	add	sp, #76	; 0x4c
 8002dda:	bd90      	pop	{r4, r7, pc}

08002ddc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002de0:	2200      	movs	r2, #0
 8002de2:	2100      	movs	r1, #0
 8002de4:	2009      	movs	r0, #9
 8002de6:	f001 fbdd 	bl	80045a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002dea:	2009      	movs	r0, #9
 8002dec:	f001 fbef 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002df0:	2200      	movs	r2, #0
 8002df2:	2100      	movs	r1, #0
 8002df4:	201b      	movs	r0, #27
 8002df6:	f001 fbd5 	bl	80045a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dfa:	201b      	movs	r0, #27
 8002dfc:	f001 fbe7 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* LPUART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002e00:	2200      	movs	r2, #0
 8002e02:	2100      	movs	r1, #0
 8002e04:	201d      	movs	r0, #29
 8002e06:	f001 fbcd 	bl	80045a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002e0a:	201d      	movs	r0, #29
 8002e0c:	f001 fbdf 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002e10:	2200      	movs	r2, #0
 8002e12:	2100      	movs	r1, #0
 8002e14:	200a      	movs	r0, #10
 8002e16:	f001 fbc5 	bl	80045a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002e1a:	200a      	movs	r0, #10
 8002e1c:	f001 fbd7 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2100      	movs	r1, #0
 8002e24:	2007      	movs	r0, #7
 8002e26:	f001 fbbd 	bl	80045a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002e2a:	2007      	movs	r0, #7
 8002e2c:	f001 fbcf 	bl	80045ce <HAL_NVIC_EnableIRQ>
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e3a:	b672      	cpsid	i
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8002e3e:	e7fe      	b.n	8002e3e <Error_Handler+0x8>

08002e40 <RFP_Handle>:
        { RFP_WaitForResponseFunction }, { RFP_ParseResponseFunction } };
RFPCommandFunctions_TypeDef RfpCommandFunction[RFP_COMMAND_CNT];
RFPDataFunctions_TypeDef RfpDataFunctions;
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
void RFP_Handle(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
   RFP_ChangeState();
 8002e44:	f000 f856 	bl	8002ef4 <RFP_ChangeState>
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <RFP_Handle+0x30>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	001a      	movs	r2, r3
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <RFP_Handle+0x34>)
 8002e52:	0092      	lsls	r2, r2, #2
 8002e54:	58d3      	ldr	r3, [r2, r3]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d007      	beq.n	8002e6a <RFP_Handle+0x2a>
   {
      RfpFunction[Rfp->State].RfpFunction();
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <RFP_Handle+0x30>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	001a      	movs	r2, r3
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <RFP_Handle+0x34>)
 8002e64:	0092      	lsls	r2, r2, #2
 8002e66:	58d3      	ldr	r3, [r2, r3]
 8002e68:	4798      	blx	r3
   }
}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000838 	.word	0x20000838
 8002e74:	200000e8 	.word	0x200000e8

08002e78 <RFP_Init>:
void RFP_Init(RFP_TypeDef *RadioProtocol, RFPDeviceID_TypeDef Device)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	000a      	movs	r2, r1
 8002e82:	1cfb      	adds	r3, r7, #3
 8002e84:	701a      	strb	r2, [r3, #0]
   Rfp             = RadioProtocol;
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <RFP_Init+0x6c>)
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	601a      	str	r2, [r3, #0]
   Rfp->Initialize = RFP_INITIALIZE;
 8002e8c:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <RFP_Init+0x6c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2201      	movs	r2, #1
 8002e92:	70da      	strb	r2, [r3, #3]
   Rfp->DeviceType = Device;
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <RFP_Init+0x6c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	1cfa      	adds	r2, r7, #3
 8002e9a:	7812      	ldrb	r2, [r2, #0]
 8002e9c:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	e007      	b.n	8002eb4 <RFP_Init+0x3c>
   {
      RfpCommandFunction[i].RfpCommandFunction = NULL;
 8002ea4:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <RFP_Init+0x70>)
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	0092      	lsls	r2, r2, #2
 8002eaa:	2100      	movs	r1, #0
 8002eac:	50d1      	str	r1, [r2, r3]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	ddf4      	ble.n	8002ea4 <RFP_Init+0x2c>
   }
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	e007      	b.n	8002ed0 <RFP_Init+0x58>
   {
      RfpMessageFunction[i].RfpMessageFunction = NULL;
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <RFP_Init+0x74>)
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	0092      	lsls	r2, r2, #2
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	50d1      	str	r1, [r2, r3]
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	ddf4      	ble.n	8002ec0 <RFP_Init+0x48>
   }
   RfpDataFunctions.RfpDataFunction = NULL;
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <RFP_Init+0x78>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b004      	add	sp, #16
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000838 	.word	0x20000838
 8002ee8:	2000083c 	.word	0x2000083c
 8002eec:	2000084c 	.word	0x2000084c
 8002ef0:	20000848 	.word	0x20000848

08002ef4 <RFP_ChangeState>:
static void RFP_ChangeState(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	e02a      	b.n	8002f56 <RFP_ChangeState+0x62>
   {
      if(Rfp->State == RfpTransitionTable[i].Source && Rfp->NewEvent == RfpTransitionTable[i].Event)
 8002f00:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <RFP_ChangeState+0x78>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	7819      	ldrb	r1, [r3, #0]
 8002f06:	481a      	ldr	r0, [pc, #104]	; (8002f70 <RFP_ChangeState+0x7c>)
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	0013      	movs	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	189b      	adds	r3, r3, r2
 8002f10:	5c1b      	ldrb	r3, [r3, r0]
 8002f12:	4299      	cmp	r1, r3
 8002f14:	d11c      	bne.n	8002f50 <RFP_ChangeState+0x5c>
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <RFP_ChangeState+0x78>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	7859      	ldrb	r1, [r3, #1]
 8002f1c:	4814      	ldr	r0, [pc, #80]	; (8002f70 <RFP_ChangeState+0x7c>)
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	0013      	movs	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	189b      	adds	r3, r3, r2
 8002f26:	18c3      	adds	r3, r0, r3
 8002f28:	3302      	adds	r3, #2
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	4299      	cmp	r1, r3
 8002f2e:	d10f      	bne.n	8002f50 <RFP_ChangeState+0x5c>
      {
         Rfp->State    = RfpTransitionTable[i].Destination;
 8002f30:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <RFP_ChangeState+0x78>)
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	480e      	ldr	r0, [pc, #56]	; (8002f70 <RFP_ChangeState+0x7c>)
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	0013      	movs	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	189b      	adds	r3, r3, r2
 8002f3e:	18c3      	adds	r3, r0, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	700b      	strb	r3, [r1, #0]
         Rfp->NewEvent = RFP_EVENT_NOTHING;
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <RFP_ChangeState+0x78>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	705a      	strb	r2, [r3, #1]
         return;
 8002f4e:	e009      	b.n	8002f64 <RFP_ChangeState+0x70>
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3301      	adds	r3, #1
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0b      	cmp	r3, #11
 8002f5a:	d9d1      	bls.n	8002f00 <RFP_ChangeState+0xc>
      }
   }
   Rfp->NewEvent = RFP_EVENT_NOTHING;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <RFP_ChangeState+0x78>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2200      	movs	r2, #0
 8002f62:	705a      	strb	r2, [r3, #1]
}
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b002      	add	sp, #8
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	20000838 	.word	0x20000838
 8002f70:	200000c4 	.word	0x200000c4

08002f74 <RFP_RegisterCommandFunction>:
void RFP_RegisterCommandFunction(RFPCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	6039      	str	r1, [r7, #0]
 8002f7e:	1dfb      	adds	r3, r7, #7
 8002f80:	701a      	strb	r2, [r3, #0]
   RfpCommandFunction[Command - 1].RfpCommandFunction = Callback;
 8002f82:	1dfb      	adds	r3, r7, #7
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	1e5a      	subs	r2, r3, #1
 8002f88:	4b03      	ldr	r3, [pc, #12]	; (8002f98 <RFP_RegisterCommandFunction+0x24>)
 8002f8a:	0092      	lsls	r2, r2, #2
 8002f8c:	6839      	ldr	r1, [r7, #0]
 8002f8e:	50d1      	str	r1, [r2, r3]
}
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b002      	add	sp, #8
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	2000083c 	.word	0x2000083c

08002f9c <RFP_InterruptTask>:
void RFP_RegisterMessageFunction(RFPMessage_TypeDef Message, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpMessageFunction[Message - 1].RfpMessageFunction = Callback;
}
void RFP_InterruptTask(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
   Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_SET;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <RFP_InterruptTask+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	711a      	strb	r2, [r3, #4]
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	20000838 	.word	0x20000838

08002fb4 <RFP_SendResponseFunction>:
   RfpDataTransmit[3 + Length + 3] = (crc & 0xff);
   Rfp->SendFlag                   = RFP_SEND_FLAG_SET;
   Rfp->DataSizeTransmit           = 3 + Length + 4;
}
static void RFP_SendResponseFunction(RFPMessageType_TypeDef Response)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	0002      	movs	r2, r0
 8002fbc:	1dfb      	adds	r3, r7, #7
 8002fbe:	701a      	strb	r2, [r3, #0]
   HAL_Delay(200);
 8002fc0:	20c8      	movs	r0, #200	; 0xc8
 8002fc2:	f000 fda1 	bl	8003b08 <HAL_Delay>
   RfpDataTransmit[0] = Rfp->SourceMessage;
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <RFP_SendResponseFunction+0x80>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	7c1a      	ldrb	r2, [r3, #16]
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <RFP_SendResponseFunction+0x84>)
 8002fce:	701a      	strb	r2, [r3, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 8002fd0:	4b18      	ldr	r3, [pc, #96]	; (8003034 <RFP_SendResponseFunction+0x80>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	795a      	ldrb	r2, [r3, #5]
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <RFP_SendResponseFunction+0x84>)
 8002fd8:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = RFP_MESSAGE;
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <RFP_SendResponseFunction+0x84>)
 8002fdc:	2203      	movs	r2, #3
 8002fde:	709a      	strb	r2, [r3, #2]
   RfpDataTransmit[3] = Response;
 8002fe0:	4b15      	ldr	r3, [pc, #84]	; (8003038 <RFP_SendResponseFunction+0x84>)
 8002fe2:	1dfa      	adds	r2, r7, #7
 8002fe4:	7812      	ldrb	r2, [r2, #0]
 8002fe6:	70da      	strb	r2, [r3, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, RfpDataTransmit);
 8002fe8:	4a13      	ldr	r2, [pc, #76]	; (8003038 <RFP_SendResponseFunction+0x84>)
 8002fea:	2301      	movs	r3, #1
 8002fec:	425b      	negs	r3, r3
 8002fee:	2104      	movs	r1, #4
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7ff fc7d 	bl	80028f0 <Crc>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	60fb      	str	r3, [r7, #12]
   RfpDataTransmit[4] = ((crc >> 24) & 0xff);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	0e1b      	lsrs	r3, r3, #24
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <RFP_SendResponseFunction+0x84>)
 8003002:	711a      	strb	r2, [r3, #4]
   RfpDataTransmit[5] = ((crc >> 16) & 0xff);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	b2da      	uxtb	r2, r3
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <RFP_SendResponseFunction+0x84>)
 800300c:	715a      	strb	r2, [r3, #5]
   RfpDataTransmit[6] = ((crc >> 8) & 0xff);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	b2da      	uxtb	r2, r3
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <RFP_SendResponseFunction+0x84>)
 8003016:	719a      	strb	r2, [r3, #6]
   RfpDataTransmit[7] = (crc & 0xff);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	b2da      	uxtb	r2, r3
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <RFP_SendResponseFunction+0x84>)
 800301e:	71da      	strb	r2, [r3, #7]
   HC12_TransmitData(RfpDataTransmit, 8);
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <RFP_SendResponseFunction+0x84>)
 8003022:	2108      	movs	r1, #8
 8003024:	0018      	movs	r0, r3
 8003026:	f7fe fd6b 	bl	8001b00 <HC12_TransmitData>
}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b004      	add	sp, #16
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	20000838 	.word	0x20000838
 8003038:	200007d4 	.word	0x200007d4

0800303c <RFP_InitializeFunction>:
static void RFP_InitializeFunction(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
   Rfp->NewEvent = RFP_EVENT_END_INITIALIZE;
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <RFP_InitializeFunction+0x30>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2202      	movs	r2, #2
 8003046:	705a      	strb	r2, [r3, #1]
   HC12_ExitCommandMode();
 8003048:	f7fe fd4c 	bl	8001ae4 <HC12_ExitCommandMode>
   HC12_Init(Rfp, RfpDataRecive);
 800304c:	4b07      	ldr	r3, [pc, #28]	; (800306c <RFP_InitializeFunction+0x30>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a07      	ldr	r2, [pc, #28]	; (8003070 <RFP_InitializeFunction+0x34>)
 8003052:	0011      	movs	r1, r2
 8003054:	0018      	movs	r0, r3
 8003056:	f7fe fd79 	bl	8001b4c <HC12_Init>
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <RFP_InitializeFunction+0x34>)
 800305c:	2164      	movs	r1, #100	; 0x64
 800305e:	0018      	movs	r0, r3
 8003060:	f7fe fd62 	bl	8001b28 <HC12_ReciveToIdleDMA>
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	20000838 	.word	0x20000838
 8003070:	20000770 	.word	0x20000770

08003074 <RFP_IdleFunction>:
static void RFP_IdleFunction(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
   if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <RFP_IdleFunction+0x4c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	791b      	ldrb	r3, [r3, #4]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d108      	bne.n	8003096 <RFP_IdleFunction+0x22>
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 8003084:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <RFP_IdleFunction+0x4c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2200      	movs	r2, #0
 800308a:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <RFP_IdleFunction+0x4c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2201      	movs	r2, #1
 8003092:	705a      	strb	r2, [r3, #1]
   {
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
      Rfp->NewEvent = RFP_EVENT_SEND;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 8003094:	e011      	b.n	80030ba <RFP_IdleFunction+0x46>
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <RFP_IdleFunction+0x4c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	7c5b      	ldrb	r3, [r3, #17]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d10c      	bne.n	80030ba <RFP_IdleFunction+0x46>
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
 80030a0:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <RFP_IdleFunction+0x4c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2200      	movs	r2, #0
 80030a6:	745a      	strb	r2, [r3, #17]
      Rfp->NewEvent = RFP_EVENT_SEND;
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <RFP_IdleFunction+0x4c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2206      	movs	r2, #6
 80030ae:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80030b0:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <RFP_IdleFunction+0x50>)
 80030b2:	2164      	movs	r1, #100	; 0x64
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7fe fd37 	bl	8001b28 <HC12_ReciveToIdleDMA>
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000838 	.word	0x20000838
 80030c4:	20000770 	.word	0x20000770

080030c8 <RFP_ParseFunction>:
static void RFP_ParseFunction(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
   Rfp->SourceMessage  = RfpDataRecive[1];
 80030d2:	4b3b      	ldr	r3, [pc, #236]	; (80031c0 <RFP_ParseFunction+0xf8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a3b      	ldr	r2, [pc, #236]	; (80031c4 <RFP_ParseFunction+0xfc>)
 80030d8:	7852      	ldrb	r2, [r2, #1]
 80030da:	741a      	strb	r2, [r3, #16]
   if(RfpDataRecive[0] != Rfp->DeviceType)
 80030dc:	4b39      	ldr	r3, [pc, #228]	; (80031c4 <RFP_ParseFunction+0xfc>)
 80030de:	781a      	ldrb	r2, [r3, #0]
 80030e0:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <RFP_ParseFunction+0xf8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	795b      	ldrb	r3, [r3, #5]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d00c      	beq.n	8003104 <RFP_ParseFunction+0x3c>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 80030ea:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <RFP_ParseFunction+0xf8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2203      	movs	r2, #3
 80030f0:	705a      	strb	r2, [r3, #1]
      RFP_SendResponseFunction(RFP_ERROR);
 80030f2:	2001      	movs	r0, #1
 80030f4:	f7ff ff5e 	bl	8002fb4 <RFP_SendResponseFunction>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <RFP_ParseFunction+0xfc>)
 80030fa:	2164      	movs	r1, #100	; 0x64
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7fe fd13 	bl	8001b28 <HC12_ReciveToIdleDMA>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
            }
         }
      }
   }
}
 8003102:	e058      	b.n	80031b6 <RFP_ParseFunction+0xee>
      if(Rfp->DataSize != 0)
 8003104:	4b2e      	ldr	r3, [pc, #184]	; (80031c0 <RFP_ParseFunction+0xf8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d053      	beq.n	80031b6 <RFP_ParseFunction+0xee>
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800310e:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <RFP_ParseFunction+0xf8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	3b04      	subs	r3, #4
 8003116:	4a2b      	ldr	r2, [pc, #172]	; (80031c4 <RFP_ParseFunction+0xfc>)
 8003118:	5cd3      	ldrb	r3, [r2, r3]
 800311a:	061a      	lsls	r2, r3, #24
 800311c:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <RFP_ParseFunction+0xf8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	3b03      	subs	r3, #3
 8003124:	4927      	ldr	r1, [pc, #156]	; (80031c4 <RFP_ParseFunction+0xfc>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	041b      	lsls	r3, r3, #16
 800312a:	431a      	orrs	r2, r3
                       | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 800312c:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <RFP_ParseFunction+0xf8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	3b02      	subs	r3, #2
 8003134:	4923      	ldr	r1, [pc, #140]	; (80031c4 <RFP_ParseFunction+0xfc>)
 8003136:	5ccb      	ldrb	r3, [r1, r3]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	431a      	orrs	r2, r3
 800313c:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <RFP_ParseFunction+0xf8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	3b01      	subs	r3, #1
 8003144:	491f      	ldr	r1, [pc, #124]	; (80031c4 <RFP_ParseFunction+0xfc>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8003148:	4313      	orrs	r3, r2
 800314a:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <RFP_ParseFunction+0xf8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	1f19      	subs	r1, r3, #4
 8003154:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <RFP_ParseFunction+0xfc>)
 8003156:	2301      	movs	r3, #1
 8003158:	425b      	negs	r3, r3
 800315a:	0018      	movs	r0, r3
 800315c:	f7ff fbc8 	bl	80028f0 <Crc>
 8003160:	0002      	movs	r2, r0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4293      	cmp	r3, r2
 8003166:	d107      	bne.n	8003178 <RFP_ParseFunction+0xb0>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8003168:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <RFP_ParseFunction+0xf8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2204      	movs	r2, #4
 800316e:	705a      	strb	r2, [r3, #1]
            RFP_SendResponseFunction(RFP_OK);
 8003170:	2004      	movs	r0, #4
 8003172:	f7ff ff1f 	bl	8002fb4 <RFP_SendResponseFunction>
}
 8003176:	e01e      	b.n	80031b6 <RFP_ParseFunction+0xee>
            if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 8003178:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <RFP_ParseFunction+0xf8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	4911      	ldr	r1, [pc, #68]	; (80031c4 <RFP_ParseFunction+0xfc>)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	0018      	movs	r0, r3
 8003184:	f7ff fc02 	bl	800298c <RepareMessage>
 8003188:	0003      	movs	r3, r0
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <RFP_ParseFunction+0xd6>
               Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800318e:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <RFP_ParseFunction+0xf8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2204      	movs	r2, #4
 8003194:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_OK);
 8003196:	2004      	movs	r0, #4
 8003198:	f7ff ff0c 	bl	8002fb4 <RFP_SendResponseFunction>
}
 800319c:	e00b      	b.n	80031b6 <RFP_ParseFunction+0xee>
               Rfp->NewEvent = RFP_EVENT_ERROR;
 800319e:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <RFP_ParseFunction+0xf8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2203      	movs	r2, #3
 80031a4:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_CRC_ERROR);
 80031a6:	2002      	movs	r0, #2
 80031a8:	f7ff ff04 	bl	8002fb4 <RFP_SendResponseFunction>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <RFP_ParseFunction+0xfc>)
 80031ae:	2164      	movs	r1, #100	; 0x64
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7fe fcb9 	bl	8001b28 <HC12_ReciveToIdleDMA>
}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b002      	add	sp, #8
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	20000838 	.word	0x20000838
 80031c4:	20000770 	.word	0x20000770

080031c8 <RFP_RunningFunction>:
static void RFP_RunningFunction(void)
{
 80031c8:	b5b0      	push	{r4, r5, r7, lr}
 80031ca:	af00      	add	r7, sp, #0
   switch(RfpDataRecive[2])
 80031cc:	4b29      	ldr	r3, [pc, #164]	; (8003274 <RFP_RunningFunction+0xac>)
 80031ce:	789b      	ldrb	r3, [r3, #2]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d029      	beq.n	8003228 <RFP_RunningFunction+0x60>
 80031d4:	dc3e      	bgt.n	8003254 <RFP_RunningFunction+0x8c>
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d002      	beq.n	80031e0 <RFP_RunningFunction+0x18>
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d016      	beq.n	800320c <RFP_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 80031de:	e039      	b.n	8003254 <RFP_RunningFunction+0x8c>
         if(RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction != NULL)
 80031e0:	4b24      	ldr	r3, [pc, #144]	; (8003274 <RFP_RunningFunction+0xac>)
 80031e2:	78db      	ldrb	r3, [r3, #3]
 80031e4:	1e5a      	subs	r2, r3, #1
 80031e6:	4b24      	ldr	r3, [pc, #144]	; (8003278 <RFP_RunningFunction+0xb0>)
 80031e8:	0092      	lsls	r2, r2, #2
 80031ea:	58d3      	ldr	r3, [r2, r3]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d033      	beq.n	8003258 <RFP_RunningFunction+0x90>
            RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction(RfpDataRecive, Rfp->DataSize, 4);
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <RFP_RunningFunction+0xac>)
 80031f2:	78db      	ldrb	r3, [r3, #3]
 80031f4:	1e5a      	subs	r2, r3, #1
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <RFP_RunningFunction+0xb0>)
 80031f8:	0092      	lsls	r2, r2, #2
 80031fa:	58d4      	ldr	r4, [r2, r3]
 80031fc:	4b1f      	ldr	r3, [pc, #124]	; (800327c <RFP_RunningFunction+0xb4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6899      	ldr	r1, [r3, #8]
 8003202:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <RFP_RunningFunction+0xac>)
 8003204:	2204      	movs	r2, #4
 8003206:	0018      	movs	r0, r3
 8003208:	47a0      	blx	r4
         break;
 800320a:	e025      	b.n	8003258 <RFP_RunningFunction+0x90>
         if(RfpDataFunctions.RfpDataFunction != NULL)
 800320c:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <RFP_RunningFunction+0xb8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d023      	beq.n	800325c <RFP_RunningFunction+0x94>
            RfpDataFunctions.RfpDataFunction(RfpDataRecive, Rfp->DataSize, 4);
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <RFP_RunningFunction+0xb8>)
 8003216:	681c      	ldr	r4, [r3, #0]
 8003218:	4b18      	ldr	r3, [pc, #96]	; (800327c <RFP_RunningFunction+0xb4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6899      	ldr	r1, [r3, #8]
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <RFP_RunningFunction+0xac>)
 8003220:	2204      	movs	r2, #4
 8003222:	0018      	movs	r0, r3
 8003224:	47a0      	blx	r4
         break;
 8003226:	e019      	b.n	800325c <RFP_RunningFunction+0x94>
         if(RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction != NULL)
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <RFP_RunningFunction+0xac>)
 800322a:	78db      	ldrb	r3, [r3, #3]
 800322c:	1e5a      	subs	r2, r3, #1
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <RFP_RunningFunction+0xbc>)
 8003230:	0092      	lsls	r2, r2, #2
 8003232:	58d3      	ldr	r3, [r2, r3]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d013      	beq.n	8003260 <RFP_RunningFunction+0x98>
            RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction(RfpDataRecive, Rfp->DataSize, 4);
 8003238:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <RFP_RunningFunction+0xac>)
 800323a:	78db      	ldrb	r3, [r3, #3]
 800323c:	1e5a      	subs	r2, r3, #1
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <RFP_RunningFunction+0xbc>)
 8003240:	0092      	lsls	r2, r2, #2
 8003242:	58d4      	ldr	r4, [r2, r3]
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <RFP_RunningFunction+0xb4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6899      	ldr	r1, [r3, #8]
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <RFP_RunningFunction+0xac>)
 800324c:	2204      	movs	r2, #4
 800324e:	0018      	movs	r0, r3
 8003250:	47a0      	blx	r4
         break;
 8003252:	e005      	b.n	8003260 <RFP_RunningFunction+0x98>
         break;
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	e004      	b.n	8003262 <RFP_RunningFunction+0x9a>
         break;
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	e002      	b.n	8003262 <RFP_RunningFunction+0x9a>
         break;
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	e000      	b.n	8003262 <RFP_RunningFunction+0x9a>
         break;
 8003260:	46c0      	nop			; (mov r8, r8)
      }
   }
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8003262:	4b04      	ldr	r3, [pc, #16]	; (8003274 <RFP_RunningFunction+0xac>)
 8003264:	2164      	movs	r1, #100	; 0x64
 8003266:	0018      	movs	r0, r3
 8003268:	f7fe fc5e 	bl	8001b28 <HC12_ReciveToIdleDMA>
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	bdb0      	pop	{r4, r5, r7, pc}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	20000770 	.word	0x20000770
 8003278:	2000083c 	.word	0x2000083c
 800327c:	20000838 	.word	0x20000838
 8003280:	20000848 	.word	0x20000848
 8003284:	2000084c 	.word	0x2000084c

08003288 <RFP_SendFunction>:
static void RFP_SendFunction(void)
{
 8003288:	b5b0      	push	{r4, r5, r7, lr}
 800328a:	af00      	add	r7, sp, #0
   if(Rfp->Cnt < 5)
 800328c:	4b17      	ldr	r3, [pc, #92]	; (80032ec <RFP_SendFunction+0x64>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b04      	cmp	r3, #4
 8003294:	d81a      	bhi.n	80032cc <RFP_SendFunction+0x44>
   {
      HAL_Delay(200);
 8003296:	20c8      	movs	r0, #200	; 0xc8
 8003298:	f000 fc36 	bl	8003b08 <HAL_Delay>
      HC12_TransmitData(RfpDataTransmit, Rfp->DataSizeTransmit);
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <RFP_SendFunction+0x64>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <RFP_SendFunction+0x68>)
 80032a4:	0011      	movs	r1, r2
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7fe fc2a 	bl	8001b00 <HC12_TransmitData>
      Rfp->Cnt++;
 80032ac:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <RFP_SendFunction+0x64>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	3201      	adds	r2, #1
 80032b4:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_WAIT_FOR_RESPONSE;
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <RFP_SendFunction+0x64>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2205      	movs	r2, #5
 80032bc:	705a      	strb	r2, [r3, #1]
      Rfp->LastTick = HAL_GetTick();
 80032be:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <RFP_SendFunction+0x64>)
 80032c0:	681c      	ldr	r4, [r3, #0]
 80032c2:	f000 fc17 	bl	8003af4 <HAL_GetTick>
 80032c6:	0003      	movs	r3, r0
 80032c8:	61a3      	str	r3, [r4, #24]
   {
      Rfp->Cnt      = 0;
      Rfp->NewEvent = RFP_EVENT_ERROR;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 80032ca:	e00c      	b.n	80032e6 <RFP_SendFunction+0x5e>
      Rfp->Cnt      = 0;
 80032cc:	4b07      	ldr	r3, [pc, #28]	; (80032ec <RFP_SendFunction+0x64>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2200      	movs	r2, #0
 80032d2:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_ERROR;
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <RFP_SendFunction+0x64>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2203      	movs	r2, #3
 80032da:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <RFP_SendFunction+0x6c>)
 80032de:	2164      	movs	r1, #100	; 0x64
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7fe fc21 	bl	8001b28 <HC12_ReciveToIdleDMA>
}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bdb0      	pop	{r4, r5, r7, pc}
 80032ec:	20000838 	.word	0x20000838
 80032f0:	200007d4 	.word	0x200007d4
 80032f4:	20000770 	.word	0x20000770

080032f8 <RFP_WaitForResponseFunction>:
static void RFP_WaitForResponseFunction(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - Rfp->LastTick > 2000)
 80032fc:	f000 fbfa 	bl	8003af4 <HAL_GetTick>
 8003300:	0002      	movs	r2, r0
 8003302:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <RFP_WaitForResponseFunction+0x48>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	1ad2      	subs	r2, r2, r3
 800330a:	23fa      	movs	r3, #250	; 0xfa
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	429a      	cmp	r2, r3
 8003310:	d904      	bls.n	800331c <RFP_WaitForResponseFunction+0x24>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <RFP_WaitForResponseFunction+0x48>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2203      	movs	r2, #3
 8003318:	705a      	strb	r2, [r3, #1]
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
   }
}
 800331a:	e00d      	b.n	8003338 <RFP_WaitForResponseFunction+0x40>
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <RFP_WaitForResponseFunction+0x48>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	791b      	ldrb	r3, [r3, #4]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d107      	bne.n	8003338 <RFP_WaitForResponseFunction+0x40>
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <RFP_WaitForResponseFunction+0x48>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2200      	movs	r2, #0
 800332e:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <RFP_WaitForResponseFunction+0x48>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2201      	movs	r2, #1
 8003336:	705a      	strb	r2, [r3, #1]
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	20000838 	.word	0x20000838

08003344 <RFP_ParseResponseFunction>:
static void RFP_ParseResponseFunction(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800334a:	4b54      	ldr	r3, [pc, #336]	; (800349c <RFP_ParseResponseFunction+0x158>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	3b04      	subs	r3, #4
 8003352:	4a53      	ldr	r2, [pc, #332]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 8003354:	5cd3      	ldrb	r3, [r2, r3]
 8003356:	061a      	lsls	r2, r3, #24
 8003358:	4b50      	ldr	r3, [pc, #320]	; (800349c <RFP_ParseResponseFunction+0x158>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	3b03      	subs	r3, #3
 8003360:	494f      	ldr	r1, [pc, #316]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 8003362:	5ccb      	ldrb	r3, [r1, r3]
 8003364:	041b      	lsls	r3, r3, #16
 8003366:	431a      	orrs	r2, r3
                          | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 8003368:	4b4c      	ldr	r3, [pc, #304]	; (800349c <RFP_ParseResponseFunction+0x158>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	3b02      	subs	r3, #2
 8003370:	494b      	ldr	r1, [pc, #300]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 8003372:	5ccb      	ldrb	r3, [r1, r3]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	431a      	orrs	r2, r3
 8003378:	4b48      	ldr	r3, [pc, #288]	; (800349c <RFP_ParseResponseFunction+0x158>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	3b01      	subs	r3, #1
 8003380:	4947      	ldr	r1, [pc, #284]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8003384:	4313      	orrs	r3, r2
 8003386:	607b      	str	r3, [r7, #4]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 8003388:	4b44      	ldr	r3, [pc, #272]	; (800349c <RFP_ParseResponseFunction+0x158>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	1f19      	subs	r1, r3, #4
 8003390:	4a43      	ldr	r2, [pc, #268]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 8003392:	2301      	movs	r3, #1
 8003394:	425b      	negs	r3, r3
 8003396:	0018      	movs	r0, r3
 8003398:	f7ff faaa 	bl	80028f0 <Crc>
 800339c:	0002      	movs	r2, r0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d130      	bne.n	8003406 <RFP_ParseResponseFunction+0xc2>
   {
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 80033a4:	4b3e      	ldr	r3, [pc, #248]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 80033a6:	781a      	ldrb	r2, [r3, #0]
 80033a8:	4b3c      	ldr	r3, [pc, #240]	; (800349c <RFP_ParseResponseFunction+0x158>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	795b      	ldrb	r3, [r3, #5]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d11f      	bne.n	80033f2 <RFP_ParseResponseFunction+0xae>
 80033b2:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 80033b4:	789b      	ldrb	r3, [r3, #2]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d11b      	bne.n	80033f2 <RFP_ParseResponseFunction+0xae>
      {
         if(RfpDataRecive[3] == RFP_OK)
 80033ba:	4b39      	ldr	r3, [pc, #228]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 80033bc:	78db      	ldrb	r3, [r3, #3]
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d10d      	bne.n	80033de <RFP_ParseResponseFunction+0x9a>
         {
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 80033c2:	4b36      	ldr	r3, [pc, #216]	; (800349c <RFP_ParseResponseFunction+0x158>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2204      	movs	r2, #4
 80033c8:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 80033ca:	4b34      	ldr	r3, [pc, #208]	; (800349c <RFP_ParseResponseFunction+0x158>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80033d2:	4b33      	ldr	r3, [pc, #204]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 80033d4:	2164      	movs	r1, #100	; 0x64
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7fe fba6 	bl	8001b28 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 80033dc:	e059      	b.n	8003492 <RFP_ParseResponseFunction+0x14e>
         }
         else
         {
            Rfp->NewEvent = RFP_EVENT_ERROR;
 80033de:	4b2f      	ldr	r3, [pc, #188]	; (800349c <RFP_ParseResponseFunction+0x158>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2203      	movs	r2, #3
 80033e4:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80033e6:	4b2e      	ldr	r3, [pc, #184]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 80033e8:	2164      	movs	r1, #100	; 0x64
 80033ea:	0018      	movs	r0, r3
 80033ec:	f7fe fb9c 	bl	8001b28 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 80033f0:	e04f      	b.n	8003492 <RFP_ParseResponseFunction+0x14e>
         }
      }
      else
      {
         Rfp->NewEvent = RFP_EVENT_ERROR;
 80033f2:	4b2a      	ldr	r3, [pc, #168]	; (800349c <RFP_ParseResponseFunction+0x158>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2203      	movs	r2, #3
 80033f8:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80033fa:	4b29      	ldr	r3, [pc, #164]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 80033fc:	2164      	movs	r1, #100	; 0x64
 80033fe:	0018      	movs	r0, r3
 8003400:	f7fe fb92 	bl	8001b28 <HC12_ReciveToIdleDMA>
   else
   {
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
      Rfp->NewEvent = RFP_EVENT_ERROR;
   }
}
 8003404:	e045      	b.n	8003492 <RFP_ParseResponseFunction+0x14e>
   else if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 8003406:	4b25      	ldr	r3, [pc, #148]	; (800349c <RFP_ParseResponseFunction+0x158>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	4924      	ldr	r1, [pc, #144]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff fabb 	bl	800298c <RepareMessage>
 8003416:	0003      	movs	r3, r0
 8003418:	2b01      	cmp	r3, #1
 800341a:	d130      	bne.n	800347e <RFP_ParseResponseFunction+0x13a>
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 800341c:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 800341e:	781a      	ldrb	r2, [r3, #0]
 8003420:	4b1e      	ldr	r3, [pc, #120]	; (800349c <RFP_ParseResponseFunction+0x158>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	795b      	ldrb	r3, [r3, #5]
 8003426:	429a      	cmp	r2, r3
 8003428:	d11f      	bne.n	800346a <RFP_ParseResponseFunction+0x126>
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 800342c:	789b      	ldrb	r3, [r3, #2]
 800342e:	2b03      	cmp	r3, #3
 8003430:	d11b      	bne.n	800346a <RFP_ParseResponseFunction+0x126>
         if(RfpDataRecive[3] == RFP_OK)
 8003432:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 8003434:	78db      	ldrb	r3, [r3, #3]
 8003436:	2b04      	cmp	r3, #4
 8003438:	d10d      	bne.n	8003456 <RFP_ParseResponseFunction+0x112>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <RFP_ParseResponseFunction+0x158>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2204      	movs	r2, #4
 8003440:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <RFP_ParseResponseFunction+0x158>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800344a:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 800344c:	2164      	movs	r1, #100	; 0x64
 800344e:	0018      	movs	r0, r3
 8003450:	f7fe fb6a 	bl	8001b28 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8003454:	e01d      	b.n	8003492 <RFP_ParseResponseFunction+0x14e>
            Rfp->NewEvent = RFP_EVENT_ERROR;
 8003456:	4b11      	ldr	r3, [pc, #68]	; (800349c <RFP_ParseResponseFunction+0x158>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2203      	movs	r2, #3
 800345c:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 8003460:	2164      	movs	r1, #100	; 0x64
 8003462:	0018      	movs	r0, r3
 8003464:	f7fe fb60 	bl	8001b28 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8003468:	e013      	b.n	8003492 <RFP_ParseResponseFunction+0x14e>
         Rfp->NewEvent = RFP_EVENT_ERROR;
 800346a:	4b0c      	ldr	r3, [pc, #48]	; (800349c <RFP_ParseResponseFunction+0x158>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2203      	movs	r2, #3
 8003470:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8003472:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 8003474:	2164      	movs	r1, #100	; 0x64
 8003476:	0018      	movs	r0, r3
 8003478:	f7fe fb56 	bl	8001b28 <HC12_ReciveToIdleDMA>
}
 800347c:	e009      	b.n	8003492 <RFP_ParseResponseFunction+0x14e>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <RFP_ParseResponseFunction+0x15c>)
 8003480:	2164      	movs	r1, #100	; 0x64
 8003482:	0018      	movs	r0, r3
 8003484:	f7fe fb50 	bl	8001b28 <HC12_ReciveToIdleDMA>
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8003488:	4b04      	ldr	r3, [pc, #16]	; (800349c <RFP_ParseResponseFunction+0x158>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2203      	movs	r2, #3
 800348e:	705a      	strb	r2, [r3, #1]
}
 8003490:	e7ff      	b.n	8003492 <RFP_ParseResponseFunction+0x14e>
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	b002      	add	sp, #8
 8003498:	bd80      	pop	{r7, pc}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	20000838 	.word	0x20000838
 80034a0:	20000770 	.word	0x20000770

080034a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <HAL_MspInit+0x44>)
 80034ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_MspInit+0x44>)
 80034b0:	2101      	movs	r1, #1
 80034b2:	430a      	orrs	r2, r1
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <HAL_MspInit+0x44>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2201      	movs	r2, #1
 80034bc:	4013      	ands	r3, r2
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_MspInit+0x44>)
 80034c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c6:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <HAL_MspInit+0x44>)
 80034c8:	2180      	movs	r1, #128	; 0x80
 80034ca:	0549      	lsls	r1, r1, #21
 80034cc:	430a      	orrs	r2, r1
 80034ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_MspInit+0x44>)
 80034d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	055b      	lsls	r3, r3, #21
 80034d8:	4013      	ands	r3, r2
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b002      	add	sp, #8
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	40021000 	.word	0x40021000

080034ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034f0:	e7fe      	b.n	80034f0 <NMI_Handler+0x4>

080034f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034f6:	e7fe      	b.n	80034f6 <HardFault_Handler+0x4>

080034f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80034fc:	46c0      	nop			; (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003510:	f000 fade 	bl	8003ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWITCH_Pin);
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	0018      	movs	r0, r3
 8003524:	f001 fd10 	bl	8004f48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <DMA1_Channel1_IRQHandler+0x14>)
 8003536:	0018      	movs	r0, r3
 8003538:	f001 fa42 	bl	80049c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	20000a2c 	.word	0x20000a2c

08003548 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <DMA1_Channel2_3_IRQHandler+0x14>)
 800354e:	0018      	movs	r0, r3
 8003550:	f001 fa36 	bl	80049c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	200009d0 	.word	0x200009d0

08003560 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <USART1_IRQHandler+0x14>)
 8003566:	0018      	movs	r0, r3
 8003568:	f003 fbda 	bl	8006d20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	2000093c 	.word	0x2000093c

08003578 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void LPUART1_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800357c:	4b03      	ldr	r3, [pc, #12]	; (800358c <LPUART1_IRQHandler+0x14>)
 800357e:	0018      	movs	r0, r3
 8003580:	f003 fbce 	bl	8006d20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	200008a8 	.word	0x200008a8

08003590 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 8003594:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <SystemInit+0x14>)
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	0512      	lsls	r2, r2, #20
 800359a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035ae:	1d3b      	adds	r3, r7, #4
 80035b0:	0018      	movs	r0, r3
 80035b2:	230c      	movs	r3, #12
 80035b4:	001a      	movs	r2, r3
 80035b6:	2100      	movs	r1, #0
 80035b8:	f004 ff84 	bl	80084c4 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80035bc:	4b15      	ldr	r3, [pc, #84]	; (8003614 <MX_TIM7_Init+0x6c>)
 80035be:	4a16      	ldr	r2, [pc, #88]	; (8003618 <MX_TIM7_Init+0x70>)
 80035c0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 63;
 80035c2:	4b14      	ldr	r3, [pc, #80]	; (8003614 <MX_TIM7_Init+0x6c>)
 80035c4:	223f      	movs	r2, #63	; 0x3f
 80035c6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c8:	4b12      	ldr	r3, [pc, #72]	; (8003614 <MX_TIM7_Init+0x6c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80035ce:	4b11      	ldr	r3, [pc, #68]	; (8003614 <MX_TIM7_Init+0x6c>)
 80035d0:	4a12      	ldr	r2, [pc, #72]	; (800361c <MX_TIM7_Init+0x74>)
 80035d2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <MX_TIM7_Init+0x6c>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80035da:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <MX_TIM7_Init+0x6c>)
 80035dc:	0018      	movs	r0, r3
 80035de:	f003 f967 	bl	80068b0 <HAL_TIM_Base_Init>
 80035e2:	1e03      	subs	r3, r0, #0
 80035e4:	d001      	beq.n	80035ea <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80035e6:	f7ff fc26 	bl	8002e36 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ea:	1d3b      	adds	r3, r7, #4
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	2200      	movs	r2, #0
 80035f4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80035f6:	1d3a      	adds	r2, r7, #4
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <MX_TIM7_Init+0x6c>)
 80035fa:	0011      	movs	r1, r2
 80035fc:	0018      	movs	r0, r3
 80035fe:	f003 fa2f 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 8003602:	1e03      	subs	r3, r0, #0
 8003604:	d001      	beq.n	800360a <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8003606:	f7ff fc16 	bl	8002e36 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	46bd      	mov	sp, r7
 800360e:	b004      	add	sp, #16
 8003610:	bd80      	pop	{r7, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	2000085c 	.word	0x2000085c
 8003618:	40001400 	.word	0x40001400
 800361c:	0000ffff 	.word	0x0000ffff

08003620 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a09      	ldr	r2, [pc, #36]	; (8003654 <HAL_TIM_Base_MspInit+0x34>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d10b      	bne.n	800364a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_TIM_Base_MspInit+0x38>)
 8003634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <HAL_TIM_Base_MspInit+0x38>)
 8003638:	2120      	movs	r1, #32
 800363a:	430a      	orrs	r2, r1
 800363c:	63da      	str	r2, [r3, #60]	; 0x3c
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_TIM_Base_MspInit+0x38>)
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	2220      	movs	r2, #32
 8003644:	4013      	ands	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	46bd      	mov	sp, r7
 800364e:	b004      	add	sp, #16
 8003650:	bd80      	pop	{r7, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	40001400 	.word	0x40001400
 8003658:	40021000 	.word	0x40021000

0800365c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003660:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 8003662:	4a26      	ldr	r2, [pc, #152]	; (80036fc <MX_LPUART1_UART_Init+0xa0>)
 8003664:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2400;
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 8003668:	2296      	movs	r2, #150	; 0x96
 800366a:	0112      	lsls	r2, r2, #4
 800366c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800367a:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 800367c:	2200      	movs	r2, #0
 800367e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003680:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 8003682:	220c      	movs	r2, #12
 8003684:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003686:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 8003688:	2200      	movs	r2, #0
 800368a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800368c:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 800368e:	2200      	movs	r2, #0
 8003690:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV16;
 8003692:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 8003694:	2207      	movs	r2, #7
 8003696:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003698:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 800369a:	2220      	movs	r2, #32
 800369c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800369e:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 80036a0:	2280      	movs	r2, #128	; 0x80
 80036a2:	0192      	lsls	r2, r2, #6
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80036a6:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80036ac:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 80036ae:	0018      	movs	r0, r3
 80036b0:	f003 fa44 	bl	8006b3c <HAL_UART_Init>
 80036b4:	1e03      	subs	r3, r0, #0
 80036b6:	d001      	beq.n	80036bc <MX_LPUART1_UART_Init+0x60>
  {
    Error_Handler();
 80036b8:	f7ff fbbd 	bl	8002e36 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036bc:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 80036be:	2100      	movs	r1, #0
 80036c0:	0018      	movs	r0, r3
 80036c2:	f004 fd93 	bl	80081ec <HAL_UARTEx_SetTxFifoThreshold>
 80036c6:	1e03      	subs	r3, r0, #0
 80036c8:	d001      	beq.n	80036ce <MX_LPUART1_UART_Init+0x72>
  {
    Error_Handler();
 80036ca:	f7ff fbb4 	bl	8002e36 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036ce:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 80036d0:	2100      	movs	r1, #0
 80036d2:	0018      	movs	r0, r3
 80036d4:	f004 fdca 	bl	800826c <HAL_UARTEx_SetRxFifoThreshold>
 80036d8:	1e03      	subs	r3, r0, #0
 80036da:	d001      	beq.n	80036e0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80036dc:	f7ff fbab 	bl	8002e36 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <MX_LPUART1_UART_Init+0x9c>)
 80036e2:	0018      	movs	r0, r3
 80036e4:	f004 fd48 	bl	8008178 <HAL_UARTEx_DisableFifoMode>
 80036e8:	1e03      	subs	r3, r0, #0
 80036ea:	d001      	beq.n	80036f0 <MX_LPUART1_UART_Init+0x94>
  {
    Error_Handler();
 80036ec:	f7ff fba3 	bl	8002e36 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80036f0:	46c0      	nop			; (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	200008a8 	.word	0x200008a8
 80036fc:	40008000 	.word	0x40008000

08003700 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003704:	4b23      	ldr	r3, [pc, #140]	; (8003794 <MX_USART1_UART_Init+0x94>)
 8003706:	4a24      	ldr	r2, [pc, #144]	; (8003798 <MX_USART1_UART_Init+0x98>)
 8003708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 800370a:	4b22      	ldr	r3, [pc, #136]	; (8003794 <MX_USART1_UART_Init+0x94>)
 800370c:	2296      	movs	r2, #150	; 0x96
 800370e:	0112      	lsls	r2, r2, #4
 8003710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <MX_USART1_UART_Init+0x94>)
 8003714:	2200      	movs	r2, #0
 8003716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003718:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <MX_USART1_UART_Init+0x94>)
 800371a:	2200      	movs	r2, #0
 800371c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <MX_USART1_UART_Init+0x94>)
 8003720:	2200      	movs	r2, #0
 8003722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <MX_USART1_UART_Init+0x94>)
 8003726:	220c      	movs	r2, #12
 8003728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800372a:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <MX_USART1_UART_Init+0x94>)
 800372c:	2200      	movs	r2, #0
 800372e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003730:	4b18      	ldr	r3, [pc, #96]	; (8003794 <MX_USART1_UART_Init+0x94>)
 8003732:	2200      	movs	r2, #0
 8003734:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003736:	4b17      	ldr	r3, [pc, #92]	; (8003794 <MX_USART1_UART_Init+0x94>)
 8003738:	2200      	movs	r2, #0
 800373a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800373c:	4b15      	ldr	r3, [pc, #84]	; (8003794 <MX_USART1_UART_Init+0x94>)
 800373e:	2200      	movs	r2, #0
 8003740:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003742:	4b14      	ldr	r3, [pc, #80]	; (8003794 <MX_USART1_UART_Init+0x94>)
 8003744:	2200      	movs	r2, #0
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <MX_USART1_UART_Init+0x94>)
 800374a:	0018      	movs	r0, r3
 800374c:	f003 f9f6 	bl	8006b3c <HAL_UART_Init>
 8003750:	1e03      	subs	r3, r0, #0
 8003752:	d001      	beq.n	8003758 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003754:	f7ff fb6f 	bl	8002e36 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <MX_USART1_UART_Init+0x94>)
 800375a:	2100      	movs	r1, #0
 800375c:	0018      	movs	r0, r3
 800375e:	f004 fd45 	bl	80081ec <HAL_UARTEx_SetTxFifoThreshold>
 8003762:	1e03      	subs	r3, r0, #0
 8003764:	d001      	beq.n	800376a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003766:	f7ff fb66 	bl	8002e36 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <MX_USART1_UART_Init+0x94>)
 800376c:	2100      	movs	r1, #0
 800376e:	0018      	movs	r0, r3
 8003770:	f004 fd7c 	bl	800826c <HAL_UARTEx_SetRxFifoThreshold>
 8003774:	1e03      	subs	r3, r0, #0
 8003776:	d001      	beq.n	800377c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003778:	f7ff fb5d 	bl	8002e36 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <MX_USART1_UART_Init+0x94>)
 800377e:	0018      	movs	r0, r3
 8003780:	f004 fcfa 	bl	8008178 <HAL_UARTEx_DisableFifoMode>
 8003784:	1e03      	subs	r3, r0, #0
 8003786:	d001      	beq.n	800378c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003788:	f7ff fb55 	bl	8002e36 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	2000093c 	.word	0x2000093c
 8003798:	40013800 	.word	0x40013800

0800379c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b097      	sub	sp, #92	; 0x5c
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a4:	2344      	movs	r3, #68	; 0x44
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	0018      	movs	r0, r3
 80037aa:	2314      	movs	r3, #20
 80037ac:	001a      	movs	r2, r3
 80037ae:	2100      	movs	r1, #0
 80037b0:	f004 fe88 	bl	80084c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037b4:	2418      	movs	r4, #24
 80037b6:	193b      	adds	r3, r7, r4
 80037b8:	0018      	movs	r0, r3
 80037ba:	232c      	movs	r3, #44	; 0x2c
 80037bc:	001a      	movs	r2, r3
 80037be:	2100      	movs	r1, #0
 80037c0:	f004 fe80 	bl	80084c4 <memset>
  if(uartHandle->Instance==LPUART1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a70      	ldr	r2, [pc, #448]	; (800398c <HAL_UART_MspInit+0x1f0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d16a      	bne.n	80038a4 <HAL_UART_MspInit+0x108>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80037ce:	193b      	adds	r3, r7, r4
 80037d0:	2210      	movs	r2, #16
 80037d2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 80037d4:	193b      	adds	r3, r7, r4
 80037d6:	2280      	movs	r2, #128	; 0x80
 80037d8:	0112      	lsls	r2, r2, #4
 80037da:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037dc:	193b      	adds	r3, r7, r4
 80037de:	0018      	movs	r0, r3
 80037e0:	f002 fece 	bl	8006580 <HAL_RCCEx_PeriphCLKConfig>
 80037e4:	1e03      	subs	r3, r0, #0
 80037e6:	d001      	beq.n	80037ec <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80037e8:	f7ff fb25 	bl	8002e36 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80037ec:	4b68      	ldr	r3, [pc, #416]	; (8003990 <HAL_UART_MspInit+0x1f4>)
 80037ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037f0:	4b67      	ldr	r3, [pc, #412]	; (8003990 <HAL_UART_MspInit+0x1f4>)
 80037f2:	2180      	movs	r1, #128	; 0x80
 80037f4:	0349      	lsls	r1, r1, #13
 80037f6:	430a      	orrs	r2, r1
 80037f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80037fa:	4b65      	ldr	r3, [pc, #404]	; (8003990 <HAL_UART_MspInit+0x1f4>)
 80037fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	035b      	lsls	r3, r3, #13
 8003802:	4013      	ands	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003808:	4b61      	ldr	r3, [pc, #388]	; (8003990 <HAL_UART_MspInit+0x1f4>)
 800380a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800380c:	4b60      	ldr	r3, [pc, #384]	; (8003990 <HAL_UART_MspInit+0x1f4>)
 800380e:	2101      	movs	r1, #1
 8003810:	430a      	orrs	r2, r1
 8003812:	635a      	str	r2, [r3, #52]	; 0x34
 8003814:	4b5e      	ldr	r3, [pc, #376]	; (8003990 <HAL_UART_MspInit+0x1f4>)
 8003816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003818:	2201      	movs	r2, #1
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003820:	2144      	movs	r1, #68	; 0x44
 8003822:	187b      	adds	r3, r7, r1
 8003824:	220c      	movs	r2, #12
 8003826:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003828:	187b      	adds	r3, r7, r1
 800382a:	2202      	movs	r2, #2
 800382c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	187b      	adds	r3, r7, r1
 8003830:	2200      	movs	r2, #0
 8003832:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003834:	187b      	adds	r3, r7, r1
 8003836:	2200      	movs	r2, #0
 8003838:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800383a:	187b      	adds	r3, r7, r1
 800383c:	2206      	movs	r2, #6
 800383e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003840:	187a      	adds	r2, r7, r1
 8003842:	23a0      	movs	r3, #160	; 0xa0
 8003844:	05db      	lsls	r3, r3, #23
 8003846:	0011      	movs	r1, r2
 8003848:	0018      	movs	r0, r3
 800384a:	f001 f9fb 	bl	8004c44 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 800384e:	4b51      	ldr	r3, [pc, #324]	; (8003994 <HAL_UART_MspInit+0x1f8>)
 8003850:	4a51      	ldr	r2, [pc, #324]	; (8003998 <HAL_UART_MspInit+0x1fc>)
 8003852:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003854:	4b4f      	ldr	r3, [pc, #316]	; (8003994 <HAL_UART_MspInit+0x1f8>)
 8003856:	220e      	movs	r2, #14
 8003858:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800385a:	4b4e      	ldr	r3, [pc, #312]	; (8003994 <HAL_UART_MspInit+0x1f8>)
 800385c:	2200      	movs	r2, #0
 800385e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003860:	4b4c      	ldr	r3, [pc, #304]	; (8003994 <HAL_UART_MspInit+0x1f8>)
 8003862:	2200      	movs	r2, #0
 8003864:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003866:	4b4b      	ldr	r3, [pc, #300]	; (8003994 <HAL_UART_MspInit+0x1f8>)
 8003868:	2280      	movs	r2, #128	; 0x80
 800386a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800386c:	4b49      	ldr	r3, [pc, #292]	; (8003994 <HAL_UART_MspInit+0x1f8>)
 800386e:	2200      	movs	r2, #0
 8003870:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003872:	4b48      	ldr	r3, [pc, #288]	; (8003994 <HAL_UART_MspInit+0x1f8>)
 8003874:	2200      	movs	r2, #0
 8003876:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8003878:	4b46      	ldr	r3, [pc, #280]	; (8003994 <HAL_UART_MspInit+0x1f8>)
 800387a:	2200      	movs	r2, #0
 800387c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800387e:	4b45      	ldr	r3, [pc, #276]	; (8003994 <HAL_UART_MspInit+0x1f8>)
 8003880:	2200      	movs	r2, #0
 8003882:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003884:	4b43      	ldr	r3, [pc, #268]	; (8003994 <HAL_UART_MspInit+0x1f8>)
 8003886:	0018      	movs	r0, r3
 8003888:	f000 febe 	bl	8004608 <HAL_DMA_Init>
 800388c:	1e03      	subs	r3, r0, #0
 800388e:	d001      	beq.n	8003894 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8003890:	f7ff fad1 	bl	8002e36 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	4a3e      	ldr	r2, [pc, #248]	; (8003994 <HAL_UART_MspInit+0x1f8>)
 800389a:	505a      	str	r2, [r3, r1]
 800389c:	4b3d      	ldr	r3, [pc, #244]	; (8003994 <HAL_UART_MspInit+0x1f8>)
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80038a2:	e06f      	b.n	8003984 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a3c      	ldr	r2, [pc, #240]	; (800399c <HAL_UART_MspInit+0x200>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d16a      	bne.n	8003984 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80038ae:	2118      	movs	r1, #24
 80038b0:	187b      	adds	r3, r7, r1
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	2200      	movs	r2, #0
 80038ba:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	0018      	movs	r0, r3
 80038c0:	f002 fe5e 	bl	8006580 <HAL_RCCEx_PeriphCLKConfig>
 80038c4:	1e03      	subs	r3, r0, #0
 80038c6:	d001      	beq.n	80038cc <HAL_UART_MspInit+0x130>
      Error_Handler();
 80038c8:	f7ff fab5 	bl	8002e36 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80038cc:	4b30      	ldr	r3, [pc, #192]	; (8003990 <HAL_UART_MspInit+0x1f4>)
 80038ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d0:	4b2f      	ldr	r3, [pc, #188]	; (8003990 <HAL_UART_MspInit+0x1f4>)
 80038d2:	2180      	movs	r1, #128	; 0x80
 80038d4:	01c9      	lsls	r1, r1, #7
 80038d6:	430a      	orrs	r2, r1
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40
 80038da:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <HAL_UART_MspInit+0x1f4>)
 80038dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	01db      	lsls	r3, r3, #7
 80038e2:	4013      	ands	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e8:	4b29      	ldr	r3, [pc, #164]	; (8003990 <HAL_UART_MspInit+0x1f4>)
 80038ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ec:	4b28      	ldr	r3, [pc, #160]	; (8003990 <HAL_UART_MspInit+0x1f4>)
 80038ee:	2101      	movs	r1, #1
 80038f0:	430a      	orrs	r2, r1
 80038f2:	635a      	str	r2, [r3, #52]	; 0x34
 80038f4:	4b26      	ldr	r3, [pc, #152]	; (8003990 <HAL_UART_MspInit+0x1f4>)
 80038f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f8:	2201      	movs	r2, #1
 80038fa:	4013      	ands	r3, r2
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003900:	2144      	movs	r1, #68	; 0x44
 8003902:	187b      	adds	r3, r7, r1
 8003904:	22c0      	movs	r2, #192	; 0xc0
 8003906:	00d2      	lsls	r2, r2, #3
 8003908:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	187b      	adds	r3, r7, r1
 800390c:	2202      	movs	r2, #2
 800390e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003910:	187b      	adds	r3, r7, r1
 8003912:	2200      	movs	r2, #0
 8003914:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003916:	187b      	adds	r3, r7, r1
 8003918:	2200      	movs	r2, #0
 800391a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800391c:	187b      	adds	r3, r7, r1
 800391e:	2201      	movs	r2, #1
 8003920:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003922:	187a      	adds	r2, r7, r1
 8003924:	23a0      	movs	r3, #160	; 0xa0
 8003926:	05db      	lsls	r3, r3, #23
 8003928:	0011      	movs	r1, r2
 800392a:	0018      	movs	r0, r3
 800392c:	f001 f98a 	bl	8004c44 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_UART_MspInit+0x204>)
 8003932:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <HAL_UART_MspInit+0x208>)
 8003934:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <HAL_UART_MspInit+0x204>)
 8003938:	2232      	movs	r2, #50	; 0x32
 800393a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800393c:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <HAL_UART_MspInit+0x204>)
 800393e:	2200      	movs	r2, #0
 8003940:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003942:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <HAL_UART_MspInit+0x204>)
 8003944:	2200      	movs	r2, #0
 8003946:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003948:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <HAL_UART_MspInit+0x204>)
 800394a:	2280      	movs	r2, #128	; 0x80
 800394c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800394e:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <HAL_UART_MspInit+0x204>)
 8003950:	2200      	movs	r2, #0
 8003952:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003954:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_UART_MspInit+0x204>)
 8003956:	2200      	movs	r2, #0
 8003958:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800395a:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <HAL_UART_MspInit+0x204>)
 800395c:	2200      	movs	r2, #0
 800395e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <HAL_UART_MspInit+0x204>)
 8003962:	2200      	movs	r2, #0
 8003964:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003966:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_UART_MspInit+0x204>)
 8003968:	0018      	movs	r0, r3
 800396a:	f000 fe4d 	bl	8004608 <HAL_DMA_Init>
 800396e:	1e03      	subs	r3, r0, #0
 8003970:	d001      	beq.n	8003976 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8003972:	f7ff fa60 	bl	8002e36 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2180      	movs	r1, #128	; 0x80
 800397a:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <HAL_UART_MspInit+0x204>)
 800397c:	505a      	str	r2, [r3, r1]
 800397e:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <HAL_UART_MspInit+0x204>)
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003984:	46c0      	nop			; (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b017      	add	sp, #92	; 0x5c
 800398a:	bd90      	pop	{r4, r7, pc}
 800398c:	40008000 	.word	0x40008000
 8003990:	40021000 	.word	0x40021000
 8003994:	200009d0 	.word	0x200009d0
 8003998:	4002001c 	.word	0x4002001c
 800399c:	40013800 	.word	0x40013800
 80039a0:	20000a2c 	.word	0x20000a2c
 80039a4:	40020008 	.word	0x40020008

080039a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80039a8:	480d      	ldr	r0, [pc, #52]	; (80039e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80039ac:	f7ff fdf0 	bl	8003590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039b0:	480c      	ldr	r0, [pc, #48]	; (80039e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80039b2:	490d      	ldr	r1, [pc, #52]	; (80039e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80039b4:	4a0d      	ldr	r2, [pc, #52]	; (80039ec <LoopForever+0xe>)
  movs r3, #0
 80039b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039b8:	e002      	b.n	80039c0 <LoopCopyDataInit>

080039ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039be:	3304      	adds	r3, #4

080039c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039c4:	d3f9      	bcc.n	80039ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039c8:	4c0a      	ldr	r4, [pc, #40]	; (80039f4 <LoopForever+0x16>)
  movs r3, #0
 80039ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039cc:	e001      	b.n	80039d2 <LoopFillZerobss>

080039ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039d0:	3204      	adds	r2, #4

080039d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039d4:	d3fb      	bcc.n	80039ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80039d6:	f004 fd51 	bl	800847c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80039da:	f7ff f981 	bl	8002ce0 <main>

080039de <LoopForever>:

LoopForever:
  b LoopForever
 80039de:	e7fe      	b.n	80039de <LoopForever>
  ldr   r0, =_estack
 80039e0:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 80039e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039e8:	2000053c 	.word	0x2000053c
  ldr r2, =_sidata
 80039ec:	080086e8 	.word	0x080086e8
  ldr r2, =_sbss
 80039f0:	2000053c 	.word	0x2000053c
  ldr r4, =_ebss
 80039f4:	20000a90 	.word	0x20000a90

080039f8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039f8:	e7fe      	b.n	80039f8 <ADC1_COMP_IRQHandler>
	...

080039fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a02:	1dfb      	adds	r3, r7, #7
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_Init+0x3c>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <HAL_Init+0x3c>)
 8003a0e:	2180      	movs	r1, #128	; 0x80
 8003a10:	0049      	lsls	r1, r1, #1
 8003a12:	430a      	orrs	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a16:	2003      	movs	r0, #3
 8003a18:	f000 f810 	bl	8003a3c <HAL_InitTick>
 8003a1c:	1e03      	subs	r3, r0, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003a20:	1dfb      	adds	r3, r7, #7
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	e001      	b.n	8003a2c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003a28:	f7ff fd3c 	bl	80034a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a2c:	1dfb      	adds	r3, r7, #7
 8003a2e:	781b      	ldrb	r3, [r3, #0]
}
 8003a30:	0018      	movs	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b002      	add	sp, #8
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40022000 	.word	0x40022000

08003a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a44:	230f      	movs	r3, #15
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <HAL_InitTick+0x88>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02b      	beq.n	8003aac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003a54:	4b1c      	ldr	r3, [pc, #112]	; (8003ac8 <HAL_InitTick+0x8c>)
 8003a56:	681c      	ldr	r4, [r3, #0]
 8003a58:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <HAL_InitTick+0x88>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	23fa      	movs	r3, #250	; 0xfa
 8003a60:	0098      	lsls	r0, r3, #2
 8003a62:	f7fc fb4d 	bl	8000100 <__udivsi3>
 8003a66:	0003      	movs	r3, r0
 8003a68:	0019      	movs	r1, r3
 8003a6a:	0020      	movs	r0, r4
 8003a6c:	f7fc fb48 	bl	8000100 <__udivsi3>
 8003a70:	0003      	movs	r3, r0
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 fdbb 	bl	80045ee <HAL_SYSTICK_Config>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d112      	bne.n	8003aa2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d80a      	bhi.n	8003a98 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	2301      	movs	r3, #1
 8003a86:	425b      	negs	r3, r3
 8003a88:	2200      	movs	r2, #0
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f000 fd8a 	bl	80045a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a90:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <HAL_InitTick+0x90>)
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e00d      	b.n	8003ab4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003a98:	230f      	movs	r3, #15
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	e008      	b.n	8003ab4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003aa2:	230f      	movs	r3, #15
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	e003      	b.n	8003ab4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003aac:	230f      	movs	r3, #15
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003ab4:	230f      	movs	r3, #15
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	781b      	ldrb	r3, [r3, #0]
}
 8003aba:	0018      	movs	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b005      	add	sp, #20
 8003ac0:	bd90      	pop	{r4, r7, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	2000010c 	.word	0x2000010c
 8003ac8:	20000104 	.word	0x20000104
 8003acc:	20000108 	.word	0x20000108

08003ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_IncTick+0x1c>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	001a      	movs	r2, r3
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_IncTick+0x20>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	18d2      	adds	r2, r2, r3
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <HAL_IncTick+0x20>)
 8003ae2:	601a      	str	r2, [r3, #0]
}
 8003ae4:	46c0      	nop			; (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	2000010c 	.word	0x2000010c
 8003af0:	20000a88 	.word	0x20000a88

08003af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  return uwTick;
 8003af8:	4b02      	ldr	r3, [pc, #8]	; (8003b04 <HAL_GetTick+0x10>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	0018      	movs	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	20000a88 	.word	0x20000a88

08003b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b10:	f7ff fff0 	bl	8003af4 <HAL_GetTick>
 8003b14:	0003      	movs	r3, r0
 8003b16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	d005      	beq.n	8003b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <HAL_Delay+0x44>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	001a      	movs	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	189b      	adds	r3, r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	f7ff ffe0 	bl	8003af4 <HAL_GetTick>
 8003b34:	0002      	movs	r2, r0
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d8f7      	bhi.n	8003b30 <HAL_Delay+0x28>
  {
  }
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b004      	add	sp, #16
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	2000010c 	.word	0x2000010c

08003b50 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a05      	ldr	r2, [pc, #20]	; (8003b74 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003b60:	401a      	ands	r2, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	601a      	str	r2, [r3, #0]
}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b002      	add	sp, #8
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	fe3fffff 	.word	0xfe3fffff

08003b78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	23e0      	movs	r3, #224	; 0xe0
 8003b86:	045b      	lsls	r3, r3, #17
 8003b88:	4013      	ands	r3, r2
}
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	2104      	movs	r1, #4
 8003ba6:	400a      	ands	r2, r1
 8003ba8:	2107      	movs	r1, #7
 8003baa:	4091      	lsls	r1, r2
 8003bac:	000a      	movs	r2, r1
 8003bae:	43d2      	mvns	r2, r2
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2104      	movs	r1, #4
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4099      	lsls	r1, r3
 8003bbc:	000b      	movs	r3, r1
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b004      	add	sp, #16
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	2104      	movs	r1, #4
 8003bde:	400a      	ands	r2, r1
 8003be0:	2107      	movs	r1, #7
 8003be2:	4091      	lsls	r1, r2
 8003be4:	000a      	movs	r2, r1
 8003be6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2104      	movs	r1, #4
 8003bec:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003bee:	40da      	lsrs	r2, r3
 8003bf0:	0013      	movs	r3, r2
}
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b002      	add	sp, #8
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	211f      	movs	r1, #31
 8003c0e:	400a      	ands	r2, r1
 8003c10:	210f      	movs	r1, #15
 8003c12:	4091      	lsls	r1, r2
 8003c14:	000a      	movs	r2, r1
 8003c16:	43d2      	mvns	r2, r2
 8003c18:	401a      	ands	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	0e9b      	lsrs	r3, r3, #26
 8003c1e:	210f      	movs	r1, #15
 8003c20:	4019      	ands	r1, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	201f      	movs	r0, #31
 8003c26:	4003      	ands	r3, r0
 8003c28:	4099      	lsls	r1, r3
 8003c2a:	000b      	movs	r3, r1
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b004      	add	sp, #16
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	035b      	lsls	r3, r3, #13
 8003c4c:	0b5b      	lsrs	r3, r3, #13
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b002      	add	sp, #8
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	0352      	lsls	r2, r2, #13
 8003c6e:	0b52      	lsrs	r2, r2, #13
 8003c70:	43d2      	mvns	r2, r2
 8003c72:	401a      	ands	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	0212      	lsls	r2, r2, #8
 8003c94:	43d2      	mvns	r2, r2
 8003c96:	401a      	ands	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	400b      	ands	r3, r1
 8003ca0:	4904      	ldr	r1, [pc, #16]	; (8003cb4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003ca2:	400b      	ands	r3, r1
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b004      	add	sp, #16
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	07ffff00 	.word	0x07ffff00

08003cb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	4a05      	ldr	r2, [pc, #20]	; (8003cdc <LL_ADC_EnableInternalRegulator+0x24>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2280      	movs	r2, #128	; 0x80
 8003cca:	0552      	lsls	r2, r2, #21
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b002      	add	sp, #8
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	6fffffe8 	.word	0x6fffffe8

08003ce0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	055b      	lsls	r3, r3, #21
 8003cf0:	401a      	ands	r2, r3
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	055b      	lsls	r3, r3, #21
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d101      	bne.n	8003cfe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	0018      	movs	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b002      	add	sp, #8
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2201      	movs	r2, #1
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <LL_ADC_IsEnabled+0x18>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <LL_ADC_IsEnabled+0x1a>
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	0018      	movs	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b002      	add	sp, #8
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2204      	movs	r2, #4
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d101      	bne.n	8003d42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d54:	231f      	movs	r3, #31
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e17f      	b.n	8004072 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7fe fd73 	bl	8002868 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2254      	movs	r2, #84	; 0x54
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7ff ffa3 	bl	8003ce0 <LL_ADC_IsInternalRegulatorEnabled>
 8003d9a:	1e03      	subs	r3, r0, #0
 8003d9c:	d115      	bne.n	8003dca <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7ff ff88 	bl	8003cb8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003da8:	4bb4      	ldr	r3, [pc, #720]	; (800407c <HAL_ADC_Init+0x330>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	49b4      	ldr	r1, [pc, #720]	; (8004080 <HAL_ADC_Init+0x334>)
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7fc f9a6 	bl	8000100 <__udivsi3>
 8003db4:	0003      	movs	r3, r0
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dbc:	e002      	b.n	8003dc4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f9      	bne.n	8003dbe <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f7ff ff86 	bl	8003ce0 <LL_ADC_IsInternalRegulatorEnabled>
 8003dd4:	1e03      	subs	r3, r0, #0
 8003dd6:	d10f      	bne.n	8003df8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ddc:	2210      	movs	r2, #16
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	2201      	movs	r2, #1
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003df0:	231f      	movs	r3, #31
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f7ff ff94 	bl	8003d2a <LL_ADC_REG_IsConversionOngoing>
 8003e02:	0003      	movs	r3, r0
 8003e04:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	2210      	movs	r2, #16
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d000      	beq.n	8003e12 <HAL_ADC_Init+0xc6>
 8003e10:	e122      	b.n	8004058 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d000      	beq.n	8003e1a <HAL_ADC_Init+0xce>
 8003e18:	e11e      	b.n	8004058 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	4a99      	ldr	r2, [pc, #612]	; (8004084 <HAL_ADC_Init+0x338>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	2202      	movs	r2, #2
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f7ff ff6a 	bl	8003d08 <LL_ADC_IsEnabled>
 8003e34:	1e03      	subs	r3, r0, #0
 8003e36:	d000      	beq.n	8003e3a <HAL_ADC_Init+0xee>
 8003e38:	e0ad      	b.n	8003f96 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	7e1b      	ldrb	r3, [r3, #24]
 8003e42:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e44:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7e5b      	ldrb	r3, [r3, #25]
 8003e4a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e4c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	7e9b      	ldrb	r3, [r3, #26]
 8003e52:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e54:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_ADC_Init+0x118>
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	015b      	lsls	r3, r3, #5
 8003e62:	e000      	b.n	8003e66 <HAL_ADC_Init+0x11a>
 8003e64:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e66:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e6c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	da04      	bge.n	8003e80 <HAL_ADC_Init+0x134>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	e001      	b.n	8003e84 <HAL_ADC_Init+0x138>
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003e84:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	212c      	movs	r1, #44	; 0x2c
 8003e8a:	5c5b      	ldrb	r3, [r3, r1]
 8003e8c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e8e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	5c9b      	ldrb	r3, [r3, r2]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d115      	bne.n	8003ecc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7e9b      	ldrb	r3, [r3, #26]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d105      	bne.n	8003eb4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2280      	movs	r2, #128	; 0x80
 8003eac:	0252      	lsls	r2, r2, #9
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e00b      	b.n	8003ecc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb8:	2220      	movs	r2, #32
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed8:	23e0      	movs	r3, #224	; 0xe0
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	4a65      	ldr	r2, [pc, #404]	; (8004088 <HAL_ADC_Init+0x33c>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	0f9b      	lsrs	r3, r3, #30
 8003f06:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	223c      	movs	r2, #60	; 0x3c
 8003f18:	5c9b      	ldrb	r3, [r3, r2]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d111      	bne.n	8003f42 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	0f9b      	lsrs	r3, r3, #30
 8003f24:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f2a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003f30:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003f36:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	4a50      	ldr	r2, [pc, #320]	; (800408c <HAL_ADC_Init+0x340>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	23c0      	movs	r3, #192	; 0xc0
 8003f5e:	061b      	lsls	r3, r3, #24
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d018      	beq.n	8003f96 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	05db      	lsls	r3, r3, #23
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d012      	beq.n	8003f96 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	061b      	lsls	r3, r3, #24
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d00c      	beq.n	8003f96 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003f7c:	4b44      	ldr	r3, [pc, #272]	; (8004090 <HAL_ADC_Init+0x344>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a44      	ldr	r2, [pc, #272]	; (8004094 <HAL_ADC_Init+0x348>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	0019      	movs	r1, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	23f0      	movs	r3, #240	; 0xf0
 8003f8c:	039b      	lsls	r3, r3, #14
 8003f8e:	401a      	ands	r2, r3
 8003f90:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_ADC_Init+0x344>)
 8003f92:	430a      	orrs	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	f7ff fdf6 	bl	8003b92 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	493a      	ldr	r1, [pc, #232]	; (8004098 <HAL_ADC_Init+0x34c>)
 8003fb0:	001a      	movs	r2, r3
 8003fb2:	f7ff fdee 	bl	8003b92 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2110      	movs	r1, #16
 8003fca:	4249      	negs	r1, r1
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28
 8003fd0:	e018      	b.n	8004004 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	039b      	lsls	r3, r3, #14
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d112      	bne.n	8004004 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	221c      	movs	r2, #28
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	4252      	negs	r2, r2
 8003ff4:	409a      	lsls	r2, r3
 8003ff6:	0011      	movs	r1, r2
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2100      	movs	r1, #0
 800400a:	0018      	movs	r0, r3
 800400c:	f7ff fdde 	bl	8003bcc <LL_ADC_GetSamplingTimeCommonChannels>
 8004010:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004016:	429a      	cmp	r2, r3
 8004018:	d10b      	bne.n	8004032 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004024:	2203      	movs	r2, #3
 8004026:	4393      	bics	r3, r2
 8004028:	2201      	movs	r2, #1
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004030:	e01c      	b.n	800406c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004036:	2212      	movs	r2, #18
 8004038:	4393      	bics	r3, r2
 800403a:	2210      	movs	r2, #16
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	2201      	movs	r2, #1
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800404e:	231f      	movs	r3, #31
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004056:	e009      	b.n	800406c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	2210      	movs	r2, #16
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004064:	231f      	movs	r3, #31
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	2201      	movs	r2, #1
 800406a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800406c:	231f      	movs	r3, #31
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	781b      	ldrb	r3, [r3, #0]
}
 8004072:	0018      	movs	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	b008      	add	sp, #32
 8004078:	bd80      	pop	{r7, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	20000104 	.word	0x20000104
 8004080:	00030d40 	.word	0x00030d40
 8004084:	fffffefd 	.word	0xfffffefd
 8004088:	fffe0201 	.word	0xfffe0201
 800408c:	1ffffc02 	.word	0x1ffffc02
 8004090:	40012708 	.word	0x40012708
 8004094:	ffc3ffff 	.word	0xffc3ffff
 8004098:	07ffff04 	.word	0x07ffff04

0800409c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040a6:	2317      	movs	r3, #23
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	2200      	movs	r2, #0
 80040ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2254      	movs	r2, #84	; 0x54
 80040b6:	5c9b      	ldrb	r3, [r3, r2]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x24>
 80040bc:	2302      	movs	r3, #2
 80040be:	e1c0      	b.n	8004442 <HAL_ADC_ConfigChannel+0x3a6>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2254      	movs	r2, #84	; 0x54
 80040c4:	2101      	movs	r1, #1
 80040c6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7ff fe2c 	bl	8003d2a <LL_ADC_REG_IsConversionOngoing>
 80040d2:	1e03      	subs	r3, r0, #0
 80040d4:	d000      	beq.n	80040d8 <HAL_ADC_ConfigChannel+0x3c>
 80040d6:	e1a3      	b.n	8004420 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d100      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x46>
 80040e0:	e143      	b.n	800436a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	2380      	movs	r3, #128	; 0x80
 80040e8:	061b      	lsls	r3, r3, #24
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d004      	beq.n	80040f8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040f2:	4ac1      	ldr	r2, [pc, #772]	; (80043f8 <HAL_ADC_ConfigChannel+0x35c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d108      	bne.n	800410a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	0019      	movs	r1, r3
 8004102:	0010      	movs	r0, r2
 8004104:	f7ff fd99 	bl	8003c3a <LL_ADC_REG_SetSequencerChAdd>
 8004108:	e0c9      	b.n	800429e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	211f      	movs	r1, #31
 8004114:	400b      	ands	r3, r1
 8004116:	210f      	movs	r1, #15
 8004118:	4099      	lsls	r1, r3
 800411a:	000b      	movs	r3, r1
 800411c:	43db      	mvns	r3, r3
 800411e:	4013      	ands	r3, r2
 8004120:	0019      	movs	r1, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	035b      	lsls	r3, r3, #13
 8004128:	0b5b      	lsrs	r3, r3, #13
 800412a:	d105      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x9c>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	0e9b      	lsrs	r3, r3, #26
 8004132:	221f      	movs	r2, #31
 8004134:	4013      	ands	r3, r2
 8004136:	e098      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2201      	movs	r2, #1
 800413e:	4013      	ands	r3, r2
 8004140:	d000      	beq.n	8004144 <HAL_ADC_ConfigChannel+0xa8>
 8004142:	e091      	b.n	8004268 <HAL_ADC_ConfigChannel+0x1cc>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2202      	movs	r2, #2
 800414a:	4013      	ands	r3, r2
 800414c:	d000      	beq.n	8004150 <HAL_ADC_ConfigChannel+0xb4>
 800414e:	e089      	b.n	8004264 <HAL_ADC_ConfigChannel+0x1c8>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2204      	movs	r2, #4
 8004156:	4013      	ands	r3, r2
 8004158:	d000      	beq.n	800415c <HAL_ADC_ConfigChannel+0xc0>
 800415a:	e081      	b.n	8004260 <HAL_ADC_ConfigChannel+0x1c4>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2208      	movs	r2, #8
 8004162:	4013      	ands	r3, r2
 8004164:	d000      	beq.n	8004168 <HAL_ADC_ConfigChannel+0xcc>
 8004166:	e079      	b.n	800425c <HAL_ADC_ConfigChannel+0x1c0>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2210      	movs	r2, #16
 800416e:	4013      	ands	r3, r2
 8004170:	d000      	beq.n	8004174 <HAL_ADC_ConfigChannel+0xd8>
 8004172:	e071      	b.n	8004258 <HAL_ADC_ConfigChannel+0x1bc>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2220      	movs	r2, #32
 800417a:	4013      	ands	r3, r2
 800417c:	d000      	beq.n	8004180 <HAL_ADC_ConfigChannel+0xe4>
 800417e:	e069      	b.n	8004254 <HAL_ADC_ConfigChannel+0x1b8>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2240      	movs	r2, #64	; 0x40
 8004186:	4013      	ands	r3, r2
 8004188:	d000      	beq.n	800418c <HAL_ADC_ConfigChannel+0xf0>
 800418a:	e061      	b.n	8004250 <HAL_ADC_ConfigChannel+0x1b4>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2280      	movs	r2, #128	; 0x80
 8004192:	4013      	ands	r3, r2
 8004194:	d000      	beq.n	8004198 <HAL_ADC_ConfigChannel+0xfc>
 8004196:	e059      	b.n	800424c <HAL_ADC_ConfigChannel+0x1b0>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4013      	ands	r3, r2
 80041a2:	d151      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x1ac>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4013      	ands	r3, r2
 80041ae:	d149      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x1a8>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4013      	ands	r3, r2
 80041ba:	d141      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x1a4>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	4013      	ands	r3, r2
 80041c6:	d139      	bne.n	800423c <HAL_ADC_ConfigChannel+0x1a0>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	015b      	lsls	r3, r3, #5
 80041d0:	4013      	ands	r3, r2
 80041d2:	d131      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x19c>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	2380      	movs	r3, #128	; 0x80
 80041da:	019b      	lsls	r3, r3, #6
 80041dc:	4013      	ands	r3, r2
 80041de:	d129      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x198>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	01db      	lsls	r3, r3, #7
 80041e8:	4013      	ands	r3, r2
 80041ea:	d121      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x194>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	4013      	ands	r3, r2
 80041f6:	d119      	bne.n	800422c <HAL_ADC_ConfigChannel+0x190>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	025b      	lsls	r3, r3, #9
 8004200:	4013      	ands	r3, r2
 8004202:	d111      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x18c>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	029b      	lsls	r3, r3, #10
 800420c:	4013      	ands	r3, r2
 800420e:	d109      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x188>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	02db      	lsls	r3, r3, #11
 8004218:	4013      	ands	r3, r2
 800421a:	d001      	beq.n	8004220 <HAL_ADC_ConfigChannel+0x184>
 800421c:	2312      	movs	r3, #18
 800421e:	e024      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004220:	2300      	movs	r3, #0
 8004222:	e022      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004224:	2311      	movs	r3, #17
 8004226:	e020      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004228:	2310      	movs	r3, #16
 800422a:	e01e      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 800422c:	230f      	movs	r3, #15
 800422e:	e01c      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004230:	230e      	movs	r3, #14
 8004232:	e01a      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004234:	230d      	movs	r3, #13
 8004236:	e018      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004238:	230c      	movs	r3, #12
 800423a:	e016      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 800423c:	230b      	movs	r3, #11
 800423e:	e014      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004240:	230a      	movs	r3, #10
 8004242:	e012      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004244:	2309      	movs	r3, #9
 8004246:	e010      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004248:	2308      	movs	r3, #8
 800424a:	e00e      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 800424c:	2307      	movs	r3, #7
 800424e:	e00c      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004250:	2306      	movs	r3, #6
 8004252:	e00a      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004254:	2305      	movs	r3, #5
 8004256:	e008      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004258:	2304      	movs	r3, #4
 800425a:	e006      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 800425c:	2303      	movs	r3, #3
 800425e:	e004      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004260:	2302      	movs	r3, #2
 8004262:	e002      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <HAL_ADC_ConfigChannel+0x1ce>
 8004268:	2300      	movs	r3, #0
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	6852      	ldr	r2, [r2, #4]
 800426e:	201f      	movs	r0, #31
 8004270:	4002      	ands	r2, r0
 8004272:	4093      	lsls	r3, r2
 8004274:	000a      	movs	r2, r1
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	089b      	lsrs	r3, r3, #2
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	429a      	cmp	r2, r3
 800428a:	d808      	bhi.n	800429e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	6859      	ldr	r1, [r3, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	001a      	movs	r2, r3
 800429a:	f7ff fcae 	bl	8003bfa <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6819      	ldr	r1, [r3, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	001a      	movs	r2, r3
 80042ac:	f7ff fce8 	bl	8003c80 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	db00      	blt.n	80042ba <HAL_ADC_ConfigChannel+0x21e>
 80042b8:	e0bc      	b.n	8004434 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042ba:	4b50      	ldr	r3, [pc, #320]	; (80043fc <HAL_ADC_ConfigChannel+0x360>)
 80042bc:	0018      	movs	r0, r3
 80042be:	f7ff fc5b 	bl	8003b78 <LL_ADC_GetCommonPathInternalCh>
 80042c2:	0003      	movs	r3, r0
 80042c4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a4d      	ldr	r2, [pc, #308]	; (8004400 <HAL_ADC_ConfigChannel+0x364>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d122      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	2380      	movs	r3, #128	; 0x80
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80042d8:	d11d      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2280      	movs	r2, #128	; 0x80
 80042de:	0412      	lsls	r2, r2, #16
 80042e0:	4313      	orrs	r3, r2
 80042e2:	4a46      	ldr	r2, [pc, #280]	; (80043fc <HAL_ADC_ConfigChannel+0x360>)
 80042e4:	0019      	movs	r1, r3
 80042e6:	0010      	movs	r0, r2
 80042e8:	f7ff fc32 	bl	8003b50 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042ec:	4b45      	ldr	r3, [pc, #276]	; (8004404 <HAL_ADC_ConfigChannel+0x368>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4945      	ldr	r1, [pc, #276]	; (8004408 <HAL_ADC_ConfigChannel+0x36c>)
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7fb ff04 	bl	8000100 <__udivsi3>
 80042f8:	0003      	movs	r3, r0
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	0013      	movs	r3, r2
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	189b      	adds	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004306:	e002      	b.n	800430e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3b01      	subs	r3, #1
 800430c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f9      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004314:	e08e      	b.n	8004434 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a3c      	ldr	r2, [pc, #240]	; (800440c <HAL_ADC_ConfigChannel+0x370>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d10e      	bne.n	800433e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	045b      	lsls	r3, r3, #17
 8004326:	4013      	ands	r3, r2
 8004328:	d109      	bne.n	800433e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2280      	movs	r2, #128	; 0x80
 800432e:	0452      	lsls	r2, r2, #17
 8004330:	4313      	orrs	r3, r2
 8004332:	4a32      	ldr	r2, [pc, #200]	; (80043fc <HAL_ADC_ConfigChannel+0x360>)
 8004334:	0019      	movs	r1, r3
 8004336:	0010      	movs	r0, r2
 8004338:	f7ff fc0a 	bl	8003b50 <LL_ADC_SetCommonPathInternalCh>
 800433c:	e07a      	b.n	8004434 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a33      	ldr	r2, [pc, #204]	; (8004410 <HAL_ADC_ConfigChannel+0x374>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d000      	beq.n	800434a <HAL_ADC_ConfigChannel+0x2ae>
 8004348:	e074      	b.n	8004434 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	03db      	lsls	r3, r3, #15
 8004350:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004352:	d000      	beq.n	8004356 <HAL_ADC_ConfigChannel+0x2ba>
 8004354:	e06e      	b.n	8004434 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2280      	movs	r2, #128	; 0x80
 800435a:	03d2      	lsls	r2, r2, #15
 800435c:	4313      	orrs	r3, r2
 800435e:	4a27      	ldr	r2, [pc, #156]	; (80043fc <HAL_ADC_ConfigChannel+0x360>)
 8004360:	0019      	movs	r1, r3
 8004362:	0010      	movs	r0, r2
 8004364:	f7ff fbf4 	bl	8003b50 <LL_ADC_SetCommonPathInternalCh>
 8004368:	e064      	b.n	8004434 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	2380      	movs	r3, #128	; 0x80
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	429a      	cmp	r2, r3
 8004374:	d004      	beq.n	8004380 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800437a:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <HAL_ADC_ConfigChannel+0x35c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d107      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	0019      	movs	r1, r3
 800438a:	0010      	movs	r0, r2
 800438c:	f7ff fc66 	bl	8003c5c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	da4d      	bge.n	8004434 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004398:	4b18      	ldr	r3, [pc, #96]	; (80043fc <HAL_ADC_ConfigChannel+0x360>)
 800439a:	0018      	movs	r0, r3
 800439c:	f7ff fbec 	bl	8003b78 <LL_ADC_GetCommonPathInternalCh>
 80043a0:	0003      	movs	r3, r0
 80043a2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a15      	ldr	r2, [pc, #84]	; (8004400 <HAL_ADC_ConfigChannel+0x364>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d108      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4a18      	ldr	r2, [pc, #96]	; (8004414 <HAL_ADC_ConfigChannel+0x378>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	4a11      	ldr	r2, [pc, #68]	; (80043fc <HAL_ADC_ConfigChannel+0x360>)
 80043b6:	0019      	movs	r1, r3
 80043b8:	0010      	movs	r0, r2
 80043ba:	f7ff fbc9 	bl	8003b50 <LL_ADC_SetCommonPathInternalCh>
 80043be:	e039      	b.n	8004434 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a11      	ldr	r2, [pc, #68]	; (800440c <HAL_ADC_ConfigChannel+0x370>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d108      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4a12      	ldr	r2, [pc, #72]	; (8004418 <HAL_ADC_ConfigChannel+0x37c>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	4a0a      	ldr	r2, [pc, #40]	; (80043fc <HAL_ADC_ConfigChannel+0x360>)
 80043d2:	0019      	movs	r1, r3
 80043d4:	0010      	movs	r0, r2
 80043d6:	f7ff fbbb 	bl	8003b50 <LL_ADC_SetCommonPathInternalCh>
 80043da:	e02b      	b.n	8004434 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <HAL_ADC_ConfigChannel+0x374>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d126      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4a0c      	ldr	r2, [pc, #48]	; (800441c <HAL_ADC_ConfigChannel+0x380>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	4a03      	ldr	r2, [pc, #12]	; (80043fc <HAL_ADC_ConfigChannel+0x360>)
 80043ee:	0019      	movs	r1, r3
 80043f0:	0010      	movs	r0, r2
 80043f2:	f7ff fbad 	bl	8003b50 <LL_ADC_SetCommonPathInternalCh>
 80043f6:	e01d      	b.n	8004434 <HAL_ADC_ConfigChannel+0x398>
 80043f8:	80000004 	.word	0x80000004
 80043fc:	40012708 	.word	0x40012708
 8004400:	b0001000 	.word	0xb0001000
 8004404:	20000104 	.word	0x20000104
 8004408:	00030d40 	.word	0x00030d40
 800440c:	b8004000 	.word	0xb8004000
 8004410:	b4002000 	.word	0xb4002000
 8004414:	ff7fffff 	.word	0xff7fffff
 8004418:	feffffff 	.word	0xfeffffff
 800441c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004424:	2220      	movs	r2, #32
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800442c:	2317      	movs	r3, #23
 800442e:	18fb      	adds	r3, r7, r3
 8004430:	2201      	movs	r2, #1
 8004432:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2254      	movs	r2, #84	; 0x54
 8004438:	2100      	movs	r1, #0
 800443a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800443c:	2317      	movs	r3, #23
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	781b      	ldrb	r3, [r3, #0]
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b006      	add	sp, #24
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)

0800444c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	0002      	movs	r2, r0
 8004454:	1dfb      	adds	r3, r7, #7
 8004456:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004458:	1dfb      	adds	r3, r7, #7
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b7f      	cmp	r3, #127	; 0x7f
 800445e:	d809      	bhi.n	8004474 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004460:	1dfb      	adds	r3, r7, #7
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	001a      	movs	r2, r3
 8004466:	231f      	movs	r3, #31
 8004468:	401a      	ands	r2, r3
 800446a:	4b04      	ldr	r3, [pc, #16]	; (800447c <__NVIC_EnableIRQ+0x30>)
 800446c:	2101      	movs	r1, #1
 800446e:	4091      	lsls	r1, r2
 8004470:	000a      	movs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004474:	46c0      	nop			; (mov r8, r8)
 8004476:	46bd      	mov	sp, r7
 8004478:	b002      	add	sp, #8
 800447a:	bd80      	pop	{r7, pc}
 800447c:	e000e100 	.word	0xe000e100

08004480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004480:	b590      	push	{r4, r7, lr}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	0002      	movs	r2, r0
 8004488:	6039      	str	r1, [r7, #0]
 800448a:	1dfb      	adds	r3, r7, #7
 800448c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800448e:	1dfb      	adds	r3, r7, #7
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b7f      	cmp	r3, #127	; 0x7f
 8004494:	d828      	bhi.n	80044e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004496:	4a2f      	ldr	r2, [pc, #188]	; (8004554 <__NVIC_SetPriority+0xd4>)
 8004498:	1dfb      	adds	r3, r7, #7
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b25b      	sxtb	r3, r3
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	33c0      	adds	r3, #192	; 0xc0
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	589b      	ldr	r3, [r3, r2]
 80044a6:	1dfa      	adds	r2, r7, #7
 80044a8:	7812      	ldrb	r2, [r2, #0]
 80044aa:	0011      	movs	r1, r2
 80044ac:	2203      	movs	r2, #3
 80044ae:	400a      	ands	r2, r1
 80044b0:	00d2      	lsls	r2, r2, #3
 80044b2:	21ff      	movs	r1, #255	; 0xff
 80044b4:	4091      	lsls	r1, r2
 80044b6:	000a      	movs	r2, r1
 80044b8:	43d2      	mvns	r2, r2
 80044ba:	401a      	ands	r2, r3
 80044bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	019b      	lsls	r3, r3, #6
 80044c2:	22ff      	movs	r2, #255	; 0xff
 80044c4:	401a      	ands	r2, r3
 80044c6:	1dfb      	adds	r3, r7, #7
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	0018      	movs	r0, r3
 80044cc:	2303      	movs	r3, #3
 80044ce:	4003      	ands	r3, r0
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044d4:	481f      	ldr	r0, [pc, #124]	; (8004554 <__NVIC_SetPriority+0xd4>)
 80044d6:	1dfb      	adds	r3, r7, #7
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	b25b      	sxtb	r3, r3
 80044dc:	089b      	lsrs	r3, r3, #2
 80044de:	430a      	orrs	r2, r1
 80044e0:	33c0      	adds	r3, #192	; 0xc0
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80044e6:	e031      	b.n	800454c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044e8:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <__NVIC_SetPriority+0xd8>)
 80044ea:	1dfb      	adds	r3, r7, #7
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	0019      	movs	r1, r3
 80044f0:	230f      	movs	r3, #15
 80044f2:	400b      	ands	r3, r1
 80044f4:	3b08      	subs	r3, #8
 80044f6:	089b      	lsrs	r3, r3, #2
 80044f8:	3306      	adds	r3, #6
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	18d3      	adds	r3, r2, r3
 80044fe:	3304      	adds	r3, #4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	1dfa      	adds	r2, r7, #7
 8004504:	7812      	ldrb	r2, [r2, #0]
 8004506:	0011      	movs	r1, r2
 8004508:	2203      	movs	r2, #3
 800450a:	400a      	ands	r2, r1
 800450c:	00d2      	lsls	r2, r2, #3
 800450e:	21ff      	movs	r1, #255	; 0xff
 8004510:	4091      	lsls	r1, r2
 8004512:	000a      	movs	r2, r1
 8004514:	43d2      	mvns	r2, r2
 8004516:	401a      	ands	r2, r3
 8004518:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	019b      	lsls	r3, r3, #6
 800451e:	22ff      	movs	r2, #255	; 0xff
 8004520:	401a      	ands	r2, r3
 8004522:	1dfb      	adds	r3, r7, #7
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	0018      	movs	r0, r3
 8004528:	2303      	movs	r3, #3
 800452a:	4003      	ands	r3, r0
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004530:	4809      	ldr	r0, [pc, #36]	; (8004558 <__NVIC_SetPriority+0xd8>)
 8004532:	1dfb      	adds	r3, r7, #7
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	001c      	movs	r4, r3
 8004538:	230f      	movs	r3, #15
 800453a:	4023      	ands	r3, r4
 800453c:	3b08      	subs	r3, #8
 800453e:	089b      	lsrs	r3, r3, #2
 8004540:	430a      	orrs	r2, r1
 8004542:	3306      	adds	r3, #6
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	18c3      	adds	r3, r0, r3
 8004548:	3304      	adds	r3, #4
 800454a:	601a      	str	r2, [r3, #0]
}
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	b003      	add	sp, #12
 8004552:	bd90      	pop	{r4, r7, pc}
 8004554:	e000e100 	.word	0xe000e100
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	1e5a      	subs	r2, r3, #1
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	045b      	lsls	r3, r3, #17
 800456c:	429a      	cmp	r2, r3
 800456e:	d301      	bcc.n	8004574 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004570:	2301      	movs	r3, #1
 8004572:	e010      	b.n	8004596 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <SysTick_Config+0x44>)
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	3a01      	subs	r2, #1
 800457a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800457c:	2301      	movs	r3, #1
 800457e:	425b      	negs	r3, r3
 8004580:	2103      	movs	r1, #3
 8004582:	0018      	movs	r0, r3
 8004584:	f7ff ff7c 	bl	8004480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <SysTick_Config+0x44>)
 800458a:	2200      	movs	r2, #0
 800458c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800458e:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <SysTick_Config+0x44>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004594:	2300      	movs	r3, #0
}
 8004596:	0018      	movs	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	b002      	add	sp, #8
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	e000e010 	.word	0xe000e010

080045a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	210f      	movs	r1, #15
 80045b0:	187b      	adds	r3, r7, r1
 80045b2:	1c02      	adds	r2, r0, #0
 80045b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	187b      	adds	r3, r7, r1
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	b25b      	sxtb	r3, r3
 80045be:	0011      	movs	r1, r2
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7ff ff5d 	bl	8004480 <__NVIC_SetPriority>
}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b004      	add	sp, #16
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	0002      	movs	r2, r0
 80045d6:	1dfb      	adds	r3, r7, #7
 80045d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045da:	1dfb      	adds	r3, r7, #7
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	b25b      	sxtb	r3, r3
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7ff ff33 	bl	800444c <__NVIC_EnableIRQ>
}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	46bd      	mov	sp, r7
 80045ea:	b002      	add	sp, #8
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7ff ffaf 	bl	800455c <SysTick_Config>
 80045fe:	0003      	movs	r3, r0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b002      	add	sp, #8
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e077      	b.n	800470a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a3d      	ldr	r2, [pc, #244]	; (8004714 <HAL_DMA_Init+0x10c>)
 8004620:	4694      	mov	ip, r2
 8004622:	4463      	add	r3, ip
 8004624:	2114      	movs	r1, #20
 8004626:	0018      	movs	r0, r3
 8004628:	f7fb fd6a 	bl	8000100 <__udivsi3>
 800462c:	0003      	movs	r3, r0
 800462e:	009a      	lsls	r2, r3, #2
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2225      	movs	r2, #37	; 0x25
 8004638:	2102      	movs	r1, #2
 800463a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4934      	ldr	r1, [pc, #208]	; (8004718 <HAL_DMA_Init+0x110>)
 8004648:	400a      	ands	r2, r1
 800464a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6819      	ldr	r1, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0018      	movs	r0, r3
 8004686:	f000 fa8d 	bl	8004ba4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	01db      	lsls	r3, r3, #7
 8004692:	429a      	cmp	r2, r3
 8004694:	d102      	bne.n	800469c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a4:	213f      	movs	r1, #63	; 0x3f
 80046a6:	400a      	ands	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80046b2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d011      	beq.n	80046e0 <HAL_DMA_Init+0xd8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d80d      	bhi.n	80046e0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	0018      	movs	r0, r3
 80046c8:	f000 fa98 	bl	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	e008      	b.n	80046f2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2225      	movs	r2, #37	; 0x25
 80046fc:	2101      	movs	r1, #1
 80046fe:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2224      	movs	r2, #36	; 0x24
 8004704:	2100      	movs	r1, #0
 8004706:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	0018      	movs	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	b002      	add	sp, #8
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	bffdfff8 	.word	0xbffdfff8
 8004718:	ffff800f 	.word	0xffff800f

0800471c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800472a:	2317      	movs	r3, #23
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	2200      	movs	r2, #0
 8004730:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2224      	movs	r2, #36	; 0x24
 8004736:	5c9b      	ldrb	r3, [r3, r2]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_DMA_Start_IT+0x24>
 800473c:	2302      	movs	r3, #2
 800473e:	e06f      	b.n	8004820 <HAL_DMA_Start_IT+0x104>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2224      	movs	r2, #36	; 0x24
 8004744:	2101      	movs	r1, #1
 8004746:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2225      	movs	r2, #37	; 0x25
 800474c:	5c9b      	ldrb	r3, [r3, r2]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	d157      	bne.n	8004804 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2225      	movs	r2, #37	; 0x25
 8004758:	2102      	movs	r1, #2
 800475a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2101      	movs	r1, #1
 800476e:	438a      	bics	r2, r1
 8004770:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	68b9      	ldr	r1, [r7, #8]
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 f9d3 	bl	8004b24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	210e      	movs	r1, #14
 8004792:	430a      	orrs	r2, r1
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	e00f      	b.n	80047b8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2104      	movs	r1, #4
 80047a4:	438a      	bics	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	210a      	movs	r1, #10
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	025b      	lsls	r3, r3, #9
 80047c2:	4013      	ands	r3, r2
 80047c4:	d008      	beq.n	80047d8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d0:	2180      	movs	r1, #128	; 0x80
 80047d2:	0049      	lsls	r1, r1, #1
 80047d4:	430a      	orrs	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ea:	2180      	movs	r1, #128	; 0x80
 80047ec:	0049      	lsls	r1, r1, #1
 80047ee:	430a      	orrs	r2, r1
 80047f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2101      	movs	r1, #1
 80047fe:	430a      	orrs	r2, r1
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e00a      	b.n	800481a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2280      	movs	r2, #128	; 0x80
 8004808:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2224      	movs	r2, #36	; 0x24
 800480e:	2100      	movs	r1, #0
 8004810:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004812:	2317      	movs	r3, #23
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800481a:	2317      	movs	r3, #23
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	781b      	ldrb	r3, [r3, #0]
}
 8004820:	0018      	movs	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	b006      	add	sp, #24
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e050      	b.n	80048dc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2225      	movs	r2, #37	; 0x25
 800483e:	5c9b      	ldrb	r3, [r3, r2]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d008      	beq.n	8004858 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2204      	movs	r2, #4
 800484a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2224      	movs	r2, #36	; 0x24
 8004850:	2100      	movs	r1, #0
 8004852:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e041      	b.n	80048dc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	210e      	movs	r1, #14
 8004864:	438a      	bics	r2, r1
 8004866:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	491c      	ldr	r1, [pc, #112]	; (80048e4 <HAL_DMA_Abort+0xbc>)
 8004874:	400a      	ands	r2, r1
 8004876:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2101      	movs	r1, #1
 8004884:	438a      	bics	r2, r1
 8004886:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004888:	4b17      	ldr	r3, [pc, #92]	; (80048e8 <HAL_DMA_Abort+0xc0>)
 800488a:	6859      	ldr	r1, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	221c      	movs	r2, #28
 8004892:	4013      	ands	r3, r2
 8004894:	2201      	movs	r2, #1
 8004896:	409a      	lsls	r2, r3
 8004898:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <HAL_DMA_Abort+0xc0>)
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80048a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00c      	beq.n	80048ca <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ba:	490a      	ldr	r1, [pc, #40]	; (80048e4 <HAL_DMA_Abort+0xbc>)
 80048bc:	400a      	ands	r2, r1
 80048be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80048c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2225      	movs	r2, #37	; 0x25
 80048ce:	2101      	movs	r1, #1
 80048d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2224      	movs	r2, #36	; 0x24
 80048d6:	2100      	movs	r1, #0
 80048d8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b002      	add	sp, #8
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	fffffeff 	.word	0xfffffeff
 80048e8:	40020000 	.word	0x40020000

080048ec <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f4:	210f      	movs	r1, #15
 80048f6:	187b      	adds	r3, r7, r1
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2225      	movs	r2, #37	; 0x25
 8004900:	5c9b      	ldrb	r3, [r3, r2]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d006      	beq.n	8004916 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2204      	movs	r2, #4
 800490c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800490e:	187b      	adds	r3, r7, r1
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	e049      	b.n	80049aa <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	210e      	movs	r1, #14
 8004922:	438a      	bics	r2, r1
 8004924:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2101      	movs	r1, #1
 8004932:	438a      	bics	r2, r1
 8004934:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004940:	491d      	ldr	r1, [pc, #116]	; (80049b8 <HAL_DMA_Abort_IT+0xcc>)
 8004942:	400a      	ands	r2, r1
 8004944:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004946:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <HAL_DMA_Abort_IT+0xd0>)
 8004948:	6859      	ldr	r1, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	221c      	movs	r2, #28
 8004950:	4013      	ands	r3, r2
 8004952:	2201      	movs	r2, #1
 8004954:	409a      	lsls	r2, r3
 8004956:	4b19      	ldr	r3, [pc, #100]	; (80049bc <HAL_DMA_Abort_IT+0xd0>)
 8004958:	430a      	orrs	r2, r1
 800495a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004964:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00c      	beq.n	8004988 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004978:	490f      	ldr	r1, [pc, #60]	; (80049b8 <HAL_DMA_Abort_IT+0xcc>)
 800497a:	400a      	ands	r2, r1
 800497c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004986:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2225      	movs	r2, #37	; 0x25
 800498c:	2101      	movs	r1, #1
 800498e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2224      	movs	r2, #36	; 0x24
 8004994:	2100      	movs	r1, #0
 8004996:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	2b00      	cmp	r3, #0
 800499e:	d004      	beq.n	80049aa <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	0010      	movs	r0, r2
 80049a8:	4798      	blx	r3
    }
  }
  return status;
 80049aa:	230f      	movs	r3, #15
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	781b      	ldrb	r3, [r3, #0]
}
 80049b0:	0018      	movs	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b004      	add	sp, #16
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	fffffeff 	.word	0xfffffeff
 80049bc:	40020000 	.word	0x40020000

080049c0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80049c8:	4b55      	ldr	r3, [pc, #340]	; (8004b20 <HAL_DMA_IRQHandler+0x160>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	221c      	movs	r2, #28
 80049dc:	4013      	ands	r3, r2
 80049de:	2204      	movs	r2, #4
 80049e0:	409a      	lsls	r2, r3
 80049e2:	0013      	movs	r3, r2
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4013      	ands	r3, r2
 80049e8:	d027      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x7a>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2204      	movs	r2, #4
 80049ee:	4013      	ands	r3, r2
 80049f0:	d023      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2220      	movs	r2, #32
 80049fa:	4013      	ands	r3, r2
 80049fc:	d107      	bne.n	8004a0e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2104      	movs	r1, #4
 8004a0a:	438a      	bics	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004a0e:	4b44      	ldr	r3, [pc, #272]	; (8004b20 <HAL_DMA_IRQHandler+0x160>)
 8004a10:	6859      	ldr	r1, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	221c      	movs	r2, #28
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	4b40      	ldr	r3, [pc, #256]	; (8004b20 <HAL_DMA_IRQHandler+0x160>)
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d100      	bne.n	8004a2e <HAL_DMA_IRQHandler+0x6e>
 8004a2c:	e073      	b.n	8004b16 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	0010      	movs	r0, r2
 8004a36:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004a38:	e06d      	b.n	8004b16 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	221c      	movs	r2, #28
 8004a40:	4013      	ands	r3, r2
 8004a42:	2202      	movs	r2, #2
 8004a44:	409a      	lsls	r2, r3
 8004a46:	0013      	movs	r3, r2
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d02e      	beq.n	8004aac <HAL_DMA_IRQHandler+0xec>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2202      	movs	r2, #2
 8004a52:	4013      	ands	r3, r2
 8004a54:	d02a      	beq.n	8004aac <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d10b      	bne.n	8004a7a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	210a      	movs	r1, #10
 8004a6e:	438a      	bics	r2, r1
 8004a70:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2225      	movs	r2, #37	; 0x25
 8004a76:	2101      	movs	r1, #1
 8004a78:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004a7a:	4b29      	ldr	r3, [pc, #164]	; (8004b20 <HAL_DMA_IRQHandler+0x160>)
 8004a7c:	6859      	ldr	r1, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	221c      	movs	r2, #28
 8004a84:	4013      	ands	r3, r2
 8004a86:	2202      	movs	r2, #2
 8004a88:	409a      	lsls	r2, r3
 8004a8a:	4b25      	ldr	r3, [pc, #148]	; (8004b20 <HAL_DMA_IRQHandler+0x160>)
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2224      	movs	r2, #36	; 0x24
 8004a94:	2100      	movs	r1, #0
 8004a96:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d03a      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	0010      	movs	r0, r2
 8004aa8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004aaa:	e034      	b.n	8004b16 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	221c      	movs	r2, #28
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	2208      	movs	r2, #8
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	0013      	movs	r3, r2
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4013      	ands	r3, r2
 8004abe:	d02b      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x158>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2208      	movs	r2, #8
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d027      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	210e      	movs	r1, #14
 8004ad4:	438a      	bics	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004ad8:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <HAL_DMA_IRQHandler+0x160>)
 8004ada:	6859      	ldr	r1, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	221c      	movs	r2, #28
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	409a      	lsls	r2, r3
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <HAL_DMA_IRQHandler+0x160>)
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2225      	movs	r2, #37	; 0x25
 8004af8:	2101      	movs	r1, #1
 8004afa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2224      	movs	r2, #36	; 0x24
 8004b00:	2100      	movs	r1, #0
 8004b02:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	0010      	movs	r0, r2
 8004b14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	46c0      	nop			; (mov r8, r8)
}
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b004      	add	sp, #16
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40020000 	.word	0x40020000

08004b24 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004b3a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d004      	beq.n	8004b4e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004b4c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004b4e:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <DMA_SetConfig+0x7c>)
 8004b50:	6859      	ldr	r1, [r3, #4]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	221c      	movs	r2, #28
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <DMA_SetConfig+0x7c>)
 8004b60:	430a      	orrs	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d108      	bne.n	8004b86 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b84:	e007      	b.n	8004b96 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	60da      	str	r2, [r3, #12]
}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	b004      	add	sp, #16
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	40020000 	.word	0x40020000

08004ba4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	089b      	lsrs	r3, r3, #2
 8004bb2:	4a10      	ldr	r2, [pc, #64]	; (8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004bb4:	4694      	mov	ip, r2
 8004bb6:	4463      	add	r3, ip
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	001a      	movs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	001a      	movs	r2, r3
 8004bc6:	23ff      	movs	r3, #255	; 0xff
 8004bc8:	4013      	ands	r3, r2
 8004bca:	3b08      	subs	r3, #8
 8004bcc:	2114      	movs	r1, #20
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f7fb fa96 	bl	8000100 <__udivsi3>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a07      	ldr	r2, [pc, #28]	; (8004bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004bdc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	221f      	movs	r2, #31
 8004be2:	4013      	ands	r3, r2
 8004be4:	2201      	movs	r2, #1
 8004be6:	409a      	lsls	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004bec:	46c0      	nop			; (mov r8, r8)
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b004      	add	sp, #16
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	10008200 	.word	0x10008200
 8004bf8:	40020880 	.word	0x40020880

08004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	223f      	movs	r2, #63	; 0x3f
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c12:	4694      	mov	ip, r2
 8004c14:	4463      	add	r3, ip
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	001a      	movs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a07      	ldr	r2, [pc, #28]	; (8004c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	2203      	movs	r2, #3
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b004      	add	sp, #16
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	1000823f 	.word	0x1000823f
 8004c40:	40020940 	.word	0x40020940

08004c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c52:	e147      	b.n	8004ee4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2101      	movs	r1, #1
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4091      	lsls	r1, r2
 8004c5e:	000a      	movs	r2, r1
 8004c60:	4013      	ands	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d100      	bne.n	8004c6c <HAL_GPIO_Init+0x28>
 8004c6a:	e138      	b.n	8004ede <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2203      	movs	r2, #3
 8004c72:	4013      	ands	r3, r2
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d005      	beq.n	8004c84 <HAL_GPIO_Init+0x40>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d130      	bne.n	8004ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	2203      	movs	r2, #3
 8004c90:	409a      	lsls	r2, r3
 8004c92:	0013      	movs	r3, r2
 8004c94:	43da      	mvns	r2, r3
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	409a      	lsls	r2, r3
 8004ca6:	0013      	movs	r3, r2
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cba:	2201      	movs	r2, #1
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	0013      	movs	r3, r2
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	091b      	lsrs	r3, r3, #4
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	401a      	ands	r2, r3
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	0013      	movs	r3, r2
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2203      	movs	r2, #3
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d017      	beq.n	8004d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	0013      	movs	r3, r2
 8004d02:	43da      	mvns	r2, r3
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	409a      	lsls	r2, r3
 8004d14:	0013      	movs	r3, r2
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2203      	movs	r2, #3
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d123      	bne.n	8004d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	08da      	lsrs	r2, r3, #3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3208      	adds	r2, #8
 8004d36:	0092      	lsls	r2, r2, #2
 8004d38:	58d3      	ldr	r3, [r2, r3]
 8004d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2207      	movs	r2, #7
 8004d40:	4013      	ands	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	220f      	movs	r2, #15
 8004d46:	409a      	lsls	r2, r3
 8004d48:	0013      	movs	r3, r2
 8004d4a:	43da      	mvns	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2107      	movs	r1, #7
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	0013      	movs	r3, r2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	08da      	lsrs	r2, r3, #3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3208      	adds	r2, #8
 8004d70:	0092      	lsls	r2, r2, #2
 8004d72:	6939      	ldr	r1, [r7, #16]
 8004d74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	2203      	movs	r2, #3
 8004d82:	409a      	lsls	r2, r3
 8004d84:	0013      	movs	r3, r2
 8004d86:	43da      	mvns	r2, r3
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2203      	movs	r2, #3
 8004d94:	401a      	ands	r2, r3
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	0013      	movs	r3, r2
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	23c0      	movs	r3, #192	; 0xc0
 8004db0:	029b      	lsls	r3, r3, #10
 8004db2:	4013      	ands	r3, r2
 8004db4:	d100      	bne.n	8004db8 <HAL_GPIO_Init+0x174>
 8004db6:	e092      	b.n	8004ede <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004db8:	4a50      	ldr	r2, [pc, #320]	; (8004efc <HAL_GPIO_Init+0x2b8>)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	089b      	lsrs	r3, r3, #2
 8004dbe:	3318      	adds	r3, #24
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	589b      	ldr	r3, [r3, r2]
 8004dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2203      	movs	r2, #3
 8004dca:	4013      	ands	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	220f      	movs	r2, #15
 8004dd0:	409a      	lsls	r2, r3
 8004dd2:	0013      	movs	r3, r2
 8004dd4:	43da      	mvns	r2, r3
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	23a0      	movs	r3, #160	; 0xa0
 8004de0:	05db      	lsls	r3, r3, #23
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d013      	beq.n	8004e0e <HAL_GPIO_Init+0x1ca>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a45      	ldr	r2, [pc, #276]	; (8004f00 <HAL_GPIO_Init+0x2bc>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00d      	beq.n	8004e0a <HAL_GPIO_Init+0x1c6>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a44      	ldr	r2, [pc, #272]	; (8004f04 <HAL_GPIO_Init+0x2c0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d007      	beq.n	8004e06 <HAL_GPIO_Init+0x1c2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a43      	ldr	r2, [pc, #268]	; (8004f08 <HAL_GPIO_Init+0x2c4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d101      	bne.n	8004e02 <HAL_GPIO_Init+0x1be>
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e006      	b.n	8004e10 <HAL_GPIO_Init+0x1cc>
 8004e02:	2305      	movs	r3, #5
 8004e04:	e004      	b.n	8004e10 <HAL_GPIO_Init+0x1cc>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e002      	b.n	8004e10 <HAL_GPIO_Init+0x1cc>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <HAL_GPIO_Init+0x1cc>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	2103      	movs	r1, #3
 8004e14:	400a      	ands	r2, r1
 8004e16:	00d2      	lsls	r2, r2, #3
 8004e18:	4093      	lsls	r3, r2
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004e20:	4936      	ldr	r1, [pc, #216]	; (8004efc <HAL_GPIO_Init+0x2b8>)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	089b      	lsrs	r3, r3, #2
 8004e26:	3318      	adds	r3, #24
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e2e:	4b33      	ldr	r3, [pc, #204]	; (8004efc <HAL_GPIO_Init+0x2b8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	43da      	mvns	r2, r3
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	035b      	lsls	r3, r3, #13
 8004e46:	4013      	ands	r3, r2
 8004e48:	d003      	beq.n	8004e52 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e52:	4b2a      	ldr	r3, [pc, #168]	; (8004efc <HAL_GPIO_Init+0x2b8>)
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004e58:	4b28      	ldr	r3, [pc, #160]	; (8004efc <HAL_GPIO_Init+0x2b8>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	43da      	mvns	r2, r3
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4013      	ands	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	039b      	lsls	r3, r3, #14
 8004e70:	4013      	ands	r3, r2
 8004e72:	d003      	beq.n	8004e7c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e7c:	4b1f      	ldr	r3, [pc, #124]	; (8004efc <HAL_GPIO_Init+0x2b8>)
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004e82:	4a1e      	ldr	r2, [pc, #120]	; (8004efc <HAL_GPIO_Init+0x2b8>)
 8004e84:	2384      	movs	r3, #132	; 0x84
 8004e86:	58d3      	ldr	r3, [r2, r3]
 8004e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	43da      	mvns	r2, r3
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4013      	ands	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	029b      	lsls	r3, r3, #10
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ea8:	4914      	ldr	r1, [pc, #80]	; (8004efc <HAL_GPIO_Init+0x2b8>)
 8004eaa:	2284      	movs	r2, #132	; 0x84
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004eb0:	4a12      	ldr	r2, [pc, #72]	; (8004efc <HAL_GPIO_Init+0x2b8>)
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	58d3      	ldr	r3, [r2, r3]
 8004eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	43da      	mvns	r2, r3
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	025b      	lsls	r3, r3, #9
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d003      	beq.n	8004ed6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ed6:	4909      	ldr	r1, [pc, #36]	; (8004efc <HAL_GPIO_Init+0x2b8>)
 8004ed8:	2280      	movs	r2, #128	; 0x80
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	40da      	lsrs	r2, r3
 8004eec:	1e13      	subs	r3, r2, #0
 8004eee:	d000      	beq.n	8004ef2 <HAL_GPIO_Init+0x2ae>
 8004ef0:	e6b0      	b.n	8004c54 <HAL_GPIO_Init+0x10>
  }
}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b006      	add	sp, #24
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40021800 	.word	0x40021800
 8004f00:	50000400 	.word	0x50000400
 8004f04:	50000800 	.word	0x50000800
 8004f08:	50000c00 	.word	0x50000c00

08004f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	0008      	movs	r0, r1
 8004f16:	0011      	movs	r1, r2
 8004f18:	1cbb      	adds	r3, r7, #2
 8004f1a:	1c02      	adds	r2, r0, #0
 8004f1c:	801a      	strh	r2, [r3, #0]
 8004f1e:	1c7b      	adds	r3, r7, #1
 8004f20:	1c0a      	adds	r2, r1, #0
 8004f22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f24:	1c7b      	adds	r3, r7, #1
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f2c:	1cbb      	adds	r3, r7, #2
 8004f2e:	881a      	ldrh	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f34:	e003      	b.n	8004f3e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f36:	1cbb      	adds	r3, r7, #2
 8004f38:	881a      	ldrh	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	46bd      	mov	sp, r7
 8004f42:	b002      	add	sp, #8
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	0002      	movs	r2, r0
 8004f50:	1dbb      	adds	r3, r7, #6
 8004f52:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004f54:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	1dba      	adds	r2, r7, #6
 8004f5a:	8812      	ldrh	r2, [r2, #0]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d008      	beq.n	8004f72 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004f60:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004f62:	1dba      	adds	r2, r7, #6
 8004f64:	8812      	ldrh	r2, [r2, #0]
 8004f66:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004f68:	1dbb      	adds	r3, r7, #6
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f000 f815 	bl	8004f9c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004f72:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	1dba      	adds	r2, r7, #6
 8004f78:	8812      	ldrh	r2, [r2, #0]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d008      	beq.n	8004f90 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004f7e:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004f80:	1dba      	adds	r2, r7, #6
 8004f82:	8812      	ldrh	r2, [r2, #0]
 8004f84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004f86:	1dbb      	adds	r3, r7, #6
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f000 f810 	bl	8004fb0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004f90:	46c0      	nop			; (mov r8, r8)
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b002      	add	sp, #8
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40021800 	.word	0x40021800

08004f9c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	0002      	movs	r2, r0
 8004fa4:	1dbb      	adds	r3, r7, #6
 8004fa6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004fa8:	46c0      	nop			; (mov r8, r8)
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b002      	add	sp, #8
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	1dbb      	adds	r3, r7, #6
 8004fba:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004fbc:	46c0      	nop			; (mov r8, r8)
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b002      	add	sp, #8
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e082      	b.n	80050dc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2241      	movs	r2, #65	; 0x41
 8004fda:	5c9b      	ldrb	r3, [r3, r2]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d107      	bne.n	8004ff2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2240      	movs	r2, #64	; 0x40
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	0018      	movs	r0, r3
 8004fee:	f7fd fe15 	bl	8002c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2241      	movs	r2, #65	; 0x41
 8004ff6:	2124      	movs	r1, #36	; 0x24
 8004ff8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2101      	movs	r1, #1
 8005006:	438a      	bics	r2, r1
 8005008:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4934      	ldr	r1, [pc, #208]	; (80050e4 <HAL_I2C_Init+0x120>)
 8005014:	400a      	ands	r2, r1
 8005016:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4931      	ldr	r1, [pc, #196]	; (80050e8 <HAL_I2C_Init+0x124>)
 8005024:	400a      	ands	r2, r1
 8005026:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d108      	bne.n	8005042 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2180      	movs	r1, #128	; 0x80
 800503a:	0209      	lsls	r1, r1, #8
 800503c:	430a      	orrs	r2, r1
 800503e:	609a      	str	r2, [r3, #8]
 8005040:	e007      	b.n	8005052 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2184      	movs	r1, #132	; 0x84
 800504c:	0209      	lsls	r1, r1, #8
 800504e:	430a      	orrs	r2, r1
 8005050:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d104      	bne.n	8005064 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2280      	movs	r2, #128	; 0x80
 8005060:	0112      	lsls	r2, r2, #4
 8005062:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	491f      	ldr	r1, [pc, #124]	; (80050ec <HAL_I2C_Init+0x128>)
 8005070:	430a      	orrs	r2, r1
 8005072:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	491a      	ldr	r1, [pc, #104]	; (80050e8 <HAL_I2C_Init+0x124>)
 8005080:	400a      	ands	r2, r1
 8005082:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	431a      	orrs	r2, r3
 800508e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69d9      	ldr	r1, [r3, #28]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2101      	movs	r1, #1
 80050ba:	430a      	orrs	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2241      	movs	r2, #65	; 0x41
 80050c8:	2120      	movs	r1, #32
 80050ca:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2242      	movs	r2, #66	; 0x42
 80050d6:	2100      	movs	r1, #0
 80050d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	0018      	movs	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	b002      	add	sp, #8
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	f0ffffff 	.word	0xf0ffffff
 80050e8:	ffff7fff 	.word	0xffff7fff
 80050ec:	02008000 	.word	0x02008000

080050f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80050f0:	b590      	push	{r4, r7, lr}
 80050f2:	b089      	sub	sp, #36	; 0x24
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	0008      	movs	r0, r1
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	0019      	movs	r1, r3
 80050fe:	230a      	movs	r3, #10
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	1c02      	adds	r2, r0, #0
 8005104:	801a      	strh	r2, [r3, #0]
 8005106:	2308      	movs	r3, #8
 8005108:	18fb      	adds	r3, r7, r3
 800510a:	1c0a      	adds	r2, r1, #0
 800510c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2241      	movs	r2, #65	; 0x41
 8005112:	5c9b      	ldrb	r3, [r3, r2]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b20      	cmp	r3, #32
 8005118:	d000      	beq.n	800511c <HAL_I2C_Master_Transmit+0x2c>
 800511a:	e0e7      	b.n	80052ec <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2240      	movs	r2, #64	; 0x40
 8005120:	5c9b      	ldrb	r3, [r3, r2]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_I2C_Master_Transmit+0x3a>
 8005126:	2302      	movs	r3, #2
 8005128:	e0e1      	b.n	80052ee <HAL_I2C_Master_Transmit+0x1fe>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2240      	movs	r2, #64	; 0x40
 800512e:	2101      	movs	r1, #1
 8005130:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005132:	f7fe fcdf 	bl	8003af4 <HAL_GetTick>
 8005136:	0003      	movs	r3, r0
 8005138:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800513a:	2380      	movs	r3, #128	; 0x80
 800513c:	0219      	lsls	r1, r3, #8
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	2319      	movs	r3, #25
 8005146:	2201      	movs	r2, #1
 8005148:	f000 fa04 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 800514c:	1e03      	subs	r3, r0, #0
 800514e:	d001      	beq.n	8005154 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0cc      	b.n	80052ee <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2241      	movs	r2, #65	; 0x41
 8005158:	2121      	movs	r1, #33	; 0x21
 800515a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2242      	movs	r2, #66	; 0x42
 8005160:	2110      	movs	r1, #16
 8005162:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2208      	movs	r2, #8
 8005174:	18ba      	adds	r2, r7, r2
 8005176:	8812      	ldrh	r2, [r2, #0]
 8005178:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	2bff      	cmp	r3, #255	; 0xff
 8005188:	d911      	bls.n	80051ae <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	22ff      	movs	r2, #255	; 0xff
 800518e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005194:	b2da      	uxtb	r2, r3
 8005196:	2380      	movs	r3, #128	; 0x80
 8005198:	045c      	lsls	r4, r3, #17
 800519a:	230a      	movs	r3, #10
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	8819      	ldrh	r1, [r3, #0]
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	4b55      	ldr	r3, [pc, #340]	; (80052f8 <HAL_I2C_Master_Transmit+0x208>)
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	0023      	movs	r3, r4
 80051a8:	f000 fc08 	bl	80059bc <I2C_TransferConfig>
 80051ac:	e075      	b.n	800529a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	2380      	movs	r3, #128	; 0x80
 80051c0:	049c      	lsls	r4, r3, #18
 80051c2:	230a      	movs	r3, #10
 80051c4:	18fb      	adds	r3, r7, r3
 80051c6:	8819      	ldrh	r1, [r3, #0]
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	4b4b      	ldr	r3, [pc, #300]	; (80052f8 <HAL_I2C_Master_Transmit+0x208>)
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	0023      	movs	r3, r4
 80051d0:	f000 fbf4 	bl	80059bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80051d4:	e061      	b.n	800529a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	0018      	movs	r0, r3
 80051de:	f000 f9f8 	bl	80055d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80051e2:	1e03      	subs	r3, r0, #0
 80051e4:	d001      	beq.n	80051ea <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e081      	b.n	80052ee <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	781a      	ldrb	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d03a      	beq.n	800529a <HAL_I2C_Master_Transmit+0x1aa>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005228:	2b00      	cmp	r3, #0
 800522a:	d136      	bne.n	800529a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800522c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	0013      	movs	r3, r2
 8005236:	2200      	movs	r2, #0
 8005238:	2180      	movs	r1, #128	; 0x80
 800523a:	f000 f98b 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 800523e:	1e03      	subs	r3, r0, #0
 8005240:	d001      	beq.n	8005246 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e053      	b.n	80052ee <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	2bff      	cmp	r3, #255	; 0xff
 800524e:	d911      	bls.n	8005274 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	22ff      	movs	r2, #255	; 0xff
 8005254:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525a:	b2da      	uxtb	r2, r3
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	045c      	lsls	r4, r3, #17
 8005260:	230a      	movs	r3, #10
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	8819      	ldrh	r1, [r3, #0]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	2300      	movs	r3, #0
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	0023      	movs	r3, r4
 800526e:	f000 fba5 	bl	80059bc <I2C_TransferConfig>
 8005272:	e012      	b.n	800529a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005282:	b2da      	uxtb	r2, r3
 8005284:	2380      	movs	r3, #128	; 0x80
 8005286:	049c      	lsls	r4, r3, #18
 8005288:	230a      	movs	r3, #10
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	8819      	ldrh	r1, [r3, #0]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	2300      	movs	r3, #0
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	0023      	movs	r3, r4
 8005296:	f000 fb91 	bl	80059bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d198      	bne.n	80051d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	0018      	movs	r0, r3
 80052ac:	f000 f9d0 	bl	8005650 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052b0:	1e03      	subs	r3, r0, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e01a      	b.n	80052ee <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2220      	movs	r2, #32
 80052be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	490c      	ldr	r1, [pc, #48]	; (80052fc <HAL_I2C_Master_Transmit+0x20c>)
 80052cc:	400a      	ands	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2241      	movs	r2, #65	; 0x41
 80052d4:	2120      	movs	r1, #32
 80052d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2242      	movs	r2, #66	; 0x42
 80052dc:	2100      	movs	r1, #0
 80052de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2240      	movs	r2, #64	; 0x40
 80052e4:	2100      	movs	r1, #0
 80052e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	e000      	b.n	80052ee <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80052ec:	2302      	movs	r3, #2
  }
}
 80052ee:	0018      	movs	r0, r3
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b007      	add	sp, #28
 80052f4:	bd90      	pop	{r4, r7, pc}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	80002000 	.word	0x80002000
 80052fc:	fe00e800 	.word	0xfe00e800

08005300 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af02      	add	r7, sp, #8
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	0008      	movs	r0, r1
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	0019      	movs	r1, r3
 800530e:	230a      	movs	r3, #10
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	1c02      	adds	r2, r0, #0
 8005314:	801a      	strh	r2, [r3, #0]
 8005316:	2308      	movs	r3, #8
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	1c0a      	adds	r2, r1, #0
 800531c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2241      	movs	r2, #65	; 0x41
 8005322:	5c9b      	ldrb	r3, [r3, r2]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b20      	cmp	r3, #32
 8005328:	d000      	beq.n	800532c <HAL_I2C_Master_Receive+0x2c>
 800532a:	e0e8      	b.n	80054fe <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2240      	movs	r2, #64	; 0x40
 8005330:	5c9b      	ldrb	r3, [r3, r2]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_I2C_Master_Receive+0x3a>
 8005336:	2302      	movs	r3, #2
 8005338:	e0e2      	b.n	8005500 <HAL_I2C_Master_Receive+0x200>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2240      	movs	r2, #64	; 0x40
 800533e:	2101      	movs	r1, #1
 8005340:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005342:	f7fe fbd7 	bl	8003af4 <HAL_GetTick>
 8005346:	0003      	movs	r3, r0
 8005348:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800534a:	2380      	movs	r3, #128	; 0x80
 800534c:	0219      	lsls	r1, r3, #8
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2319      	movs	r3, #25
 8005356:	2201      	movs	r2, #1
 8005358:	f000 f8fc 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 800535c:	1e03      	subs	r3, r0, #0
 800535e:	d001      	beq.n	8005364 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0cd      	b.n	8005500 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2241      	movs	r2, #65	; 0x41
 8005368:	2122      	movs	r1, #34	; 0x22
 800536a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2242      	movs	r2, #66	; 0x42
 8005370:	2110      	movs	r1, #16
 8005372:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2208      	movs	r2, #8
 8005384:	18ba      	adds	r2, r7, r2
 8005386:	8812      	ldrh	r2, [r2, #0]
 8005388:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005394:	b29b      	uxth	r3, r3
 8005396:	2bff      	cmp	r3, #255	; 0xff
 8005398:	d911      	bls.n	80053be <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	22ff      	movs	r2, #255	; 0xff
 800539e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	2380      	movs	r3, #128	; 0x80
 80053a8:	045c      	lsls	r4, r3, #17
 80053aa:	230a      	movs	r3, #10
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	8819      	ldrh	r1, [r3, #0]
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	4b55      	ldr	r3, [pc, #340]	; (8005508 <HAL_I2C_Master_Receive+0x208>)
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	0023      	movs	r3, r4
 80053b8:	f000 fb00 	bl	80059bc <I2C_TransferConfig>
 80053bc:	e076      	b.n	80054ac <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	2380      	movs	r3, #128	; 0x80
 80053d0:	049c      	lsls	r4, r3, #18
 80053d2:	230a      	movs	r3, #10
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	8819      	ldrh	r1, [r3, #0]
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	4b4b      	ldr	r3, [pc, #300]	; (8005508 <HAL_I2C_Master_Receive+0x208>)
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	0023      	movs	r3, r4
 80053e0:	f000 faec 	bl	80059bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80053e4:	e062      	b.n	80054ac <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	0018      	movs	r0, r3
 80053ee:	f000 f96b 	bl	80056c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053f2:	1e03      	subs	r3, r0, #0
 80053f4:	d001      	beq.n	80053fa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e082      	b.n	8005500 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005422:	b29b      	uxth	r3, r3
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d03a      	beq.n	80054ac <HAL_I2C_Master_Receive+0x1ac>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543a:	2b00      	cmp	r3, #0
 800543c:	d136      	bne.n	80054ac <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800543e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	0013      	movs	r3, r2
 8005448:	2200      	movs	r2, #0
 800544a:	2180      	movs	r1, #128	; 0x80
 800544c:	f000 f882 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 8005450:	1e03      	subs	r3, r0, #0
 8005452:	d001      	beq.n	8005458 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e053      	b.n	8005500 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545c:	b29b      	uxth	r3, r3
 800545e:	2bff      	cmp	r3, #255	; 0xff
 8005460:	d911      	bls.n	8005486 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	22ff      	movs	r2, #255	; 0xff
 8005466:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546c:	b2da      	uxtb	r2, r3
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	045c      	lsls	r4, r3, #17
 8005472:	230a      	movs	r3, #10
 8005474:	18fb      	adds	r3, r7, r3
 8005476:	8819      	ldrh	r1, [r3, #0]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	2300      	movs	r3, #0
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	0023      	movs	r3, r4
 8005480:	f000 fa9c 	bl	80059bc <I2C_TransferConfig>
 8005484:	e012      	b.n	80054ac <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005494:	b2da      	uxtb	r2, r3
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	049c      	lsls	r4, r3, #18
 800549a:	230a      	movs	r3, #10
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	8819      	ldrh	r1, [r3, #0]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	2300      	movs	r3, #0
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	0023      	movs	r3, r4
 80054a8:	f000 fa88 	bl	80059bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d197      	bne.n	80053e6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	0018      	movs	r0, r3
 80054be:	f000 f8c7 	bl	8005650 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054c2:	1e03      	subs	r3, r0, #0
 80054c4:	d001      	beq.n	80054ca <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e01a      	b.n	8005500 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2220      	movs	r2, #32
 80054d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	490b      	ldr	r1, [pc, #44]	; (800550c <HAL_I2C_Master_Receive+0x20c>)
 80054de:	400a      	ands	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2241      	movs	r2, #65	; 0x41
 80054e6:	2120      	movs	r1, #32
 80054e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2242      	movs	r2, #66	; 0x42
 80054ee:	2100      	movs	r1, #0
 80054f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2240      	movs	r2, #64	; 0x40
 80054f6:	2100      	movs	r1, #0
 80054f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	e000      	b.n	8005500 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
  }
}
 8005500:	0018      	movs	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	b007      	add	sp, #28
 8005506:	bd90      	pop	{r4, r7, pc}
 8005508:	80002400 	.word	0x80002400
 800550c:	fe00e800 	.word	0xfe00e800

08005510 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	2202      	movs	r2, #2
 8005520:	4013      	ands	r3, r2
 8005522:	2b02      	cmp	r3, #2
 8005524:	d103      	bne.n	800552e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2201      	movs	r2, #1
 8005536:	4013      	ands	r3, r2
 8005538:	2b01      	cmp	r3, #1
 800553a:	d007      	beq.n	800554c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2101      	movs	r1, #1
 8005548:	430a      	orrs	r2, r1
 800554a:	619a      	str	r2, [r3, #24]
  }
}
 800554c:	46c0      	nop			; (mov r8, r8)
 800554e:	46bd      	mov	sp, r7
 8005550:	b002      	add	sp, #8
 8005552:	bd80      	pop	{r7, pc}

08005554 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	1dfb      	adds	r3, r7, #7
 8005562:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005564:	e021      	b.n	80055aa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	3301      	adds	r3, #1
 800556a:	d01e      	beq.n	80055aa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556c:	f7fe fac2 	bl	8003af4 <HAL_GetTick>
 8005570:	0002      	movs	r2, r0
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d302      	bcc.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d113      	bne.n	80055aa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	2220      	movs	r2, #32
 8005588:	431a      	orrs	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2241      	movs	r2, #65	; 0x41
 8005592:	2120      	movs	r1, #32
 8005594:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2242      	movs	r2, #66	; 0x42
 800559a:	2100      	movs	r1, #0
 800559c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2240      	movs	r2, #64	; 0x40
 80055a2:	2100      	movs	r1, #0
 80055a4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e00f      	b.n	80055ca <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	4013      	ands	r3, r2
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	425a      	negs	r2, r3
 80055ba:	4153      	adcs	r3, r2
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	001a      	movs	r2, r3
 80055c0:	1dfb      	adds	r3, r7, #7
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d0ce      	beq.n	8005566 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	0018      	movs	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b004      	add	sp, #16
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055de:	e02b      	b.n	8005638 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	0018      	movs	r0, r3
 80055e8:	f000 f8e8 	bl	80057bc <I2C_IsErrorOccurred>
 80055ec:	1e03      	subs	r3, r0, #0
 80055ee:	d001      	beq.n	80055f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e029      	b.n	8005648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	3301      	adds	r3, #1
 80055f8:	d01e      	beq.n	8005638 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fa:	f7fe fa7b 	bl	8003af4 <HAL_GetTick>
 80055fe:	0002      	movs	r2, r0
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	429a      	cmp	r2, r3
 8005608:	d302      	bcc.n	8005610 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d113      	bne.n	8005638 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005614:	2220      	movs	r2, #32
 8005616:	431a      	orrs	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2241      	movs	r2, #65	; 0x41
 8005620:	2120      	movs	r1, #32
 8005622:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2242      	movs	r2, #66	; 0x42
 8005628:	2100      	movs	r1, #0
 800562a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2240      	movs	r2, #64	; 0x40
 8005630:	2100      	movs	r1, #0
 8005632:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e007      	b.n	8005648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	2202      	movs	r2, #2
 8005640:	4013      	ands	r3, r2
 8005642:	2b02      	cmp	r3, #2
 8005644:	d1cc      	bne.n	80055e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	0018      	movs	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	b004      	add	sp, #16
 800564e:	bd80      	pop	{r7, pc}

08005650 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800565c:	e028      	b.n	80056b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	0018      	movs	r0, r3
 8005666:	f000 f8a9 	bl	80057bc <I2C_IsErrorOccurred>
 800566a:	1e03      	subs	r3, r0, #0
 800566c:	d001      	beq.n	8005672 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e026      	b.n	80056c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005672:	f7fe fa3f 	bl	8003af4 <HAL_GetTick>
 8005676:	0002      	movs	r2, r0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	429a      	cmp	r2, r3
 8005680:	d302      	bcc.n	8005688 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d113      	bne.n	80056b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568c:	2220      	movs	r2, #32
 800568e:	431a      	orrs	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2241      	movs	r2, #65	; 0x41
 8005698:	2120      	movs	r1, #32
 800569a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2242      	movs	r2, #66	; 0x42
 80056a0:	2100      	movs	r1, #0
 80056a2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2240      	movs	r2, #64	; 0x40
 80056a8:	2100      	movs	r1, #0
 80056aa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e007      	b.n	80056c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	2220      	movs	r2, #32
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d1cf      	bne.n	800565e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b004      	add	sp, #16
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056d4:	e064      	b.n	80057a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	0018      	movs	r0, r3
 80056de:	f000 f86d 	bl	80057bc <I2C_IsErrorOccurred>
 80056e2:	1e03      	subs	r3, r0, #0
 80056e4:	d001      	beq.n	80056ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e062      	b.n	80057b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	2220      	movs	r2, #32
 80056f2:	4013      	ands	r3, r2
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d138      	bne.n	800576a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	2204      	movs	r2, #4
 8005700:	4013      	ands	r3, r2
 8005702:	2b04      	cmp	r3, #4
 8005704:	d105      	bne.n	8005712 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e04e      	b.n	80057b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2210      	movs	r2, #16
 800571a:	4013      	ands	r3, r2
 800571c:	2b10      	cmp	r3, #16
 800571e:	d107      	bne.n	8005730 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2210      	movs	r2, #16
 8005726:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2204      	movs	r2, #4
 800572c:	645a      	str	r2, [r3, #68]	; 0x44
 800572e:	e002      	b.n	8005736 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2220      	movs	r2, #32
 800573c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	491b      	ldr	r1, [pc, #108]	; (80057b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800574a:	400a      	ands	r2, r1
 800574c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2241      	movs	r2, #65	; 0x41
 8005752:	2120      	movs	r1, #32
 8005754:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2242      	movs	r2, #66	; 0x42
 800575a:	2100      	movs	r1, #0
 800575c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2240      	movs	r2, #64	; 0x40
 8005762:	2100      	movs	r1, #0
 8005764:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e022      	b.n	80057b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576a:	f7fe f9c3 	bl	8003af4 <HAL_GetTick>
 800576e:	0002      	movs	r2, r0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	429a      	cmp	r2, r3
 8005778:	d302      	bcc.n	8005780 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10f      	bne.n	80057a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005784:	2220      	movs	r2, #32
 8005786:	431a      	orrs	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2241      	movs	r2, #65	; 0x41
 8005790:	2120      	movs	r1, #32
 8005792:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2240      	movs	r2, #64	; 0x40
 8005798:	2100      	movs	r1, #0
 800579a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e007      	b.n	80057b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	2204      	movs	r2, #4
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d193      	bne.n	80056d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	0018      	movs	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b004      	add	sp, #16
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	fe00e800 	.word	0xfe00e800

080057bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b08b      	sub	sp, #44	; 0x2c
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c8:	2327      	movs	r3, #39	; 0x27
 80057ca:	18fb      	adds	r3, r7, r3
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	2210      	movs	r2, #16
 80057e4:	4013      	ands	r3, r2
 80057e6:	d100      	bne.n	80057ea <I2C_IsErrorOccurred+0x2e>
 80057e8:	e082      	b.n	80058f0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2210      	movs	r2, #16
 80057f0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057f2:	e060      	b.n	80058b6 <I2C_IsErrorOccurred+0xfa>
 80057f4:	2427      	movs	r4, #39	; 0x27
 80057f6:	193b      	adds	r3, r7, r4
 80057f8:	193a      	adds	r2, r7, r4
 80057fa:	7812      	ldrb	r2, [r2, #0]
 80057fc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	3301      	adds	r3, #1
 8005802:	d058      	beq.n	80058b6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005804:	f7fe f976 	bl	8003af4 <HAL_GetTick>
 8005808:	0002      	movs	r2, r0
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	429a      	cmp	r2, r3
 8005812:	d306      	bcc.n	8005822 <I2C_IsErrorOccurred+0x66>
 8005814:	193b      	adds	r3, r7, r4
 8005816:	193a      	adds	r2, r7, r4
 8005818:	7812      	ldrb	r2, [r2, #0]
 800581a:	701a      	strb	r2, [r3, #0]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d149      	bne.n	80058b6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	2380      	movs	r3, #128	; 0x80
 800582a:	01db      	lsls	r3, r3, #7
 800582c:	4013      	ands	r3, r2
 800582e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005830:	2013      	movs	r0, #19
 8005832:	183b      	adds	r3, r7, r0
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	2142      	movs	r1, #66	; 0x42
 8005838:	5c52      	ldrb	r2, [r2, r1]
 800583a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	2380      	movs	r3, #128	; 0x80
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	401a      	ands	r2, r3
 8005848:	2380      	movs	r3, #128	; 0x80
 800584a:	021b      	lsls	r3, r3, #8
 800584c:	429a      	cmp	r2, r3
 800584e:	d126      	bne.n	800589e <I2C_IsErrorOccurred+0xe2>
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	2380      	movs	r3, #128	; 0x80
 8005854:	01db      	lsls	r3, r3, #7
 8005856:	429a      	cmp	r2, r3
 8005858:	d021      	beq.n	800589e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800585a:	183b      	adds	r3, r7, r0
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b20      	cmp	r3, #32
 8005860:	d01d      	beq.n	800589e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2180      	movs	r1, #128	; 0x80
 800586e:	01c9      	lsls	r1, r1, #7
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005874:	f7fe f93e 	bl	8003af4 <HAL_GetTick>
 8005878:	0003      	movs	r3, r0
 800587a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800587c:	e00f      	b.n	800589e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800587e:	f7fe f939 	bl	8003af4 <HAL_GetTick>
 8005882:	0002      	movs	r2, r0
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b19      	cmp	r3, #25
 800588a:	d908      	bls.n	800589e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	2220      	movs	r2, #32
 8005890:	4313      	orrs	r3, r2
 8005892:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005894:	2327      	movs	r3, #39	; 0x27
 8005896:	18fb      	adds	r3, r7, r3
 8005898:	2201      	movs	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]

              break;
 800589c:	e00b      	b.n	80058b6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	2220      	movs	r2, #32
 80058a6:	4013      	ands	r3, r2
 80058a8:	2127      	movs	r1, #39	; 0x27
 80058aa:	187a      	adds	r2, r7, r1
 80058ac:	1879      	adds	r1, r7, r1
 80058ae:	7809      	ldrb	r1, [r1, #0]
 80058b0:	7011      	strb	r1, [r2, #0]
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d1e3      	bne.n	800587e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	2220      	movs	r2, #32
 80058be:	4013      	ands	r3, r2
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d004      	beq.n	80058ce <I2C_IsErrorOccurred+0x112>
 80058c4:	2327      	movs	r3, #39	; 0x27
 80058c6:	18fb      	adds	r3, r7, r3
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d092      	beq.n	80057f4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80058ce:	2327      	movs	r3, #39	; 0x27
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d103      	bne.n	80058e0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2220      	movs	r2, #32
 80058de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	2204      	movs	r2, #4
 80058e4:	4313      	orrs	r3, r2
 80058e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80058e8:	2327      	movs	r3, #39	; 0x27
 80058ea:	18fb      	adds	r3, r7, r3
 80058ec:	2201      	movs	r2, #1
 80058ee:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	2380      	movs	r3, #128	; 0x80
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	4013      	ands	r3, r2
 8005900:	d00c      	beq.n	800591c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	2201      	movs	r2, #1
 8005906:	4313      	orrs	r3, r2
 8005908:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2280      	movs	r2, #128	; 0x80
 8005910:	0052      	lsls	r2, r2, #1
 8005912:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005914:	2327      	movs	r3, #39	; 0x27
 8005916:	18fb      	adds	r3, r7, r3
 8005918:	2201      	movs	r2, #1
 800591a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	2380      	movs	r3, #128	; 0x80
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4013      	ands	r3, r2
 8005924:	d00c      	beq.n	8005940 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	2208      	movs	r2, #8
 800592a:	4313      	orrs	r3, r2
 800592c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2280      	movs	r2, #128	; 0x80
 8005934:	00d2      	lsls	r2, r2, #3
 8005936:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005938:	2327      	movs	r3, #39	; 0x27
 800593a:	18fb      	adds	r3, r7, r3
 800593c:	2201      	movs	r2, #1
 800593e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	2380      	movs	r3, #128	; 0x80
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4013      	ands	r3, r2
 8005948:	d00c      	beq.n	8005964 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	2202      	movs	r2, #2
 800594e:	4313      	orrs	r3, r2
 8005950:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2280      	movs	r2, #128	; 0x80
 8005958:	0092      	lsls	r2, r2, #2
 800595a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800595c:	2327      	movs	r3, #39	; 0x27
 800595e:	18fb      	adds	r3, r7, r3
 8005960:	2201      	movs	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005964:	2327      	movs	r3, #39	; 0x27
 8005966:	18fb      	adds	r3, r7, r3
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01d      	beq.n	80059aa <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	0018      	movs	r0, r3
 8005972:	f7ff fdcd 	bl	8005510 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	490d      	ldr	r1, [pc, #52]	; (80059b8 <I2C_IsErrorOccurred+0x1fc>)
 8005982:	400a      	ands	r2, r1
 8005984:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	431a      	orrs	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2241      	movs	r2, #65	; 0x41
 8005996:	2120      	movs	r1, #32
 8005998:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2242      	movs	r2, #66	; 0x42
 800599e:	2100      	movs	r1, #0
 80059a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2240      	movs	r2, #64	; 0x40
 80059a6:	2100      	movs	r1, #0
 80059a8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80059aa:	2327      	movs	r3, #39	; 0x27
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	781b      	ldrb	r3, [r3, #0]
}
 80059b0:	0018      	movs	r0, r3
 80059b2:	46bd      	mov	sp, r7
 80059b4:	b00b      	add	sp, #44	; 0x2c
 80059b6:	bd90      	pop	{r4, r7, pc}
 80059b8:	fe00e800 	.word	0xfe00e800

080059bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80059bc:	b590      	push	{r4, r7, lr}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	0008      	movs	r0, r1
 80059c6:	0011      	movs	r1, r2
 80059c8:	607b      	str	r3, [r7, #4]
 80059ca:	240a      	movs	r4, #10
 80059cc:	193b      	adds	r3, r7, r4
 80059ce:	1c02      	adds	r2, r0, #0
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	2009      	movs	r0, #9
 80059d4:	183b      	adds	r3, r7, r0
 80059d6:	1c0a      	adds	r2, r1, #0
 80059d8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059da:	193b      	adds	r3, r7, r4
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	059b      	lsls	r3, r3, #22
 80059e0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059e2:	183b      	adds	r3, r7, r0
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	0419      	lsls	r1, r3, #16
 80059e8:	23ff      	movs	r3, #255	; 0xff
 80059ea:	041b      	lsls	r3, r3, #16
 80059ec:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059ee:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	4313      	orrs	r3, r2
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a06:	0d51      	lsrs	r1, r2, #21
 8005a08:	2280      	movs	r2, #128	; 0x80
 8005a0a:	00d2      	lsls	r2, r2, #3
 8005a0c:	400a      	ands	r2, r1
 8005a0e:	4907      	ldr	r1, [pc, #28]	; (8005a2c <I2C_TransferConfig+0x70>)
 8005a10:	430a      	orrs	r2, r1
 8005a12:	43d2      	mvns	r2, r2
 8005a14:	401a      	ands	r2, r3
 8005a16:	0011      	movs	r1, r2
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	46bd      	mov	sp, r7
 8005a26:	b007      	add	sp, #28
 8005a28:	bd90      	pop	{r4, r7, pc}
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	03ff63ff 	.word	0x03ff63ff

08005a30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2241      	movs	r2, #65	; 0x41
 8005a3e:	5c9b      	ldrb	r3, [r3, r2]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d138      	bne.n	8005ab8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2240      	movs	r2, #64	; 0x40
 8005a4a:	5c9b      	ldrb	r3, [r3, r2]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d101      	bne.n	8005a54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e032      	b.n	8005aba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2240      	movs	r2, #64	; 0x40
 8005a58:	2101      	movs	r1, #1
 8005a5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2241      	movs	r2, #65	; 0x41
 8005a60:	2124      	movs	r1, #36	; 0x24
 8005a62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2101      	movs	r1, #1
 8005a70:	438a      	bics	r2, r1
 8005a72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4911      	ldr	r1, [pc, #68]	; (8005ac4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005a80:	400a      	ands	r2, r1
 8005a82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6819      	ldr	r1, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2241      	movs	r2, #65	; 0x41
 8005aa8:	2120      	movs	r1, #32
 8005aaa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	e000      	b.n	8005aba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ab8:	2302      	movs	r3, #2
  }
}
 8005aba:	0018      	movs	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	b002      	add	sp, #8
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	ffffefff 	.word	0xffffefff

08005ac8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2241      	movs	r2, #65	; 0x41
 8005ad6:	5c9b      	ldrb	r3, [r3, r2]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d139      	bne.n	8005b52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2240      	movs	r2, #64	; 0x40
 8005ae2:	5c9b      	ldrb	r3, [r3, r2]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e033      	b.n	8005b54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2240      	movs	r2, #64	; 0x40
 8005af0:	2101      	movs	r1, #1
 8005af2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2241      	movs	r2, #65	; 0x41
 8005af8:	2124      	movs	r1, #36	; 0x24
 8005afa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2101      	movs	r1, #1
 8005b08:	438a      	bics	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4a11      	ldr	r2, [pc, #68]	; (8005b5c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	021b      	lsls	r3, r3, #8
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2101      	movs	r1, #1
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2241      	movs	r2, #65	; 0x41
 8005b42:	2120      	movs	r1, #32
 8005b44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2240      	movs	r2, #64	; 0x40
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e000      	b.n	8005b54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b52:	2302      	movs	r3, #2
  }
}
 8005b54:	0018      	movs	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b004      	add	sp, #16
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	fffff0ff 	.word	0xfffff0ff

08005b60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005b68:	4b19      	ldr	r3, [pc, #100]	; (8005bd0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a19      	ldr	r2, [pc, #100]	; (8005bd4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	0019      	movs	r1, r3
 8005b72:	4b17      	ldr	r3, [pc, #92]	; (8005bd0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d11f      	bne.n	8005bc4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005b84:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	0013      	movs	r3, r2
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	189b      	adds	r3, r3, r2
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	4912      	ldr	r1, [pc, #72]	; (8005bdc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005b92:	0018      	movs	r0, r3
 8005b94:	f7fa fab4 	bl	8000100 <__udivsi3>
 8005b98:	0003      	movs	r3, r0
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b9e:	e008      	b.n	8005bb2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	e001      	b.n	8005bb2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e009      	b.n	8005bc6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bb2:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005bb4:	695a      	ldr	r2, [r3, #20]
 8005bb6:	2380      	movs	r3, #128	; 0x80
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	401a      	ands	r2, r3
 8005bbc:	2380      	movs	r3, #128	; 0x80
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d0ed      	beq.n	8005ba0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	b004      	add	sp, #16
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	40007000 	.word	0x40007000
 8005bd4:	fffff9ff 	.word	0xfffff9ff
 8005bd8:	20000104 	.word	0x20000104
 8005bdc:	000f4240 	.word	0x000f4240

08005be0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005be4:	4b03      	ldr	r3, [pc, #12]	; (8005bf4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	23e0      	movs	r3, #224	; 0xe0
 8005bea:	01db      	lsls	r3, r3, #7
 8005bec:	4013      	ands	r3, r2
}
 8005bee:	0018      	movs	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40021000 	.word	0x40021000

08005bf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e2fe      	b.n	8006208 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	4013      	ands	r3, r2
 8005c12:	d100      	bne.n	8005c16 <HAL_RCC_OscConfig+0x1e>
 8005c14:	e07c      	b.n	8005d10 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c16:	4bc3      	ldr	r3, [pc, #780]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2238      	movs	r2, #56	; 0x38
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c20:	4bc0      	ldr	r3, [pc, #768]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	2203      	movs	r2, #3
 8005c26:	4013      	ands	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b10      	cmp	r3, #16
 8005c2e:	d102      	bne.n	8005c36 <HAL_RCC_OscConfig+0x3e>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d002      	beq.n	8005c3c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d10b      	bne.n	8005c54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c3c:	4bb9      	ldr	r3, [pc, #740]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	2380      	movs	r3, #128	; 0x80
 8005c42:	029b      	lsls	r3, r3, #10
 8005c44:	4013      	ands	r3, r2
 8005c46:	d062      	beq.n	8005d0e <HAL_RCC_OscConfig+0x116>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d15e      	bne.n	8005d0e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e2d9      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	2380      	movs	r3, #128	; 0x80
 8005c5a:	025b      	lsls	r3, r3, #9
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d107      	bne.n	8005c70 <HAL_RCC_OscConfig+0x78>
 8005c60:	4bb0      	ldr	r3, [pc, #704]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	4baf      	ldr	r3, [pc, #700]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005c66:	2180      	movs	r1, #128	; 0x80
 8005c68:	0249      	lsls	r1, r1, #9
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e020      	b.n	8005cb2 <HAL_RCC_OscConfig+0xba>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	23a0      	movs	r3, #160	; 0xa0
 8005c76:	02db      	lsls	r3, r3, #11
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d10e      	bne.n	8005c9a <HAL_RCC_OscConfig+0xa2>
 8005c7c:	4ba9      	ldr	r3, [pc, #676]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	4ba8      	ldr	r3, [pc, #672]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005c82:	2180      	movs	r1, #128	; 0x80
 8005c84:	02c9      	lsls	r1, r1, #11
 8005c86:	430a      	orrs	r2, r1
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	4ba6      	ldr	r3, [pc, #664]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4ba5      	ldr	r3, [pc, #660]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005c90:	2180      	movs	r1, #128	; 0x80
 8005c92:	0249      	lsls	r1, r1, #9
 8005c94:	430a      	orrs	r2, r1
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	e00b      	b.n	8005cb2 <HAL_RCC_OscConfig+0xba>
 8005c9a:	4ba2      	ldr	r3, [pc, #648]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	4ba1      	ldr	r3, [pc, #644]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005ca0:	49a1      	ldr	r1, [pc, #644]	; (8005f28 <HAL_RCC_OscConfig+0x330>)
 8005ca2:	400a      	ands	r2, r1
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	4b9f      	ldr	r3, [pc, #636]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b9e      	ldr	r3, [pc, #632]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005cac:	499f      	ldr	r1, [pc, #636]	; (8005f2c <HAL_RCC_OscConfig+0x334>)
 8005cae:	400a      	ands	r2, r1
 8005cb0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d014      	beq.n	8005ce4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cba:	f7fd ff1b 	bl	8003af4 <HAL_GetTick>
 8005cbe:	0003      	movs	r3, r0
 8005cc0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cc4:	f7fd ff16 	bl	8003af4 <HAL_GetTick>
 8005cc8:	0002      	movs	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b64      	cmp	r3, #100	; 0x64
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e298      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cd6:	4b93      	ldr	r3, [pc, #588]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	029b      	lsls	r3, r3, #10
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d0f0      	beq.n	8005cc4 <HAL_RCC_OscConfig+0xcc>
 8005ce2:	e015      	b.n	8005d10 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fd ff06 	bl	8003af4 <HAL_GetTick>
 8005ce8:	0003      	movs	r3, r0
 8005cea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cee:	f7fd ff01 	bl	8003af4 <HAL_GetTick>
 8005cf2:	0002      	movs	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b64      	cmp	r3, #100	; 0x64
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e283      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d00:	4b88      	ldr	r3, [pc, #544]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	2380      	movs	r3, #128	; 0x80
 8005d06:	029b      	lsls	r3, r3, #10
 8005d08:	4013      	ands	r3, r2
 8005d0a:	d1f0      	bne.n	8005cee <HAL_RCC_OscConfig+0xf6>
 8005d0c:	e000      	b.n	8005d10 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d0e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2202      	movs	r2, #2
 8005d16:	4013      	ands	r3, r2
 8005d18:	d100      	bne.n	8005d1c <HAL_RCC_OscConfig+0x124>
 8005d1a:	e099      	b.n	8005e50 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d1c:	4b81      	ldr	r3, [pc, #516]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2238      	movs	r2, #56	; 0x38
 8005d22:	4013      	ands	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d26:	4b7f      	ldr	r3, [pc, #508]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2b10      	cmp	r3, #16
 8005d34:	d102      	bne.n	8005d3c <HAL_RCC_OscConfig+0x144>
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d002      	beq.n	8005d42 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d135      	bne.n	8005dae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d42:	4b78      	ldr	r3, [pc, #480]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	2380      	movs	r3, #128	; 0x80
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	d005      	beq.n	8005d5a <HAL_RCC_OscConfig+0x162>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e256      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d5a:	4b72      	ldr	r3, [pc, #456]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4a74      	ldr	r2, [pc, #464]	; (8005f30 <HAL_RCC_OscConfig+0x338>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	0019      	movs	r1, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	021a      	lsls	r2, r3, #8
 8005d6a:	4b6e      	ldr	r3, [pc, #440]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d112      	bne.n	8005d9c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005d76:	4b6b      	ldr	r3, [pc, #428]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a6e      	ldr	r2, [pc, #440]	; (8005f34 <HAL_RCC_OscConfig+0x33c>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	0019      	movs	r1, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	4b67      	ldr	r3, [pc, #412]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005d86:	430a      	orrs	r2, r1
 8005d88:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005d8a:	4b66      	ldr	r3, [pc, #408]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	0adb      	lsrs	r3, r3, #11
 8005d90:	2207      	movs	r2, #7
 8005d92:	4013      	ands	r3, r2
 8005d94:	4a68      	ldr	r2, [pc, #416]	; (8005f38 <HAL_RCC_OscConfig+0x340>)
 8005d96:	40da      	lsrs	r2, r3
 8005d98:	4b68      	ldr	r3, [pc, #416]	; (8005f3c <HAL_RCC_OscConfig+0x344>)
 8005d9a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d9c:	4b68      	ldr	r3, [pc, #416]	; (8005f40 <HAL_RCC_OscConfig+0x348>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	0018      	movs	r0, r3
 8005da2:	f7fd fe4b 	bl	8003a3c <HAL_InitTick>
 8005da6:	1e03      	subs	r3, r0, #0
 8005da8:	d051      	beq.n	8005e4e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e22c      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d030      	beq.n	8005e18 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005db6:	4b5b      	ldr	r3, [pc, #364]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a5e      	ldr	r2, [pc, #376]	; (8005f34 <HAL_RCC_OscConfig+0x33c>)
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	0019      	movs	r1, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	4b57      	ldr	r3, [pc, #348]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005dca:	4b56      	ldr	r3, [pc, #344]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b55      	ldr	r3, [pc, #340]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005dd0:	2180      	movs	r1, #128	; 0x80
 8005dd2:	0049      	lsls	r1, r1, #1
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fd fe8c 	bl	8003af4 <HAL_GetTick>
 8005ddc:	0003      	movs	r3, r0
 8005dde:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005de2:	f7fd fe87 	bl	8003af4 <HAL_GetTick>
 8005de6:	0002      	movs	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e209      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005df4:	4b4b      	ldr	r3, [pc, #300]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	2380      	movs	r3, #128	; 0x80
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e00:	4b48      	ldr	r3, [pc, #288]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	4a4a      	ldr	r2, [pc, #296]	; (8005f30 <HAL_RCC_OscConfig+0x338>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	0019      	movs	r1, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	021a      	lsls	r2, r3, #8
 8005e10:	4b44      	ldr	r3, [pc, #272]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	e01b      	b.n	8005e50 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005e18:	4b42      	ldr	r3, [pc, #264]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	4b41      	ldr	r3, [pc, #260]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005e1e:	4949      	ldr	r1, [pc, #292]	; (8005f44 <HAL_RCC_OscConfig+0x34c>)
 8005e20:	400a      	ands	r2, r1
 8005e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e24:	f7fd fe66 	bl	8003af4 <HAL_GetTick>
 8005e28:	0003      	movs	r3, r0
 8005e2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e2c:	e008      	b.n	8005e40 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e2e:	f7fd fe61 	bl	8003af4 <HAL_GetTick>
 8005e32:	0002      	movs	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e1e3      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e40:	4b38      	ldr	r3, [pc, #224]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d1f0      	bne.n	8005e2e <HAL_RCC_OscConfig+0x236>
 8005e4c:	e000      	b.n	8005e50 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e4e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2208      	movs	r2, #8
 8005e56:	4013      	ands	r3, r2
 8005e58:	d047      	beq.n	8005eea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005e5a:	4b32      	ldr	r3, [pc, #200]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2238      	movs	r2, #56	; 0x38
 8005e60:	4013      	ands	r3, r2
 8005e62:	2b18      	cmp	r3, #24
 8005e64:	d10a      	bne.n	8005e7c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005e66:	4b2f      	ldr	r3, [pc, #188]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d03c      	beq.n	8005eea <HAL_RCC_OscConfig+0x2f2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d138      	bne.n	8005eea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e1c5      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d019      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005e84:	4b27      	ldr	r3, [pc, #156]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005e86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e88:	4b26      	ldr	r3, [pc, #152]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e90:	f7fd fe30 	bl	8003af4 <HAL_GetTick>
 8005e94:	0003      	movs	r3, r0
 8005e96:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e9a:	f7fd fe2b 	bl	8003af4 <HAL_GetTick>
 8005e9e:	0002      	movs	r2, r0
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e1ad      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005eac:	4b1d      	ldr	r3, [pc, #116]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d0f1      	beq.n	8005e9a <HAL_RCC_OscConfig+0x2a2>
 8005eb6:	e018      	b.n	8005eea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005eb8:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005eba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ebc:	4b19      	ldr	r3, [pc, #100]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	438a      	bics	r2, r1
 8005ec2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec4:	f7fd fe16 	bl	8003af4 <HAL_GetTick>
 8005ec8:	0003      	movs	r3, r0
 8005eca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ece:	f7fd fe11 	bl	8003af4 <HAL_GetTick>
 8005ed2:	0002      	movs	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e193      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ee0:	4b10      	ldr	r3, [pc, #64]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	d1f1      	bne.n	8005ece <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2204      	movs	r2, #4
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	d100      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x2fe>
 8005ef4:	e0c6      	b.n	8006084 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ef6:	231f      	movs	r3, #31
 8005ef8:	18fb      	adds	r3, r7, r3
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005efe:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2238      	movs	r2, #56	; 0x38
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d11e      	bne.n	8005f48 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005f0a:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <HAL_RCC_OscConfig+0x32c>)
 8005f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0e:	2202      	movs	r2, #2
 8005f10:	4013      	ands	r3, r2
 8005f12:	d100      	bne.n	8005f16 <HAL_RCC_OscConfig+0x31e>
 8005f14:	e0b6      	b.n	8006084 <HAL_RCC_OscConfig+0x48c>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d000      	beq.n	8005f20 <HAL_RCC_OscConfig+0x328>
 8005f1e:	e0b1      	b.n	8006084 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e171      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
 8005f24:	40021000 	.word	0x40021000
 8005f28:	fffeffff 	.word	0xfffeffff
 8005f2c:	fffbffff 	.word	0xfffbffff
 8005f30:	ffff80ff 	.word	0xffff80ff
 8005f34:	ffffc7ff 	.word	0xffffc7ff
 8005f38:	00f42400 	.word	0x00f42400
 8005f3c:	20000104 	.word	0x20000104
 8005f40:	20000108 	.word	0x20000108
 8005f44:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f48:	4bb1      	ldr	r3, [pc, #708]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8005f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	055b      	lsls	r3, r3, #21
 8005f50:	4013      	ands	r3, r2
 8005f52:	d101      	bne.n	8005f58 <HAL_RCC_OscConfig+0x360>
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <HAL_RCC_OscConfig+0x362>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d011      	beq.n	8005f82 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005f5e:	4bac      	ldr	r3, [pc, #688]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8005f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f62:	4bab      	ldr	r3, [pc, #684]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8005f64:	2180      	movs	r1, #128	; 0x80
 8005f66:	0549      	lsls	r1, r1, #21
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f6c:	4ba8      	ldr	r3, [pc, #672]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8005f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f70:	2380      	movs	r3, #128	; 0x80
 8005f72:	055b      	lsls	r3, r3, #21
 8005f74:	4013      	ands	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005f7a:	231f      	movs	r3, #31
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	2201      	movs	r2, #1
 8005f80:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f82:	4ba4      	ldr	r3, [pc, #656]	; (8006214 <HAL_RCC_OscConfig+0x61c>)
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	2380      	movs	r3, #128	; 0x80
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	d11a      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f8e:	4ba1      	ldr	r3, [pc, #644]	; (8006214 <HAL_RCC_OscConfig+0x61c>)
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4ba0      	ldr	r3, [pc, #640]	; (8006214 <HAL_RCC_OscConfig+0x61c>)
 8005f94:	2180      	movs	r1, #128	; 0x80
 8005f96:	0049      	lsls	r1, r1, #1
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005f9c:	f7fd fdaa 	bl	8003af4 <HAL_GetTick>
 8005fa0:	0003      	movs	r3, r0
 8005fa2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa6:	f7fd fda5 	bl	8003af4 <HAL_GetTick>
 8005faa:	0002      	movs	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e127      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fb8:	4b96      	ldr	r3, [pc, #600]	; (8006214 <HAL_RCC_OscConfig+0x61c>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	2380      	movs	r3, #128	; 0x80
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	d0f0      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d106      	bne.n	8005fda <HAL_RCC_OscConfig+0x3e2>
 8005fcc:	4b90      	ldr	r3, [pc, #576]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8005fce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fd0:	4b8f      	ldr	r3, [pc, #572]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8005fd8:	e01c      	b.n	8006014 <HAL_RCC_OscConfig+0x41c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b05      	cmp	r3, #5
 8005fe0:	d10c      	bne.n	8005ffc <HAL_RCC_OscConfig+0x404>
 8005fe2:	4b8b      	ldr	r3, [pc, #556]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8005fe4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fe6:	4b8a      	ldr	r3, [pc, #552]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8005fe8:	2104      	movs	r1, #4
 8005fea:	430a      	orrs	r2, r1
 8005fec:	65da      	str	r2, [r3, #92]	; 0x5c
 8005fee:	4b88      	ldr	r3, [pc, #544]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8005ff0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ff2:	4b87      	ldr	r3, [pc, #540]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ffa:	e00b      	b.n	8006014 <HAL_RCC_OscConfig+0x41c>
 8005ffc:	4b84      	ldr	r3, [pc, #528]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8005ffe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006000:	4b83      	ldr	r3, [pc, #524]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8006002:	2101      	movs	r1, #1
 8006004:	438a      	bics	r2, r1
 8006006:	65da      	str	r2, [r3, #92]	; 0x5c
 8006008:	4b81      	ldr	r3, [pc, #516]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 800600a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800600c:	4b80      	ldr	r3, [pc, #512]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 800600e:	2104      	movs	r1, #4
 8006010:	438a      	bics	r2, r1
 8006012:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d014      	beq.n	8006046 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601c:	f7fd fd6a 	bl	8003af4 <HAL_GetTick>
 8006020:	0003      	movs	r3, r0
 8006022:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006024:	e009      	b.n	800603a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006026:	f7fd fd65 	bl	8003af4 <HAL_GetTick>
 800602a:	0002      	movs	r2, r0
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	4a79      	ldr	r2, [pc, #484]	; (8006218 <HAL_RCC_OscConfig+0x620>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e0e6      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800603a:	4b75      	ldr	r3, [pc, #468]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 800603c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603e:	2202      	movs	r2, #2
 8006040:	4013      	ands	r3, r2
 8006042:	d0f0      	beq.n	8006026 <HAL_RCC_OscConfig+0x42e>
 8006044:	e013      	b.n	800606e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006046:	f7fd fd55 	bl	8003af4 <HAL_GetTick>
 800604a:	0003      	movs	r3, r0
 800604c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800604e:	e009      	b.n	8006064 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006050:	f7fd fd50 	bl	8003af4 <HAL_GetTick>
 8006054:	0002      	movs	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	4a6f      	ldr	r2, [pc, #444]	; (8006218 <HAL_RCC_OscConfig+0x620>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d901      	bls.n	8006064 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e0d1      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006064:	4b6a      	ldr	r3, [pc, #424]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8006066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006068:	2202      	movs	r2, #2
 800606a:	4013      	ands	r3, r2
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800606e:	231f      	movs	r3, #31
 8006070:	18fb      	adds	r3, r7, r3
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d105      	bne.n	8006084 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006078:	4b65      	ldr	r3, [pc, #404]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 800607a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800607c:	4b64      	ldr	r3, [pc, #400]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 800607e:	4967      	ldr	r1, [pc, #412]	; (800621c <HAL_RCC_OscConfig+0x624>)
 8006080:	400a      	ands	r2, r1
 8006082:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d100      	bne.n	800608e <HAL_RCC_OscConfig+0x496>
 800608c:	e0bb      	b.n	8006206 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800608e:	4b60      	ldr	r3, [pc, #384]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2238      	movs	r2, #56	; 0x38
 8006094:	4013      	ands	r3, r2
 8006096:	2b10      	cmp	r3, #16
 8006098:	d100      	bne.n	800609c <HAL_RCC_OscConfig+0x4a4>
 800609a:	e07b      	b.n	8006194 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d156      	bne.n	8006152 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060a4:	4b5a      	ldr	r3, [pc, #360]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	4b59      	ldr	r3, [pc, #356]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 80060aa:	495d      	ldr	r1, [pc, #372]	; (8006220 <HAL_RCC_OscConfig+0x628>)
 80060ac:	400a      	ands	r2, r1
 80060ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b0:	f7fd fd20 	bl	8003af4 <HAL_GetTick>
 80060b4:	0003      	movs	r3, r0
 80060b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060b8:	e008      	b.n	80060cc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ba:	f7fd fd1b 	bl	8003af4 <HAL_GetTick>
 80060be:	0002      	movs	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e09d      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060cc:	4b50      	ldr	r3, [pc, #320]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	2380      	movs	r3, #128	; 0x80
 80060d2:	049b      	lsls	r3, r3, #18
 80060d4:	4013      	ands	r3, r2
 80060d6:	d1f0      	bne.n	80060ba <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060d8:	4b4d      	ldr	r3, [pc, #308]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	4a51      	ldr	r2, [pc, #324]	; (8006224 <HAL_RCC_OscConfig+0x62c>)
 80060de:	4013      	ands	r3, r2
 80060e0:	0019      	movs	r1, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1a      	ldr	r2, [r3, #32]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006104:	431a      	orrs	r2, r3
 8006106:	4b42      	ldr	r3, [pc, #264]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8006108:	430a      	orrs	r2, r1
 800610a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800610c:	4b40      	ldr	r3, [pc, #256]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	4b3f      	ldr	r3, [pc, #252]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8006112:	2180      	movs	r1, #128	; 0x80
 8006114:	0449      	lsls	r1, r1, #17
 8006116:	430a      	orrs	r2, r1
 8006118:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800611a:	4b3d      	ldr	r3, [pc, #244]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	4b3c      	ldr	r3, [pc, #240]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8006120:	2180      	movs	r1, #128	; 0x80
 8006122:	0549      	lsls	r1, r1, #21
 8006124:	430a      	orrs	r2, r1
 8006126:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006128:	f7fd fce4 	bl	8003af4 <HAL_GetTick>
 800612c:	0003      	movs	r3, r0
 800612e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006130:	e008      	b.n	8006144 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006132:	f7fd fcdf 	bl	8003af4 <HAL_GetTick>
 8006136:	0002      	movs	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e061      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006144:	4b32      	ldr	r3, [pc, #200]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	049b      	lsls	r3, r3, #18
 800614c:	4013      	ands	r3, r2
 800614e:	d0f0      	beq.n	8006132 <HAL_RCC_OscConfig+0x53a>
 8006150:	e059      	b.n	8006206 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006152:	4b2f      	ldr	r3, [pc, #188]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4b2e      	ldr	r3, [pc, #184]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8006158:	4931      	ldr	r1, [pc, #196]	; (8006220 <HAL_RCC_OscConfig+0x628>)
 800615a:	400a      	ands	r2, r1
 800615c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615e:	f7fd fcc9 	bl	8003af4 <HAL_GetTick>
 8006162:	0003      	movs	r3, r0
 8006164:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006168:	f7fd fcc4 	bl	8003af4 <HAL_GetTick>
 800616c:	0002      	movs	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e046      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800617a:	4b25      	ldr	r3, [pc, #148]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	2380      	movs	r3, #128	; 0x80
 8006180:	049b      	lsls	r3, r3, #18
 8006182:	4013      	ands	r3, r2
 8006184:	d1f0      	bne.n	8006168 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006186:	4b22      	ldr	r3, [pc, #136]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	4b21      	ldr	r3, [pc, #132]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 800618c:	4926      	ldr	r1, [pc, #152]	; (8006228 <HAL_RCC_OscConfig+0x630>)
 800618e:	400a      	ands	r2, r1
 8006190:	60da      	str	r2, [r3, #12]
 8006192:	e038      	b.n	8006206 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d101      	bne.n	80061a0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e033      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80061a0:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <HAL_RCC_OscConfig+0x618>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2203      	movs	r2, #3
 80061aa:	401a      	ands	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d126      	bne.n	8006202 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2270      	movs	r2, #112	; 0x70
 80061b8:	401a      	ands	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061be:	429a      	cmp	r2, r3
 80061c0:	d11f      	bne.n	8006202 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	23fe      	movs	r3, #254	; 0xfe
 80061c6:	01db      	lsls	r3, r3, #7
 80061c8:	401a      	ands	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ce:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d116      	bne.n	8006202 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	23f8      	movs	r3, #248	; 0xf8
 80061d8:	039b      	lsls	r3, r3, #14
 80061da:	401a      	ands	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d10e      	bne.n	8006202 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	23e0      	movs	r3, #224	; 0xe0
 80061e8:	051b      	lsls	r3, r3, #20
 80061ea:	401a      	ands	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d106      	bne.n	8006202 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	0f5b      	lsrs	r3, r3, #29
 80061f8:	075a      	lsls	r2, r3, #29
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80061fe:	429a      	cmp	r2, r3
 8006200:	d001      	beq.n	8006206 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	0018      	movs	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	b008      	add	sp, #32
 800620e:	bd80      	pop	{r7, pc}
 8006210:	40021000 	.word	0x40021000
 8006214:	40007000 	.word	0x40007000
 8006218:	00001388 	.word	0x00001388
 800621c:	efffffff 	.word	0xefffffff
 8006220:	feffffff 	.word	0xfeffffff
 8006224:	11c1808c 	.word	0x11c1808c
 8006228:	eefefffc 	.word	0xeefefffc

0800622c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e0e9      	b.n	8006414 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006240:	4b76      	ldr	r3, [pc, #472]	; (800641c <HAL_RCC_ClockConfig+0x1f0>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2207      	movs	r2, #7
 8006246:	4013      	ands	r3, r2
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d91e      	bls.n	800628c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624e:	4b73      	ldr	r3, [pc, #460]	; (800641c <HAL_RCC_ClockConfig+0x1f0>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2207      	movs	r2, #7
 8006254:	4393      	bics	r3, r2
 8006256:	0019      	movs	r1, r3
 8006258:	4b70      	ldr	r3, [pc, #448]	; (800641c <HAL_RCC_ClockConfig+0x1f0>)
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006260:	f7fd fc48 	bl	8003af4 <HAL_GetTick>
 8006264:	0003      	movs	r3, r0
 8006266:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006268:	e009      	b.n	800627e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800626a:	f7fd fc43 	bl	8003af4 <HAL_GetTick>
 800626e:	0002      	movs	r2, r0
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	4a6a      	ldr	r2, [pc, #424]	; (8006420 <HAL_RCC_ClockConfig+0x1f4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d901      	bls.n	800627e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e0ca      	b.n	8006414 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800627e:	4b67      	ldr	r3, [pc, #412]	; (800641c <HAL_RCC_ClockConfig+0x1f0>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2207      	movs	r2, #7
 8006284:	4013      	ands	r3, r2
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	429a      	cmp	r2, r3
 800628a:	d1ee      	bne.n	800626a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2202      	movs	r2, #2
 8006292:	4013      	ands	r3, r2
 8006294:	d015      	beq.n	80062c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2204      	movs	r2, #4
 800629c:	4013      	ands	r3, r2
 800629e:	d006      	beq.n	80062ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80062a0:	4b60      	ldr	r3, [pc, #384]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	4b5f      	ldr	r3, [pc, #380]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 80062a6:	21e0      	movs	r1, #224	; 0xe0
 80062a8:	01c9      	lsls	r1, r1, #7
 80062aa:	430a      	orrs	r2, r1
 80062ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ae:	4b5d      	ldr	r3, [pc, #372]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	4a5d      	ldr	r2, [pc, #372]	; (8006428 <HAL_RCC_ClockConfig+0x1fc>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	0019      	movs	r1, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	4b59      	ldr	r3, [pc, #356]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 80062be:	430a      	orrs	r2, r1
 80062c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2201      	movs	r2, #1
 80062c8:	4013      	ands	r3, r2
 80062ca:	d057      	beq.n	800637c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d107      	bne.n	80062e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062d4:	4b53      	ldr	r3, [pc, #332]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	2380      	movs	r3, #128	; 0x80
 80062da:	029b      	lsls	r3, r3, #10
 80062dc:	4013      	ands	r3, r2
 80062de:	d12b      	bne.n	8006338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e097      	b.n	8006414 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d107      	bne.n	80062fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ec:	4b4d      	ldr	r3, [pc, #308]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	2380      	movs	r3, #128	; 0x80
 80062f2:	049b      	lsls	r3, r3, #18
 80062f4:	4013      	ands	r3, r2
 80062f6:	d11f      	bne.n	8006338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e08b      	b.n	8006414 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d107      	bne.n	8006314 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006304:	4b47      	ldr	r3, [pc, #284]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	4013      	ands	r3, r2
 800630e:	d113      	bne.n	8006338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e07f      	b.n	8006414 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2b03      	cmp	r3, #3
 800631a:	d106      	bne.n	800632a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800631c:	4b41      	ldr	r3, [pc, #260]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 800631e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006320:	2202      	movs	r2, #2
 8006322:	4013      	ands	r3, r2
 8006324:	d108      	bne.n	8006338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e074      	b.n	8006414 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800632a:	4b3e      	ldr	r3, [pc, #248]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 800632c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632e:	2202      	movs	r2, #2
 8006330:	4013      	ands	r3, r2
 8006332:	d101      	bne.n	8006338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e06d      	b.n	8006414 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006338:	4b3a      	ldr	r3, [pc, #232]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	2207      	movs	r2, #7
 800633e:	4393      	bics	r3, r2
 8006340:	0019      	movs	r1, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	4b37      	ldr	r3, [pc, #220]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 8006348:	430a      	orrs	r2, r1
 800634a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800634c:	f7fd fbd2 	bl	8003af4 <HAL_GetTick>
 8006350:	0003      	movs	r3, r0
 8006352:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006354:	e009      	b.n	800636a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006356:	f7fd fbcd 	bl	8003af4 <HAL_GetTick>
 800635a:	0002      	movs	r2, r0
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	4a2f      	ldr	r2, [pc, #188]	; (8006420 <HAL_RCC_ClockConfig+0x1f4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d901      	bls.n	800636a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e054      	b.n	8006414 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800636a:	4b2e      	ldr	r3, [pc, #184]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	2238      	movs	r2, #56	; 0x38
 8006370:	401a      	ands	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	429a      	cmp	r2, r3
 800637a:	d1ec      	bne.n	8006356 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800637c:	4b27      	ldr	r3, [pc, #156]	; (800641c <HAL_RCC_ClockConfig+0x1f0>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2207      	movs	r2, #7
 8006382:	4013      	ands	r3, r2
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d21e      	bcs.n	80063c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638a:	4b24      	ldr	r3, [pc, #144]	; (800641c <HAL_RCC_ClockConfig+0x1f0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2207      	movs	r2, #7
 8006390:	4393      	bics	r3, r2
 8006392:	0019      	movs	r1, r3
 8006394:	4b21      	ldr	r3, [pc, #132]	; (800641c <HAL_RCC_ClockConfig+0x1f0>)
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800639c:	f7fd fbaa 	bl	8003af4 <HAL_GetTick>
 80063a0:	0003      	movs	r3, r0
 80063a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80063a4:	e009      	b.n	80063ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063a6:	f7fd fba5 	bl	8003af4 <HAL_GetTick>
 80063aa:	0002      	movs	r2, r0
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	4a1b      	ldr	r2, [pc, #108]	; (8006420 <HAL_RCC_ClockConfig+0x1f4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e02c      	b.n	8006414 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80063ba:	4b18      	ldr	r3, [pc, #96]	; (800641c <HAL_RCC_ClockConfig+0x1f0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2207      	movs	r2, #7
 80063c0:	4013      	ands	r3, r2
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d1ee      	bne.n	80063a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2204      	movs	r2, #4
 80063ce:	4013      	ands	r3, r2
 80063d0:	d009      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80063d2:	4b14      	ldr	r3, [pc, #80]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	4a15      	ldr	r2, [pc, #84]	; (800642c <HAL_RCC_ClockConfig+0x200>)
 80063d8:	4013      	ands	r3, r2
 80063da:	0019      	movs	r1, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	4b10      	ldr	r3, [pc, #64]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 80063e2:	430a      	orrs	r2, r1
 80063e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80063e6:	f000 f829 	bl	800643c <HAL_RCC_GetSysClockFreq>
 80063ea:	0001      	movs	r1, r0
 80063ec:	4b0d      	ldr	r3, [pc, #52]	; (8006424 <HAL_RCC_ClockConfig+0x1f8>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	0a1b      	lsrs	r3, r3, #8
 80063f2:	220f      	movs	r2, #15
 80063f4:	401a      	ands	r2, r3
 80063f6:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <HAL_RCC_ClockConfig+0x204>)
 80063f8:	0092      	lsls	r2, r2, #2
 80063fa:	58d3      	ldr	r3, [r2, r3]
 80063fc:	221f      	movs	r2, #31
 80063fe:	4013      	ands	r3, r2
 8006400:	000a      	movs	r2, r1
 8006402:	40da      	lsrs	r2, r3
 8006404:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <HAL_RCC_ClockConfig+0x208>)
 8006406:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006408:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <HAL_RCC_ClockConfig+0x20c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	0018      	movs	r0, r3
 800640e:	f7fd fb15 	bl	8003a3c <HAL_InitTick>
 8006412:	0003      	movs	r3, r0
}
 8006414:	0018      	movs	r0, r3
 8006416:	46bd      	mov	sp, r7
 8006418:	b004      	add	sp, #16
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40022000 	.word	0x40022000
 8006420:	00001388 	.word	0x00001388
 8006424:	40021000 	.word	0x40021000
 8006428:	fffff0ff 	.word	0xfffff0ff
 800642c:	ffff8fff 	.word	0xffff8fff
 8006430:	08008648 	.word	0x08008648
 8006434:	20000104 	.word	0x20000104
 8006438:	20000108 	.word	0x20000108

0800643c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006442:	4b3c      	ldr	r3, [pc, #240]	; (8006534 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2238      	movs	r2, #56	; 0x38
 8006448:	4013      	ands	r3, r2
 800644a:	d10f      	bne.n	800646c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800644c:	4b39      	ldr	r3, [pc, #228]	; (8006534 <HAL_RCC_GetSysClockFreq+0xf8>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	0adb      	lsrs	r3, r3, #11
 8006452:	2207      	movs	r2, #7
 8006454:	4013      	ands	r3, r2
 8006456:	2201      	movs	r2, #1
 8006458:	409a      	lsls	r2, r3
 800645a:	0013      	movs	r3, r2
 800645c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	4835      	ldr	r0, [pc, #212]	; (8006538 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006462:	f7f9 fe4d 	bl	8000100 <__udivsi3>
 8006466:	0003      	movs	r3, r0
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	e05d      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800646c:	4b31      	ldr	r3, [pc, #196]	; (8006534 <HAL_RCC_GetSysClockFreq+0xf8>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	2238      	movs	r2, #56	; 0x38
 8006472:	4013      	ands	r3, r2
 8006474:	2b08      	cmp	r3, #8
 8006476:	d102      	bne.n	800647e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006478:	4b30      	ldr	r3, [pc, #192]	; (800653c <HAL_RCC_GetSysClockFreq+0x100>)
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	e054      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800647e:	4b2d      	ldr	r3, [pc, #180]	; (8006534 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	2238      	movs	r2, #56	; 0x38
 8006484:	4013      	ands	r3, r2
 8006486:	2b10      	cmp	r3, #16
 8006488:	d138      	bne.n	80064fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800648a:	4b2a      	ldr	r3, [pc, #168]	; (8006534 <HAL_RCC_GetSysClockFreq+0xf8>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	2203      	movs	r2, #3
 8006490:	4013      	ands	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006494:	4b27      	ldr	r3, [pc, #156]	; (8006534 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	2207      	movs	r2, #7
 800649c:	4013      	ands	r3, r2
 800649e:	3301      	adds	r3, #1
 80064a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d10d      	bne.n	80064c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064a8:	68b9      	ldr	r1, [r7, #8]
 80064aa:	4824      	ldr	r0, [pc, #144]	; (800653c <HAL_RCC_GetSysClockFreq+0x100>)
 80064ac:	f7f9 fe28 	bl	8000100 <__udivsi3>
 80064b0:	0003      	movs	r3, r0
 80064b2:	0019      	movs	r1, r3
 80064b4:	4b1f      	ldr	r3, [pc, #124]	; (8006534 <HAL_RCC_GetSysClockFreq+0xf8>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	0a1b      	lsrs	r3, r3, #8
 80064ba:	227f      	movs	r2, #127	; 0x7f
 80064bc:	4013      	ands	r3, r2
 80064be:	434b      	muls	r3, r1
 80064c0:	617b      	str	r3, [r7, #20]
        break;
 80064c2:	e00d      	b.n	80064e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	481c      	ldr	r0, [pc, #112]	; (8006538 <HAL_RCC_GetSysClockFreq+0xfc>)
 80064c8:	f7f9 fe1a 	bl	8000100 <__udivsi3>
 80064cc:	0003      	movs	r3, r0
 80064ce:	0019      	movs	r1, r3
 80064d0:	4b18      	ldr	r3, [pc, #96]	; (8006534 <HAL_RCC_GetSysClockFreq+0xf8>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	0a1b      	lsrs	r3, r3, #8
 80064d6:	227f      	movs	r2, #127	; 0x7f
 80064d8:	4013      	ands	r3, r2
 80064da:	434b      	muls	r3, r1
 80064dc:	617b      	str	r3, [r7, #20]
        break;
 80064de:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80064e0:	4b14      	ldr	r3, [pc, #80]	; (8006534 <HAL_RCC_GetSysClockFreq+0xf8>)
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	0f5b      	lsrs	r3, r3, #29
 80064e6:	2207      	movs	r2, #7
 80064e8:	4013      	ands	r3, r2
 80064ea:	3301      	adds	r3, #1
 80064ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	6978      	ldr	r0, [r7, #20]
 80064f2:	f7f9 fe05 	bl	8000100 <__udivsi3>
 80064f6:	0003      	movs	r3, r0
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	e015      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80064fc:	4b0d      	ldr	r3, [pc, #52]	; (8006534 <HAL_RCC_GetSysClockFreq+0xf8>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	2238      	movs	r2, #56	; 0x38
 8006502:	4013      	ands	r3, r2
 8006504:	2b20      	cmp	r3, #32
 8006506:	d103      	bne.n	8006510 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006508:	2380      	movs	r3, #128	; 0x80
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	e00b      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006510:	4b08      	ldr	r3, [pc, #32]	; (8006534 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2238      	movs	r2, #56	; 0x38
 8006516:	4013      	ands	r3, r2
 8006518:	2b18      	cmp	r3, #24
 800651a:	d103      	bne.n	8006524 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800651c:	23fa      	movs	r3, #250	; 0xfa
 800651e:	01db      	lsls	r3, r3, #7
 8006520:	613b      	str	r3, [r7, #16]
 8006522:	e001      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006528:	693b      	ldr	r3, [r7, #16]
}
 800652a:	0018      	movs	r0, r3
 800652c:	46bd      	mov	sp, r7
 800652e:	b006      	add	sp, #24
 8006530:	bd80      	pop	{r7, pc}
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	40021000 	.word	0x40021000
 8006538:	00f42400 	.word	0x00f42400
 800653c:	007a1200 	.word	0x007a1200

08006540 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006544:	4b02      	ldr	r3, [pc, #8]	; (8006550 <HAL_RCC_GetHCLKFreq+0x10>)
 8006546:	681b      	ldr	r3, [r3, #0]
}
 8006548:	0018      	movs	r0, r3
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	46c0      	nop			; (mov r8, r8)
 8006550:	20000104 	.word	0x20000104

08006554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006554:	b5b0      	push	{r4, r5, r7, lr}
 8006556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006558:	f7ff fff2 	bl	8006540 <HAL_RCC_GetHCLKFreq>
 800655c:	0004      	movs	r4, r0
 800655e:	f7ff fb3f 	bl	8005be0 <LL_RCC_GetAPB1Prescaler>
 8006562:	0003      	movs	r3, r0
 8006564:	0b1a      	lsrs	r2, r3, #12
 8006566:	4b05      	ldr	r3, [pc, #20]	; (800657c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006568:	0092      	lsls	r2, r2, #2
 800656a:	58d3      	ldr	r3, [r2, r3]
 800656c:	221f      	movs	r2, #31
 800656e:	4013      	ands	r3, r2
 8006570:	40dc      	lsrs	r4, r3
 8006572:	0023      	movs	r3, r4
}
 8006574:	0018      	movs	r0, r3
 8006576:	46bd      	mov	sp, r7
 8006578:	bdb0      	pop	{r4, r5, r7, pc}
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	08008688 	.word	0x08008688

08006580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006588:	2313      	movs	r3, #19
 800658a:	18fb      	adds	r3, r7, r3
 800658c:	2200      	movs	r2, #0
 800658e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006590:	2312      	movs	r3, #18
 8006592:	18fb      	adds	r3, r7, r3
 8006594:	2200      	movs	r2, #0
 8006596:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	2380      	movs	r3, #128	; 0x80
 800659e:	029b      	lsls	r3, r3, #10
 80065a0:	4013      	ands	r3, r2
 80065a2:	d100      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80065a4:	e0a3      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065a6:	2011      	movs	r0, #17
 80065a8:	183b      	adds	r3, r7, r0
 80065aa:	2200      	movs	r2, #0
 80065ac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ae:	4bb3      	ldr	r3, [pc, #716]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80065b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065b2:	2380      	movs	r3, #128	; 0x80
 80065b4:	055b      	lsls	r3, r3, #21
 80065b6:	4013      	ands	r3, r2
 80065b8:	d110      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ba:	4bb0      	ldr	r3, [pc, #704]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80065bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065be:	4baf      	ldr	r3, [pc, #700]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80065c0:	2180      	movs	r1, #128	; 0x80
 80065c2:	0549      	lsls	r1, r1, #21
 80065c4:	430a      	orrs	r2, r1
 80065c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80065c8:	4bac      	ldr	r3, [pc, #688]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80065ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065cc:	2380      	movs	r3, #128	; 0x80
 80065ce:	055b      	lsls	r3, r3, #21
 80065d0:	4013      	ands	r3, r2
 80065d2:	60bb      	str	r3, [r7, #8]
 80065d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065d6:	183b      	adds	r3, r7, r0
 80065d8:	2201      	movs	r2, #1
 80065da:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065dc:	4ba8      	ldr	r3, [pc, #672]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	4ba7      	ldr	r3, [pc, #668]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065e2:	2180      	movs	r1, #128	; 0x80
 80065e4:	0049      	lsls	r1, r1, #1
 80065e6:	430a      	orrs	r2, r1
 80065e8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065ea:	f7fd fa83 	bl	8003af4 <HAL_GetTick>
 80065ee:	0003      	movs	r3, r0
 80065f0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065f2:	e00b      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f4:	f7fd fa7e 	bl	8003af4 <HAL_GetTick>
 80065f8:	0002      	movs	r2, r0
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d904      	bls.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006602:	2313      	movs	r3, #19
 8006604:	18fb      	adds	r3, r7, r3
 8006606:	2203      	movs	r2, #3
 8006608:	701a      	strb	r2, [r3, #0]
        break;
 800660a:	e005      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800660c:	4b9c      	ldr	r3, [pc, #624]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	2380      	movs	r3, #128	; 0x80
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	4013      	ands	r3, r2
 8006616:	d0ed      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006618:	2313      	movs	r3, #19
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d154      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006622:	4b96      	ldr	r3, [pc, #600]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006624:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006626:	23c0      	movs	r3, #192	; 0xc0
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4013      	ands	r3, r2
 800662c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d019      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	429a      	cmp	r2, r3
 800663c:	d014      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800663e:	4b8f      	ldr	r3, [pc, #572]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006642:	4a90      	ldr	r2, [pc, #576]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006644:	4013      	ands	r3, r2
 8006646:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006648:	4b8c      	ldr	r3, [pc, #560]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800664a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800664c:	4b8b      	ldr	r3, [pc, #556]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800664e:	2180      	movs	r1, #128	; 0x80
 8006650:	0249      	lsls	r1, r1, #9
 8006652:	430a      	orrs	r2, r1
 8006654:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006656:	4b89      	ldr	r3, [pc, #548]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006658:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800665a:	4b88      	ldr	r3, [pc, #544]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800665c:	498a      	ldr	r1, [pc, #552]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800665e:	400a      	ands	r2, r1
 8006660:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006662:	4b86      	ldr	r3, [pc, #536]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2201      	movs	r2, #1
 800666c:	4013      	ands	r3, r2
 800666e:	d016      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006670:	f7fd fa40 	bl	8003af4 <HAL_GetTick>
 8006674:	0003      	movs	r3, r0
 8006676:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006678:	e00c      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800667a:	f7fd fa3b 	bl	8003af4 <HAL_GetTick>
 800667e:	0002      	movs	r2, r0
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	4a81      	ldr	r2, [pc, #516]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d904      	bls.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800668a:	2313      	movs	r3, #19
 800668c:	18fb      	adds	r3, r7, r3
 800668e:	2203      	movs	r2, #3
 8006690:	701a      	strb	r2, [r3, #0]
            break;
 8006692:	e004      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006694:	4b79      	ldr	r3, [pc, #484]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006698:	2202      	movs	r2, #2
 800669a:	4013      	ands	r3, r2
 800669c:	d0ed      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800669e:	2313      	movs	r3, #19
 80066a0:	18fb      	adds	r3, r7, r3
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10a      	bne.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066a8:	4b74      	ldr	r3, [pc, #464]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80066aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ac:	4a75      	ldr	r2, [pc, #468]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	0019      	movs	r1, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066b6:	4b71      	ldr	r3, [pc, #452]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80066b8:	430a      	orrs	r2, r1
 80066ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80066bc:	e00c      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066be:	2312      	movs	r3, #18
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	2213      	movs	r2, #19
 80066c4:	18ba      	adds	r2, r7, r2
 80066c6:	7812      	ldrb	r2, [r2, #0]
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	e005      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066cc:	2312      	movs	r3, #18
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	2213      	movs	r2, #19
 80066d2:	18ba      	adds	r2, r7, r2
 80066d4:	7812      	ldrb	r2, [r2, #0]
 80066d6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066d8:	2311      	movs	r3, #17
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d105      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e2:	4b66      	ldr	r3, [pc, #408]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80066e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066e6:	4b65      	ldr	r3, [pc, #404]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80066e8:	4969      	ldr	r1, [pc, #420]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066ea:	400a      	ands	r2, r1
 80066ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2201      	movs	r2, #1
 80066f4:	4013      	ands	r3, r2
 80066f6:	d009      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066f8:	4b60      	ldr	r3, [pc, #384]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80066fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fc:	2203      	movs	r2, #3
 80066fe:	4393      	bics	r3, r2
 8006700:	0019      	movs	r1, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	4b5d      	ldr	r3, [pc, #372]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006708:	430a      	orrs	r2, r1
 800670a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2210      	movs	r2, #16
 8006712:	4013      	ands	r3, r2
 8006714:	d009      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006716:	4b59      	ldr	r3, [pc, #356]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	4a5e      	ldr	r2, [pc, #376]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800671c:	4013      	ands	r3, r2
 800671e:	0019      	movs	r1, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	4b55      	ldr	r3, [pc, #340]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006726:	430a      	orrs	r2, r1
 8006728:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	2380      	movs	r3, #128	; 0x80
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4013      	ands	r3, r2
 8006734:	d009      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006736:	4b51      	ldr	r3, [pc, #324]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673a:	4a57      	ldr	r2, [pc, #348]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800673c:	4013      	ands	r3, r2
 800673e:	0019      	movs	r1, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	695a      	ldr	r2, [r3, #20]
 8006744:	4b4d      	ldr	r3, [pc, #308]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006746:	430a      	orrs	r2, r1
 8006748:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	2380      	movs	r3, #128	; 0x80
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	4013      	ands	r3, r2
 8006754:	d009      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006756:	4b49      	ldr	r3, [pc, #292]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675a:	4a50      	ldr	r2, [pc, #320]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800675c:	4013      	ands	r3, r2
 800675e:	0019      	movs	r1, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699a      	ldr	r2, [r3, #24]
 8006764:	4b45      	ldr	r3, [pc, #276]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006766:	430a      	orrs	r2, r1
 8006768:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2220      	movs	r2, #32
 8006770:	4013      	ands	r3, r2
 8006772:	d009      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006774:	4b41      	ldr	r3, [pc, #260]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006778:	4a49      	ldr	r2, [pc, #292]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800677a:	4013      	ands	r3, r2
 800677c:	0019      	movs	r1, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	4b3e      	ldr	r3, [pc, #248]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006784:	430a      	orrs	r2, r1
 8006786:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	2380      	movs	r3, #128	; 0x80
 800678e:	01db      	lsls	r3, r3, #7
 8006790:	4013      	ands	r3, r2
 8006792:	d015      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006794:	4b39      	ldr	r3, [pc, #228]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	0899      	lsrs	r1, r3, #2
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69da      	ldr	r2, [r3, #28]
 80067a0:	4b36      	ldr	r3, [pc, #216]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80067a2:	430a      	orrs	r2, r1
 80067a4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69da      	ldr	r2, [r3, #28]
 80067aa:	2380      	movs	r3, #128	; 0x80
 80067ac:	05db      	lsls	r3, r3, #23
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d106      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80067b2:	4b32      	ldr	r3, [pc, #200]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	4b31      	ldr	r3, [pc, #196]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80067b8:	2180      	movs	r1, #128	; 0x80
 80067ba:	0249      	lsls	r1, r1, #9
 80067bc:	430a      	orrs	r2, r1
 80067be:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	2380      	movs	r3, #128	; 0x80
 80067c6:	039b      	lsls	r3, r3, #14
 80067c8:	4013      	ands	r3, r2
 80067ca:	d016      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80067cc:	4b2b      	ldr	r3, [pc, #172]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80067ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d0:	4a34      	ldr	r2, [pc, #208]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80067d2:	4013      	ands	r3, r2
 80067d4:	0019      	movs	r1, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1a      	ldr	r2, [r3, #32]
 80067da:	4b28      	ldr	r3, [pc, #160]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80067dc:	430a      	orrs	r2, r1
 80067de:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1a      	ldr	r2, [r3, #32]
 80067e4:	2380      	movs	r3, #128	; 0x80
 80067e6:	03db      	lsls	r3, r3, #15
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d106      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80067ec:	4b23      	ldr	r3, [pc, #140]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	4b22      	ldr	r3, [pc, #136]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80067f2:	2180      	movs	r1, #128	; 0x80
 80067f4:	0449      	lsls	r1, r1, #17
 80067f6:	430a      	orrs	r2, r1
 80067f8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	2380      	movs	r3, #128	; 0x80
 8006800:	03db      	lsls	r3, r3, #15
 8006802:	4013      	ands	r3, r2
 8006804:	d016      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006806:	4b1d      	ldr	r3, [pc, #116]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680a:	4a27      	ldr	r2, [pc, #156]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800680c:	4013      	ands	r3, r2
 800680e:	0019      	movs	r1, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006814:	4b19      	ldr	r3, [pc, #100]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006816:	430a      	orrs	r2, r1
 8006818:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800681e:	2380      	movs	r3, #128	; 0x80
 8006820:	045b      	lsls	r3, r3, #17
 8006822:	429a      	cmp	r2, r3
 8006824:	d106      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006826:	4b15      	ldr	r3, [pc, #84]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	4b14      	ldr	r3, [pc, #80]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800682c:	2180      	movs	r1, #128	; 0x80
 800682e:	0449      	lsls	r1, r1, #17
 8006830:	430a      	orrs	r2, r1
 8006832:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	2380      	movs	r3, #128	; 0x80
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	4013      	ands	r3, r2
 800683e:	d016      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006840:	4b0e      	ldr	r3, [pc, #56]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006844:	4a19      	ldr	r2, [pc, #100]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006846:	4013      	ands	r3, r2
 8006848:	0019      	movs	r1, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691a      	ldr	r2, [r3, #16]
 800684e:	4b0b      	ldr	r3, [pc, #44]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006850:	430a      	orrs	r2, r1
 8006852:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	2380      	movs	r3, #128	; 0x80
 800685a:	01db      	lsls	r3, r3, #7
 800685c:	429a      	cmp	r2, r3
 800685e:	d106      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006860:	4b06      	ldr	r3, [pc, #24]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	4b05      	ldr	r3, [pc, #20]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006866:	2180      	movs	r1, #128	; 0x80
 8006868:	0249      	lsls	r1, r1, #9
 800686a:	430a      	orrs	r2, r1
 800686c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800686e:	2312      	movs	r3, #18
 8006870:	18fb      	adds	r3, r7, r3
 8006872:	781b      	ldrb	r3, [r3, #0]
}
 8006874:	0018      	movs	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	b006      	add	sp, #24
 800687a:	bd80      	pop	{r7, pc}
 800687c:	40021000 	.word	0x40021000
 8006880:	40007000 	.word	0x40007000
 8006884:	fffffcff 	.word	0xfffffcff
 8006888:	fffeffff 	.word	0xfffeffff
 800688c:	00001388 	.word	0x00001388
 8006890:	efffffff 	.word	0xefffffff
 8006894:	fffff3ff 	.word	0xfffff3ff
 8006898:	fff3ffff 	.word	0xfff3ffff
 800689c:	ffcfffff 	.word	0xffcfffff
 80068a0:	ffffcfff 	.word	0xffffcfff
 80068a4:	ffbfffff 	.word	0xffbfffff
 80068a8:	feffffff 	.word	0xfeffffff
 80068ac:	ffff3fff 	.word	0xffff3fff

080068b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e04a      	b.n	8006958 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	223d      	movs	r2, #61	; 0x3d
 80068c6:	5c9b      	ldrb	r3, [r3, r2]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d107      	bne.n	80068de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	223c      	movs	r2, #60	; 0x3c
 80068d2:	2100      	movs	r1, #0
 80068d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	0018      	movs	r0, r3
 80068da:	f7fc fea1 	bl	8003620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	223d      	movs	r2, #61	; 0x3d
 80068e2:	2102      	movs	r1, #2
 80068e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3304      	adds	r3, #4
 80068ee:	0019      	movs	r1, r3
 80068f0:	0010      	movs	r0, r2
 80068f2:	f000 f835 	bl	8006960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2248      	movs	r2, #72	; 0x48
 80068fa:	2101      	movs	r1, #1
 80068fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	223e      	movs	r2, #62	; 0x3e
 8006902:	2101      	movs	r1, #1
 8006904:	5499      	strb	r1, [r3, r2]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	223f      	movs	r2, #63	; 0x3f
 800690a:	2101      	movs	r1, #1
 800690c:	5499      	strb	r1, [r3, r2]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2240      	movs	r2, #64	; 0x40
 8006912:	2101      	movs	r1, #1
 8006914:	5499      	strb	r1, [r3, r2]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2241      	movs	r2, #65	; 0x41
 800691a:	2101      	movs	r1, #1
 800691c:	5499      	strb	r1, [r3, r2]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2242      	movs	r2, #66	; 0x42
 8006922:	2101      	movs	r1, #1
 8006924:	5499      	strb	r1, [r3, r2]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2243      	movs	r2, #67	; 0x43
 800692a:	2101      	movs	r1, #1
 800692c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2244      	movs	r2, #68	; 0x44
 8006932:	2101      	movs	r1, #1
 8006934:	5499      	strb	r1, [r3, r2]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2245      	movs	r2, #69	; 0x45
 800693a:	2101      	movs	r1, #1
 800693c:	5499      	strb	r1, [r3, r2]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2246      	movs	r2, #70	; 0x46
 8006942:	2101      	movs	r1, #1
 8006944:	5499      	strb	r1, [r3, r2]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2247      	movs	r2, #71	; 0x47
 800694a:	2101      	movs	r1, #1
 800694c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	223d      	movs	r2, #61	; 0x3d
 8006952:	2101      	movs	r1, #1
 8006954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	0018      	movs	r0, r3
 800695a:	46bd      	mov	sp, r7
 800695c:	b002      	add	sp, #8
 800695e:	bd80      	pop	{r7, pc}

08006960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a34      	ldr	r2, [pc, #208]	; (8006a44 <TIM_Base_SetConfig+0xe4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d008      	beq.n	800698a <TIM_Base_SetConfig+0x2a>
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	2380      	movs	r3, #128	; 0x80
 800697c:	05db      	lsls	r3, r3, #23
 800697e:	429a      	cmp	r2, r3
 8006980:	d003      	beq.n	800698a <TIM_Base_SetConfig+0x2a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a30      	ldr	r2, [pc, #192]	; (8006a48 <TIM_Base_SetConfig+0xe8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d108      	bne.n	800699c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2270      	movs	r2, #112	; 0x70
 800698e:	4393      	bics	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a29      	ldr	r2, [pc, #164]	; (8006a44 <TIM_Base_SetConfig+0xe4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d018      	beq.n	80069d6 <TIM_Base_SetConfig+0x76>
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	2380      	movs	r3, #128	; 0x80
 80069a8:	05db      	lsls	r3, r3, #23
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d013      	beq.n	80069d6 <TIM_Base_SetConfig+0x76>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a25      	ldr	r2, [pc, #148]	; (8006a48 <TIM_Base_SetConfig+0xe8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00f      	beq.n	80069d6 <TIM_Base_SetConfig+0x76>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a24      	ldr	r2, [pc, #144]	; (8006a4c <TIM_Base_SetConfig+0xec>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00b      	beq.n	80069d6 <TIM_Base_SetConfig+0x76>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a23      	ldr	r2, [pc, #140]	; (8006a50 <TIM_Base_SetConfig+0xf0>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d007      	beq.n	80069d6 <TIM_Base_SetConfig+0x76>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a22      	ldr	r2, [pc, #136]	; (8006a54 <TIM_Base_SetConfig+0xf4>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d003      	beq.n	80069d6 <TIM_Base_SetConfig+0x76>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a21      	ldr	r2, [pc, #132]	; (8006a58 <TIM_Base_SetConfig+0xf8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d108      	bne.n	80069e8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4a20      	ldr	r2, [pc, #128]	; (8006a5c <TIM_Base_SetConfig+0xfc>)
 80069da:	4013      	ands	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2280      	movs	r2, #128	; 0x80
 80069ec:	4393      	bics	r3, r2
 80069ee:	001a      	movs	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a0c      	ldr	r2, [pc, #48]	; (8006a44 <TIM_Base_SetConfig+0xe4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d00b      	beq.n	8006a2e <TIM_Base_SetConfig+0xce>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a0d      	ldr	r2, [pc, #52]	; (8006a50 <TIM_Base_SetConfig+0xf0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d007      	beq.n	8006a2e <TIM_Base_SetConfig+0xce>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a0c      	ldr	r2, [pc, #48]	; (8006a54 <TIM_Base_SetConfig+0xf4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d003      	beq.n	8006a2e <TIM_Base_SetConfig+0xce>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a0b      	ldr	r2, [pc, #44]	; (8006a58 <TIM_Base_SetConfig+0xf8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d103      	bne.n	8006a36 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	691a      	ldr	r2, [r3, #16]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	615a      	str	r2, [r3, #20]
}
 8006a3c:	46c0      	nop			; (mov r8, r8)
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	b004      	add	sp, #16
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40012c00 	.word	0x40012c00
 8006a48:	40000400 	.word	0x40000400
 8006a4c:	40002000 	.word	0x40002000
 8006a50:	40014000 	.word	0x40014000
 8006a54:	40014400 	.word	0x40014400
 8006a58:	40014800 	.word	0x40014800
 8006a5c:	fffffcff 	.word	0xfffffcff

08006a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	223c      	movs	r2, #60	; 0x3c
 8006a6e:	5c9b      	ldrb	r3, [r3, r2]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e055      	b.n	8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	223c      	movs	r2, #60	; 0x3c
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	223d      	movs	r2, #61	; 0x3d
 8006a84:	2102      	movs	r1, #2
 8006a86:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a23      	ldr	r2, [pc, #140]	; (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d108      	bne.n	8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4a22      	ldr	r2, [pc, #136]	; (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2270      	movs	r2, #112	; 0x70
 8006ab8:	4393      	bics	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a16      	ldr	r2, [pc, #88]	; (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00f      	beq.n	8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	2380      	movs	r3, #128	; 0x80
 8006ade:	05db      	lsls	r3, r3, #23
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d009      	beq.n	8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a12      	ldr	r2, [pc, #72]	; (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d004      	beq.n	8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a11      	ldr	r2, [pc, #68]	; (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d10c      	bne.n	8006b12 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2280      	movs	r2, #128	; 0x80
 8006afc:	4393      	bics	r3, r2
 8006afe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	223d      	movs	r2, #61	; 0x3d
 8006b16:	2101      	movs	r1, #1
 8006b18:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	223c      	movs	r2, #60	; 0x3c
 8006b1e:	2100      	movs	r1, #0
 8006b20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	0018      	movs	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b004      	add	sp, #16
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	40012c00 	.word	0x40012c00
 8006b30:	ff0fffff 	.word	0xff0fffff
 8006b34:	40000400 	.word	0x40000400
 8006b38:	40014000 	.word	0x40014000

08006b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e046      	b.n	8006bdc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2288      	movs	r2, #136	; 0x88
 8006b52:	589b      	ldr	r3, [r3, r2]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d107      	bne.n	8006b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2284      	movs	r2, #132	; 0x84
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	0018      	movs	r0, r3
 8006b64:	f7fc fe1a 	bl	800379c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2288      	movs	r2, #136	; 0x88
 8006b6c:	2124      	movs	r1, #36	; 0x24
 8006b6e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	438a      	bics	r2, r1
 8006b7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	0018      	movs	r0, r3
 8006b84:	f000 fc12 	bl	80073ac <UART_SetConfig>
 8006b88:	0003      	movs	r3, r0
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e024      	b.n	8006bdc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f000 fe7d 	bl	800789c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	490d      	ldr	r1, [pc, #52]	; (8006be4 <HAL_UART_Init+0xa8>)
 8006bae:	400a      	ands	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	212a      	movs	r1, #42	; 0x2a
 8006bbe:	438a      	bics	r2, r1
 8006bc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2101      	movs	r1, #1
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f000 ff15 	bl	8007a04 <UART_CheckIdleState>
 8006bda:	0003      	movs	r3, r0
}
 8006bdc:	0018      	movs	r0, r3
 8006bde:	46bd      	mov	sp, r7
 8006be0:	b002      	add	sp, #8
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	ffffb7ff 	.word	0xffffb7ff

08006be8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08a      	sub	sp, #40	; 0x28
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	1dbb      	adds	r3, r7, #6
 8006bf6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2288      	movs	r2, #136	; 0x88
 8006bfc:	589b      	ldr	r3, [r3, r2]
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d000      	beq.n	8006c04 <HAL_UART_Transmit+0x1c>
 8006c02:	e088      	b.n	8006d16 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_UART_Transmit+0x2a>
 8006c0a:	1dbb      	adds	r3, r7, #6
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e080      	b.n	8006d18 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	2380      	movs	r3, #128	; 0x80
 8006c1c:	015b      	lsls	r3, r3, #5
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d109      	bne.n	8006c36 <HAL_UART_Transmit+0x4e>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d105      	bne.n	8006c36 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	4013      	ands	r3, r2
 8006c30:	d001      	beq.n	8006c36 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e070      	b.n	8006d18 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2290      	movs	r2, #144	; 0x90
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2288      	movs	r2, #136	; 0x88
 8006c42:	2121      	movs	r1, #33	; 0x21
 8006c44:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c46:	f7fc ff55 	bl	8003af4 <HAL_GetTick>
 8006c4a:	0003      	movs	r3, r0
 8006c4c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	1dba      	adds	r2, r7, #6
 8006c52:	2154      	movs	r1, #84	; 0x54
 8006c54:	8812      	ldrh	r2, [r2, #0]
 8006c56:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	1dba      	adds	r2, r7, #6
 8006c5c:	2156      	movs	r1, #86	; 0x56
 8006c5e:	8812      	ldrh	r2, [r2, #0]
 8006c60:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	2380      	movs	r3, #128	; 0x80
 8006c68:	015b      	lsls	r3, r3, #5
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d108      	bne.n	8006c80 <HAL_UART_Transmit+0x98>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d104      	bne.n	8006c80 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	e003      	b.n	8006c88 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c84:	2300      	movs	r3, #0
 8006c86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c88:	e02c      	b.n	8006ce4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	0013      	movs	r3, r2
 8006c94:	2200      	movs	r2, #0
 8006c96:	2180      	movs	r1, #128	; 0x80
 8006c98:	f000 ff02 	bl	8007aa0 <UART_WaitOnFlagUntilTimeout>
 8006c9c:	1e03      	subs	r3, r0, #0
 8006c9e:	d001      	beq.n	8006ca4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e039      	b.n	8006d18 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10b      	bne.n	8006cc2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	001a      	movs	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	05d2      	lsls	r2, r2, #23
 8006cb6:	0dd2      	lsrs	r2, r2, #23
 8006cb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	3302      	adds	r3, #2
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	e007      	b.n	8006cd2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	781a      	ldrb	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2256      	movs	r2, #86	; 0x56
 8006cd6:	5a9b      	ldrh	r3, [r3, r2]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b299      	uxth	r1, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2256      	movs	r2, #86	; 0x56
 8006ce2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2256      	movs	r2, #86	; 0x56
 8006ce8:	5a9b      	ldrh	r3, [r3, r2]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1cc      	bne.n	8006c8a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	0013      	movs	r3, r2
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2140      	movs	r1, #64	; 0x40
 8006cfe:	f000 fecf 	bl	8007aa0 <UART_WaitOnFlagUntilTimeout>
 8006d02:	1e03      	subs	r3, r0, #0
 8006d04:	d001      	beq.n	8006d0a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e006      	b.n	8006d18 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2288      	movs	r2, #136	; 0x88
 8006d0e:	2120      	movs	r1, #32
 8006d10:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	e000      	b.n	8006d18 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006d16:	2302      	movs	r3, #2
  }
}
 8006d18:	0018      	movs	r0, r3
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	b008      	add	sp, #32
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d20:	b5b0      	push	{r4, r5, r7, lr}
 8006d22:	b0aa      	sub	sp, #168	; 0xa8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	22a4      	movs	r2, #164	; 0xa4
 8006d30:	18b9      	adds	r1, r7, r2
 8006d32:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	20a0      	movs	r0, #160	; 0xa0
 8006d3c:	1839      	adds	r1, r7, r0
 8006d3e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	249c      	movs	r4, #156	; 0x9c
 8006d48:	1939      	adds	r1, r7, r4
 8006d4a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d4c:	0011      	movs	r1, r2
 8006d4e:	18bb      	adds	r3, r7, r2
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4aa2      	ldr	r2, [pc, #648]	; (8006fdc <HAL_UART_IRQHandler+0x2bc>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	2298      	movs	r2, #152	; 0x98
 8006d58:	18bd      	adds	r5, r7, r2
 8006d5a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006d5c:	18bb      	adds	r3, r7, r2
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d11a      	bne.n	8006d9a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d64:	187b      	adds	r3, r7, r1
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	d015      	beq.n	8006d9a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d6e:	183b      	adds	r3, r7, r0
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2220      	movs	r2, #32
 8006d74:	4013      	ands	r3, r2
 8006d76:	d105      	bne.n	8006d84 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d78:	193b      	adds	r3, r7, r4
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	2380      	movs	r3, #128	; 0x80
 8006d7e:	055b      	lsls	r3, r3, #21
 8006d80:	4013      	ands	r3, r2
 8006d82:	d00a      	beq.n	8006d9a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d100      	bne.n	8006d8e <HAL_UART_IRQHandler+0x6e>
 8006d8c:	e2dc      	b.n	8007348 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	0010      	movs	r0, r2
 8006d96:	4798      	blx	r3
      }
      return;
 8006d98:	e2d6      	b.n	8007348 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d9a:	2398      	movs	r3, #152	; 0x98
 8006d9c:	18fb      	adds	r3, r7, r3
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d100      	bne.n	8006da6 <HAL_UART_IRQHandler+0x86>
 8006da4:	e122      	b.n	8006fec <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006da6:	239c      	movs	r3, #156	; 0x9c
 8006da8:	18fb      	adds	r3, r7, r3
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a8c      	ldr	r2, [pc, #560]	; (8006fe0 <HAL_UART_IRQHandler+0x2c0>)
 8006dae:	4013      	ands	r3, r2
 8006db0:	d106      	bne.n	8006dc0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006db2:	23a0      	movs	r3, #160	; 0xa0
 8006db4:	18fb      	adds	r3, r7, r3
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a8a      	ldr	r2, [pc, #552]	; (8006fe4 <HAL_UART_IRQHandler+0x2c4>)
 8006dba:	4013      	ands	r3, r2
 8006dbc:	d100      	bne.n	8006dc0 <HAL_UART_IRQHandler+0xa0>
 8006dbe:	e115      	b.n	8006fec <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006dc0:	23a4      	movs	r3, #164	; 0xa4
 8006dc2:	18fb      	adds	r3, r7, r3
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	4013      	ands	r3, r2
 8006dca:	d012      	beq.n	8006df2 <HAL_UART_IRQHandler+0xd2>
 8006dcc:	23a0      	movs	r3, #160	; 0xa0
 8006dce:	18fb      	adds	r3, r7, r3
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	2380      	movs	r3, #128	; 0x80
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	d00b      	beq.n	8006df2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2201      	movs	r2, #1
 8006de0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2290      	movs	r2, #144	; 0x90
 8006de6:	589b      	ldr	r3, [r3, r2]
 8006de8:	2201      	movs	r2, #1
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2190      	movs	r1, #144	; 0x90
 8006df0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006df2:	23a4      	movs	r3, #164	; 0xa4
 8006df4:	18fb      	adds	r3, r7, r3
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	d011      	beq.n	8006e22 <HAL_UART_IRQHandler+0x102>
 8006dfe:	239c      	movs	r3, #156	; 0x9c
 8006e00:	18fb      	adds	r3, r7, r3
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2201      	movs	r2, #1
 8006e06:	4013      	ands	r3, r2
 8006e08:	d00b      	beq.n	8006e22 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2290      	movs	r2, #144	; 0x90
 8006e16:	589b      	ldr	r3, [r3, r2]
 8006e18:	2204      	movs	r2, #4
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2190      	movs	r1, #144	; 0x90
 8006e20:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e22:	23a4      	movs	r3, #164	; 0xa4
 8006e24:	18fb      	adds	r3, r7, r3
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2204      	movs	r2, #4
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	d011      	beq.n	8006e52 <HAL_UART_IRQHandler+0x132>
 8006e2e:	239c      	movs	r3, #156	; 0x9c
 8006e30:	18fb      	adds	r3, r7, r3
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2201      	movs	r2, #1
 8006e36:	4013      	ands	r3, r2
 8006e38:	d00b      	beq.n	8006e52 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2204      	movs	r2, #4
 8006e40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2290      	movs	r2, #144	; 0x90
 8006e46:	589b      	ldr	r3, [r3, r2]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2190      	movs	r1, #144	; 0x90
 8006e50:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e52:	23a4      	movs	r3, #164	; 0xa4
 8006e54:	18fb      	adds	r3, r7, r3
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2208      	movs	r2, #8
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	d017      	beq.n	8006e8e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e5e:	23a0      	movs	r3, #160	; 0xa0
 8006e60:	18fb      	adds	r3, r7, r3
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2220      	movs	r2, #32
 8006e66:	4013      	ands	r3, r2
 8006e68:	d105      	bne.n	8006e76 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006e6a:	239c      	movs	r3, #156	; 0x9c
 8006e6c:	18fb      	adds	r3, r7, r3
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a5b      	ldr	r2, [pc, #364]	; (8006fe0 <HAL_UART_IRQHandler+0x2c0>)
 8006e72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e74:	d00b      	beq.n	8006e8e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2208      	movs	r2, #8
 8006e7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2290      	movs	r2, #144	; 0x90
 8006e82:	589b      	ldr	r3, [r3, r2]
 8006e84:	2208      	movs	r2, #8
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2190      	movs	r1, #144	; 0x90
 8006e8c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e8e:	23a4      	movs	r3, #164	; 0xa4
 8006e90:	18fb      	adds	r3, r7, r3
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	2380      	movs	r3, #128	; 0x80
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	4013      	ands	r3, r2
 8006e9a:	d013      	beq.n	8006ec4 <HAL_UART_IRQHandler+0x1a4>
 8006e9c:	23a0      	movs	r3, #160	; 0xa0
 8006e9e:	18fb      	adds	r3, r7, r3
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	2380      	movs	r3, #128	; 0x80
 8006ea4:	04db      	lsls	r3, r3, #19
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	d00c      	beq.n	8006ec4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2280      	movs	r2, #128	; 0x80
 8006eb0:	0112      	lsls	r2, r2, #4
 8006eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2290      	movs	r2, #144	; 0x90
 8006eb8:	589b      	ldr	r3, [r3, r2]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2190      	movs	r1, #144	; 0x90
 8006ec2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2290      	movs	r2, #144	; 0x90
 8006ec8:	589b      	ldr	r3, [r3, r2]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d100      	bne.n	8006ed0 <HAL_UART_IRQHandler+0x1b0>
 8006ece:	e23d      	b.n	800734c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ed0:	23a4      	movs	r3, #164	; 0xa4
 8006ed2:	18fb      	adds	r3, r7, r3
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	4013      	ands	r3, r2
 8006eda:	d015      	beq.n	8006f08 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006edc:	23a0      	movs	r3, #160	; 0xa0
 8006ede:	18fb      	adds	r3, r7, r3
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	d106      	bne.n	8006ef6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ee8:	239c      	movs	r3, #156	; 0x9c
 8006eea:	18fb      	adds	r3, r7, r3
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	2380      	movs	r3, #128	; 0x80
 8006ef0:	055b      	lsls	r3, r3, #21
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	d008      	beq.n	8006f08 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d004      	beq.n	8006f08 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	0010      	movs	r0, r2
 8006f06:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2290      	movs	r2, #144	; 0x90
 8006f0c:	589b      	ldr	r3, [r3, r2]
 8006f0e:	2194      	movs	r1, #148	; 0x94
 8006f10:	187a      	adds	r2, r7, r1
 8006f12:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	2240      	movs	r2, #64	; 0x40
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	2b40      	cmp	r3, #64	; 0x40
 8006f20:	d004      	beq.n	8006f2c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f22:	187b      	adds	r3, r7, r1
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2228      	movs	r2, #40	; 0x28
 8006f28:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f2a:	d04c      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	0018      	movs	r0, r3
 8006f30:	f000 ff64 	bl	8007dfc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	2240      	movs	r2, #64	; 0x40
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	2b40      	cmp	r3, #64	; 0x40
 8006f40:	d13c      	bne.n	8006fbc <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f42:	f3ef 8310 	mrs	r3, PRIMASK
 8006f46:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006f48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f4a:	2090      	movs	r0, #144	; 0x90
 8006f4c:	183a      	adds	r2, r7, r0
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	2301      	movs	r3, #1
 8006f52:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f56:	f383 8810 	msr	PRIMASK, r3
}
 8006f5a:	46c0      	nop			; (mov r8, r8)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2140      	movs	r1, #64	; 0x40
 8006f68:	438a      	bics	r2, r1
 8006f6a:	609a      	str	r2, [r3, #8]
 8006f6c:	183b      	adds	r3, r7, r0
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f74:	f383 8810 	msr	PRIMASK, r3
}
 8006f78:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2280      	movs	r2, #128	; 0x80
 8006f7e:	589b      	ldr	r3, [r3, r2]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d016      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2280      	movs	r2, #128	; 0x80
 8006f88:	589b      	ldr	r3, [r3, r2]
 8006f8a:	4a17      	ldr	r2, [pc, #92]	; (8006fe8 <HAL_UART_IRQHandler+0x2c8>)
 8006f8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2280      	movs	r2, #128	; 0x80
 8006f92:	589b      	ldr	r3, [r3, r2]
 8006f94:	0018      	movs	r0, r3
 8006f96:	f7fd fca9 	bl	80048ec <HAL_DMA_Abort_IT>
 8006f9a:	1e03      	subs	r3, r0, #0
 8006f9c:	d01c      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2280      	movs	r2, #128	; 0x80
 8006fa2:	589b      	ldr	r3, [r3, r2]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	2180      	movs	r1, #128	; 0x80
 8006faa:	5852      	ldr	r2, [r2, r1]
 8006fac:	0010      	movs	r0, r2
 8006fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb0:	e012      	b.n	8006fd8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	f000 f9f1 	bl	800739c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fba:	e00d      	b.n	8006fd8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	f000 f9ec 	bl	800739c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc4:	e008      	b.n	8006fd8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f000 f9e7 	bl	800739c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2290      	movs	r2, #144	; 0x90
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006fd6:	e1b9      	b.n	800734c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd8:	46c0      	nop			; (mov r8, r8)
    return;
 8006fda:	e1b7      	b.n	800734c <HAL_UART_IRQHandler+0x62c>
 8006fdc:	0000080f 	.word	0x0000080f
 8006fe0:	10000001 	.word	0x10000001
 8006fe4:	04000120 	.word	0x04000120
 8006fe8:	080080c1 	.word	0x080080c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d000      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x2d6>
 8006ff4:	e13e      	b.n	8007274 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ff6:	23a4      	movs	r3, #164	; 0xa4
 8006ff8:	18fb      	adds	r3, r7, r3
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2210      	movs	r2, #16
 8006ffe:	4013      	ands	r3, r2
 8007000:	d100      	bne.n	8007004 <HAL_UART_IRQHandler+0x2e4>
 8007002:	e137      	b.n	8007274 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007004:	23a0      	movs	r3, #160	; 0xa0
 8007006:	18fb      	adds	r3, r7, r3
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2210      	movs	r2, #16
 800700c:	4013      	ands	r3, r2
 800700e:	d100      	bne.n	8007012 <HAL_UART_IRQHandler+0x2f2>
 8007010:	e130      	b.n	8007274 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2210      	movs	r2, #16
 8007018:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	2240      	movs	r2, #64	; 0x40
 8007022:	4013      	ands	r3, r2
 8007024:	2b40      	cmp	r3, #64	; 0x40
 8007026:	d000      	beq.n	800702a <HAL_UART_IRQHandler+0x30a>
 8007028:	e0a4      	b.n	8007174 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2280      	movs	r2, #128	; 0x80
 800702e:	589b      	ldr	r3, [r3, r2]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	217e      	movs	r1, #126	; 0x7e
 8007036:	187b      	adds	r3, r7, r1
 8007038:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800703a:	187b      	adds	r3, r7, r1
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d100      	bne.n	8007044 <HAL_UART_IRQHandler+0x324>
 8007042:	e185      	b.n	8007350 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	225c      	movs	r2, #92	; 0x5c
 8007048:	5a9b      	ldrh	r3, [r3, r2]
 800704a:	187a      	adds	r2, r7, r1
 800704c:	8812      	ldrh	r2, [r2, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d300      	bcc.n	8007054 <HAL_UART_IRQHandler+0x334>
 8007052:	e17d      	b.n	8007350 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	187a      	adds	r2, r7, r1
 8007058:	215e      	movs	r1, #94	; 0x5e
 800705a:	8812      	ldrh	r2, [r2, #0]
 800705c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2280      	movs	r2, #128	; 0x80
 8007062:	589b      	ldr	r3, [r3, r2]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2220      	movs	r2, #32
 800706a:	4013      	ands	r3, r2
 800706c:	d170      	bne.n	8007150 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800706e:	f3ef 8310 	mrs	r3, PRIMASK
 8007072:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007076:	67bb      	str	r3, [r7, #120]	; 0x78
 8007078:	2301      	movs	r3, #1
 800707a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800707c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707e:	f383 8810 	msr	PRIMASK, r3
}
 8007082:	46c0      	nop			; (mov r8, r8)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	49b4      	ldr	r1, [pc, #720]	; (8007360 <HAL_UART_IRQHandler+0x640>)
 8007090:	400a      	ands	r2, r1
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007096:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	f383 8810 	msr	PRIMASK, r3
}
 800709e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a0:	f3ef 8310 	mrs	r3, PRIMASK
 80070a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80070a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a8:	677b      	str	r3, [r7, #116]	; 0x74
 80070aa:	2301      	movs	r3, #1
 80070ac:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b0:	f383 8810 	msr	PRIMASK, r3
}
 80070b4:	46c0      	nop			; (mov r8, r8)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2101      	movs	r1, #1
 80070c2:	438a      	bics	r2, r1
 80070c4:	609a      	str	r2, [r3, #8]
 80070c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070c8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070cc:	f383 8810 	msr	PRIMASK, r3
}
 80070d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d2:	f3ef 8310 	mrs	r3, PRIMASK
 80070d6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80070d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070da:	673b      	str	r3, [r7, #112]	; 0x70
 80070dc:	2301      	movs	r3, #1
 80070de:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e2:	f383 8810 	msr	PRIMASK, r3
}
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689a      	ldr	r2, [r3, #8]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2140      	movs	r1, #64	; 0x40
 80070f4:	438a      	bics	r2, r1
 80070f6:	609a      	str	r2, [r3, #8]
 80070f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070fa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070fe:	f383 8810 	msr	PRIMASK, r3
}
 8007102:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	228c      	movs	r2, #140	; 0x8c
 8007108:	2120      	movs	r1, #32
 800710a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007112:	f3ef 8310 	mrs	r3, PRIMASK
 8007116:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007118:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800711a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800711c:	2301      	movs	r3, #1
 800711e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007122:	f383 8810 	msr	PRIMASK, r3
}
 8007126:	46c0      	nop			; (mov r8, r8)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2110      	movs	r1, #16
 8007134:	438a      	bics	r2, r1
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800713a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800713c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800713e:	f383 8810 	msr	PRIMASK, r3
}
 8007142:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2280      	movs	r2, #128	; 0x80
 8007148:	589b      	ldr	r3, [r3, r2]
 800714a:	0018      	movs	r0, r3
 800714c:	f7fd fb6c 	bl	8004828 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	225c      	movs	r2, #92	; 0x5c
 800715a:	5a9a      	ldrh	r2, [r3, r2]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	215e      	movs	r1, #94	; 0x5e
 8007160:	5a5b      	ldrh	r3, [r3, r1]
 8007162:	b29b      	uxth	r3, r3
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	b29a      	uxth	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	0011      	movs	r1, r2
 800716c:	0018      	movs	r0, r3
 800716e:	f7fb fa1b 	bl	80025a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007172:	e0ed      	b.n	8007350 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	225c      	movs	r2, #92	; 0x5c
 8007178:	5a99      	ldrh	r1, [r3, r2]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	225e      	movs	r2, #94	; 0x5e
 800717e:	5a9b      	ldrh	r3, [r3, r2]
 8007180:	b29a      	uxth	r2, r3
 8007182:	208e      	movs	r0, #142	; 0x8e
 8007184:	183b      	adds	r3, r7, r0
 8007186:	1a8a      	subs	r2, r1, r2
 8007188:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	225e      	movs	r2, #94	; 0x5e
 800718e:	5a9b      	ldrh	r3, [r3, r2]
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d100      	bne.n	8007198 <HAL_UART_IRQHandler+0x478>
 8007196:	e0dd      	b.n	8007354 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8007198:	183b      	adds	r3, r7, r0
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d100      	bne.n	80071a2 <HAL_UART_IRQHandler+0x482>
 80071a0:	e0d8      	b.n	8007354 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071a2:	f3ef 8310 	mrs	r3, PRIMASK
 80071a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80071a8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071aa:	2488      	movs	r4, #136	; 0x88
 80071ac:	193a      	adds	r2, r7, r4
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	2301      	movs	r3, #1
 80071b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f383 8810 	msr	PRIMASK, r3
}
 80071ba:	46c0      	nop			; (mov r8, r8)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4967      	ldr	r1, [pc, #412]	; (8007364 <HAL_UART_IRQHandler+0x644>)
 80071c8:	400a      	ands	r2, r1
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	193b      	adds	r3, r7, r4
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f383 8810 	msr	PRIMASK, r3
}
 80071d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071da:	f3ef 8310 	mrs	r3, PRIMASK
 80071de:	61bb      	str	r3, [r7, #24]
  return(result);
 80071e0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071e2:	2484      	movs	r4, #132	; 0x84
 80071e4:	193a      	adds	r2, r7, r4
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	2301      	movs	r3, #1
 80071ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	f383 8810 	msr	PRIMASK, r3
}
 80071f2:	46c0      	nop			; (mov r8, r8)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689a      	ldr	r2, [r3, #8]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	495a      	ldr	r1, [pc, #360]	; (8007368 <HAL_UART_IRQHandler+0x648>)
 8007200:	400a      	ands	r2, r1
 8007202:	609a      	str	r2, [r3, #8]
 8007204:	193b      	adds	r3, r7, r4
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	f383 8810 	msr	PRIMASK, r3
}
 8007210:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	228c      	movs	r2, #140	; 0x8c
 8007216:	2120      	movs	r1, #32
 8007218:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007226:	f3ef 8310 	mrs	r3, PRIMASK
 800722a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800722e:	2480      	movs	r4, #128	; 0x80
 8007230:	193a      	adds	r2, r7, r4
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	2301      	movs	r3, #1
 8007236:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	f383 8810 	msr	PRIMASK, r3
}
 800723e:	46c0      	nop			; (mov r8, r8)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2110      	movs	r1, #16
 800724c:	438a      	bics	r2, r1
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	193b      	adds	r3, r7, r4
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	f383 8810 	msr	PRIMASK, r3
}
 800725c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2202      	movs	r2, #2
 8007262:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007264:	183b      	adds	r3, r7, r0
 8007266:	881a      	ldrh	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	0011      	movs	r1, r2
 800726c:	0018      	movs	r0, r3
 800726e:	f7fb f99b 	bl	80025a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007272:	e06f      	b.n	8007354 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007274:	23a4      	movs	r3, #164	; 0xa4
 8007276:	18fb      	adds	r3, r7, r3
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	2380      	movs	r3, #128	; 0x80
 800727c:	035b      	lsls	r3, r3, #13
 800727e:	4013      	ands	r3, r2
 8007280:	d010      	beq.n	80072a4 <HAL_UART_IRQHandler+0x584>
 8007282:	239c      	movs	r3, #156	; 0x9c
 8007284:	18fb      	adds	r3, r7, r3
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	2380      	movs	r3, #128	; 0x80
 800728a:	03db      	lsls	r3, r3, #15
 800728c:	4013      	ands	r3, r2
 800728e:	d009      	beq.n	80072a4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2280      	movs	r2, #128	; 0x80
 8007296:	0352      	lsls	r2, r2, #13
 8007298:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	0018      	movs	r0, r3
 800729e:	f000 ff52 	bl	8008146 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072a2:	e05a      	b.n	800735a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80072a4:	23a4      	movs	r3, #164	; 0xa4
 80072a6:	18fb      	adds	r3, r7, r3
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2280      	movs	r2, #128	; 0x80
 80072ac:	4013      	ands	r3, r2
 80072ae:	d016      	beq.n	80072de <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80072b0:	23a0      	movs	r3, #160	; 0xa0
 80072b2:	18fb      	adds	r3, r7, r3
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2280      	movs	r2, #128	; 0x80
 80072b8:	4013      	ands	r3, r2
 80072ba:	d106      	bne.n	80072ca <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80072bc:	239c      	movs	r3, #156	; 0x9c
 80072be:	18fb      	adds	r3, r7, r3
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	2380      	movs	r3, #128	; 0x80
 80072c4:	041b      	lsls	r3, r3, #16
 80072c6:	4013      	ands	r3, r2
 80072c8:	d009      	beq.n	80072de <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d042      	beq.n	8007358 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	0010      	movs	r0, r2
 80072da:	4798      	blx	r3
    }
    return;
 80072dc:	e03c      	b.n	8007358 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072de:	23a4      	movs	r3, #164	; 0xa4
 80072e0:	18fb      	adds	r3, r7, r3
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2240      	movs	r2, #64	; 0x40
 80072e6:	4013      	ands	r3, r2
 80072e8:	d00a      	beq.n	8007300 <HAL_UART_IRQHandler+0x5e0>
 80072ea:	23a0      	movs	r3, #160	; 0xa0
 80072ec:	18fb      	adds	r3, r7, r3
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2240      	movs	r2, #64	; 0x40
 80072f2:	4013      	ands	r3, r2
 80072f4:	d004      	beq.n	8007300 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	0018      	movs	r0, r3
 80072fa:	f000 fef8 	bl	80080ee <UART_EndTransmit_IT>
    return;
 80072fe:	e02c      	b.n	800735a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007300:	23a4      	movs	r3, #164	; 0xa4
 8007302:	18fb      	adds	r3, r7, r3
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	2380      	movs	r3, #128	; 0x80
 8007308:	041b      	lsls	r3, r3, #16
 800730a:	4013      	ands	r3, r2
 800730c:	d00b      	beq.n	8007326 <HAL_UART_IRQHandler+0x606>
 800730e:	23a0      	movs	r3, #160	; 0xa0
 8007310:	18fb      	adds	r3, r7, r3
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	2380      	movs	r3, #128	; 0x80
 8007316:	05db      	lsls	r3, r3, #23
 8007318:	4013      	ands	r3, r2
 800731a:	d004      	beq.n	8007326 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	0018      	movs	r0, r3
 8007320:	f000 ff21 	bl	8008166 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007324:	e019      	b.n	800735a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007326:	23a4      	movs	r3, #164	; 0xa4
 8007328:	18fb      	adds	r3, r7, r3
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	2380      	movs	r3, #128	; 0x80
 800732e:	045b      	lsls	r3, r3, #17
 8007330:	4013      	ands	r3, r2
 8007332:	d012      	beq.n	800735a <HAL_UART_IRQHandler+0x63a>
 8007334:	23a0      	movs	r3, #160	; 0xa0
 8007336:	18fb      	adds	r3, r7, r3
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	da0d      	bge.n	800735a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	0018      	movs	r0, r3
 8007342:	f000 ff08 	bl	8008156 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007346:	e008      	b.n	800735a <HAL_UART_IRQHandler+0x63a>
      return;
 8007348:	46c0      	nop			; (mov r8, r8)
 800734a:	e006      	b.n	800735a <HAL_UART_IRQHandler+0x63a>
    return;
 800734c:	46c0      	nop			; (mov r8, r8)
 800734e:	e004      	b.n	800735a <HAL_UART_IRQHandler+0x63a>
      return;
 8007350:	46c0      	nop			; (mov r8, r8)
 8007352:	e002      	b.n	800735a <HAL_UART_IRQHandler+0x63a>
      return;
 8007354:	46c0      	nop			; (mov r8, r8)
 8007356:	e000      	b.n	800735a <HAL_UART_IRQHandler+0x63a>
    return;
 8007358:	46c0      	nop			; (mov r8, r8)
  }
}
 800735a:	46bd      	mov	sp, r7
 800735c:	b02a      	add	sp, #168	; 0xa8
 800735e:	bdb0      	pop	{r4, r5, r7, pc}
 8007360:	fffffeff 	.word	0xfffffeff
 8007364:	fffffedf 	.word	0xfffffedf
 8007368:	effffffe 	.word	0xeffffffe

0800736c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007374:	46c0      	nop			; (mov r8, r8)
 8007376:	46bd      	mov	sp, r7
 8007378:	b002      	add	sp, #8
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007384:	46c0      	nop			; (mov r8, r8)
 8007386:	46bd      	mov	sp, r7
 8007388:	b002      	add	sp, #8
 800738a:	bd80      	pop	{r7, pc}

0800738c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007394:	46c0      	nop			; (mov r8, r8)
 8007396:	46bd      	mov	sp, r7
 8007398:	b002      	add	sp, #8
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073a4:	46c0      	nop			; (mov r8, r8)
 80073a6:	46bd      	mov	sp, r7
 80073a8:	b002      	add	sp, #8
 80073aa:	bd80      	pop	{r7, pc}

080073ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073ac:	b5b0      	push	{r4, r5, r7, lr}
 80073ae:	b090      	sub	sp, #64	; 0x40
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073b4:	231a      	movs	r3, #26
 80073b6:	2220      	movs	r2, #32
 80073b8:	189b      	adds	r3, r3, r2
 80073ba:	19db      	adds	r3, r3, r7
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	689a      	ldr	r2, [r3, #8]
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	431a      	orrs	r2, r3
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	431a      	orrs	r2, r3
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4ac4      	ldr	r2, [pc, #784]	; (80076f0 <UART_SetConfig+0x344>)
 80073e0:	4013      	ands	r3, r2
 80073e2:	0019      	movs	r1, r3
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ea:	430b      	orrs	r3, r1
 80073ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	4abf      	ldr	r2, [pc, #764]	; (80076f4 <UART_SetConfig+0x348>)
 80073f6:	4013      	ands	r3, r2
 80073f8:	0018      	movs	r0, r3
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	68d9      	ldr	r1, [r3, #12]
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	0003      	movs	r3, r0
 8007404:	430b      	orrs	r3, r1
 8007406:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4ab9      	ldr	r2, [pc, #740]	; (80076f8 <UART_SetConfig+0x34c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d004      	beq.n	8007422 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800741e:	4313      	orrs	r3, r2
 8007420:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	4ab4      	ldr	r2, [pc, #720]	; (80076fc <UART_SetConfig+0x350>)
 800742a:	4013      	ands	r3, r2
 800742c:	0019      	movs	r1, r3
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007434:	430b      	orrs	r3, r1
 8007436:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743e:	220f      	movs	r2, #15
 8007440:	4393      	bics	r3, r2
 8007442:	0018      	movs	r0, r3
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	0003      	movs	r3, r0
 800744e:	430b      	orrs	r3, r1
 8007450:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4aaa      	ldr	r2, [pc, #680]	; (8007700 <UART_SetConfig+0x354>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d131      	bne.n	80074c0 <UART_SetConfig+0x114>
 800745c:	4ba9      	ldr	r3, [pc, #676]	; (8007704 <UART_SetConfig+0x358>)
 800745e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007460:	2203      	movs	r2, #3
 8007462:	4013      	ands	r3, r2
 8007464:	2b03      	cmp	r3, #3
 8007466:	d01d      	beq.n	80074a4 <UART_SetConfig+0xf8>
 8007468:	d823      	bhi.n	80074b2 <UART_SetConfig+0x106>
 800746a:	2b02      	cmp	r3, #2
 800746c:	d00c      	beq.n	8007488 <UART_SetConfig+0xdc>
 800746e:	d820      	bhi.n	80074b2 <UART_SetConfig+0x106>
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <UART_SetConfig+0xce>
 8007474:	2b01      	cmp	r3, #1
 8007476:	d00e      	beq.n	8007496 <UART_SetConfig+0xea>
 8007478:	e01b      	b.n	80074b2 <UART_SetConfig+0x106>
 800747a:	231b      	movs	r3, #27
 800747c:	2220      	movs	r2, #32
 800747e:	189b      	adds	r3, r3, r2
 8007480:	19db      	adds	r3, r3, r7
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	e071      	b.n	800756c <UART_SetConfig+0x1c0>
 8007488:	231b      	movs	r3, #27
 800748a:	2220      	movs	r2, #32
 800748c:	189b      	adds	r3, r3, r2
 800748e:	19db      	adds	r3, r3, r7
 8007490:	2202      	movs	r2, #2
 8007492:	701a      	strb	r2, [r3, #0]
 8007494:	e06a      	b.n	800756c <UART_SetConfig+0x1c0>
 8007496:	231b      	movs	r3, #27
 8007498:	2220      	movs	r2, #32
 800749a:	189b      	adds	r3, r3, r2
 800749c:	19db      	adds	r3, r3, r7
 800749e:	2204      	movs	r2, #4
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	e063      	b.n	800756c <UART_SetConfig+0x1c0>
 80074a4:	231b      	movs	r3, #27
 80074a6:	2220      	movs	r2, #32
 80074a8:	189b      	adds	r3, r3, r2
 80074aa:	19db      	adds	r3, r3, r7
 80074ac:	2208      	movs	r2, #8
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	e05c      	b.n	800756c <UART_SetConfig+0x1c0>
 80074b2:	231b      	movs	r3, #27
 80074b4:	2220      	movs	r2, #32
 80074b6:	189b      	adds	r3, r3, r2
 80074b8:	19db      	adds	r3, r3, r7
 80074ba:	2210      	movs	r2, #16
 80074bc:	701a      	strb	r2, [r3, #0]
 80074be:	e055      	b.n	800756c <UART_SetConfig+0x1c0>
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a90      	ldr	r2, [pc, #576]	; (8007708 <UART_SetConfig+0x35c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d106      	bne.n	80074d8 <UART_SetConfig+0x12c>
 80074ca:	231b      	movs	r3, #27
 80074cc:	2220      	movs	r2, #32
 80074ce:	189b      	adds	r3, r3, r2
 80074d0:	19db      	adds	r3, r3, r7
 80074d2:	2200      	movs	r2, #0
 80074d4:	701a      	strb	r2, [r3, #0]
 80074d6:	e049      	b.n	800756c <UART_SetConfig+0x1c0>
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a86      	ldr	r2, [pc, #536]	; (80076f8 <UART_SetConfig+0x34c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d13e      	bne.n	8007560 <UART_SetConfig+0x1b4>
 80074e2:	4b88      	ldr	r3, [pc, #544]	; (8007704 <UART_SetConfig+0x358>)
 80074e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074e6:	23c0      	movs	r3, #192	; 0xc0
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	4013      	ands	r3, r2
 80074ec:	22c0      	movs	r2, #192	; 0xc0
 80074ee:	0112      	lsls	r2, r2, #4
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d027      	beq.n	8007544 <UART_SetConfig+0x198>
 80074f4:	22c0      	movs	r2, #192	; 0xc0
 80074f6:	0112      	lsls	r2, r2, #4
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d82a      	bhi.n	8007552 <UART_SetConfig+0x1a6>
 80074fc:	2280      	movs	r2, #128	; 0x80
 80074fe:	0112      	lsls	r2, r2, #4
 8007500:	4293      	cmp	r3, r2
 8007502:	d011      	beq.n	8007528 <UART_SetConfig+0x17c>
 8007504:	2280      	movs	r2, #128	; 0x80
 8007506:	0112      	lsls	r2, r2, #4
 8007508:	4293      	cmp	r3, r2
 800750a:	d822      	bhi.n	8007552 <UART_SetConfig+0x1a6>
 800750c:	2b00      	cmp	r3, #0
 800750e:	d004      	beq.n	800751a <UART_SetConfig+0x16e>
 8007510:	2280      	movs	r2, #128	; 0x80
 8007512:	00d2      	lsls	r2, r2, #3
 8007514:	4293      	cmp	r3, r2
 8007516:	d00e      	beq.n	8007536 <UART_SetConfig+0x18a>
 8007518:	e01b      	b.n	8007552 <UART_SetConfig+0x1a6>
 800751a:	231b      	movs	r3, #27
 800751c:	2220      	movs	r2, #32
 800751e:	189b      	adds	r3, r3, r2
 8007520:	19db      	adds	r3, r3, r7
 8007522:	2200      	movs	r2, #0
 8007524:	701a      	strb	r2, [r3, #0]
 8007526:	e021      	b.n	800756c <UART_SetConfig+0x1c0>
 8007528:	231b      	movs	r3, #27
 800752a:	2220      	movs	r2, #32
 800752c:	189b      	adds	r3, r3, r2
 800752e:	19db      	adds	r3, r3, r7
 8007530:	2202      	movs	r2, #2
 8007532:	701a      	strb	r2, [r3, #0]
 8007534:	e01a      	b.n	800756c <UART_SetConfig+0x1c0>
 8007536:	231b      	movs	r3, #27
 8007538:	2220      	movs	r2, #32
 800753a:	189b      	adds	r3, r3, r2
 800753c:	19db      	adds	r3, r3, r7
 800753e:	2204      	movs	r2, #4
 8007540:	701a      	strb	r2, [r3, #0]
 8007542:	e013      	b.n	800756c <UART_SetConfig+0x1c0>
 8007544:	231b      	movs	r3, #27
 8007546:	2220      	movs	r2, #32
 8007548:	189b      	adds	r3, r3, r2
 800754a:	19db      	adds	r3, r3, r7
 800754c:	2208      	movs	r2, #8
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	e00c      	b.n	800756c <UART_SetConfig+0x1c0>
 8007552:	231b      	movs	r3, #27
 8007554:	2220      	movs	r2, #32
 8007556:	189b      	adds	r3, r3, r2
 8007558:	19db      	adds	r3, r3, r7
 800755a:	2210      	movs	r2, #16
 800755c:	701a      	strb	r2, [r3, #0]
 800755e:	e005      	b.n	800756c <UART_SetConfig+0x1c0>
 8007560:	231b      	movs	r3, #27
 8007562:	2220      	movs	r2, #32
 8007564:	189b      	adds	r3, r3, r2
 8007566:	19db      	adds	r3, r3, r7
 8007568:	2210      	movs	r2, #16
 800756a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a61      	ldr	r2, [pc, #388]	; (80076f8 <UART_SetConfig+0x34c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d000      	beq.n	8007578 <UART_SetConfig+0x1cc>
 8007576:	e092      	b.n	800769e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007578:	231b      	movs	r3, #27
 800757a:	2220      	movs	r2, #32
 800757c:	189b      	adds	r3, r3, r2
 800757e:	19db      	adds	r3, r3, r7
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	2b08      	cmp	r3, #8
 8007584:	d015      	beq.n	80075b2 <UART_SetConfig+0x206>
 8007586:	dc18      	bgt.n	80075ba <UART_SetConfig+0x20e>
 8007588:	2b04      	cmp	r3, #4
 800758a:	d00d      	beq.n	80075a8 <UART_SetConfig+0x1fc>
 800758c:	dc15      	bgt.n	80075ba <UART_SetConfig+0x20e>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <UART_SetConfig+0x1ec>
 8007592:	2b02      	cmp	r3, #2
 8007594:	d005      	beq.n	80075a2 <UART_SetConfig+0x1f6>
 8007596:	e010      	b.n	80075ba <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007598:	f7fe ffdc 	bl	8006554 <HAL_RCC_GetPCLK1Freq>
 800759c:	0003      	movs	r3, r0
 800759e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075a0:	e014      	b.n	80075cc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075a2:	4b5a      	ldr	r3, [pc, #360]	; (800770c <UART_SetConfig+0x360>)
 80075a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075a6:	e011      	b.n	80075cc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075a8:	f7fe ff48 	bl	800643c <HAL_RCC_GetSysClockFreq>
 80075ac:	0003      	movs	r3, r0
 80075ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075b0:	e00c      	b.n	80075cc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075b2:	2380      	movs	r3, #128	; 0x80
 80075b4:	021b      	lsls	r3, r3, #8
 80075b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075b8:	e008      	b.n	80075cc <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80075be:	231a      	movs	r3, #26
 80075c0:	2220      	movs	r2, #32
 80075c2:	189b      	adds	r3, r3, r2
 80075c4:	19db      	adds	r3, r3, r7
 80075c6:	2201      	movs	r2, #1
 80075c8:	701a      	strb	r2, [r3, #0]
        break;
 80075ca:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d100      	bne.n	80075d4 <UART_SetConfig+0x228>
 80075d2:	e147      	b.n	8007864 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075d8:	4b4d      	ldr	r3, [pc, #308]	; (8007710 <UART_SetConfig+0x364>)
 80075da:	0052      	lsls	r2, r2, #1
 80075dc:	5ad3      	ldrh	r3, [r2, r3]
 80075de:	0019      	movs	r1, r3
 80075e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80075e2:	f7f8 fd8d 	bl	8000100 <__udivsi3>
 80075e6:	0003      	movs	r3, r0
 80075e8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	0013      	movs	r3, r2
 80075f0:	005b      	lsls	r3, r3, #1
 80075f2:	189b      	adds	r3, r3, r2
 80075f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d305      	bcc.n	8007606 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007602:	429a      	cmp	r2, r3
 8007604:	d906      	bls.n	8007614 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8007606:	231a      	movs	r3, #26
 8007608:	2220      	movs	r2, #32
 800760a:	189b      	adds	r3, r3, r2
 800760c:	19db      	adds	r3, r3, r7
 800760e:	2201      	movs	r2, #1
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	e127      	b.n	8007864 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	2300      	movs	r3, #0
 800761a:	61fb      	str	r3, [r7, #28]
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007620:	4b3b      	ldr	r3, [pc, #236]	; (8007710 <UART_SetConfig+0x364>)
 8007622:	0052      	lsls	r2, r2, #1
 8007624:	5ad3      	ldrh	r3, [r2, r3]
 8007626:	613b      	str	r3, [r7, #16]
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	69b8      	ldr	r0, [r7, #24]
 8007632:	69f9      	ldr	r1, [r7, #28]
 8007634:	f7f8 feda 	bl	80003ec <__aeabi_uldivmod>
 8007638:	0002      	movs	r2, r0
 800763a:	000b      	movs	r3, r1
 800763c:	0e11      	lsrs	r1, r2, #24
 800763e:	021d      	lsls	r5, r3, #8
 8007640:	430d      	orrs	r5, r1
 8007642:	0214      	lsls	r4, r2, #8
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	085b      	lsrs	r3, r3, #1
 800764a:	60bb      	str	r3, [r7, #8]
 800764c:	2300      	movs	r3, #0
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	68b8      	ldr	r0, [r7, #8]
 8007652:	68f9      	ldr	r1, [r7, #12]
 8007654:	1900      	adds	r0, r0, r4
 8007656:	4169      	adcs	r1, r5
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	603b      	str	r3, [r7, #0]
 800765e:	2300      	movs	r3, #0
 8007660:	607b      	str	r3, [r7, #4]
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f7f8 fec1 	bl	80003ec <__aeabi_uldivmod>
 800766a:	0002      	movs	r2, r0
 800766c:	000b      	movs	r3, r1
 800766e:	0013      	movs	r3, r2
 8007670:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007674:	23c0      	movs	r3, #192	; 0xc0
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	429a      	cmp	r2, r3
 800767a:	d309      	bcc.n	8007690 <UART_SetConfig+0x2e4>
 800767c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800767e:	2380      	movs	r3, #128	; 0x80
 8007680:	035b      	lsls	r3, r3, #13
 8007682:	429a      	cmp	r2, r3
 8007684:	d204      	bcs.n	8007690 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800768c:	60da      	str	r2, [r3, #12]
 800768e:	e0e9      	b.n	8007864 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8007690:	231a      	movs	r3, #26
 8007692:	2220      	movs	r2, #32
 8007694:	189b      	adds	r3, r3, r2
 8007696:	19db      	adds	r3, r3, r7
 8007698:	2201      	movs	r2, #1
 800769a:	701a      	strb	r2, [r3, #0]
 800769c:	e0e2      	b.n	8007864 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	69da      	ldr	r2, [r3, #28]
 80076a2:	2380      	movs	r3, #128	; 0x80
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d000      	beq.n	80076ac <UART_SetConfig+0x300>
 80076aa:	e083      	b.n	80077b4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80076ac:	231b      	movs	r3, #27
 80076ae:	2220      	movs	r2, #32
 80076b0:	189b      	adds	r3, r3, r2
 80076b2:	19db      	adds	r3, r3, r7
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b08      	cmp	r3, #8
 80076b8:	d015      	beq.n	80076e6 <UART_SetConfig+0x33a>
 80076ba:	dc2b      	bgt.n	8007714 <UART_SetConfig+0x368>
 80076bc:	2b04      	cmp	r3, #4
 80076be:	d00d      	beq.n	80076dc <UART_SetConfig+0x330>
 80076c0:	dc28      	bgt.n	8007714 <UART_SetConfig+0x368>
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <UART_SetConfig+0x320>
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d005      	beq.n	80076d6 <UART_SetConfig+0x32a>
 80076ca:	e023      	b.n	8007714 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076cc:	f7fe ff42 	bl	8006554 <HAL_RCC_GetPCLK1Freq>
 80076d0:	0003      	movs	r3, r0
 80076d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076d4:	e027      	b.n	8007726 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076d6:	4b0d      	ldr	r3, [pc, #52]	; (800770c <UART_SetConfig+0x360>)
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076da:	e024      	b.n	8007726 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076dc:	f7fe feae 	bl	800643c <HAL_RCC_GetSysClockFreq>
 80076e0:	0003      	movs	r3, r0
 80076e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076e4:	e01f      	b.n	8007726 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076e6:	2380      	movs	r3, #128	; 0x80
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076ec:	e01b      	b.n	8007726 <UART_SetConfig+0x37a>
 80076ee:	46c0      	nop			; (mov r8, r8)
 80076f0:	cfff69f3 	.word	0xcfff69f3
 80076f4:	ffffcfff 	.word	0xffffcfff
 80076f8:	40008000 	.word	0x40008000
 80076fc:	11fff4ff 	.word	0x11fff4ff
 8007700:	40013800 	.word	0x40013800
 8007704:	40021000 	.word	0x40021000
 8007708:	40004400 	.word	0x40004400
 800770c:	00f42400 	.word	0x00f42400
 8007710:	080086a8 	.word	0x080086a8
      default:
        pclk = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007718:	231a      	movs	r3, #26
 800771a:	2220      	movs	r2, #32
 800771c:	189b      	adds	r3, r3, r2
 800771e:	19db      	adds	r3, r3, r7
 8007720:	2201      	movs	r2, #1
 8007722:	701a      	strb	r2, [r3, #0]
        break;
 8007724:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007728:	2b00      	cmp	r3, #0
 800772a:	d100      	bne.n	800772e <UART_SetConfig+0x382>
 800772c:	e09a      	b.n	8007864 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007732:	4b58      	ldr	r3, [pc, #352]	; (8007894 <UART_SetConfig+0x4e8>)
 8007734:	0052      	lsls	r2, r2, #1
 8007736:	5ad3      	ldrh	r3, [r2, r3]
 8007738:	0019      	movs	r1, r3
 800773a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800773c:	f7f8 fce0 	bl	8000100 <__udivsi3>
 8007740:	0003      	movs	r3, r0
 8007742:	005a      	lsls	r2, r3, #1
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	085b      	lsrs	r3, r3, #1
 800774a:	18d2      	adds	r2, r2, r3
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	0019      	movs	r1, r3
 8007752:	0010      	movs	r0, r2
 8007754:	f7f8 fcd4 	bl	8000100 <__udivsi3>
 8007758:	0003      	movs	r3, r0
 800775a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	2b0f      	cmp	r3, #15
 8007760:	d921      	bls.n	80077a6 <UART_SetConfig+0x3fa>
 8007762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007764:	2380      	movs	r3, #128	; 0x80
 8007766:	025b      	lsls	r3, r3, #9
 8007768:	429a      	cmp	r2, r3
 800776a:	d21c      	bcs.n	80077a6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	b29a      	uxth	r2, r3
 8007770:	200e      	movs	r0, #14
 8007772:	2420      	movs	r4, #32
 8007774:	1903      	adds	r3, r0, r4
 8007776:	19db      	adds	r3, r3, r7
 8007778:	210f      	movs	r1, #15
 800777a:	438a      	bics	r2, r1
 800777c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007780:	085b      	lsrs	r3, r3, #1
 8007782:	b29b      	uxth	r3, r3
 8007784:	2207      	movs	r2, #7
 8007786:	4013      	ands	r3, r2
 8007788:	b299      	uxth	r1, r3
 800778a:	1903      	adds	r3, r0, r4
 800778c:	19db      	adds	r3, r3, r7
 800778e:	1902      	adds	r2, r0, r4
 8007790:	19d2      	adds	r2, r2, r7
 8007792:	8812      	ldrh	r2, [r2, #0]
 8007794:	430a      	orrs	r2, r1
 8007796:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	1902      	adds	r2, r0, r4
 800779e:	19d2      	adds	r2, r2, r7
 80077a0:	8812      	ldrh	r2, [r2, #0]
 80077a2:	60da      	str	r2, [r3, #12]
 80077a4:	e05e      	b.n	8007864 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80077a6:	231a      	movs	r3, #26
 80077a8:	2220      	movs	r2, #32
 80077aa:	189b      	adds	r3, r3, r2
 80077ac:	19db      	adds	r3, r3, r7
 80077ae:	2201      	movs	r2, #1
 80077b0:	701a      	strb	r2, [r3, #0]
 80077b2:	e057      	b.n	8007864 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077b4:	231b      	movs	r3, #27
 80077b6:	2220      	movs	r2, #32
 80077b8:	189b      	adds	r3, r3, r2
 80077ba:	19db      	adds	r3, r3, r7
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d015      	beq.n	80077ee <UART_SetConfig+0x442>
 80077c2:	dc18      	bgt.n	80077f6 <UART_SetConfig+0x44a>
 80077c4:	2b04      	cmp	r3, #4
 80077c6:	d00d      	beq.n	80077e4 <UART_SetConfig+0x438>
 80077c8:	dc15      	bgt.n	80077f6 <UART_SetConfig+0x44a>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <UART_SetConfig+0x428>
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d005      	beq.n	80077de <UART_SetConfig+0x432>
 80077d2:	e010      	b.n	80077f6 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077d4:	f7fe febe 	bl	8006554 <HAL_RCC_GetPCLK1Freq>
 80077d8:	0003      	movs	r3, r0
 80077da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077dc:	e014      	b.n	8007808 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077de:	4b2e      	ldr	r3, [pc, #184]	; (8007898 <UART_SetConfig+0x4ec>)
 80077e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077e2:	e011      	b.n	8007808 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077e4:	f7fe fe2a 	bl	800643c <HAL_RCC_GetSysClockFreq>
 80077e8:	0003      	movs	r3, r0
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077ec:	e00c      	b.n	8007808 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ee:	2380      	movs	r3, #128	; 0x80
 80077f0:	021b      	lsls	r3, r3, #8
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077f4:	e008      	b.n	8007808 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80077fa:	231a      	movs	r3, #26
 80077fc:	2220      	movs	r2, #32
 80077fe:	189b      	adds	r3, r3, r2
 8007800:	19db      	adds	r3, r3, r7
 8007802:	2201      	movs	r2, #1
 8007804:	701a      	strb	r2, [r3, #0]
        break;
 8007806:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780a:	2b00      	cmp	r3, #0
 800780c:	d02a      	beq.n	8007864 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007812:	4b20      	ldr	r3, [pc, #128]	; (8007894 <UART_SetConfig+0x4e8>)
 8007814:	0052      	lsls	r2, r2, #1
 8007816:	5ad3      	ldrh	r3, [r2, r3]
 8007818:	0019      	movs	r1, r3
 800781a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800781c:	f7f8 fc70 	bl	8000100 <__udivsi3>
 8007820:	0003      	movs	r3, r0
 8007822:	001a      	movs	r2, r3
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	085b      	lsrs	r3, r3, #1
 800782a:	18d2      	adds	r2, r2, r3
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	0019      	movs	r1, r3
 8007832:	0010      	movs	r0, r2
 8007834:	f7f8 fc64 	bl	8000100 <__udivsi3>
 8007838:	0003      	movs	r3, r0
 800783a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	2b0f      	cmp	r3, #15
 8007840:	d90a      	bls.n	8007858 <UART_SetConfig+0x4ac>
 8007842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007844:	2380      	movs	r3, #128	; 0x80
 8007846:	025b      	lsls	r3, r3, #9
 8007848:	429a      	cmp	r2, r3
 800784a:	d205      	bcs.n	8007858 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784e:	b29a      	uxth	r2, r3
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60da      	str	r2, [r3, #12]
 8007856:	e005      	b.n	8007864 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8007858:	231a      	movs	r3, #26
 800785a:	2220      	movs	r2, #32
 800785c:	189b      	adds	r3, r3, r2
 800785e:	19db      	adds	r3, r3, r7
 8007860:	2201      	movs	r2, #1
 8007862:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	226a      	movs	r2, #106	; 0x6a
 8007868:	2101      	movs	r1, #1
 800786a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	2268      	movs	r2, #104	; 0x68
 8007870:	2101      	movs	r1, #1
 8007872:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	2200      	movs	r2, #0
 8007878:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	2200      	movs	r2, #0
 800787e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007880:	231a      	movs	r3, #26
 8007882:	2220      	movs	r2, #32
 8007884:	189b      	adds	r3, r3, r2
 8007886:	19db      	adds	r3, r3, r7
 8007888:	781b      	ldrb	r3, [r3, #0]
}
 800788a:	0018      	movs	r0, r3
 800788c:	46bd      	mov	sp, r7
 800788e:	b010      	add	sp, #64	; 0x40
 8007890:	bdb0      	pop	{r4, r5, r7, pc}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	080086a8 	.word	0x080086a8
 8007898:	00f42400 	.word	0x00f42400

0800789c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a8:	2201      	movs	r2, #1
 80078aa:	4013      	ands	r3, r2
 80078ac:	d00b      	beq.n	80078c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	4a4a      	ldr	r2, [pc, #296]	; (80079e0 <UART_AdvFeatureConfig+0x144>)
 80078b6:	4013      	ands	r3, r2
 80078b8:	0019      	movs	r1, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	2202      	movs	r2, #2
 80078cc:	4013      	ands	r3, r2
 80078ce:	d00b      	beq.n	80078e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	4a43      	ldr	r2, [pc, #268]	; (80079e4 <UART_AdvFeatureConfig+0x148>)
 80078d8:	4013      	ands	r3, r2
 80078da:	0019      	movs	r1, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ec:	2204      	movs	r2, #4
 80078ee:	4013      	ands	r3, r2
 80078f0:	d00b      	beq.n	800790a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	4a3b      	ldr	r2, [pc, #236]	; (80079e8 <UART_AdvFeatureConfig+0x14c>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	0019      	movs	r1, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790e:	2208      	movs	r2, #8
 8007910:	4013      	ands	r3, r2
 8007912:	d00b      	beq.n	800792c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	4a34      	ldr	r2, [pc, #208]	; (80079ec <UART_AdvFeatureConfig+0x150>)
 800791c:	4013      	ands	r3, r2
 800791e:	0019      	movs	r1, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007930:	2210      	movs	r2, #16
 8007932:	4013      	ands	r3, r2
 8007934:	d00b      	beq.n	800794e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	4a2c      	ldr	r2, [pc, #176]	; (80079f0 <UART_AdvFeatureConfig+0x154>)
 800793e:	4013      	ands	r3, r2
 8007940:	0019      	movs	r1, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007952:	2220      	movs	r2, #32
 8007954:	4013      	ands	r3, r2
 8007956:	d00b      	beq.n	8007970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	4a25      	ldr	r2, [pc, #148]	; (80079f4 <UART_AdvFeatureConfig+0x158>)
 8007960:	4013      	ands	r3, r2
 8007962:	0019      	movs	r1, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	2240      	movs	r2, #64	; 0x40
 8007976:	4013      	ands	r3, r2
 8007978:	d01d      	beq.n	80079b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	4a1d      	ldr	r2, [pc, #116]	; (80079f8 <UART_AdvFeatureConfig+0x15c>)
 8007982:	4013      	ands	r3, r2
 8007984:	0019      	movs	r1, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007996:	2380      	movs	r3, #128	; 0x80
 8007998:	035b      	lsls	r3, r3, #13
 800799a:	429a      	cmp	r2, r3
 800799c:	d10b      	bne.n	80079b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	4a15      	ldr	r2, [pc, #84]	; (80079fc <UART_AdvFeatureConfig+0x160>)
 80079a6:	4013      	ands	r3, r2
 80079a8:	0019      	movs	r1, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ba:	2280      	movs	r2, #128	; 0x80
 80079bc:	4013      	ands	r3, r2
 80079be:	d00b      	beq.n	80079d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	4a0e      	ldr	r2, [pc, #56]	; (8007a00 <UART_AdvFeatureConfig+0x164>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	0019      	movs	r1, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	605a      	str	r2, [r3, #4]
  }
}
 80079d8:	46c0      	nop			; (mov r8, r8)
 80079da:	46bd      	mov	sp, r7
 80079dc:	b002      	add	sp, #8
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	fffdffff 	.word	0xfffdffff
 80079e4:	fffeffff 	.word	0xfffeffff
 80079e8:	fffbffff 	.word	0xfffbffff
 80079ec:	ffff7fff 	.word	0xffff7fff
 80079f0:	ffffefff 	.word	0xffffefff
 80079f4:	ffffdfff 	.word	0xffffdfff
 80079f8:	ffefffff 	.word	0xffefffff
 80079fc:	ff9fffff 	.word	0xff9fffff
 8007a00:	fff7ffff 	.word	0xfff7ffff

08007a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af02      	add	r7, sp, #8
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2290      	movs	r2, #144	; 0x90
 8007a10:	2100      	movs	r1, #0
 8007a12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a14:	f7fc f86e 	bl	8003af4 <HAL_GetTick>
 8007a18:	0003      	movs	r3, r0
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2208      	movs	r2, #8
 8007a24:	4013      	ands	r3, r2
 8007a26:	2b08      	cmp	r3, #8
 8007a28:	d10c      	bne.n	8007a44 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2280      	movs	r2, #128	; 0x80
 8007a2e:	0391      	lsls	r1, r2, #14
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	4a1a      	ldr	r2, [pc, #104]	; (8007a9c <UART_CheckIdleState+0x98>)
 8007a34:	9200      	str	r2, [sp, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f000 f832 	bl	8007aa0 <UART_WaitOnFlagUntilTimeout>
 8007a3c:	1e03      	subs	r3, r0, #0
 8007a3e:	d001      	beq.n	8007a44 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e026      	b.n	8007a92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d10c      	bne.n	8007a6c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2280      	movs	r2, #128	; 0x80
 8007a56:	03d1      	lsls	r1, r2, #15
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	4a10      	ldr	r2, [pc, #64]	; (8007a9c <UART_CheckIdleState+0x98>)
 8007a5c:	9200      	str	r2, [sp, #0]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f000 f81e 	bl	8007aa0 <UART_WaitOnFlagUntilTimeout>
 8007a64:	1e03      	subs	r3, r0, #0
 8007a66:	d001      	beq.n	8007a6c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e012      	b.n	8007a92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2288      	movs	r2, #136	; 0x88
 8007a70:	2120      	movs	r1, #32
 8007a72:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	228c      	movs	r2, #140	; 0x8c
 8007a78:	2120      	movs	r1, #32
 8007a7a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2284      	movs	r2, #132	; 0x84
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	0018      	movs	r0, r3
 8007a94:	46bd      	mov	sp, r7
 8007a96:	b004      	add	sp, #16
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	01ffffff 	.word	0x01ffffff

08007aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b094      	sub	sp, #80	; 0x50
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	1dfb      	adds	r3, r7, #7
 8007aae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab0:	e0a7      	b.n	8007c02 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	d100      	bne.n	8007aba <UART_WaitOnFlagUntilTimeout+0x1a>
 8007ab8:	e0a3      	b.n	8007c02 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aba:	f7fc f81b 	bl	8003af4 <HAL_GetTick>
 8007abe:	0002      	movs	r2, r0
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d302      	bcc.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d13f      	bne.n	8007b50 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8007ada:	2301      	movs	r3, #1
 8007adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	f383 8810 	msr	PRIMASK, r3
}
 8007ae4:	46c0      	nop			; (mov r8, r8)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	494e      	ldr	r1, [pc, #312]	; (8007c2c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007af2:	400a      	ands	r2, r1
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007af8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	f383 8810 	msr	PRIMASK, r3
}
 8007b00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b02:	f3ef 8310 	mrs	r3, PRIMASK
 8007b06:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	f383 8810 	msr	PRIMASK, r3
}
 8007b16:	46c0      	nop			; (mov r8, r8)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2101      	movs	r1, #1
 8007b24:	438a      	bics	r2, r1
 8007b26:	609a      	str	r2, [r3, #8]
 8007b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2e:	f383 8810 	msr	PRIMASK, r3
}
 8007b32:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2288      	movs	r2, #136	; 0x88
 8007b38:	2120      	movs	r1, #32
 8007b3a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	228c      	movs	r2, #140	; 0x8c
 8007b40:	2120      	movs	r1, #32
 8007b42:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2284      	movs	r2, #132	; 0x84
 8007b48:	2100      	movs	r1, #0
 8007b4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e069      	b.n	8007c24 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2204      	movs	r2, #4
 8007b58:	4013      	ands	r3, r2
 8007b5a:	d052      	beq.n	8007c02 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	69da      	ldr	r2, [r3, #28]
 8007b62:	2380      	movs	r3, #128	; 0x80
 8007b64:	011b      	lsls	r3, r3, #4
 8007b66:	401a      	ands	r2, r3
 8007b68:	2380      	movs	r3, #128	; 0x80
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d148      	bne.n	8007c02 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2280      	movs	r2, #128	; 0x80
 8007b76:	0112      	lsls	r2, r2, #4
 8007b78:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b7e:	613b      	str	r3, [r7, #16]
  return(result);
 8007b80:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b84:	2301      	movs	r3, #1
 8007b86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f383 8810 	msr	PRIMASK, r3
}
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4924      	ldr	r1, [pc, #144]	; (8007c2c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007b9c:	400a      	ands	r2, r1
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f383 8810 	msr	PRIMASK, r3
}
 8007baa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bac:	f3ef 8310 	mrs	r3, PRIMASK
 8007bb0:	61fb      	str	r3, [r7, #28]
  return(result);
 8007bb2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	f383 8810 	msr	PRIMASK, r3
}
 8007bc0:	46c0      	nop			; (mov r8, r8)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2101      	movs	r1, #1
 8007bce:	438a      	bics	r2, r1
 8007bd0:	609a      	str	r2, [r3, #8]
 8007bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	f383 8810 	msr	PRIMASK, r3
}
 8007bdc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2288      	movs	r2, #136	; 0x88
 8007be2:	2120      	movs	r1, #32
 8007be4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	228c      	movs	r2, #140	; 0x8c
 8007bea:	2120      	movs	r1, #32
 8007bec:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2290      	movs	r2, #144	; 0x90
 8007bf2:	2120      	movs	r1, #32
 8007bf4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2284      	movs	r2, #132	; 0x84
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e010      	b.n	8007c24 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	69db      	ldr	r3, [r3, #28]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	425a      	negs	r2, r3
 8007c12:	4153      	adcs	r3, r2
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	001a      	movs	r2, r3
 8007c18:	1dfb      	adds	r3, r7, #7
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d100      	bne.n	8007c22 <UART_WaitOnFlagUntilTimeout+0x182>
 8007c20:	e747      	b.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	0018      	movs	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	b014      	add	sp, #80	; 0x50
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	fffffe5f 	.word	0xfffffe5f

08007c30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b090      	sub	sp, #64	; 0x40
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	1dbb      	adds	r3, r7, #6
 8007c3c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	1dba      	adds	r2, r7, #6
 8007c48:	215c      	movs	r1, #92	; 0x5c
 8007c4a:	8812      	ldrh	r2, [r2, #0]
 8007c4c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2290      	movs	r2, #144	; 0x90
 8007c52:	2100      	movs	r1, #0
 8007c54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	228c      	movs	r2, #140	; 0x8c
 8007c5a:	2122      	movs	r1, #34	; 0x22
 8007c5c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2280      	movs	r2, #128	; 0x80
 8007c62:	589b      	ldr	r3, [r3, r2]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d02d      	beq.n	8007cc4 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2280      	movs	r2, #128	; 0x80
 8007c6c:	589b      	ldr	r3, [r3, r2]
 8007c6e:	4a40      	ldr	r2, [pc, #256]	; (8007d70 <UART_Start_Receive_DMA+0x140>)
 8007c70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2280      	movs	r2, #128	; 0x80
 8007c76:	589b      	ldr	r3, [r3, r2]
 8007c78:	4a3e      	ldr	r2, [pc, #248]	; (8007d74 <UART_Start_Receive_DMA+0x144>)
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2280      	movs	r2, #128	; 0x80
 8007c80:	589b      	ldr	r3, [r3, r2]
 8007c82:	4a3d      	ldr	r2, [pc, #244]	; (8007d78 <UART_Start_Receive_DMA+0x148>)
 8007c84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2280      	movs	r2, #128	; 0x80
 8007c8a:	589b      	ldr	r3, [r3, r2]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2280      	movs	r2, #128	; 0x80
 8007c94:	5898      	ldr	r0, [r3, r2]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3324      	adds	r3, #36	; 0x24
 8007c9c:	0019      	movs	r1, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca2:	001a      	movs	r2, r3
 8007ca4:	1dbb      	adds	r3, r7, #6
 8007ca6:	881b      	ldrh	r3, [r3, #0]
 8007ca8:	f7fc fd38 	bl	800471c <HAL_DMA_Start_IT>
 8007cac:	1e03      	subs	r3, r0, #0
 8007cae:	d009      	beq.n	8007cc4 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2290      	movs	r2, #144	; 0x90
 8007cb4:	2110      	movs	r1, #16
 8007cb6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	228c      	movs	r2, #140	; 0x8c
 8007cbc:	2120      	movs	r1, #32
 8007cbe:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e050      	b.n	8007d66 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d019      	beq.n	8007d00 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8007cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	f383 8810 	msr	PRIMASK, r3
}
 8007ce0:	46c0      	nop			; (mov r8, r8)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2180      	movs	r1, #128	; 0x80
 8007cee:	0049      	lsls	r1, r1, #1
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	f383 8810 	msr	PRIMASK, r3
}
 8007cfe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d00:	f3ef 8310 	mrs	r3, PRIMASK
 8007d04:	613b      	str	r3, [r7, #16]
  return(result);
 8007d06:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d08:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f383 8810 	msr	PRIMASK, r3
}
 8007d14:	46c0      	nop			; (mov r8, r8)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2101      	movs	r1, #1
 8007d22:	430a      	orrs	r2, r1
 8007d24:	609a      	str	r2, [r3, #8]
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	f383 8810 	msr	PRIMASK, r3
}
 8007d30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d32:	f3ef 8310 	mrs	r3, PRIMASK
 8007d36:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d38:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d40:	6a3b      	ldr	r3, [r7, #32]
 8007d42:	f383 8810 	msr	PRIMASK, r3
}
 8007d46:	46c0      	nop			; (mov r8, r8)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2140      	movs	r1, #64	; 0x40
 8007d54:	430a      	orrs	r2, r1
 8007d56:	609a      	str	r2, [r3, #8]
 8007d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	f383 8810 	msr	PRIMASK, r3
}
 8007d62:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	0018      	movs	r0, r3
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	b010      	add	sp, #64	; 0x40
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	08007ec9 	.word	0x08007ec9
 8007d74:	08007ff9 	.word	0x08007ff9
 8007d78:	0800803b 	.word	0x0800803b

08007d7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08a      	sub	sp, #40	; 0x28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d84:	f3ef 8310 	mrs	r3, PRIMASK
 8007d88:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d8e:	2301      	movs	r3, #1
 8007d90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f383 8810 	msr	PRIMASK, r3
}
 8007d98:	46c0      	nop			; (mov r8, r8)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	21c0      	movs	r1, #192	; 0xc0
 8007da6:	438a      	bics	r2, r1
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	f383 8810 	msr	PRIMASK, r3
}
 8007db4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007db6:	f3ef 8310 	mrs	r3, PRIMASK
 8007dba:	617b      	str	r3, [r7, #20]
  return(result);
 8007dbc:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007dbe:	623b      	str	r3, [r7, #32]
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	f383 8810 	msr	PRIMASK, r3
}
 8007dca:	46c0      	nop			; (mov r8, r8)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689a      	ldr	r2, [r3, #8]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4908      	ldr	r1, [pc, #32]	; (8007df8 <UART_EndTxTransfer+0x7c>)
 8007dd8:	400a      	ands	r2, r1
 8007dda:	609a      	str	r2, [r3, #8]
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	f383 8810 	msr	PRIMASK, r3
}
 8007de6:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2288      	movs	r2, #136	; 0x88
 8007dec:	2120      	movs	r1, #32
 8007dee:	5099      	str	r1, [r3, r2]
}
 8007df0:	46c0      	nop			; (mov r8, r8)
 8007df2:	46bd      	mov	sp, r7
 8007df4:	b00a      	add	sp, #40	; 0x28
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	ff7fffff 	.word	0xff7fffff

08007dfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08e      	sub	sp, #56	; 0x38
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e04:	f3ef 8310 	mrs	r3, PRIMASK
 8007e08:	617b      	str	r3, [r7, #20]
  return(result);
 8007e0a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0e:	2301      	movs	r3, #1
 8007e10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	f383 8810 	msr	PRIMASK, r3
}
 8007e18:	46c0      	nop			; (mov r8, r8)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4926      	ldr	r1, [pc, #152]	; (8007ec0 <UART_EndRxTransfer+0xc4>)
 8007e26:	400a      	ands	r2, r1
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	f383 8810 	msr	PRIMASK, r3
}
 8007e34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e36:	f3ef 8310 	mrs	r3, PRIMASK
 8007e3a:	623b      	str	r3, [r7, #32]
  return(result);
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e40:	2301      	movs	r3, #1
 8007e42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	f383 8810 	msr	PRIMASK, r3
}
 8007e4a:	46c0      	nop			; (mov r8, r8)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	491b      	ldr	r1, [pc, #108]	; (8007ec4 <UART_EndRxTransfer+0xc8>)
 8007e58:	400a      	ands	r2, r1
 8007e5a:	609a      	str	r2, [r3, #8]
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e62:	f383 8810 	msr	PRIMASK, r3
}
 8007e66:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d118      	bne.n	8007ea2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e70:	f3ef 8310 	mrs	r3, PRIMASK
 8007e74:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e76:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f383 8810 	msr	PRIMASK, r3
}
 8007e84:	46c0      	nop			; (mov r8, r8)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2110      	movs	r1, #16
 8007e92:	438a      	bics	r2, r1
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	f383 8810 	msr	PRIMASK, r3
}
 8007ea0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	228c      	movs	r2, #140	; 0x8c
 8007ea6:	2120      	movs	r1, #32
 8007ea8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007eb6:	46c0      	nop			; (mov r8, r8)
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	b00e      	add	sp, #56	; 0x38
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	46c0      	nop			; (mov r8, r8)
 8007ec0:	fffffedf 	.word	0xfffffedf
 8007ec4:	effffffe 	.word	0xeffffffe

08007ec8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b094      	sub	sp, #80	; 0x50
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2220      	movs	r2, #32
 8007ede:	4013      	ands	r3, r2
 8007ee0:	d16f      	bne.n	8007fc2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8007ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee4:	225e      	movs	r2, #94	; 0x5e
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eea:	f3ef 8310 	mrs	r3, PRIMASK
 8007eee:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ef0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	f383 8810 	msr	PRIMASK, r3
}
 8007efe:	46c0      	nop			; (mov r8, r8)
 8007f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	493a      	ldr	r1, [pc, #232]	; (8007ff4 <UART_DMAReceiveCplt+0x12c>)
 8007f0c:	400a      	ands	r2, r1
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	f383 8810 	msr	PRIMASK, r3
}
 8007f1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f24:	647b      	str	r3, [r7, #68]	; 0x44
 8007f26:	2301      	movs	r3, #1
 8007f28:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	f383 8810 	msr	PRIMASK, r3
}
 8007f30:	46c0      	nop			; (mov r8, r8)
 8007f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	438a      	bics	r2, r1
 8007f40:	609a      	str	r2, [r3, #8]
 8007f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f48:	f383 8810 	msr	PRIMASK, r3
}
 8007f4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8007f52:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f56:	643b      	str	r3, [r7, #64]	; 0x40
 8007f58:	2301      	movs	r3, #1
 8007f5a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5e:	f383 8810 	msr	PRIMASK, r3
}
 8007f62:	46c0      	nop			; (mov r8, r8)
 8007f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2140      	movs	r1, #64	; 0x40
 8007f70:	438a      	bics	r2, r1
 8007f72:	609a      	str	r2, [r3, #8]
 8007f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f76:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	f383 8810 	msr	PRIMASK, r3
}
 8007f7e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f82:	228c      	movs	r2, #140	; 0x8c
 8007f84:	2120      	movs	r1, #32
 8007f86:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d118      	bne.n	8007fc2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f90:	f3ef 8310 	mrs	r3, PRIMASK
 8007f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f96:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f383 8810 	msr	PRIMASK, r3
}
 8007fa4:	46c0      	nop			; (mov r8, r8)
 8007fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2110      	movs	r1, #16
 8007fb2:	438a      	bics	r2, r1
 8007fb4:	601a      	str	r2, [r3, #0]
 8007fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f383 8810 	msr	PRIMASK, r3
}
 8007fc0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d108      	bne.n	8007fe2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd2:	225c      	movs	r2, #92	; 0x5c
 8007fd4:	5a9a      	ldrh	r2, [r3, r2]
 8007fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd8:	0011      	movs	r1, r2
 8007fda:	0018      	movs	r0, r3
 8007fdc:	f7fa fae4 	bl	80025a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fe0:	e003      	b.n	8007fea <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8007fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	f7ff f9c9 	bl	800737c <HAL_UART_RxCpltCallback>
}
 8007fea:	46c0      	nop			; (mov r8, r8)
 8007fec:	46bd      	mov	sp, r7
 8007fee:	b014      	add	sp, #80	; 0x50
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	46c0      	nop			; (mov r8, r8)
 8007ff4:	fffffeff 	.word	0xfffffeff

08007ff8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008004:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2201      	movs	r2, #1
 800800a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008010:	2b01      	cmp	r3, #1
 8008012:	d10a      	bne.n	800802a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	225c      	movs	r2, #92	; 0x5c
 8008018:	5a9b      	ldrh	r3, [r3, r2]
 800801a:	085b      	lsrs	r3, r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	0011      	movs	r1, r2
 8008022:	0018      	movs	r0, r3
 8008024:	f7fa fac0 	bl	80025a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008028:	e003      	b.n	8008032 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	0018      	movs	r0, r3
 800802e:	f7ff f9ad 	bl	800738c <HAL_UART_RxHalfCpltCallback>
}
 8008032:	46c0      	nop			; (mov r8, r8)
 8008034:	46bd      	mov	sp, r7
 8008036:	b004      	add	sp, #16
 8008038:	bd80      	pop	{r7, pc}

0800803a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b086      	sub	sp, #24
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008046:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2288      	movs	r2, #136	; 0x88
 800804c:	589b      	ldr	r3, [r3, r2]
 800804e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	228c      	movs	r2, #140	; 0x8c
 8008054:	589b      	ldr	r3, [r3, r2]
 8008056:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	2280      	movs	r2, #128	; 0x80
 8008060:	4013      	ands	r3, r2
 8008062:	2b80      	cmp	r3, #128	; 0x80
 8008064:	d10a      	bne.n	800807c <UART_DMAError+0x42>
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	2b21      	cmp	r3, #33	; 0x21
 800806a:	d107      	bne.n	800807c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	2256      	movs	r2, #86	; 0x56
 8008070:	2100      	movs	r1, #0
 8008072:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	0018      	movs	r0, r3
 8008078:	f7ff fe80 	bl	8007d7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	2240      	movs	r2, #64	; 0x40
 8008084:	4013      	ands	r3, r2
 8008086:	2b40      	cmp	r3, #64	; 0x40
 8008088:	d10a      	bne.n	80080a0 <UART_DMAError+0x66>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b22      	cmp	r3, #34	; 0x22
 800808e:	d107      	bne.n	80080a0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	225e      	movs	r2, #94	; 0x5e
 8008094:	2100      	movs	r1, #0
 8008096:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	0018      	movs	r0, r3
 800809c:	f7ff feae 	bl	8007dfc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2290      	movs	r2, #144	; 0x90
 80080a4:	589b      	ldr	r3, [r3, r2]
 80080a6:	2210      	movs	r2, #16
 80080a8:	431a      	orrs	r2, r3
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2190      	movs	r1, #144	; 0x90
 80080ae:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	0018      	movs	r0, r3
 80080b4:	f7ff f972 	bl	800739c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080b8:	46c0      	nop			; (mov r8, r8)
 80080ba:	46bd      	mov	sp, r7
 80080bc:	b006      	add	sp, #24
 80080be:	bd80      	pop	{r7, pc}

080080c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	225e      	movs	r2, #94	; 0x5e
 80080d2:	2100      	movs	r1, #0
 80080d4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2256      	movs	r2, #86	; 0x56
 80080da:	2100      	movs	r1, #0
 80080dc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	0018      	movs	r0, r3
 80080e2:	f7ff f95b 	bl	800739c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080e6:	46c0      	nop			; (mov r8, r8)
 80080e8:	46bd      	mov	sp, r7
 80080ea:	b004      	add	sp, #16
 80080ec:	bd80      	pop	{r7, pc}

080080ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b086      	sub	sp, #24
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080f6:	f3ef 8310 	mrs	r3, PRIMASK
 80080fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80080fc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080fe:	617b      	str	r3, [r7, #20]
 8008100:	2301      	movs	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f383 8810 	msr	PRIMASK, r3
}
 800810a:	46c0      	nop			; (mov r8, r8)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2140      	movs	r1, #64	; 0x40
 8008118:	438a      	bics	r2, r1
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f383 8810 	msr	PRIMASK, r3
}
 8008126:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2288      	movs	r2, #136	; 0x88
 800812c:	2120      	movs	r1, #32
 800812e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	0018      	movs	r0, r3
 800813a:	f7ff f917 	bl	800736c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800813e:	46c0      	nop			; (mov r8, r8)
 8008140:	46bd      	mov	sp, r7
 8008142:	b006      	add	sp, #24
 8008144:	bd80      	pop	{r7, pc}

08008146 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b082      	sub	sp, #8
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800814e:	46c0      	nop			; (mov r8, r8)
 8008150:	46bd      	mov	sp, r7
 8008152:	b002      	add	sp, #8
 8008154:	bd80      	pop	{r7, pc}

08008156 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800815e:	46c0      	nop			; (mov r8, r8)
 8008160:	46bd      	mov	sp, r7
 8008162:	b002      	add	sp, #8
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800816e:	46c0      	nop			; (mov r8, r8)
 8008170:	46bd      	mov	sp, r7
 8008172:	b002      	add	sp, #8
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2284      	movs	r2, #132	; 0x84
 8008184:	5c9b      	ldrb	r3, [r3, r2]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d101      	bne.n	800818e <HAL_UARTEx_DisableFifoMode+0x16>
 800818a:	2302      	movs	r3, #2
 800818c:	e027      	b.n	80081de <HAL_UARTEx_DisableFifoMode+0x66>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2284      	movs	r2, #132	; 0x84
 8008192:	2101      	movs	r1, #1
 8008194:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2288      	movs	r2, #136	; 0x88
 800819a:	2124      	movs	r1, #36	; 0x24
 800819c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2101      	movs	r1, #1
 80081b2:	438a      	bics	r2, r1
 80081b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4a0b      	ldr	r2, [pc, #44]	; (80081e8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80081ba:	4013      	ands	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2288      	movs	r2, #136	; 0x88
 80081d0:	2120      	movs	r1, #32
 80081d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2284      	movs	r2, #132	; 0x84
 80081d8:	2100      	movs	r1, #0
 80081da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	0018      	movs	r0, r3
 80081e0:	46bd      	mov	sp, r7
 80081e2:	b004      	add	sp, #16
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	46c0      	nop			; (mov r8, r8)
 80081e8:	dfffffff 	.word	0xdfffffff

080081ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2284      	movs	r2, #132	; 0x84
 80081fa:	5c9b      	ldrb	r3, [r3, r2]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008200:	2302      	movs	r3, #2
 8008202:	e02e      	b.n	8008262 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2284      	movs	r2, #132	; 0x84
 8008208:	2101      	movs	r1, #1
 800820a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2288      	movs	r2, #136	; 0x88
 8008210:	2124      	movs	r1, #36	; 0x24
 8008212:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2101      	movs	r1, #1
 8008228:	438a      	bics	r2, r1
 800822a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	00db      	lsls	r3, r3, #3
 8008234:	08d9      	lsrs	r1, r3, #3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	0018      	movs	r0, r3
 8008244:	f000 f8bc 	bl	80083c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2288      	movs	r2, #136	; 0x88
 8008254:	2120      	movs	r1, #32
 8008256:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2284      	movs	r2, #132	; 0x84
 800825c:	2100      	movs	r1, #0
 800825e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	0018      	movs	r0, r3
 8008264:	46bd      	mov	sp, r7
 8008266:	b004      	add	sp, #16
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2284      	movs	r2, #132	; 0x84
 800827a:	5c9b      	ldrb	r3, [r3, r2]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008280:	2302      	movs	r3, #2
 8008282:	e02f      	b.n	80082e4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2284      	movs	r2, #132	; 0x84
 8008288:	2101      	movs	r1, #1
 800828a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2288      	movs	r2, #136	; 0x88
 8008290:	2124      	movs	r1, #36	; 0x24
 8008292:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2101      	movs	r1, #1
 80082a8:	438a      	bics	r2, r1
 80082aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	4a0e      	ldr	r2, [pc, #56]	; (80082ec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80082b4:	4013      	ands	r3, r2
 80082b6:	0019      	movs	r1, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	430a      	orrs	r2, r1
 80082c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	0018      	movs	r0, r3
 80082c6:	f000 f87b 	bl	80083c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2288      	movs	r2, #136	; 0x88
 80082d6:	2120      	movs	r1, #32
 80082d8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2284      	movs	r2, #132	; 0x84
 80082de:	2100      	movs	r1, #0
 80082e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	0018      	movs	r0, r3
 80082e6:	46bd      	mov	sp, r7
 80082e8:	b004      	add	sp, #16
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	f1ffffff 	.word	0xf1ffffff

080082f0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082f0:	b5b0      	push	{r4, r5, r7, lr}
 80082f2:	b08a      	sub	sp, #40	; 0x28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	1dbb      	adds	r3, r7, #6
 80082fc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	228c      	movs	r2, #140	; 0x8c
 8008302:	589b      	ldr	r3, [r3, r2]
 8008304:	2b20      	cmp	r3, #32
 8008306:	d156      	bne.n	80083b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800830e:	1dbb      	adds	r3, r7, #6
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e04e      	b.n	80083b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	689a      	ldr	r2, [r3, #8]
 800831e:	2380      	movs	r3, #128	; 0x80
 8008320:	015b      	lsls	r3, r3, #5
 8008322:	429a      	cmp	r2, r3
 8008324:	d109      	bne.n	800833a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d105      	bne.n	800833a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2201      	movs	r2, #1
 8008332:	4013      	ands	r3, r2
 8008334:	d001      	beq.n	800833a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e03e      	b.n	80083b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008346:	2527      	movs	r5, #39	; 0x27
 8008348:	197c      	adds	r4, r7, r5
 800834a:	1dbb      	adds	r3, r7, #6
 800834c:	881a      	ldrh	r2, [r3, #0]
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	0018      	movs	r0, r3
 8008354:	f7ff fc6c 	bl	8007c30 <UART_Start_Receive_DMA>
 8008358:	0003      	movs	r3, r0
 800835a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800835c:	197b      	adds	r3, r7, r5
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d124      	bne.n	80083ae <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008368:	2b01      	cmp	r3, #1
 800836a:	d11c      	bne.n	80083a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2210      	movs	r2, #16
 8008372:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008374:	f3ef 8310 	mrs	r3, PRIMASK
 8008378:	617b      	str	r3, [r7, #20]
  return(result);
 800837a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800837c:	623b      	str	r3, [r7, #32]
 800837e:	2301      	movs	r3, #1
 8008380:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	f383 8810 	msr	PRIMASK, r3
}
 8008388:	46c0      	nop			; (mov r8, r8)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2110      	movs	r1, #16
 8008396:	430a      	orrs	r2, r1
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	f383 8810 	msr	PRIMASK, r3
}
 80083a4:	e003      	b.n	80083ae <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80083a6:	2327      	movs	r3, #39	; 0x27
 80083a8:	18fb      	adds	r3, r7, r3
 80083aa:	2201      	movs	r2, #1
 80083ac:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80083ae:	2327      	movs	r3, #39	; 0x27
 80083b0:	18fb      	adds	r3, r7, r3
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	e000      	b.n	80083b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80083b6:	2302      	movs	r3, #2
  }
}
 80083b8:	0018      	movs	r0, r3
 80083ba:	46bd      	mov	sp, r7
 80083bc:	b00a      	add	sp, #40	; 0x28
 80083be:	bdb0      	pop	{r4, r5, r7, pc}

080083c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d108      	bne.n	80083e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	226a      	movs	r2, #106	; 0x6a
 80083d4:	2101      	movs	r1, #1
 80083d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2268      	movs	r2, #104	; 0x68
 80083dc:	2101      	movs	r1, #1
 80083de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083e0:	e043      	b.n	800846a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083e2:	260f      	movs	r6, #15
 80083e4:	19bb      	adds	r3, r7, r6
 80083e6:	2208      	movs	r2, #8
 80083e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083ea:	200e      	movs	r0, #14
 80083ec:	183b      	adds	r3, r7, r0
 80083ee:	2208      	movs	r2, #8
 80083f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	0e5b      	lsrs	r3, r3, #25
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	240d      	movs	r4, #13
 80083fe:	193b      	adds	r3, r7, r4
 8008400:	2107      	movs	r1, #7
 8008402:	400a      	ands	r2, r1
 8008404:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	0f5b      	lsrs	r3, r3, #29
 800840e:	b2da      	uxtb	r2, r3
 8008410:	250c      	movs	r5, #12
 8008412:	197b      	adds	r3, r7, r5
 8008414:	2107      	movs	r1, #7
 8008416:	400a      	ands	r2, r1
 8008418:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800841a:	183b      	adds	r3, r7, r0
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	197a      	adds	r2, r7, r5
 8008420:	7812      	ldrb	r2, [r2, #0]
 8008422:	4914      	ldr	r1, [pc, #80]	; (8008474 <UARTEx_SetNbDataToProcess+0xb4>)
 8008424:	5c8a      	ldrb	r2, [r1, r2]
 8008426:	435a      	muls	r2, r3
 8008428:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800842a:	197b      	adds	r3, r7, r5
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	4a12      	ldr	r2, [pc, #72]	; (8008478 <UARTEx_SetNbDataToProcess+0xb8>)
 8008430:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008432:	0019      	movs	r1, r3
 8008434:	f7f7 feee 	bl	8000214 <__divsi3>
 8008438:	0003      	movs	r3, r0
 800843a:	b299      	uxth	r1, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	226a      	movs	r2, #106	; 0x6a
 8008440:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008442:	19bb      	adds	r3, r7, r6
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	193a      	adds	r2, r7, r4
 8008448:	7812      	ldrb	r2, [r2, #0]
 800844a:	490a      	ldr	r1, [pc, #40]	; (8008474 <UARTEx_SetNbDataToProcess+0xb4>)
 800844c:	5c8a      	ldrb	r2, [r1, r2]
 800844e:	435a      	muls	r2, r3
 8008450:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008452:	193b      	adds	r3, r7, r4
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	4a08      	ldr	r2, [pc, #32]	; (8008478 <UARTEx_SetNbDataToProcess+0xb8>)
 8008458:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800845a:	0019      	movs	r1, r3
 800845c:	f7f7 feda 	bl	8000214 <__divsi3>
 8008460:	0003      	movs	r3, r0
 8008462:	b299      	uxth	r1, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2268      	movs	r2, #104	; 0x68
 8008468:	5299      	strh	r1, [r3, r2]
}
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	46bd      	mov	sp, r7
 800846e:	b005      	add	sp, #20
 8008470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	080086c0 	.word	0x080086c0
 8008478:	080086c8 	.word	0x080086c8

0800847c <__libc_init_array>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	2600      	movs	r6, #0
 8008480:	4d0c      	ldr	r5, [pc, #48]	; (80084b4 <__libc_init_array+0x38>)
 8008482:	4c0d      	ldr	r4, [pc, #52]	; (80084b8 <__libc_init_array+0x3c>)
 8008484:	1b64      	subs	r4, r4, r5
 8008486:	10a4      	asrs	r4, r4, #2
 8008488:	42a6      	cmp	r6, r4
 800848a:	d109      	bne.n	80084a0 <__libc_init_array+0x24>
 800848c:	2600      	movs	r6, #0
 800848e:	f000 f88d 	bl	80085ac <_init>
 8008492:	4d0a      	ldr	r5, [pc, #40]	; (80084bc <__libc_init_array+0x40>)
 8008494:	4c0a      	ldr	r4, [pc, #40]	; (80084c0 <__libc_init_array+0x44>)
 8008496:	1b64      	subs	r4, r4, r5
 8008498:	10a4      	asrs	r4, r4, #2
 800849a:	42a6      	cmp	r6, r4
 800849c:	d105      	bne.n	80084aa <__libc_init_array+0x2e>
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	00b3      	lsls	r3, r6, #2
 80084a2:	58eb      	ldr	r3, [r5, r3]
 80084a4:	4798      	blx	r3
 80084a6:	3601      	adds	r6, #1
 80084a8:	e7ee      	b.n	8008488 <__libc_init_array+0xc>
 80084aa:	00b3      	lsls	r3, r6, #2
 80084ac:	58eb      	ldr	r3, [r5, r3]
 80084ae:	4798      	blx	r3
 80084b0:	3601      	adds	r6, #1
 80084b2:	e7f2      	b.n	800849a <__libc_init_array+0x1e>
 80084b4:	080086dc 	.word	0x080086dc
 80084b8:	080086dc 	.word	0x080086dc
 80084bc:	080086dc 	.word	0x080086dc
 80084c0:	080086e4 	.word	0x080086e4

080084c4 <memset>:
 80084c4:	0003      	movs	r3, r0
 80084c6:	1882      	adds	r2, r0, r2
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d100      	bne.n	80084ce <memset+0xa>
 80084cc:	4770      	bx	lr
 80084ce:	7019      	strb	r1, [r3, #0]
 80084d0:	3301      	adds	r3, #1
 80084d2:	e7f9      	b.n	80084c8 <memset+0x4>

080084d4 <register_fini>:
 80084d4:	4b03      	ldr	r3, [pc, #12]	; (80084e4 <register_fini+0x10>)
 80084d6:	b510      	push	{r4, lr}
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <register_fini+0xe>
 80084dc:	4802      	ldr	r0, [pc, #8]	; (80084e8 <register_fini+0x14>)
 80084de:	f000 f805 	bl	80084ec <atexit>
 80084e2:	bd10      	pop	{r4, pc}
 80084e4:	00000000 	.word	0x00000000
 80084e8:	080084fd 	.word	0x080084fd

080084ec <atexit>:
 80084ec:	2300      	movs	r3, #0
 80084ee:	b510      	push	{r4, lr}
 80084f0:	0001      	movs	r1, r0
 80084f2:	001a      	movs	r2, r3
 80084f4:	0018      	movs	r0, r3
 80084f6:	f000 f817 	bl	8008528 <__register_exitproc>
 80084fa:	bd10      	pop	{r4, pc}

080084fc <__libc_fini_array>:
 80084fc:	b570      	push	{r4, r5, r6, lr}
 80084fe:	4d07      	ldr	r5, [pc, #28]	; (800851c <__libc_fini_array+0x20>)
 8008500:	4c07      	ldr	r4, [pc, #28]	; (8008520 <__libc_fini_array+0x24>)
 8008502:	1b64      	subs	r4, r4, r5
 8008504:	10a4      	asrs	r4, r4, #2
 8008506:	2c00      	cmp	r4, #0
 8008508:	d102      	bne.n	8008510 <__libc_fini_array+0x14>
 800850a:	f000 f855 	bl	80085b8 <_fini>
 800850e:	bd70      	pop	{r4, r5, r6, pc}
 8008510:	3c01      	subs	r4, #1
 8008512:	00a3      	lsls	r3, r4, #2
 8008514:	58eb      	ldr	r3, [r5, r3]
 8008516:	4798      	blx	r3
 8008518:	e7f5      	b.n	8008506 <__libc_fini_array+0xa>
 800851a:	46c0      	nop			; (mov r8, r8)
 800851c:	080086e4 	.word	0x080086e4
 8008520:	080086e8 	.word	0x080086e8

08008524 <__retarget_lock_acquire_recursive>:
 8008524:	4770      	bx	lr

08008526 <__retarget_lock_release_recursive>:
 8008526:	4770      	bx	lr

08008528 <__register_exitproc>:
 8008528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800852a:	4f1e      	ldr	r7, [pc, #120]	; (80085a4 <__register_exitproc+0x7c>)
 800852c:	0004      	movs	r4, r0
 800852e:	6838      	ldr	r0, [r7, #0]
 8008530:	0016      	movs	r6, r2
 8008532:	9100      	str	r1, [sp, #0]
 8008534:	9301      	str	r3, [sp, #4]
 8008536:	f7ff fff5 	bl	8008524 <__retarget_lock_acquire_recursive>
 800853a:	4b1b      	ldr	r3, [pc, #108]	; (80085a8 <__register_exitproc+0x80>)
 800853c:	6819      	ldr	r1, [r3, #0]
 800853e:	000b      	movs	r3, r1
 8008540:	33fc      	adds	r3, #252	; 0xfc
 8008542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008544:	2a00      	cmp	r2, #0
 8008546:	d103      	bne.n	8008550 <__register_exitproc+0x28>
 8008548:	000a      	movs	r2, r1
 800854a:	324d      	adds	r2, #77	; 0x4d
 800854c:	32ff      	adds	r2, #255	; 0xff
 800854e:	64da      	str	r2, [r3, #76]	; 0x4c
 8008550:	6853      	ldr	r3, [r2, #4]
 8008552:	6838      	ldr	r0, [r7, #0]
 8008554:	2b1f      	cmp	r3, #31
 8008556:	dd04      	ble.n	8008562 <__register_exitproc+0x3a>
 8008558:	f7ff ffe5 	bl	8008526 <__retarget_lock_release_recursive>
 800855c:	2001      	movs	r0, #1
 800855e:	4240      	negs	r0, r0
 8008560:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008562:	2c00      	cmp	r4, #0
 8008564:	d014      	beq.n	8008590 <__register_exitproc+0x68>
 8008566:	0099      	lsls	r1, r3, #2
 8008568:	1851      	adds	r1, r2, r1
 800856a:	000f      	movs	r7, r1
 800856c:	3788      	adds	r7, #136	; 0x88
 800856e:	603e      	str	r6, [r7, #0]
 8008570:	2701      	movs	r7, #1
 8008572:	0016      	movs	r6, r2
 8008574:	409f      	lsls	r7, r3
 8008576:	3685      	adds	r6, #133	; 0x85
 8008578:	36ff      	adds	r6, #255	; 0xff
 800857a:	6875      	ldr	r5, [r6, #4]
 800857c:	31fc      	adds	r1, #252	; 0xfc
 800857e:	433d      	orrs	r5, r7
 8008580:	6075      	str	r5, [r6, #4]
 8008582:	9d01      	ldr	r5, [sp, #4]
 8008584:	60cd      	str	r5, [r1, #12]
 8008586:	2c02      	cmp	r4, #2
 8008588:	d102      	bne.n	8008590 <__register_exitproc+0x68>
 800858a:	68b1      	ldr	r1, [r6, #8]
 800858c:	430f      	orrs	r7, r1
 800858e:	60b7      	str	r7, [r6, #8]
 8008590:	1c59      	adds	r1, r3, #1
 8008592:	6051      	str	r1, [r2, #4]
 8008594:	3302      	adds	r3, #2
 8008596:	9900      	ldr	r1, [sp, #0]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	5099      	str	r1, [r3, r2]
 800859c:	f7ff ffc3 	bl	8008526 <__retarget_lock_release_recursive>
 80085a0:	2000      	movs	r0, #0
 80085a2:	e7dd      	b.n	8008560 <__register_exitproc+0x38>
 80085a4:	20000538 	.word	0x20000538
 80085a8:	080086d0 	.word	0x080086d0

080085ac <_init>:
 80085ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ae:	46c0      	nop			; (mov r8, r8)
 80085b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b2:	bc08      	pop	{r3}
 80085b4:	469e      	mov	lr, r3
 80085b6:	4770      	bx	lr

080085b8 <_fini>:
 80085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ba:	46c0      	nop			; (mov r8, r8)
 80085bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085be:	bc08      	pop	{r3}
 80085c0:	469e      	mov	lr, r3
 80085c2:	4770      	bx	lr
