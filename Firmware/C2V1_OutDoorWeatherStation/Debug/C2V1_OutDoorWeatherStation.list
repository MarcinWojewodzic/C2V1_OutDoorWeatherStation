
C2V1_OutDoorWeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000562c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005770  08005770  000204ac  2**0
                  CONTENTS
  4 .ARM          00000008  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005778  08005778  000204ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005778  08005778  00015778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004ac  20000000  08005784  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200004ac  08005c30  000204ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  20000778  08005c30  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000204ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140df  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003278  00000000  00000000  000345b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00037830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00038820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ebdc  00000000  00000000  00039698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004e25  00000000  00000000  00048274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0004d099  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003864  00000000  00000000  0004d0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200004ac 	.word	0x200004ac
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080056cc 	.word	0x080056cc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200004b0 	.word	0x200004b0
 80000fc:	080056cc 	.word	0x080056cc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_uldivmod>:
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d111      	bne.n	8000414 <__aeabi_uldivmod+0x28>
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	d10f      	bne.n	8000414 <__aeabi_uldivmod+0x28>
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d100      	bne.n	80003fa <__aeabi_uldivmod+0xe>
 80003f8:	2800      	cmp	r0, #0
 80003fa:	d002      	beq.n	8000402 <__aeabi_uldivmod+0x16>
 80003fc:	2100      	movs	r1, #0
 80003fe:	43c9      	mvns	r1, r1
 8000400:	0008      	movs	r0, r1
 8000402:	b407      	push	{r0, r1, r2}
 8000404:	4802      	ldr	r0, [pc, #8]	; (8000410 <__aeabi_uldivmod+0x24>)
 8000406:	a102      	add	r1, pc, #8	; (adr r1, 8000410 <__aeabi_uldivmod+0x24>)
 8000408:	1840      	adds	r0, r0, r1
 800040a:	9002      	str	r0, [sp, #8]
 800040c:	bd03      	pop	{r0, r1, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	ffffffd9 	.word	0xffffffd9
 8000414:	b403      	push	{r0, r1}
 8000416:	4668      	mov	r0, sp
 8000418:	b501      	push	{r0, lr}
 800041a:	9802      	ldr	r0, [sp, #8]
 800041c:	f000 f806 	bl	800042c <__udivmoddi4>
 8000420:	9b01      	ldr	r3, [sp, #4]
 8000422:	469e      	mov	lr, r3
 8000424:	b002      	add	sp, #8
 8000426:	bc0c      	pop	{r2, r3}
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__udivmoddi4>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	4657      	mov	r7, sl
 8000430:	464e      	mov	r6, r9
 8000432:	4645      	mov	r5, r8
 8000434:	46de      	mov	lr, fp
 8000436:	b5e0      	push	{r5, r6, r7, lr}
 8000438:	0004      	movs	r4, r0
 800043a:	000d      	movs	r5, r1
 800043c:	4692      	mov	sl, r2
 800043e:	4699      	mov	r9, r3
 8000440:	b083      	sub	sp, #12
 8000442:	428b      	cmp	r3, r1
 8000444:	d830      	bhi.n	80004a8 <__udivmoddi4+0x7c>
 8000446:	d02d      	beq.n	80004a4 <__udivmoddi4+0x78>
 8000448:	4649      	mov	r1, r9
 800044a:	4650      	mov	r0, sl
 800044c:	f000 f8d8 	bl	8000600 <__clzdi2>
 8000450:	0029      	movs	r1, r5
 8000452:	0006      	movs	r6, r0
 8000454:	0020      	movs	r0, r4
 8000456:	f000 f8d3 	bl	8000600 <__clzdi2>
 800045a:	1a33      	subs	r3, r6, r0
 800045c:	4698      	mov	r8, r3
 800045e:	3b20      	subs	r3, #32
 8000460:	469b      	mov	fp, r3
 8000462:	d433      	bmi.n	80004cc <__udivmoddi4+0xa0>
 8000464:	465a      	mov	r2, fp
 8000466:	4653      	mov	r3, sl
 8000468:	4093      	lsls	r3, r2
 800046a:	4642      	mov	r2, r8
 800046c:	001f      	movs	r7, r3
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001e      	movs	r6, r3
 8000474:	42af      	cmp	r7, r5
 8000476:	d83a      	bhi.n	80004ee <__udivmoddi4+0xc2>
 8000478:	42af      	cmp	r7, r5
 800047a:	d100      	bne.n	800047e <__udivmoddi4+0x52>
 800047c:	e078      	b.n	8000570 <__udivmoddi4+0x144>
 800047e:	465b      	mov	r3, fp
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5e>
 8000488:	e075      	b.n	8000576 <__udivmoddi4+0x14a>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	465a      	mov	r2, fp
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4642      	mov	r2, r8
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e028      	b.n	80004f6 <__udivmoddi4+0xca>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9cf      	bls.n	8000448 <__udivmoddi4+0x1c>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8e>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b003      	add	sp, #12
 80004c0:	bcf0      	pop	{r4, r5, r6, r7}
 80004c2:	46bb      	mov	fp, r7
 80004c4:	46b2      	mov	sl, r6
 80004c6:	46a9      	mov	r9, r5
 80004c8:	46a0      	mov	r8, r4
 80004ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004cc:	4642      	mov	r2, r8
 80004ce:	2320      	movs	r3, #32
 80004d0:	1a9b      	subs	r3, r3, r2
 80004d2:	4652      	mov	r2, sl
 80004d4:	40da      	lsrs	r2, r3
 80004d6:	4641      	mov	r1, r8
 80004d8:	0013      	movs	r3, r2
 80004da:	464a      	mov	r2, r9
 80004dc:	408a      	lsls	r2, r1
 80004de:	0017      	movs	r7, r2
 80004e0:	4642      	mov	r2, r8
 80004e2:	431f      	orrs	r7, r3
 80004e4:	4653      	mov	r3, sl
 80004e6:	4093      	lsls	r3, r2
 80004e8:	001e      	movs	r6, r3
 80004ea:	42af      	cmp	r7, r5
 80004ec:	d9c4      	bls.n	8000478 <__udivmoddi4+0x4c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	4643      	mov	r3, r8
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0d9      	beq.n	80004b0 <__udivmoddi4+0x84>
 80004fc:	07fb      	lsls	r3, r7, #31
 80004fe:	0872      	lsrs	r2, r6, #1
 8000500:	431a      	orrs	r2, r3
 8000502:	4646      	mov	r6, r8
 8000504:	087b      	lsrs	r3, r7, #1
 8000506:	e00e      	b.n	8000526 <__udivmoddi4+0xfa>
 8000508:	42ab      	cmp	r3, r5
 800050a:	d101      	bne.n	8000510 <__udivmoddi4+0xe4>
 800050c:	42a2      	cmp	r2, r4
 800050e:	d80c      	bhi.n	800052a <__udivmoddi4+0xfe>
 8000510:	1aa4      	subs	r4, r4, r2
 8000512:	419d      	sbcs	r5, r3
 8000514:	2001      	movs	r0, #1
 8000516:	1924      	adds	r4, r4, r4
 8000518:	416d      	adcs	r5, r5
 800051a:	2100      	movs	r1, #0
 800051c:	3e01      	subs	r6, #1
 800051e:	1824      	adds	r4, r4, r0
 8000520:	414d      	adcs	r5, r1
 8000522:	2e00      	cmp	r6, #0
 8000524:	d006      	beq.n	8000534 <__udivmoddi4+0x108>
 8000526:	42ab      	cmp	r3, r5
 8000528:	d9ee      	bls.n	8000508 <__udivmoddi4+0xdc>
 800052a:	3e01      	subs	r6, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2e00      	cmp	r6, #0
 8000532:	d1f8      	bne.n	8000526 <__udivmoddi4+0xfa>
 8000534:	9800      	ldr	r0, [sp, #0]
 8000536:	9901      	ldr	r1, [sp, #4]
 8000538:	465b      	mov	r3, fp
 800053a:	1900      	adds	r0, r0, r4
 800053c:	4169      	adcs	r1, r5
 800053e:	2b00      	cmp	r3, #0
 8000540:	db24      	blt.n	800058c <__udivmoddi4+0x160>
 8000542:	002b      	movs	r3, r5
 8000544:	465a      	mov	r2, fp
 8000546:	4644      	mov	r4, r8
 8000548:	40d3      	lsrs	r3, r2
 800054a:	002a      	movs	r2, r5
 800054c:	40e2      	lsrs	r2, r4
 800054e:	001c      	movs	r4, r3
 8000550:	465b      	mov	r3, fp
 8000552:	0015      	movs	r5, r2
 8000554:	2b00      	cmp	r3, #0
 8000556:	db2a      	blt.n	80005ae <__udivmoddi4+0x182>
 8000558:	0026      	movs	r6, r4
 800055a:	409e      	lsls	r6, r3
 800055c:	0033      	movs	r3, r6
 800055e:	0026      	movs	r6, r4
 8000560:	4647      	mov	r7, r8
 8000562:	40be      	lsls	r6, r7
 8000564:	0032      	movs	r2, r6
 8000566:	1a80      	subs	r0, r0, r2
 8000568:	4199      	sbcs	r1, r3
 800056a:	9000      	str	r0, [sp, #0]
 800056c:	9101      	str	r1, [sp, #4]
 800056e:	e79f      	b.n	80004b0 <__udivmoddi4+0x84>
 8000570:	42a3      	cmp	r3, r4
 8000572:	d8bc      	bhi.n	80004ee <__udivmoddi4+0xc2>
 8000574:	e783      	b.n	800047e <__udivmoddi4+0x52>
 8000576:	4642      	mov	r2, r8
 8000578:	2320      	movs	r3, #32
 800057a:	2100      	movs	r1, #0
 800057c:	1a9b      	subs	r3, r3, r2
 800057e:	2200      	movs	r2, #0
 8000580:	9100      	str	r1, [sp, #0]
 8000582:	9201      	str	r2, [sp, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	40da      	lsrs	r2, r3
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	e786      	b.n	800049a <__udivmoddi4+0x6e>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	002a      	movs	r2, r5
 8000594:	4646      	mov	r6, r8
 8000596:	409a      	lsls	r2, r3
 8000598:	0023      	movs	r3, r4
 800059a:	40f3      	lsrs	r3, r6
 800059c:	4644      	mov	r4, r8
 800059e:	4313      	orrs	r3, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	40e2      	lsrs	r2, r4
 80005a4:	001c      	movs	r4, r3
 80005a6:	465b      	mov	r3, fp
 80005a8:	0015      	movs	r5, r2
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	dad4      	bge.n	8000558 <__udivmoddi4+0x12c>
 80005ae:	4642      	mov	r2, r8
 80005b0:	002f      	movs	r7, r5
 80005b2:	2320      	movs	r3, #32
 80005b4:	0026      	movs	r6, r4
 80005b6:	4097      	lsls	r7, r2
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	40de      	lsrs	r6, r3
 80005bc:	003b      	movs	r3, r7
 80005be:	4333      	orrs	r3, r6
 80005c0:	e7cd      	b.n	800055e <__udivmoddi4+0x132>
 80005c2:	46c0      	nop			; (mov r8, r8)

080005c4 <__clzsi2>:
 80005c4:	211c      	movs	r1, #28
 80005c6:	2301      	movs	r3, #1
 80005c8:	041b      	lsls	r3, r3, #16
 80005ca:	4298      	cmp	r0, r3
 80005cc:	d301      	bcc.n	80005d2 <__clzsi2+0xe>
 80005ce:	0c00      	lsrs	r0, r0, #16
 80005d0:	3910      	subs	r1, #16
 80005d2:	0a1b      	lsrs	r3, r3, #8
 80005d4:	4298      	cmp	r0, r3
 80005d6:	d301      	bcc.n	80005dc <__clzsi2+0x18>
 80005d8:	0a00      	lsrs	r0, r0, #8
 80005da:	3908      	subs	r1, #8
 80005dc:	091b      	lsrs	r3, r3, #4
 80005de:	4298      	cmp	r0, r3
 80005e0:	d301      	bcc.n	80005e6 <__clzsi2+0x22>
 80005e2:	0900      	lsrs	r0, r0, #4
 80005e4:	3904      	subs	r1, #4
 80005e6:	a202      	add	r2, pc, #8	; (adr r2, 80005f0 <__clzsi2+0x2c>)
 80005e8:	5c10      	ldrb	r0, [r2, r0]
 80005ea:	1840      	adds	r0, r0, r1
 80005ec:	4770      	bx	lr
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	02020304 	.word	0x02020304
 80005f4:	01010101 	.word	0x01010101
	...

08000600 <__clzdi2>:
 8000600:	b510      	push	{r4, lr}
 8000602:	2900      	cmp	r1, #0
 8000604:	d103      	bne.n	800060e <__clzdi2+0xe>
 8000606:	f7ff ffdd 	bl	80005c4 <__clzsi2>
 800060a:	3020      	adds	r0, #32
 800060c:	e002      	b.n	8000614 <__clzdi2+0x14>
 800060e:	0008      	movs	r0, r1
 8000610:	f7ff ffd8 	bl	80005c4 <__clzsi2>
 8000614:	bd10      	pop	{r4, pc}
 8000616:	46c0      	nop			; (mov r8, r8)

08000618 <HC12_ExitCommandMode>:
void HC12_EnterCommandMode(void)
{
	HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 0);
}
void HC12_ExitCommandMode(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 1);
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	0119      	lsls	r1, r3, #4
 8000620:	23a0      	movs	r3, #160	; 0xa0
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	2201      	movs	r2, #1
 8000626:	0018      	movs	r0, r3
 8000628:	f002 fb24 	bl	8002c74 <HAL_GPIO_WritePin>
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <HC12_TransmitData>:
void HC12_TransmitData(uint8_t* Data, uint32_t Length)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, Data, Length, 1000);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	b29a      	uxth	r2, r3
 8000642:	23fa      	movs	r3, #250	; 0xfa
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <HC12_TransmitData+0x24>)
 800064a:	f003 fb5d 	bl	8003d08 <HAL_UART_Transmit>
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	20000680 	.word	0x20000680

0800065c <HC12_ReciveToIdleDMA>:
void HC12_ReciveToIdleDMA(uint8_t *Data, uint32_t Length)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	b29a      	uxth	r2, r3
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <HC12_ReciveToIdleDMA+0x20>)
 800066e:	0018      	movs	r0, r3
 8000670:	f004 fece 	bl	8005410 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b002      	add	sp, #8
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000680 	.word	0x20000680

08000680 <SM_Handle>:
SMTransitionTable_TypeDef SmTransitionTable[] = { { SM_STATE_INITIALIZE, SM_STATE_RUNNING, SM_EVENT_END_INITIALIZE },
                                                  { SM_STATE_RUNNING, SM_STATE_SLEEP, SM_EVENT_END_RUNNING },
                                                  { SM_STATE_SLEEP, SM_STATE_RUNNING, SM_EVENT_END_SLEEP } };
SMFunctions_TypeDef SmFunctions[]             = { { SM_InitializeFunction }, { SM_RunningFunction }, { SM_SleepFunction } };
void SM_Handle(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
   if(Rfp.Initialize == RFP_INITIALIZE)
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SM_Handle+0x58>)
 8000686:	78db      	ldrb	r3, [r3, #3]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d101      	bne.n	8000690 <SM_Handle+0x10>
   {
      RFP_Handle();
 800068c:	f000 fc94 	bl	8000fb8 <RFP_Handle>
   }
   if(HAL_GetTick() - Sm.LastTick > 1000)
 8000690:	f001 f908 	bl	80018a4 <HAL_GetTick>
 8000694:	0002      	movs	r2, r0
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SM_Handle+0x5c>)
 8000698:	691b      	ldr	r3, [r3, #16]
 800069a:	1ad2      	subs	r2, r2, r3
 800069c:	23fa      	movs	r3, #250	; 0xfa
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d915      	bls.n	80006d0 <SM_Handle+0x50>
   {
      Sm.LastTick = HAL_GetTick();
 80006a4:	f001 f8fe 	bl	80018a4 <HAL_GetTick>
 80006a8:	0002      	movs	r2, r0
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <SM_Handle+0x5c>)
 80006ac:	611a      	str	r2, [r3, #16]
      SM_ChangeState();
 80006ae:	f000 f819 	bl	80006e4 <SM_ChangeState>
      if(SmFunctions[Sm.State].SmFunction != NULL)
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <SM_Handle+0x5c>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	001a      	movs	r2, r3
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <SM_Handle+0x60>)
 80006ba:	0092      	lsls	r2, r2, #2
 80006bc:	58d3      	ldr	r3, [r2, r3]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d006      	beq.n	80006d0 <SM_Handle+0x50>
      {
         SmFunctions[Sm.State].SmFunction();
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <SM_Handle+0x5c>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	001a      	movs	r2, r3
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <SM_Handle+0x60>)
 80006ca:	0092      	lsls	r2, r2, #2
 80006cc:	58d3      	ldr	r3, [r2, r3]
 80006ce:	4798      	blx	r3
      }
   }
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	200004e8 	.word	0x200004e8
 80006dc:	200004c8 	.word	0x200004c8
 80006e0:	2000000c 	.word	0x2000000c

080006e4 <SM_ChangeState>:
static void SM_ChangeState(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
   for(int i = 0; i < SM_TRANSITION_TABLE_SIZE; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	e022      	b.n	8000736 <SM_ChangeState+0x52>
   {
      if(Sm.State == SmTransitionTable[i].Source && Sm.NewEvent == SmTransitionTable[i].Event)
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <SM_ChangeState+0x68>)
 80006f2:	7819      	ldrb	r1, [r3, #0]
 80006f4:	4816      	ldr	r0, [pc, #88]	; (8000750 <SM_ChangeState+0x6c>)
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	0013      	movs	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	189b      	adds	r3, r3, r2
 80006fe:	5c1b      	ldrb	r3, [r3, r0]
 8000700:	4299      	cmp	r1, r3
 8000702:	d115      	bne.n	8000730 <SM_ChangeState+0x4c>
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <SM_ChangeState+0x68>)
 8000706:	7859      	ldrb	r1, [r3, #1]
 8000708:	4811      	ldr	r0, [pc, #68]	; (8000750 <SM_ChangeState+0x6c>)
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	0013      	movs	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	189b      	adds	r3, r3, r2
 8000712:	18c3      	adds	r3, r0, r3
 8000714:	3302      	adds	r3, #2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4299      	cmp	r1, r3
 800071a:	d109      	bne.n	8000730 <SM_ChangeState+0x4c>
      {
         Sm.State = SmTransitionTable[i].Destination;
 800071c:	490c      	ldr	r1, [pc, #48]	; (8000750 <SM_ChangeState+0x6c>)
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	0013      	movs	r3, r2
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	189b      	adds	r3, r3, r2
 8000726:	18cb      	adds	r3, r1, r3
 8000728:	3301      	adds	r3, #1
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <SM_ChangeState+0x68>)
 800072e:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < SM_TRANSITION_TABLE_SIZE; i++)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b02      	cmp	r3, #2
 800073a:	d9d9      	bls.n	80006f0 <SM_ChangeState+0xc>
      }
   }
   Sm.NewEvent = SM_EVENT_NOTHING;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <SM_ChangeState+0x68>)
 800073e:	2200      	movs	r2, #0
 8000740:	705a      	strb	r2, [r3, #1]
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b002      	add	sp, #8
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	200004c8 	.word	0x200004c8
 8000750:	20000000 	.word	0x20000000

08000754 <SM_InitializeFunction>:
static void SM_InitializeFunction(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
   // Sm.Bs       = DATA_GetBsPtr();
   Sm.Sw  = &Sw;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SM_InitializeFunction+0x44>)
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <SM_InitializeFunction+0x48>)
 800075c:	609a      	str	r2, [r3, #8]
   Sm.Rfp = &Rfp;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <SM_InitializeFunction+0x44>)
 8000760:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <SM_InitializeFunction+0x4c>)
 8000762:	60da      	str	r2, [r3, #12]
   SW_Init(&Sw);
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <SM_InitializeFunction+0x48>)
 8000766:	0018      	movs	r0, r3
 8000768:	f000 f910 	bl	800098c <SW_Init>
   RFP_Init(&Rfp, RFP_ODWS);
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <SM_InitializeFunction+0x4c>)
 800076e:	2102      	movs	r1, #2
 8000770:	0018      	movs	r0, r3
 8000772:	f000 fc3d 	bl	8000ff0 <RFP_Init>
   RFP_RegisterCommandFunction(RFP_TEST, SM_CommadTestFunction);
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <SM_InitializeFunction+0x50>)
 8000778:	0019      	movs	r1, r3
 800077a:	2001      	movs	r0, #1
 800077c:	f000 fcb6 	bl	80010ec <RFP_RegisterCommandFunction>
   Sw.NewEvent = SW_EVENT_NOTHING;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <SM_InitializeFunction+0x48>)
 8000782:	2201      	movs	r2, #1
 8000784:	705a      	strb	r2, [r3, #1]
   Sw.State    = SW_STATE_INITIALIZE;
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <SM_InitializeFunction+0x48>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
   Sm.NewEvent = SM_EVENT_END_INITIALIZE;
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <SM_InitializeFunction+0x44>)
 800078e:	2201      	movs	r2, #1
 8000790:	705a      	strb	r2, [r3, #1]
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200004c8 	.word	0x200004c8
 800079c:	200004dc 	.word	0x200004dc
 80007a0:	200004e8 	.word	0x200004e8
 80007a4:	080007d5 	.word	0x080007d5

080007a8 <SM_RunningFunction>:
static void SM_RunningFunction(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
   Switch_Handle();
 80007ac:	f000 f83e 	bl	800082c <Switch_Handle>
   Sm.NewEvent = SM_EVENT_END_RUNNING;
 80007b0:	4b02      	ldr	r3, [pc, #8]	; (80007bc <SM_RunningFunction+0x14>)
 80007b2:	2202      	movs	r2, #2
 80007b4:	705a      	strb	r2, [r3, #1]
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200004c8 	.word	0x200004c8

080007c0 <SM_SleepFunction>:
static void SM_SleepFunction(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
   Sm.NewEvent = SM_EVENT_END_SLEEP;
 80007c4:	4b02      	ldr	r3, [pc, #8]	; (80007d0 <SM_SleepFunction+0x10>)
 80007c6:	2203      	movs	r2, #3
 80007c8:	705a      	strb	r2, [r3, #1]
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200004c8 	.word	0x200004c8

080007d4 <SM_CommadTestFunction>:
void SM_CommadTestFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
   HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <SM_CommadTestFunction+0x20>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	2102      	movs	r1, #2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f002 fa44 	bl	8002c74 <HAL_GPIO_WritePin>
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b004      	add	sp, #16
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	50000400 	.word	0x50000400

080007f8 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	000a      	movs	r2, r1
 8000802:	1cbb      	adds	r3, r7, #2
 8000804:	801a      	strh	r2, [r3, #0]
   HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000806:	23a0      	movs	r3, #160	; 0xa0
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2201      	movs	r2, #1
 800080c:	2140      	movs	r1, #64	; 0x40
 800080e:	0018      	movs	r0, r3
 8000810:	f002 fa30 	bl	8002c74 <HAL_GPIO_WritePin>
   Rfp.DataSize = Size;
 8000814:	1cbb      	adds	r3, r7, #2
 8000816:	881a      	ldrh	r2, [r3, #0]
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <HAL_UARTEx_RxEventCallback+0x30>)
 800081a:	609a      	str	r2, [r3, #8]
   RFP_InterruptTask();
 800081c:	f000 fc7a 	bl	8001114 <RFP_InterruptTask>
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b002      	add	sp, #8
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200004e8 	.word	0x200004e8

0800082c <Switch_Handle>:
                                                  { SW_STATE_CONFIRM, SW_STATE_RELEASE, SW_EVENT_RELEASE },
                                                  { SW_STATE_RELEASE, SW_STATE_IDLE, SW_EVENT_NOTHING } };
SWFunctions_TypeDef SwFunctions[]             = { { SW_InitializeFunction }, { SW_IdleFunction },    { SW_DebounceFunction }, { SW_TickFunction },
                                                  { SW_PressFunction },      { SW_ConfirmFunction }, { SW_ReleaseFunction } };
void Switch_Handle(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
   SW_ChangeState();
 8000830:	f000 f818 	bl	8000864 <SW_ChangeState>
   if(SwFunctions[Sw->State].SwFunction != NULL)
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <Switch_Handle+0x30>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	001a      	movs	r2, r3
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <Switch_Handle+0x34>)
 800083e:	0092      	lsls	r2, r2, #2
 8000840:	58d3      	ldr	r3, [r2, r3]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d007      	beq.n	8000856 <Switch_Handle+0x2a>
   {
      SwFunctions[Sw->State].SwFunction();
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <Switch_Handle+0x30>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	001a      	movs	r2, r3
 800084e:	4b04      	ldr	r3, [pc, #16]	; (8000860 <Switch_Handle+0x34>)
 8000850:	0092      	lsls	r2, r2, #2
 8000852:	58d3      	ldr	r3, [r2, r3]
 8000854:	4798      	blx	r3
   }
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200004f8 	.word	0x200004f8
 8000860:	20000030 	.word	0x20000030

08000864 <SW_ChangeState>:
static void SW_ChangeState(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
   for(int i = 0; i < SW_TRANSITION_TABLE_SIZE; i++)
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	e02a      	b.n	80008c6 <SW_ChangeState+0x62>
   {
      if(Sw->State == SwTransitionTable[i].Source && Sw->NewEvent == SwTransitionTable[i].Event)
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <SW_ChangeState+0x78>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	7819      	ldrb	r1, [r3, #0]
 8000876:	481a      	ldr	r0, [pc, #104]	; (80008e0 <SW_ChangeState+0x7c>)
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	0013      	movs	r3, r2
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	189b      	adds	r3, r3, r2
 8000880:	5c1b      	ldrb	r3, [r3, r0]
 8000882:	4299      	cmp	r1, r3
 8000884:	d11c      	bne.n	80008c0 <SW_ChangeState+0x5c>
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <SW_ChangeState+0x78>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	7859      	ldrb	r1, [r3, #1]
 800088c:	4814      	ldr	r0, [pc, #80]	; (80008e0 <SW_ChangeState+0x7c>)
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	0013      	movs	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	189b      	adds	r3, r3, r2
 8000896:	18c3      	adds	r3, r0, r3
 8000898:	3302      	adds	r3, #2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4299      	cmp	r1, r3
 800089e:	d10f      	bne.n	80008c0 <SW_ChangeState+0x5c>
      {
         Sw->State = SwTransitionTable[i].Destination;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <SW_ChangeState+0x78>)
 80008a2:	6819      	ldr	r1, [r3, #0]
 80008a4:	480e      	ldr	r0, [pc, #56]	; (80008e0 <SW_ChangeState+0x7c>)
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	0013      	movs	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	189b      	adds	r3, r3, r2
 80008ae:	18c3      	adds	r3, r0, r3
 80008b0:	3301      	adds	r3, #1
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	700b      	strb	r3, [r1, #0]
         Sw->NewEvent = SW_EVENT_NOTHING;
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <SW_ChangeState+0x78>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2201      	movs	r2, #1
 80008bc:	705a      	strb	r2, [r3, #1]
         return;
 80008be:	e009      	b.n	80008d4 <SW_ChangeState+0x70>
   for(int i = 0; i < SW_TRANSITION_TABLE_SIZE; i++)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b07      	cmp	r3, #7
 80008ca:	d9d1      	bls.n	8000870 <SW_ChangeState+0xc>
      }
   }
   Sw->NewEvent = SW_EVENT_NOTHING;
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <SW_ChangeState+0x78>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2201      	movs	r2, #1
 80008d2:	705a      	strb	r2, [r3, #1]
}
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	200004f8 	.word	0x200004f8
 80008e0:	20000018 	.word	0x20000018

080008e4 <SW_InitializeFunction>:
static void SW_InitializeFunction(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_END_INITIALIZE;
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <SW_InitializeFunction+0x14>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2200      	movs	r2, #0
 80008ee:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	200004f8 	.word	0x200004f8

080008fc <SW_IdleFunction>:
static void SW_IdleFunction(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_DEBOUNCE;
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <SW_IdleFunction+0x14>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2202      	movs	r2, #2
 8000906:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	200004f8 	.word	0x200004f8

08000914 <SW_DebounceFunction>:
static void SW_DebounceFunction(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_PRESS;
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <SW_DebounceFunction+0x14>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2203      	movs	r2, #3
 800091e:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	200004f8 	.word	0x200004f8

0800092c <SW_TickFunction>:
static void SW_TickFunction(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_RELEASE;
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <SW_TickFunction+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2204      	movs	r2, #4
 8000936:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	200004f8 	.word	0x200004f8

08000944 <SW_PressFunction>:
static void SW_PressFunction(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_CONFIRM;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <SW_PressFunction+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2205      	movs	r2, #5
 800094e:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	200004f8 	.word	0x200004f8

0800095c <SW_ConfirmFunction>:
static void SW_ConfirmFunction(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_RELEASE;
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <SW_ConfirmFunction+0x14>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2204      	movs	r2, #4
 8000966:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	200004f8 	.word	0x200004f8

08000974 <SW_ReleaseFunction>:
static void SW_ReleaseFunction(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
   //HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
   //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
   Sw->NewEvent = SW_EVENT_NOTHING;
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <SW_ReleaseFunction+0x14>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2201      	movs	r2, #1
 800097e:	705a      	strb	r2, [r3, #1]
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	200004f8 	.word	0x200004f8

0800098c <SW_Init>:
void SW_Init(SW_TypeDef *Switch)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
   Sw = Switch;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <SW_Init+0x18>)
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	601a      	str	r2, [r3, #0]
}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	200004f8 	.word	0x200004f8

080009a8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	0018      	movs	r0, r3
 80009b2:	230c      	movs	r3, #12
 80009b4:	001a      	movs	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	f004 fe14 	bl	80055e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009bc:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <MX_ADC1_Init+0xcc>)
 80009be:	4a2e      	ldr	r2, [pc, #184]	; (8000a78 <MX_ADC1_Init+0xd0>)
 80009c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009c2:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <MX_ADC1_Init+0xcc>)
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	05d2      	lsls	r2, r2, #23
 80009c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ca:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <MX_ADC1_Init+0xcc>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d0:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <MX_ADC1_Init+0xcc>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009d6:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <MX_ADC1_Init+0xcc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009dc:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <MX_ADC1_Init+0xcc>)
 80009de:	2204      	movs	r2, #4
 80009e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009e2:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <MX_ADC1_Init+0xcc>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <MX_ADC1_Init+0xcc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <MX_ADC1_Init+0xcc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_ADC1_Init+0xcc>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <MX_ADC1_Init+0xcc>)
 80009fc:	2220      	movs	r2, #32
 80009fe:	2100      	movs	r1, #0
 8000a00:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_ADC1_Init+0xcc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_ADC1_Init+0xcc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_ADC1_Init+0xcc>)
 8000a10:	222c      	movs	r2, #44	; 0x2c
 8000a12:	2100      	movs	r1, #0
 8000a14:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_ADC1_Init+0xcc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_ADC1_Init+0xcc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_ADC1_Init+0xcc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_ADC1_Init+0xcc>)
 8000a2a:	223c      	movs	r2, #60	; 0x3c
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_ADC1_Init+0xcc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_ADC1_Init+0xcc>)
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f001 f83b 	bl	8001ab4 <HAL_ADC_Init>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000a42:	f000 fab3 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <MX_ADC1_Init+0xd4>)
 8000a4a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a58:	1d3a      	adds	r2, r7, #4
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_ADC1_Init+0xcc>)
 8000a5c:	0011      	movs	r1, r2
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 f9d0 	bl	8001e04 <HAL_ADC_ConfigChannel>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000a68:	f000 faa0 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b004      	add	sp, #16
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200004fc 	.word	0x200004fc
 8000a78:	40012400 	.word	0x40012400
 8000a7c:	20000100 	.word	0x20000100

08000a80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b08b      	sub	sp, #44	; 0x2c
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	2414      	movs	r4, #20
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	2314      	movs	r3, #20
 8000a90:	001a      	movs	r2, r3
 8000a92:	2100      	movs	r1, #0
 8000a94:	f004 fda6 	bl	80055e4 <memset>
  if(adcHandle->Instance==ADC1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a17      	ldr	r2, [pc, #92]	; (8000afc <HAL_ADC_MspInit+0x7c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d128      	bne.n	8000af4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <HAL_ADC_MspInit+0x80>)
 8000aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_ADC_MspInit+0x80>)
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	0349      	lsls	r1, r1, #13
 8000aac:	430a      	orrs	r2, r1
 8000aae:	641a      	str	r2, [r3, #64]	; 0x40
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <HAL_ADC_MspInit+0x80>)
 8000ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	035b      	lsls	r3, r3, #13
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_ADC_MspInit+0x80>)
 8000ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_ADC_MspInit+0x80>)
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_ADC_MspInit+0x80>)
 8000acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ace:	2202      	movs	r2, #2
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	2201      	movs	r2, #1
 8000ada:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	2203      	movs	r2, #3
 8000ae0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <HAL_ADC_MspInit+0x84>)
 8000aec:	0019      	movs	r1, r3
 8000aee:	0010      	movs	r0, r2
 8000af0:	f001 ff5c 	bl	80029ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b00b      	add	sp, #44	; 0x2c
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	40012400 	.word	0x40012400
 8000b00:	40021000 	.word	0x40021000
 8000b04:	50000400 	.word	0x50000400

08000b08 <Crc>:
 *      Author: M
 */
#include "crc.h"
#include "main.h"
uint32_t Crc(uint32_t PreviousCRC, uint32_t DataLength, uint8_t *data)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
   PreviousCRC ^= data[0];
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	001a      	movs	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4053      	eors	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8000b20:	2301      	movs	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	e018      	b.n	8000b58 <Crc+0x50>
   {
      uint32_t temp = data[i];
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	18d3      	adds	r3, r2, r3
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	613b      	str	r3, [r7, #16]
      PreviousCRC ^= ((uint32_t)temp * (256 * i));
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4353      	muls	r3, r2
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	4053      	eors	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
      if(PreviousCRC & 0x80000000)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	da03      	bge.n	8000b4c <Crc+0x44>
      {
         PreviousCRC ^= 0xABC245C2;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <Crc+0x64>)
 8000b48:	4053      	eors	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
      }
      PreviousCRC <<= 1;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3301      	adds	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d3e2      	bcc.n	8000b26 <Crc+0x1e>
   }
   return PreviousCRC;
 8000b60:	68fb      	ldr	r3, [r7, #12]
}
 8000b62:	0018      	movs	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b006      	add	sp, #24
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	abc245c2 	.word	0xabc245c2

08000b70 <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
   uint8_t temp = 1;
 8000b7c:	2317      	movs	r3, #23
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < DataLength; i++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
 8000b88:	e03e      	b.n	8000c08 <RepareMessage+0x98>
   {
      for(int j = 0; j < 8; j++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
 8000b8e:	e035      	b.n	8000bfc <RepareMessage+0x8c>
      {
         data[i] ^= (temp << j);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	18d3      	adds	r3, r2, r3
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b25a      	sxtb	r2, r3
 8000b9a:	2317      	movs	r3, #23
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	7819      	ldrb	r1, [r3, #0]
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	4099      	lsls	r1, r3
 8000ba4:	000b      	movs	r3, r1
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	4053      	eors	r3, r2
 8000baa:	b259      	sxtb	r1, r3
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	18d3      	adds	r3, r2, r3
 8000bb2:	b2ca      	uxtb	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength, data))
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	2301      	movs	r3, #1
 8000bbc:	425b      	negs	r3, r3
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff ffa2 	bl	8000b08 <Crc>
 8000bc4:	0002      	movs	r2, r0
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d101      	bne.n	8000bd0 <RepareMessage+0x60>
         {
            return CRC_OK;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e020      	b.n	8000c12 <RepareMessage+0xa2>
         }
         else
         {
            data[i] ^= (temp << j);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	18d3      	adds	r3, r2, r3
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b25a      	sxtb	r2, r3
 8000bda:	2317      	movs	r3, #23
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	7819      	ldrb	r1, [r3, #0]
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	4099      	lsls	r1, r3
 8000be4:	000b      	movs	r3, r1
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	4053      	eors	r3, r2
 8000bea:	b259      	sxtb	r1, r3
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	18d3      	adds	r3, r2, r3
 8000bf2:	b2ca      	uxtb	r2, r1
 8000bf4:	701a      	strb	r2, [r3, #0]
      for(int j = 0; j < 8; j++)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	2b07      	cmp	r3, #7
 8000c00:	ddc6      	ble.n	8000b90 <RepareMessage+0x20>
   for(int i = 0; i < DataLength; i++)
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3301      	adds	r3, #1
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d8bc      	bhi.n	8000b8a <RepareMessage+0x1a>
         }
      }
   }
   return CRC_ERROR;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	0018      	movs	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b008      	add	sp, #32
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_DMA_Init+0x28>)
 8000c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <MX_DMA_Init+0x28>)
 8000c28:	2101      	movs	r1, #1
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <MX_DMA_Init+0x28>)
 8000c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c32:	2201      	movs	r2, #1
 8000c34:	4013      	ands	r3, r2
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b002      	add	sp, #8
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	40021000 	.word	0x40021000

08000c48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	240c      	movs	r4, #12
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	0018      	movs	r0, r3
 8000c54:	2314      	movs	r3, #20
 8000c56:	001a      	movs	r2, r3
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f004 fcc3 	bl	80055e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	4b44      	ldr	r3, [pc, #272]	; (8000d70 <MX_GPIO_Init+0x128>)
 8000c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c62:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <MX_GPIO_Init+0x128>)
 8000c64:	2102      	movs	r1, #2
 8000c66:	430a      	orrs	r2, r1
 8000c68:	635a      	str	r2, [r3, #52]	; 0x34
 8000c6a:	4b41      	ldr	r3, [pc, #260]	; (8000d70 <MX_GPIO_Init+0x128>)
 8000c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6e:	2202      	movs	r2, #2
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b3e      	ldr	r3, [pc, #248]	; (8000d70 <MX_GPIO_Init+0x128>)
 8000c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <MX_GPIO_Init+0x128>)
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	635a      	str	r2, [r3, #52]	; 0x34
 8000c82:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <MX_GPIO_Init+0x128>)
 8000c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c86:	2201      	movs	r2, #1
 8000c88:	4013      	ands	r3, r2
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAX485_SEL_Pin|LED3_Pin|LED1_Pin|LED2_Pin
 8000c8e:	4939      	ldr	r1, [pc, #228]	; (8000d74 <MX_GPIO_Init+0x12c>)
 8000c90:	23a0      	movs	r3, #160	; 0xa0
 8000c92:	05db      	lsls	r3, r3, #23
 8000c94:	2200      	movs	r2, #0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f001 ffec 	bl	8002c74 <HAL_GPIO_WritePin>
                          |DS18B20_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|PMS_RST_Pin|PMS_SET_Pin, GPIO_PIN_RESET);
 8000c9c:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <MX_GPIO_Init+0x130>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	211a      	movs	r1, #26
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 ffe6 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, GPIO_PIN_SET);
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	0119      	lsls	r1, r3, #4
 8000cac:	23a0      	movs	r3, #160	; 0xa0
 8000cae:	05db      	lsls	r3, r3, #23
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f001 ffde 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COVERTER_PG_Pin;
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	2280      	movs	r2, #128	; 0x80
 8000cbc:	0092      	lsls	r2, r2, #2
 8000cbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(COVERTER_PG_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	4a2a      	ldr	r2, [pc, #168]	; (8000d78 <MX_GPIO_Init+0x130>)
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	0010      	movs	r0, r2
 8000cd4:	f001 fe6a 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BATTERY_CHRG_Pin|BATTERY_STDBY_Pin;
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	2203      	movs	r2, #3
 8000cdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	193a      	adds	r2, r7, r4
 8000cec:	23a0      	movs	r3, #160	; 0xa0
 8000cee:	05db      	lsls	r3, r3, #23
 8000cf0:	0011      	movs	r1, r2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f001 fe5a 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = MAX485_SEL_Pin|LED3_Pin|LED1_Pin|LED2_Pin
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	4a20      	ldr	r2, [pc, #128]	; (8000d7c <MX_GPIO_Init+0x134>)
 8000cfc:	601a      	str	r2, [r3, #0]
                          |HC12_SET_Pin|DS18B20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	2201      	movs	r2, #1
 8000d02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	193a      	adds	r2, r7, r4
 8000d12:	23a0      	movs	r3, #160	; 0xa0
 8000d14:	05db      	lsls	r3, r3, #23
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f001 fe47 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|PMS_RST_Pin|PMS_SET_Pin;
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	221a      	movs	r2, #26
 8000d22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	2201      	movs	r2, #1
 8000d28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	193b      	adds	r3, r7, r4
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <MX_GPIO_Init+0x130>)
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	0010      	movs	r0, r2
 8000d3e:	f001 fe35 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8000d42:	0021      	movs	r1, r4
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	0052      	lsls	r2, r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2284      	movs	r2, #132	; 0x84
 8000d50:	0392      	lsls	r2, r2, #14
 8000d52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	187a      	adds	r2, r7, r1
 8000d5c:	23a0      	movs	r3, #160	; 0xa0
 8000d5e:	05db      	lsls	r3, r3, #23
 8000d60:	0011      	movs	r1, r2
 8000d62:	0018      	movs	r0, r3
 8000d64:	f001 fe22 	bl	80029ac <HAL_GPIO_Init>

}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b009      	add	sp, #36	; 0x24
 8000d6e:	bd90      	pop	{r4, r7, pc}
 8000d70:	40021000 	.word	0x40021000
 8000d74:	000010f0 	.word	0x000010f0
 8000d78:	50000400 	.word	0x50000400
 8000d7c:	000018f0 	.word	0x000018f0

08000d80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <MX_I2C1_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <MX_I2C1_Init+0x7c>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f001 ff77 	bl	8002cb0 <HAL_I2C_Init>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dc6:	f000 f8f1 	bl	8000fac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f002 f804 	bl	8002ddc <HAL_I2CEx_ConfigAnalogFilter>
 8000dd4:	1e03      	subs	r3, r0, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd8:	f000 f8e8 	bl	8000fac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000dde:	2100      	movs	r1, #0
 8000de0:	0018      	movs	r0, r3
 8000de2:	f002 f847 	bl	8002e74 <HAL_I2CEx_ConfigDigitalFilter>
 8000de6:	1e03      	subs	r3, r0, #0
 8000de8:	d001      	beq.n	8000dee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 f8df 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000560 	.word	0x20000560
 8000df8:	40005400 	.word	0x40005400
 8000dfc:	00303d5b 	.word	0x00303d5b

08000e00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b095      	sub	sp, #84	; 0x54
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	233c      	movs	r3, #60	; 0x3c
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	2314      	movs	r3, #20
 8000e10:	001a      	movs	r2, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	f004 fbe6 	bl	80055e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e18:	2410      	movs	r4, #16
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	232c      	movs	r3, #44	; 0x2c
 8000e20:	001a      	movs	r2, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	f004 fbde 	bl	80055e4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <HAL_I2C_MspInit+0xb8>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d13d      	bne.n	8000eae <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2220      	movs	r2, #32
 8000e36:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	0018      	movs	r0, r3
 8000e42:	f002 fd73 	bl	800392c <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e4a:	f000 f8af 	bl	8000fac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <HAL_I2C_MspInit+0xbc>)
 8000e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_I2C_MspInit+0xbc>)
 8000e54:	2102      	movs	r1, #2
 8000e56:	430a      	orrs	r2, r1
 8000e58:	635a      	str	r2, [r3, #52]	; 0x34
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_I2C_MspInit+0xbc>)
 8000e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5e:	2202      	movs	r2, #2
 8000e60:	4013      	ands	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e66:	213c      	movs	r1, #60	; 0x3c
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	22c0      	movs	r2, #192	; 0xc0
 8000e6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2212      	movs	r2, #18
 8000e72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2206      	movs	r2, #6
 8000e84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_I2C_MspInit+0xc0>)
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	0010      	movs	r0, r2
 8000e8e:	f001 fd8d 	bl	80029ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_I2C_MspInit+0xbc>)
 8000e94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_I2C_MspInit+0xbc>)
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	0389      	lsls	r1, r1, #14
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_I2C_MspInit+0xbc>)
 8000ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	039b      	lsls	r3, r3, #14
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b015      	add	sp, #84	; 0x54
 8000eb4:	bd90      	pop	{r4, r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	40005400 	.word	0x40005400
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	50000400 	.word	0x50000400

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec8:	f000 fc70 	bl	80017ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ecc:	f000 f811 	bl	8000ef2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed0:	f7ff feba 	bl	8000c48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ed4:	f7ff fea2 	bl	8000c1c <MX_DMA_Init>
  MX_ADC1_Init();
 8000ed8:	f7ff fd66 	bl	80009a8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000edc:	f7ff ff50 	bl	8000d80 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000ee0:	f000 fac6 	bl	8001470 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000ee4:	f000 fb12 	bl	800150c <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ee8:	f000 f84b 	bl	8000f82 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while(1)
   {
      SM_Handle();
 8000eec:	f7ff fbc8 	bl	8000680 <SM_Handle>
 8000ef0:	e7fc      	b.n	8000eec <main+0x28>

08000ef2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef2:	b590      	push	{r4, r7, lr}
 8000ef4:	b093      	sub	sp, #76	; 0x4c
 8000ef6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef8:	2410      	movs	r4, #16
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	0018      	movs	r0, r3
 8000efe:	2338      	movs	r3, #56	; 0x38
 8000f00:	001a      	movs	r2, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	f004 fb6e 	bl	80055e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f08:	003b      	movs	r3, r7
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	001a      	movs	r2, r3
 8000f10:	2100      	movs	r1, #0
 8000f12:	f004 fb67 	bl	80055e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f001 fff6 	bl	8002f0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f20:	193b      	adds	r3, r7, r4
 8000f22:	2202      	movs	r2, #2
 8000f24:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f26:	193b      	adds	r3, r7, r4
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	0052      	lsls	r2, r2, #1
 8000f2c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2240      	movs	r2, #64	; 0x40
 8000f38:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	0018      	movs	r0, r3
 8000f44:	f002 f82e 	bl	8002fa4 <HAL_RCC_OscConfig>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000f4c:	f000 f82e 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f50:	003b      	movs	r3, r7
 8000f52:	2207      	movs	r2, #7
 8000f54:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f56:	003b      	movs	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	003b      	movs	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f62:	003b      	movs	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f68:	003b      	movs	r3, r7
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f002 fb33 	bl	80035d8 <HAL_RCC_ClockConfig>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000f76:	f000 f819 	bl	8000fac <Error_Handler>
  }
}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b013      	add	sp, #76	; 0x4c
 8000f80:	bd90      	pop	{r4, r7, pc}

08000f82 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2009      	movs	r0, #9
 8000f8c:	f001 f9be 	bl	800230c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f90:	2009      	movs	r0, #9
 8000f92:	f001 f9d0 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	201b      	movs	r0, #27
 8000f9c:	f001 f9b6 	bl	800230c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fa0:	201b      	movs	r0, #27
 8000fa2:	f001 f9c8 	bl	8002336 <HAL_NVIC_EnableIRQ>
}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>
	...

08000fb8 <RFP_Handle>:
RFPFunctions_TypeDef RfpFunction[] = { { RFP_InitializeFunction }, { RFP_IdleFunction }, { RFP_ParseFunction }, { RFP_RunningFunction } };
RFPCommandFunctions_TypeDef RfpCommandFunction[RFP_COMMAND_CNT];
RFPDataFunctions_TypeDef RfpDataFunction;
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
void RFP_Handle(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
   RFP_ChangeState();
 8000fbc:	f000 f856 	bl	800106c <RFP_ChangeState>
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <RFP_Handle+0x30>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <RFP_Handle+0x34>)
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	58d3      	ldr	r3, [r2, r3]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d007      	beq.n	8000fe2 <RFP_Handle+0x2a>
   {
      RfpFunction[Rfp->State].RfpFunction();
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <RFP_Handle+0x30>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	001a      	movs	r2, r3
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <RFP_Handle+0x34>)
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	58d3      	ldr	r3, [r2, r3]
 8000fe0:	4798      	blx	r3
   }
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200005c8 	.word	0x200005c8
 8000fec:	20000060 	.word	0x20000060

08000ff0 <RFP_Init>:
void RFP_Init(RFP_TypeDef *RadioProtocol, RFPDeviceID_TypeDef Device)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	000a      	movs	r2, r1
 8000ffa:	1cfb      	adds	r3, r7, #3
 8000ffc:	701a      	strb	r2, [r3, #0]
   Rfp             = RadioProtocol;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <RFP_Init+0x6c>)
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	601a      	str	r2, [r3, #0]
   Rfp->Initialize = RFP_INITIALIZE;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <RFP_Init+0x6c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2201      	movs	r2, #1
 800100a:	70da      	strb	r2, [r3, #3]
   Rfp->DeviceType = Device;
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <RFP_Init+0x6c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	1cfa      	adds	r2, r7, #3
 8001012:	7812      	ldrb	r2, [r2, #0]
 8001014:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e007      	b.n	800102c <RFP_Init+0x3c>
   {
      RfpCommandFunction[i].RfpCommandFunction = NULL;
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <RFP_Init+0x70>)
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	2100      	movs	r1, #0
 8001024:	50d1      	str	r1, [r2, r3]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3301      	adds	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b02      	cmp	r3, #2
 8001030:	ddf4      	ble.n	800101c <RFP_Init+0x2c>
   }
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	e007      	b.n	8001048 <RFP_Init+0x58>
   {
      RfpMessageFunction[i].RfpMessageFunction = NULL;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <RFP_Init+0x74>)
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	2100      	movs	r1, #0
 8001040:	50d1      	str	r1, [r2, r3]
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	3301      	adds	r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2b03      	cmp	r3, #3
 800104c:	ddf4      	ble.n	8001038 <RFP_Init+0x48>
   }
   RfpDataFunction.RfpDataFunction = NULL;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <RFP_Init+0x78>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b004      	add	sp, #16
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200005c8 	.word	0x200005c8
 8001060:	200005cc 	.word	0x200005cc
 8001064:	200005dc 	.word	0x200005dc
 8001068:	200005d8 	.word	0x200005d8

0800106c <RFP_ChangeState>:
static void RFP_ChangeState(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	e02a      	b.n	80010ce <RFP_ChangeState+0x62>
   {
      if(Rfp->State == RfpTransitionTable[i].Source && Rfp->NewEvent == RfpTransitionTable[i].Event)
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <RFP_ChangeState+0x78>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	7819      	ldrb	r1, [r3, #0]
 800107e:	481a      	ldr	r0, [pc, #104]	; (80010e8 <RFP_ChangeState+0x7c>)
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	0013      	movs	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	189b      	adds	r3, r3, r2
 8001088:	5c1b      	ldrb	r3, [r3, r0]
 800108a:	4299      	cmp	r1, r3
 800108c:	d11c      	bne.n	80010c8 <RFP_ChangeState+0x5c>
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <RFP_ChangeState+0x78>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	7859      	ldrb	r1, [r3, #1]
 8001094:	4814      	ldr	r0, [pc, #80]	; (80010e8 <RFP_ChangeState+0x7c>)
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	0013      	movs	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	189b      	adds	r3, r3, r2
 800109e:	18c3      	adds	r3, r0, r3
 80010a0:	3302      	adds	r3, #2
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4299      	cmp	r1, r3
 80010a6:	d10f      	bne.n	80010c8 <RFP_ChangeState+0x5c>
      {
         Rfp->State    = RfpTransitionTable[i].Destination;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <RFP_ChangeState+0x78>)
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	480e      	ldr	r0, [pc, #56]	; (80010e8 <RFP_ChangeState+0x7c>)
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	0013      	movs	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	189b      	adds	r3, r3, r2
 80010b6:	18c3      	adds	r3, r0, r3
 80010b8:	3301      	adds	r3, #1
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	700b      	strb	r3, [r1, #0]
         Rfp->NewEvent = RFP_EVENT_NOTHING;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <RFP_ChangeState+0x78>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2200      	movs	r2, #0
 80010c4:	705a      	strb	r2, [r3, #1]
         return;
 80010c6:	e009      	b.n	80010dc <RFP_ChangeState+0x70>
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3301      	adds	r3, #1
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b05      	cmp	r3, #5
 80010d2:	d9d1      	bls.n	8001078 <RFP_ChangeState+0xc>
      }
   }
   Rfp->NewEvent = RFP_EVENT_NOTHING;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <RFP_ChangeState+0x78>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	705a      	strb	r2, [r3, #1]
}
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	200005c8 	.word	0x200005c8
 80010e8:	2000004c 	.word	0x2000004c

080010ec <RFP_RegisterCommandFunction>:
void RFP_RegisterCommandFunction(RFPCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	0002      	movs	r2, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	701a      	strb	r2, [r3, #0]
   RfpCommandFunction[Command - 1].RfpCommandFunction = Callback;
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	1e5a      	subs	r2, r3, #1
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <RFP_RegisterCommandFunction+0x24>)
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	6839      	ldr	r1, [r7, #0]
 8001106:	50d1      	str	r1, [r2, r3]
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200005cc 	.word	0x200005cc

08001114 <RFP_InterruptTask>:
void RFP_RegisterMessageFunction(RFPMessage_TypeDef Message, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpMessageFunction[Message - 1].RfpMessageFunction = Callback;
}
void RFP_InterruptTask(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
   Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_SET;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <RFP_InterruptTask+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2201      	movs	r2, #1
 800111e:	711a      	strb	r2, [r3, #4]
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	200005c8 	.word	0x200005c8

0800112c <RFP_SendResponseFunction>:
      RfpData[i + 3] = Data[i];
   }
   Rfp->SendFlag = RFP_SEND_FLAG_SET;
}
static void RFP_SendResponseFunction(RFPMessageType_TypeDef Response)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	0002      	movs	r2, r0
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	701a      	strb	r2, [r3, #0]
   RfpData[0]   = Rfp->SourceMessage;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <RFP_SendResponseFunction+0x78>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	7b1a      	ldrb	r2, [r3, #12]
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <RFP_SendResponseFunction+0x7c>)
 8001140:	701a      	strb	r2, [r3, #0]
   RfpData[1]   = Rfp->DeviceType;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <RFP_SendResponseFunction+0x78>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	795a      	ldrb	r2, [r3, #5]
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <RFP_SendResponseFunction+0x7c>)
 800114a:	705a      	strb	r2, [r3, #1]
   RfpData[2]   = RFP_MESSAGE;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <RFP_SendResponseFunction+0x7c>)
 800114e:	2203      	movs	r2, #3
 8001150:	709a      	strb	r2, [r3, #2]
   RfpData[3]   = Response;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <RFP_SendResponseFunction+0x7c>)
 8001154:	1dfa      	adds	r2, r7, #7
 8001156:	7812      	ldrb	r2, [r2, #0]
 8001158:	70da      	strb	r2, [r3, #3]
   uint32_t crc = Crc(CRC_INITIAL_VALUE, 4, RfpData);
 800115a:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <RFP_SendResponseFunction+0x7c>)
 800115c:	2301      	movs	r3, #1
 800115e:	425b      	negs	r3, r3
 8001160:	2104      	movs	r1, #4
 8001162:	0018      	movs	r0, r3
 8001164:	f7ff fcd0 	bl	8000b08 <Crc>
 8001168:	0003      	movs	r3, r0
 800116a:	60fb      	str	r3, [r7, #12]
   RfpData[4]   = ((crc >> 24) & 0xff);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	0e1b      	lsrs	r3, r3, #24
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <RFP_SendResponseFunction+0x7c>)
 8001174:	711a      	strb	r2, [r3, #4]
   RfpData[5]   = ((crc >> 16) & 0xff);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	0c1b      	lsrs	r3, r3, #16
 800117a:	b2da      	uxtb	r2, r3
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <RFP_SendResponseFunction+0x7c>)
 800117e:	715a      	strb	r2, [r3, #5]
   RfpData[6]   = ((crc >> 8) & 0xff);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <RFP_SendResponseFunction+0x7c>)
 8001188:	719a      	strb	r2, [r3, #6]
   RfpData[7]   = (crc & 0xff);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <RFP_SendResponseFunction+0x7c>)
 8001190:	71da      	strb	r2, [r3, #7]
   HC12_TransmitData(RfpData, 8);
 8001192:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <RFP_SendResponseFunction+0x7c>)
 8001194:	2108      	movs	r1, #8
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff fa4c 	bl	8000634 <HC12_TransmitData>
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b004      	add	sp, #16
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200005c8 	.word	0x200005c8
 80011a8:	200005b4 	.word	0x200005b4

080011ac <RFP_InitializeFunction>:
static void RFP_InitializeFunction(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
   Rfp->NewEvent = RFP_EVENT_END_INITIALIZE;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <RFP_InitializeFunction+0x20>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2202      	movs	r2, #2
 80011b6:	705a      	strb	r2, [r3, #1]
   HC12_ExitCommandMode();
 80011b8:	f7ff fa2e 	bl	8000618 <HC12_ExitCommandMode>
   HC12_ReciveToIdleDMA(RfpData, sizeof(RfpData));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <RFP_InitializeFunction+0x24>)
 80011be:	2114      	movs	r1, #20
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff fa4b 	bl	800065c <HC12_ReciveToIdleDMA>
}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200005c8 	.word	0x200005c8
 80011d0:	200005b4 	.word	0x200005b4

080011d4 <RFP_IdleFunction>:
static void RFP_IdleFunction(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
   if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <RFP_IdleFunction+0x3c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	791b      	ldrb	r3, [r3, #4]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d108      	bne.n	80011f6 <RFP_IdleFunction+0x22>
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <RFP_IdleFunction+0x3c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2200      	movs	r2, #0
 80011ea:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <RFP_IdleFunction+0x3c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	705a      	strb	r2, [r3, #1]
   }
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
   {
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
   }
}
 80011f4:	e008      	b.n	8001208 <RFP_IdleFunction+0x34>
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <RFP_IdleFunction+0x3c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	7b5b      	ldrb	r3, [r3, #13]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d103      	bne.n	8001208 <RFP_IdleFunction+0x34>
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <RFP_IdleFunction+0x3c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2200      	movs	r2, #0
 8001206:	735a      	strb	r2, [r3, #13]
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	200005c8 	.word	0x200005c8

08001214 <RFP_ParseFunction>:
static void RFP_ParseFunction(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
   Rfp->SourceMessage  = RfpData[1];
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <RFP_ParseFunction+0xd8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a33      	ldr	r2, [pc, #204]	; (80012f0 <RFP_ParseFunction+0xdc>)
 8001224:	7852      	ldrb	r2, [r2, #1]
 8001226:	731a      	strb	r2, [r3, #12]
   if(RfpData[0] != Rfp->DeviceType)
 8001228:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <RFP_ParseFunction+0xdc>)
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <RFP_ParseFunction+0xd8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	795b      	ldrb	r3, [r3, #5]
 8001232:	429a      	cmp	r2, r3
 8001234:	d007      	beq.n	8001246 <RFP_ParseFunction+0x32>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <RFP_ParseFunction+0xd8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2203      	movs	r2, #3
 800123c:	705a      	strb	r2, [r3, #1]
      RFP_SendResponseFunction(RFP_ERROR);
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff ff74 	bl	800112c <RFP_SendResponseFunction>
            Rfp->NewEvent = RFP_EVENT_ERROR;
            RFP_SendResponseFunction(RFP_ERROR);
         }
      }
   }
}
 8001244:	e04d      	b.n	80012e2 <RFP_ParseFunction+0xce>
      if(Rfp->DataSize != 0)
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <RFP_ParseFunction+0xd8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d031      	beq.n	80012b4 <RFP_ParseFunction+0xa0>
         MessageCRC = (((uint32_t)RfpData[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpData[Rfp->DataSize - 3] << 16)
 8001250:	4b26      	ldr	r3, [pc, #152]	; (80012ec <RFP_ParseFunction+0xd8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	3b04      	subs	r3, #4
 8001258:	4a25      	ldr	r2, [pc, #148]	; (80012f0 <RFP_ParseFunction+0xdc>)
 800125a:	5cd3      	ldrb	r3, [r2, r3]
 800125c:	061a      	lsls	r2, r3, #24
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <RFP_ParseFunction+0xd8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	3b03      	subs	r3, #3
 8001266:	4922      	ldr	r1, [pc, #136]	; (80012f0 <RFP_ParseFunction+0xdc>)
 8001268:	5ccb      	ldrb	r3, [r1, r3]
 800126a:	041b      	lsls	r3, r3, #16
 800126c:	431a      	orrs	r2, r3
                       | ((uint32_t)RfpData[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpData[Rfp->DataSize - 1]));
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <RFP_ParseFunction+0xd8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	3b02      	subs	r3, #2
 8001276:	491e      	ldr	r1, [pc, #120]	; (80012f0 <RFP_ParseFunction+0xdc>)
 8001278:	5ccb      	ldrb	r3, [r1, r3]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	431a      	orrs	r2, r3
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <RFP_ParseFunction+0xd8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	3b01      	subs	r3, #1
 8001286:	491a      	ldr	r1, [pc, #104]	; (80012f0 <RFP_ParseFunction+0xdc>)
 8001288:	5ccb      	ldrb	r3, [r1, r3]
         MessageCRC = (((uint32_t)RfpData[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpData[Rfp->DataSize - 3] << 16)
 800128a:	4313      	orrs	r3, r2
 800128c:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpData))
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <RFP_ParseFunction+0xd8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	1f19      	subs	r1, r3, #4
 8001296:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <RFP_ParseFunction+0xdc>)
 8001298:	2301      	movs	r3, #1
 800129a:	425b      	negs	r3, r3
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff fc33 	bl	8000b08 <Crc>
 80012a2:	0002      	movs	r2, r0
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d11b      	bne.n	80012e2 <RFP_ParseFunction+0xce>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <RFP_ParseFunction+0xd8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2204      	movs	r2, #4
 80012b0:	705a      	strb	r2, [r3, #1]
}
 80012b2:	e016      	b.n	80012e2 <RFP_ParseFunction+0xce>
         if(RepareMessage(MessageCRC, RfpData, Rfp->DataSize) == CRC_OK)
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <RFP_ParseFunction+0xd8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	490d      	ldr	r1, [pc, #52]	; (80012f0 <RFP_ParseFunction+0xdc>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff fc56 	bl	8000b70 <RepareMessage>
 80012c4:	0003      	movs	r3, r0
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d104      	bne.n	80012d4 <RFP_ParseFunction+0xc0>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <RFP_ParseFunction+0xd8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2204      	movs	r2, #4
 80012d0:	705a      	strb	r2, [r3, #1]
}
 80012d2:	e006      	b.n	80012e2 <RFP_ParseFunction+0xce>
            Rfp->NewEvent = RFP_EVENT_ERROR;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <RFP_ParseFunction+0xd8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2203      	movs	r2, #3
 80012da:	705a      	strb	r2, [r3, #1]
            RFP_SendResponseFunction(RFP_ERROR);
 80012dc:	2001      	movs	r0, #1
 80012de:	f7ff ff25 	bl	800112c <RFP_SendResponseFunction>
}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b002      	add	sp, #8
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	200005c8 	.word	0x200005c8
 80012f0:	200005b4 	.word	0x200005b4

080012f4 <RFP_RunningFunction>:
static void RFP_RunningFunction(void)
{
 80012f4:	b5b0      	push	{r4, r5, r7, lr}
 80012f6:	af00      	add	r7, sp, #0
   switch(RfpData[2])
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <RFP_RunningFunction+0xa8>)
 80012fa:	789b      	ldrb	r3, [r3, #2]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d029      	beq.n	8001354 <RFP_RunningFunction+0x60>
 8001300:	dc3e      	bgt.n	8001380 <RFP_RunningFunction+0x8c>
 8001302:	2b01      	cmp	r3, #1
 8001304:	d002      	beq.n	800130c <RFP_RunningFunction+0x18>
 8001306:	2b02      	cmp	r3, #2
 8001308:	d016      	beq.n	8001338 <RFP_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 800130a:	e039      	b.n	8001380 <RFP_RunningFunction+0x8c>
         if(RfpCommandFunction[RfpData[3] - 1].RfpCommandFunction != NULL)
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <RFP_RunningFunction+0xa8>)
 800130e:	78db      	ldrb	r3, [r3, #3]
 8001310:	1e5a      	subs	r2, r3, #1
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <RFP_RunningFunction+0xac>)
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	58d3      	ldr	r3, [r2, r3]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d033      	beq.n	8001384 <RFP_RunningFunction+0x90>
            RfpCommandFunction[RfpData[3] - 1].RfpCommandFunction(RfpData, Rfp->DataSize, 4);
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <RFP_RunningFunction+0xa8>)
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	1e5a      	subs	r2, r3, #1
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <RFP_RunningFunction+0xac>)
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	58d4      	ldr	r4, [r2, r3]
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <RFP_RunningFunction+0xb0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6899      	ldr	r1, [r3, #8]
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <RFP_RunningFunction+0xa8>)
 8001330:	2204      	movs	r2, #4
 8001332:	0018      	movs	r0, r3
 8001334:	47a0      	blx	r4
         break;
 8001336:	e025      	b.n	8001384 <RFP_RunningFunction+0x90>
         if(RfpDataFunction.RfpDataFunction != NULL)
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <RFP_RunningFunction+0xb4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d023      	beq.n	8001388 <RFP_RunningFunction+0x94>
            RfpDataFunction.RfpDataFunction(RfpData, Rfp->DataSize, 4);
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <RFP_RunningFunction+0xb4>)
 8001342:	681c      	ldr	r4, [r3, #0]
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <RFP_RunningFunction+0xb0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6899      	ldr	r1, [r3, #8]
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <RFP_RunningFunction+0xa8>)
 800134c:	2204      	movs	r2, #4
 800134e:	0018      	movs	r0, r3
 8001350:	47a0      	blx	r4
         break;
 8001352:	e019      	b.n	8001388 <RFP_RunningFunction+0x94>
         if(RfpMessageFunction[RfpData[3] - 1].RfpMessageFunction != NULL)
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <RFP_RunningFunction+0xa8>)
 8001356:	78db      	ldrb	r3, [r3, #3]
 8001358:	1e5a      	subs	r2, r3, #1
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <RFP_RunningFunction+0xb8>)
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	58d3      	ldr	r3, [r2, r3]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <RFP_RunningFunction+0x98>
            RfpMessageFunction[RfpData[3] - 1].RfpMessageFunction(RfpData, Rfp->DataSize, 4);
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <RFP_RunningFunction+0xa8>)
 8001366:	78db      	ldrb	r3, [r3, #3]
 8001368:	1e5a      	subs	r2, r3, #1
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <RFP_RunningFunction+0xb8>)
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	58d4      	ldr	r4, [r2, r3]
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <RFP_RunningFunction+0xb0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6899      	ldr	r1, [r3, #8]
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <RFP_RunningFunction+0xa8>)
 8001378:	2204      	movs	r2, #4
 800137a:	0018      	movs	r0, r3
 800137c:	47a0      	blx	r4
         break;
 800137e:	e005      	b.n	800138c <RFP_RunningFunction+0x98>
         break;
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	e004      	b.n	800138e <RFP_RunningFunction+0x9a>
         break;
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	e002      	b.n	800138e <RFP_RunningFunction+0x9a>
         break;
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	e000      	b.n	800138e <RFP_RunningFunction+0x9a>
         break;
 800138c:	46c0      	nop			; (mov r8, r8)
      }
   }
   RFP_SendResponseFunction(RFP_OK);
 800138e:	2004      	movs	r0, #4
 8001390:	f7ff fecc 	bl	800112c <RFP_SendResponseFunction>
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	bdb0      	pop	{r4, r5, r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	200005b4 	.word	0x200005b4
 80013a0:	200005cc 	.word	0x200005cc
 80013a4:	200005c8 	.word	0x200005c8
 80013a8:	200005d8 	.word	0x200005d8
 80013ac:	200005dc 	.word	0x200005dc

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_MspInit+0x44>)
 80013b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_MspInit+0x44>)
 80013bc:	2101      	movs	r1, #1
 80013be:	430a      	orrs	r2, r1
 80013c0:	641a      	str	r2, [r3, #64]	; 0x40
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_MspInit+0x44>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	2201      	movs	r2, #1
 80013c8:	4013      	ands	r3, r2
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_MspInit+0x44>)
 80013d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_MspInit+0x44>)
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	0549      	lsls	r1, r1, #21
 80013d8:	430a      	orrs	r2, r1
 80013da:	63da      	str	r2, [r3, #60]	; 0x3c
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_MspInit+0x44>)
 80013de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	055b      	lsls	r3, r3, #21
 80013e4:	4013      	ands	r3, r2
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	40021000 	.word	0x40021000

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <NMI_Handler+0x4>

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141c:	f000 fa30 	bl	8001880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <DMA1_Channel1_IRQHandler+0x14>)
 800142e:	0018      	movs	r0, r3
 8001430:	f001 f97a 	bl	8002728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	20000714 	.word	0x20000714

08001440 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <USART1_IRQHandler+0x14>)
 8001446:	0018      	movs	r0, r3
 8001448:	f002 fcfa 	bl	8003e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800144c:	46c0      	nop			; (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	20000680 	.word	0x20000680

08001458 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <SystemInit+0x14>)
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	0512      	lsls	r2, r2, #20
 8001462:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 8001476:	4a24      	ldr	r2, [pc, #144]	; (8001508 <MX_LPUART1_UART_Init+0x98>)
 8001478:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 800147c:	22e1      	movs	r2, #225	; 0xe1
 800147e:	0252      	lsls	r2, r2, #9
 8001480:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f002 fbce 	bl	8003c5c <HAL_UART_Init>
 80014c0:	1e03      	subs	r3, r0, #0
 80014c2:	d001      	beq.n	80014c8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80014c4:	f7ff fd72 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 80014ca:	2100      	movs	r1, #0
 80014cc:	0018      	movs	r0, r3
 80014ce:	f003 ff1d 	bl	800530c <HAL_UARTEx_SetTxFifoThreshold>
 80014d2:	1e03      	subs	r3, r0, #0
 80014d4:	d001      	beq.n	80014da <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014d6:	f7ff fd69 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 80014dc:	2100      	movs	r1, #0
 80014de:	0018      	movs	r0, r3
 80014e0:	f003 ff54 	bl	800538c <HAL_UARTEx_SetRxFifoThreshold>
 80014e4:	1e03      	subs	r3, r0, #0
 80014e6:	d001      	beq.n	80014ec <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014e8:	f7ff fd60 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <MX_LPUART1_UART_Init+0x94>)
 80014ee:	0018      	movs	r0, r3
 80014f0:	f003 fed2 	bl	8005298 <HAL_UARTEx_DisableFifoMode>
 80014f4:	1e03      	subs	r3, r0, #0
 80014f6:	d001      	beq.n	80014fc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014f8:	f7ff fd58 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	200005ec 	.word	0x200005ec
 8001508:	40008000 	.word	0x40008000

0800150c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 8001512:	4a24      	ldr	r2, [pc, #144]	; (80015a4 <MX_USART1_UART_Init+0x98>)
 8001514:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 8001518:	2296      	movs	r2, #150	; 0x96
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 8001550:	2200      	movs	r2, #0
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 8001556:	0018      	movs	r0, r3
 8001558:	f002 fb80 	bl	8003c5c <HAL_UART_Init>
 800155c:	1e03      	subs	r3, r0, #0
 800155e:	d001      	beq.n	8001564 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001560:	f7ff fd24 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 8001566:	2100      	movs	r1, #0
 8001568:	0018      	movs	r0, r3
 800156a:	f003 fecf 	bl	800530c <HAL_UARTEx_SetTxFifoThreshold>
 800156e:	1e03      	subs	r3, r0, #0
 8001570:	d001      	beq.n	8001576 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001572:	f7ff fd1b 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 8001578:	2100      	movs	r1, #0
 800157a:	0018      	movs	r0, r3
 800157c:	f003 ff06 	bl	800538c <HAL_UARTEx_SetRxFifoThreshold>
 8001580:	1e03      	subs	r3, r0, #0
 8001582:	d001      	beq.n	8001588 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001584:	f7ff fd12 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 800158a:	0018      	movs	r0, r3
 800158c:	f003 fe84 	bl	8005298 <HAL_UARTEx_DisableFifoMode>
 8001590:	1e03      	subs	r3, r0, #0
 8001592:	d001      	beq.n	8001598 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001594:	f7ff fd0a 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	20000680 	.word	0x20000680
 80015a4:	40013800 	.word	0x40013800

080015a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b097      	sub	sp, #92	; 0x5c
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	2344      	movs	r3, #68	; 0x44
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	0018      	movs	r0, r3
 80015b6:	2314      	movs	r3, #20
 80015b8:	001a      	movs	r2, r3
 80015ba:	2100      	movs	r1, #0
 80015bc:	f004 f812 	bl	80055e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c0:	2418      	movs	r4, #24
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	0018      	movs	r0, r3
 80015c6:	232c      	movs	r3, #44	; 0x2c
 80015c8:	001a      	movs	r2, r3
 80015ca:	2100      	movs	r1, #0
 80015cc:	f004 f80a 	bl	80055e4 <memset>
  if(uartHandle->Instance==LPUART1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a5b      	ldr	r2, [pc, #364]	; (8001744 <HAL_UART_MspInit+0x19c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d140      	bne.n	800165c <HAL_UART_MspInit+0xb4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80015da:	193b      	adds	r3, r7, r4
 80015dc:	2210      	movs	r2, #16
 80015de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 80015e0:	193b      	adds	r3, r7, r4
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	0112      	lsls	r2, r2, #4
 80015e6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e8:	193b      	adds	r3, r7, r4
 80015ea:	0018      	movs	r0, r3
 80015ec:	f002 f99e 	bl	800392c <HAL_RCCEx_PeriphCLKConfig>
 80015f0:	1e03      	subs	r3, r0, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80015f4:	f7ff fcda 	bl	8000fac <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_UART_MspInit+0x1a0>)
 80015fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015fc:	4b52      	ldr	r3, [pc, #328]	; (8001748 <HAL_UART_MspInit+0x1a0>)
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	0349      	lsls	r1, r1, #13
 8001602:	430a      	orrs	r2, r1
 8001604:	63da      	str	r2, [r3, #60]	; 0x3c
 8001606:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_UART_MspInit+0x1a0>)
 8001608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	035b      	lsls	r3, r3, #13
 800160e:	4013      	ands	r3, r2
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <HAL_UART_MspInit+0x1a0>)
 8001616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001618:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <HAL_UART_MspInit+0x1a0>)
 800161a:	2101      	movs	r1, #1
 800161c:	430a      	orrs	r2, r1
 800161e:	635a      	str	r2, [r3, #52]	; 0x34
 8001620:	4b49      	ldr	r3, [pc, #292]	; (8001748 <HAL_UART_MspInit+0x1a0>)
 8001622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001624:	2201      	movs	r2, #1
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800162c:	2144      	movs	r1, #68	; 0x44
 800162e:	187b      	adds	r3, r7, r1
 8001630:	220c      	movs	r2, #12
 8001632:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	187b      	adds	r3, r7, r1
 8001636:	2202      	movs	r2, #2
 8001638:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001646:	187b      	adds	r3, r7, r1
 8001648:	2206      	movs	r2, #6
 800164a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	187a      	adds	r2, r7, r1
 800164e:	23a0      	movs	r3, #160	; 0xa0
 8001650:	05db      	lsls	r3, r3, #23
 8001652:	0011      	movs	r1, r2
 8001654:	0018      	movs	r0, r3
 8001656:	f001 f9a9 	bl	80029ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800165a:	e06f      	b.n	800173c <HAL_UART_MspInit+0x194>
  else if(uartHandle->Instance==USART1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a3a      	ldr	r2, [pc, #232]	; (800174c <HAL_UART_MspInit+0x1a4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d16a      	bne.n	800173c <HAL_UART_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001666:	2118      	movs	r1, #24
 8001668:	187b      	adds	r3, r7, r1
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800166e:	187b      	adds	r3, r7, r1
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001674:	187b      	adds	r3, r7, r1
 8001676:	0018      	movs	r0, r3
 8001678:	f002 f958 	bl	800392c <HAL_RCCEx_PeriphCLKConfig>
 800167c:	1e03      	subs	r3, r0, #0
 800167e:	d001      	beq.n	8001684 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8001680:	f7ff fc94 	bl	8000fac <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001684:	4b30      	ldr	r3, [pc, #192]	; (8001748 <HAL_UART_MspInit+0x1a0>)
 8001686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <HAL_UART_MspInit+0x1a0>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	01c9      	lsls	r1, r1, #7
 800168e:	430a      	orrs	r2, r1
 8001690:	641a      	str	r2, [r3, #64]	; 0x40
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_UART_MspInit+0x1a0>)
 8001694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	01db      	lsls	r3, r3, #7
 800169a:	4013      	ands	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b29      	ldr	r3, [pc, #164]	; (8001748 <HAL_UART_MspInit+0x1a0>)
 80016a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <HAL_UART_MspInit+0x1a0>)
 80016a6:	2101      	movs	r1, #1
 80016a8:	430a      	orrs	r2, r1
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_UART_MspInit+0x1a0>)
 80016ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b0:	2201      	movs	r2, #1
 80016b2:	4013      	ands	r3, r2
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016b8:	2144      	movs	r1, #68	; 0x44
 80016ba:	187b      	adds	r3, r7, r1
 80016bc:	22c0      	movs	r2, #192	; 0xc0
 80016be:	00d2      	lsls	r2, r2, #3
 80016c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	187b      	adds	r3, r7, r1
 80016c4:	2202      	movs	r2, #2
 80016c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2201      	movs	r2, #1
 80016d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	187a      	adds	r2, r7, r1
 80016dc:	23a0      	movs	r3, #160	; 0xa0
 80016de:	05db      	lsls	r3, r3, #23
 80016e0:	0011      	movs	r1, r2
 80016e2:	0018      	movs	r0, r3
 80016e4:	f001 f962 	bl	80029ac <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_UART_MspInit+0x1a8>)
 80016ea:	4a1a      	ldr	r2, [pc, #104]	; (8001754 <HAL_UART_MspInit+0x1ac>)
 80016ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_UART_MspInit+0x1a8>)
 80016f0:	2232      	movs	r2, #50	; 0x32
 80016f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_UART_MspInit+0x1a8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_UART_MspInit+0x1a8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_UART_MspInit+0x1a8>)
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_UART_MspInit+0x1a8>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_UART_MspInit+0x1a8>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HAL_UART_MspInit+0x1a8>)
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_UART_MspInit+0x1a8>)
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_UART_MspInit+0x1a8>)
 8001720:	0018      	movs	r0, r3
 8001722:	f000 fe25 	bl	8002370 <HAL_DMA_Init>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d001      	beq.n	800172e <HAL_UART_MspInit+0x186>
      Error_Handler();
 800172a:	f7ff fc3f 	bl	8000fac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	4a07      	ldr	r2, [pc, #28]	; (8001750 <HAL_UART_MspInit+0x1a8>)
 8001734:	505a      	str	r2, [r3, r1]
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_UART_MspInit+0x1a8>)
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b017      	add	sp, #92	; 0x5c
 8001742:	bd90      	pop	{r4, r7, pc}
 8001744:	40008000 	.word	0x40008000
 8001748:	40021000 	.word	0x40021000
 800174c:	40013800 	.word	0x40013800
 8001750:	20000714 	.word	0x20000714
 8001754:	40020008 	.word	0x40020008

08001758 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800175a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800175c:	f7ff fe7c 	bl	8001458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <LoopForever+0x6>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <LoopForever+0xe>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	; (80017a4 <LoopForever+0x16>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001786:	f003 ff09 	bl	800559c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800178a:	f7ff fb9b 	bl	8000ec4 <main>

0800178e <LoopForever>:

LoopForever:
  b LoopForever
 800178e:	e7fe      	b.n	800178e <LoopForever>
  ldr   r0, =_estack
 8001790:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	200004ac 	.word	0x200004ac
  ldr r2, =_sidata
 800179c:	08005784 	.word	0x08005784
  ldr r2, =_sbss
 80017a0:	200004ac 	.word	0x200004ac
  ldr r4, =_ebss
 80017a4:	20000778 	.word	0x20000778

080017a8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_COMP_IRQHandler>
	...

080017ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_Init+0x3c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_Init+0x3c>)
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	0049      	lsls	r1, r1, #1
 80017c2:	430a      	orrs	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017c6:	2003      	movs	r0, #3
 80017c8:	f000 f810 	bl	80017ec <HAL_InitTick>
 80017cc:	1e03      	subs	r3, r0, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80017d0:	1dfb      	adds	r3, r7, #7
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	e001      	b.n	80017dc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80017d8:	f7ff fdea 	bl	80013b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017dc:	1dfb      	adds	r3, r7, #7
 80017de:	781b      	ldrb	r3, [r3, #0]
}
 80017e0:	0018      	movs	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b002      	add	sp, #8
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40022000 	.word	0x40022000

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017f4:	230f      	movs	r3, #15
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_InitTick+0x88>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d02b      	beq.n	800185c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_InitTick+0x8c>)
 8001806:	681c      	ldr	r4, [r3, #0]
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <HAL_InitTick+0x88>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	0019      	movs	r1, r3
 800180e:	23fa      	movs	r3, #250	; 0xfa
 8001810:	0098      	lsls	r0, r3, #2
 8001812:	f7fe fc75 	bl	8000100 <__udivsi3>
 8001816:	0003      	movs	r3, r0
 8001818:	0019      	movs	r1, r3
 800181a:	0020      	movs	r0, r4
 800181c:	f7fe fc70 	bl	8000100 <__udivsi3>
 8001820:	0003      	movs	r3, r0
 8001822:	0018      	movs	r0, r3
 8001824:	f000 fd97 	bl	8002356 <HAL_SYSTICK_Config>
 8001828:	1e03      	subs	r3, r0, #0
 800182a:	d112      	bne.n	8001852 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b03      	cmp	r3, #3
 8001830:	d80a      	bhi.n	8001848 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	2301      	movs	r3, #1
 8001836:	425b      	negs	r3, r3
 8001838:	2200      	movs	r2, #0
 800183a:	0018      	movs	r0, r3
 800183c:	f000 fd66 	bl	800230c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_InitTick+0x90>)
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e00d      	b.n	8001864 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001848:	230f      	movs	r3, #15
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	2201      	movs	r2, #1
 800184e:	701a      	strb	r2, [r3, #0]
 8001850:	e008      	b.n	8001864 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001852:	230f      	movs	r3, #15
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e003      	b.n	8001864 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800185c:	230f      	movs	r3, #15
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001864:	230f      	movs	r3, #15
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	781b      	ldrb	r3, [r3, #0]
}
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b005      	add	sp, #20
 8001870:	bd90      	pop	{r4, r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	20000078 	.word	0x20000078
 8001878:	20000070 	.word	0x20000070
 800187c:	20000074 	.word	0x20000074

08001880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_IncTick+0x1c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	001a      	movs	r2, r3
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_IncTick+0x20>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	18d2      	adds	r2, r2, r3
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_IncTick+0x20>)
 8001892:	601a      	str	r2, [r3, #0]
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	20000078 	.word	0x20000078
 80018a0:	20000770 	.word	0x20000770

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b02      	ldr	r3, [pc, #8]	; (80018b4 <HAL_GetTick+0x10>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	20000770 	.word	0x20000770

080018b8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80018c8:	401a      	ands	r2, r3
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	601a      	str	r2, [r3, #0]
}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	fe3fffff 	.word	0xfe3fffff

080018e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	23e0      	movs	r3, #224	; 0xe0
 80018ee:	045b      	lsls	r3, r3, #17
 80018f0:	4013      	ands	r3, r2
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b002      	add	sp, #8
 80018f8:	bd80      	pop	{r7, pc}

080018fa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	2104      	movs	r1, #4
 800190e:	400a      	ands	r2, r1
 8001910:	2107      	movs	r1, #7
 8001912:	4091      	lsls	r1, r2
 8001914:	000a      	movs	r2, r1
 8001916:	43d2      	mvns	r2, r2
 8001918:	401a      	ands	r2, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2104      	movs	r1, #4
 800191e:	400b      	ands	r3, r1
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4099      	lsls	r1, r3
 8001924:	000b      	movs	r3, r1
 8001926:	431a      	orrs	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	b004      	add	sp, #16
 8001932:	bd80      	pop	{r7, pc}

08001934 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	2104      	movs	r1, #4
 8001946:	400a      	ands	r2, r1
 8001948:	2107      	movs	r1, #7
 800194a:	4091      	lsls	r1, r2
 800194c:	000a      	movs	r2, r1
 800194e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2104      	movs	r1, #4
 8001954:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001956:	40da      	lsrs	r2, r3
 8001958:	0013      	movs	r3, r2
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	b002      	add	sp, #8
 8001960:	bd80      	pop	{r7, pc}

08001962 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	211f      	movs	r1, #31
 8001976:	400a      	ands	r2, r1
 8001978:	210f      	movs	r1, #15
 800197a:	4091      	lsls	r1, r2
 800197c:	000a      	movs	r2, r1
 800197e:	43d2      	mvns	r2, r2
 8001980:	401a      	ands	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	0e9b      	lsrs	r3, r3, #26
 8001986:	210f      	movs	r1, #15
 8001988:	4019      	ands	r1, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	201f      	movs	r0, #31
 800198e:	4003      	ands	r3, r0
 8001990:	4099      	lsls	r1, r3
 8001992:	000b      	movs	r3, r1
 8001994:	431a      	orrs	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b004      	add	sp, #16
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	035b      	lsls	r3, r3, #13
 80019b4:	0b5b      	lsrs	r3, r3, #13
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	0352      	lsls	r2, r2, #13
 80019d6:	0b52      	lsrs	r2, r2, #13
 80019d8:	43d2      	mvns	r2, r2
 80019da:	401a      	ands	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b002      	add	sp, #8
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	0212      	lsls	r2, r2, #8
 80019fc:	43d2      	mvns	r2, r2
 80019fe:	401a      	ands	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	400b      	ands	r3, r1
 8001a08:	4904      	ldr	r1, [pc, #16]	; (8001a1c <LL_ADC_SetChannelSamplingTime+0x34>)
 8001a0a:	400b      	ands	r3, r1
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b004      	add	sp, #16
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	07ffff00 	.word	0x07ffff00

08001a20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	0552      	lsls	r2, r2, #21
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b002      	add	sp, #8
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	6fffffe8 	.word	0x6fffffe8

08001a48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	055b      	lsls	r3, r3, #21
 8001a58:	401a      	ands	r2, r3
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	055b      	lsls	r3, r3, #21
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d101      	bne.n	8001a66 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b002      	add	sp, #8
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <LL_ADC_IsEnabled+0x18>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <LL_ADC_IsEnabled+0x1a>
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d101      	bne.n	8001aaa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abc:	231f      	movs	r3, #31
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e17f      	b.n	8001dda <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10a      	bne.n	8001af8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7fe ffcb 	bl	8000a80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2254      	movs	r2, #84	; 0x54
 8001af4:	2100      	movs	r1, #0
 8001af6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff ffa3 	bl	8001a48 <LL_ADC_IsInternalRegulatorEnabled>
 8001b02:	1e03      	subs	r3, r0, #0
 8001b04:	d115      	bne.n	8001b32 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f7ff ff88 	bl	8001a20 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b10:	4bb4      	ldr	r3, [pc, #720]	; (8001de4 <HAL_ADC_Init+0x330>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	49b4      	ldr	r1, [pc, #720]	; (8001de8 <HAL_ADC_Init+0x334>)
 8001b16:	0018      	movs	r0, r3
 8001b18:	f7fe faf2 	bl	8000100 <__udivsi3>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	3301      	adds	r3, #1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b24:	e002      	b.n	8001b2c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f9      	bne.n	8001b26 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff ff86 	bl	8001a48 <LL_ADC_IsInternalRegulatorEnabled>
 8001b3c:	1e03      	subs	r3, r0, #0
 8001b3e:	d10f      	bne.n	8001b60 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	2210      	movs	r2, #16
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	2201      	movs	r2, #1
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b58:	231f      	movs	r3, #31
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f7ff ff94 	bl	8001a92 <LL_ADC_REG_IsConversionOngoing>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	2210      	movs	r2, #16
 8001b74:	4013      	ands	r3, r2
 8001b76:	d000      	beq.n	8001b7a <HAL_ADC_Init+0xc6>
 8001b78:	e122      	b.n	8001dc0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d000      	beq.n	8001b82 <HAL_ADC_Init+0xce>
 8001b80:	e11e      	b.n	8001dc0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	4a99      	ldr	r2, [pc, #612]	; (8001dec <HAL_ADC_Init+0x338>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	0018      	movs	r0, r3
 8001b98:	f7ff ff6a 	bl	8001a70 <LL_ADC_IsEnabled>
 8001b9c:	1e03      	subs	r3, r0, #0
 8001b9e:	d000      	beq.n	8001ba2 <HAL_ADC_Init+0xee>
 8001ba0:	e0ad      	b.n	8001cfe <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7e1b      	ldrb	r3, [r3, #24]
 8001baa:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001bac:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7e5b      	ldrb	r3, [r3, #25]
 8001bb2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001bb4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7e9b      	ldrb	r3, [r3, #26]
 8001bba:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001bbc:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_ADC_Init+0x118>
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	015b      	lsls	r3, r3, #5
 8001bca:	e000      	b.n	8001bce <HAL_ADC_Init+0x11a>
 8001bcc:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001bce:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001bd4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	da04      	bge.n	8001be8 <HAL_ADC_Init+0x134>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	e001      	b.n	8001bec <HAL_ADC_Init+0x138>
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001bec:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	212c      	movs	r1, #44	; 0x2c
 8001bf2:	5c5b      	ldrb	r3, [r3, r1]
 8001bf4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001bf6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2220      	movs	r2, #32
 8001c02:	5c9b      	ldrb	r3, [r3, r2]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d115      	bne.n	8001c34 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7e9b      	ldrb	r3, [r3, #26]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d105      	bne.n	8001c1c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	0252      	lsls	r2, r2, #9
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	e00b      	b.n	8001c34 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c20:	2220      	movs	r2, #32
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00a      	beq.n	8001c52 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c40:	23e0      	movs	r3, #224	; 0xe0
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4a65      	ldr	r2, [pc, #404]	; (8001df0 <HAL_ADC_Init+0x33c>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	0f9b      	lsrs	r3, r3, #30
 8001c6e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c74:	4313      	orrs	r3, r2
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	223c      	movs	r2, #60	; 0x3c
 8001c80:	5c9b      	ldrb	r3, [r3, r2]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d111      	bne.n	8001caa <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	0f9b      	lsrs	r3, r3, #30
 8001c8c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c92:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001c98:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001c9e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	4a50      	ldr	r2, [pc, #320]	; (8001df4 <HAL_ADC_Init+0x340>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	23c0      	movs	r3, #192	; 0xc0
 8001cc6:	061b      	lsls	r3, r3, #24
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d018      	beq.n	8001cfe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	05db      	lsls	r3, r3, #23
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d012      	beq.n	8001cfe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	061b      	lsls	r3, r3, #24
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d00c      	beq.n	8001cfe <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001ce4:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <HAL_ADC_Init+0x344>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a44      	ldr	r2, [pc, #272]	; (8001dfc <HAL_ADC_Init+0x348>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	23f0      	movs	r3, #240	; 0xf0
 8001cf4:	039b      	lsls	r3, r3, #14
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <HAL_ADC_Init+0x344>)
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	001a      	movs	r2, r3
 8001d08:	2100      	movs	r1, #0
 8001d0a:	f7ff fdf6 	bl	80018fa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d16:	493a      	ldr	r1, [pc, #232]	; (8001e00 <HAL_ADC_Init+0x34c>)
 8001d18:	001a      	movs	r2, r3
 8001d1a:	f7ff fdee 	bl	80018fa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2110      	movs	r1, #16
 8001d32:	4249      	negs	r1, r1
 8001d34:	430a      	orrs	r2, r1
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
 8001d38:	e018      	b.n	8001d6c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691a      	ldr	r2, [r3, #16]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	039b      	lsls	r3, r3, #14
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d112      	bne.n	8001d6c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	221c      	movs	r2, #28
 8001d56:	4013      	ands	r3, r2
 8001d58:	2210      	movs	r2, #16
 8001d5a:	4252      	negs	r2, r2
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	0011      	movs	r1, r2
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2100      	movs	r1, #0
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7ff fdde 	bl	8001934 <LL_ADC_GetSamplingTimeCommonChannels>
 8001d78:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d10b      	bne.n	8001d9a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	4393      	bics	r3, r2
 8001d90:	2201      	movs	r2, #1
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d98:	e01c      	b.n	8001dd4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	2212      	movs	r2, #18
 8001da0:	4393      	bics	r3, r2
 8001da2:	2210      	movs	r2, #16
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dae:	2201      	movs	r2, #1
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001db6:	231f      	movs	r3, #31
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001dbe:	e009      	b.n	8001dd4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dcc:	231f      	movs	r3, #31
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001dd4:	231f      	movs	r3, #31
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	781b      	ldrb	r3, [r3, #0]
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b008      	add	sp, #32
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	20000070 	.word	0x20000070
 8001de8:	00030d40 	.word	0x00030d40
 8001dec:	fffffefd 	.word	0xfffffefd
 8001df0:	fffe0201 	.word	0xfffe0201
 8001df4:	1ffffc02 	.word	0x1ffffc02
 8001df8:	40012708 	.word	0x40012708
 8001dfc:	ffc3ffff 	.word	0xffc3ffff
 8001e00:	07ffff04 	.word	0x07ffff04

08001e04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e0e:	2317      	movs	r3, #23
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2254      	movs	r2, #84	; 0x54
 8001e1e:	5c9b      	ldrb	r3, [r3, r2]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x24>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e1c0      	b.n	80021aa <HAL_ADC_ConfigChannel+0x3a6>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2254      	movs	r2, #84	; 0x54
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff fe2c 	bl	8001a92 <LL_ADC_REG_IsConversionOngoing>
 8001e3a:	1e03      	subs	r3, r0, #0
 8001e3c:	d000      	beq.n	8001e40 <HAL_ADC_ConfigChannel+0x3c>
 8001e3e:	e1a3      	b.n	8002188 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d100      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x46>
 8001e48:	e143      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	061b      	lsls	r3, r3, #24
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d004      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e5a:	4ac1      	ldr	r2, [pc, #772]	; (8002160 <HAL_ADC_ConfigChannel+0x35c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0019      	movs	r1, r3
 8001e6a:	0010      	movs	r0, r2
 8001e6c:	f7ff fd99 	bl	80019a2 <LL_ADC_REG_SetSequencerChAdd>
 8001e70:	e0c9      	b.n	8002006 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	211f      	movs	r1, #31
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	210f      	movs	r1, #15
 8001e80:	4099      	lsls	r1, r3
 8001e82:	000b      	movs	r3, r1
 8001e84:	43db      	mvns	r3, r3
 8001e86:	4013      	ands	r3, r2
 8001e88:	0019      	movs	r1, r3
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	035b      	lsls	r3, r3, #13
 8001e90:	0b5b      	lsrs	r3, r3, #13
 8001e92:	d105      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x9c>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0e9b      	lsrs	r3, r3, #26
 8001e9a:	221f      	movs	r2, #31
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	e098      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d000      	beq.n	8001eac <HAL_ADC_ConfigChannel+0xa8>
 8001eaa:	e091      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x1cc>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d000      	beq.n	8001eb8 <HAL_ADC_ConfigChannel+0xb4>
 8001eb6:	e089      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x1c8>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d000      	beq.n	8001ec4 <HAL_ADC_ConfigChannel+0xc0>
 8001ec2:	e081      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x1c4>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d000      	beq.n	8001ed0 <HAL_ADC_ConfigChannel+0xcc>
 8001ece:	e079      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x1c0>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d000      	beq.n	8001edc <HAL_ADC_ConfigChannel+0xd8>
 8001eda:	e071      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x1bc>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d000      	beq.n	8001ee8 <HAL_ADC_ConfigChannel+0xe4>
 8001ee6:	e069      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x1b8>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2240      	movs	r2, #64	; 0x40
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d000      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0xf0>
 8001ef2:	e061      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x1b4>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2280      	movs	r2, #128	; 0x80
 8001efa:	4013      	ands	r3, r2
 8001efc:	d000      	beq.n	8001f00 <HAL_ADC_ConfigChannel+0xfc>
 8001efe:	e059      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x1b0>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d151      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x1ac>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4013      	ands	r3, r2
 8001f16:	d149      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1a8>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4013      	ands	r3, r2
 8001f22:	d141      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1a4>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d139      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1a0>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	015b      	lsls	r3, r3, #5
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d131      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x19c>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	019b      	lsls	r3, r3, #6
 8001f44:	4013      	ands	r3, r2
 8001f46:	d129      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x198>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	01db      	lsls	r3, r3, #7
 8001f50:	4013      	ands	r3, r2
 8001f52:	d121      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x194>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d119      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x190>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	025b      	lsls	r3, r3, #9
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d111      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x18c>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	029b      	lsls	r3, r3, #10
 8001f74:	4013      	ands	r3, r2
 8001f76:	d109      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x188>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	02db      	lsls	r3, r3, #11
 8001f80:	4013      	ands	r3, r2
 8001f82:	d001      	beq.n	8001f88 <HAL_ADC_ConfigChannel+0x184>
 8001f84:	2312      	movs	r3, #18
 8001f86:	e024      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e022      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001f8c:	2311      	movs	r3, #17
 8001f8e:	e020      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001f90:	2310      	movs	r3, #16
 8001f92:	e01e      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001f94:	230f      	movs	r3, #15
 8001f96:	e01c      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001f98:	230e      	movs	r3, #14
 8001f9a:	e01a      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001f9c:	230d      	movs	r3, #13
 8001f9e:	e018      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001fa0:	230c      	movs	r3, #12
 8001fa2:	e016      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001fa4:	230b      	movs	r3, #11
 8001fa6:	e014      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001fa8:	230a      	movs	r3, #10
 8001faa:	e012      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001fac:	2309      	movs	r3, #9
 8001fae:	e010      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	e00e      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001fb4:	2307      	movs	r3, #7
 8001fb6:	e00c      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001fb8:	2306      	movs	r3, #6
 8001fba:	e00a      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001fbc:	2305      	movs	r3, #5
 8001fbe:	e008      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	e006      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e004      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e002      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	6852      	ldr	r2, [r2, #4]
 8001fd6:	201f      	movs	r0, #31
 8001fd8:	4002      	ands	r2, r0
 8001fda:	4093      	lsls	r3, r2
 8001fdc:	000a      	movs	r2, r1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d808      	bhi.n	8002006 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	001a      	movs	r2, r3
 8002002:	f7ff fcae 	bl	8001962 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6819      	ldr	r1, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	001a      	movs	r2, r3
 8002014:	f7ff fce8 	bl	80019e8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db00      	blt.n	8002022 <HAL_ADC_ConfigChannel+0x21e>
 8002020:	e0bc      	b.n	800219c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002022:	4b50      	ldr	r3, [pc, #320]	; (8002164 <HAL_ADC_ConfigChannel+0x360>)
 8002024:	0018      	movs	r0, r3
 8002026:	f7ff fc5b 	bl	80018e0 <LL_ADC_GetCommonPathInternalCh>
 800202a:	0003      	movs	r3, r0
 800202c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a4d      	ldr	r2, [pc, #308]	; (8002168 <HAL_ADC_ConfigChannel+0x364>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d122      	bne.n	800207e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002040:	d11d      	bne.n	800207e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	0412      	lsls	r2, r2, #16
 8002048:	4313      	orrs	r3, r2
 800204a:	4a46      	ldr	r2, [pc, #280]	; (8002164 <HAL_ADC_ConfigChannel+0x360>)
 800204c:	0019      	movs	r1, r3
 800204e:	0010      	movs	r0, r2
 8002050:	f7ff fc32 	bl	80018b8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002054:	4b45      	ldr	r3, [pc, #276]	; (800216c <HAL_ADC_ConfigChannel+0x368>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4945      	ldr	r1, [pc, #276]	; (8002170 <HAL_ADC_ConfigChannel+0x36c>)
 800205a:	0018      	movs	r0, r3
 800205c:	f7fe f850 	bl	8000100 <__udivsi3>
 8002060:	0003      	movs	r3, r0
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	0013      	movs	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	189b      	adds	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800206e:	e002      	b.n	8002076 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3b01      	subs	r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f9      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800207c:	e08e      	b.n	800219c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a3c      	ldr	r2, [pc, #240]	; (8002174 <HAL_ADC_ConfigChannel+0x370>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d10e      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	045b      	lsls	r3, r3, #17
 800208e:	4013      	ands	r3, r2
 8002090:	d109      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	2280      	movs	r2, #128	; 0x80
 8002096:	0452      	lsls	r2, r2, #17
 8002098:	4313      	orrs	r3, r2
 800209a:	4a32      	ldr	r2, [pc, #200]	; (8002164 <HAL_ADC_ConfigChannel+0x360>)
 800209c:	0019      	movs	r1, r3
 800209e:	0010      	movs	r0, r2
 80020a0:	f7ff fc0a 	bl	80018b8 <LL_ADC_SetCommonPathInternalCh>
 80020a4:	e07a      	b.n	800219c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a33      	ldr	r2, [pc, #204]	; (8002178 <HAL_ADC_ConfigChannel+0x374>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d000      	beq.n	80020b2 <HAL_ADC_ConfigChannel+0x2ae>
 80020b0:	e074      	b.n	800219c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	03db      	lsls	r3, r3, #15
 80020b8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80020ba:	d000      	beq.n	80020be <HAL_ADC_ConfigChannel+0x2ba>
 80020bc:	e06e      	b.n	800219c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	03d2      	lsls	r2, r2, #15
 80020c4:	4313      	orrs	r3, r2
 80020c6:	4a27      	ldr	r2, [pc, #156]	; (8002164 <HAL_ADC_ConfigChannel+0x360>)
 80020c8:	0019      	movs	r1, r3
 80020ca:	0010      	movs	r0, r2
 80020cc:	f7ff fbf4 	bl	80018b8 <LL_ADC_SetCommonPathInternalCh>
 80020d0:	e064      	b.n	800219c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	061b      	lsls	r3, r3, #24
 80020da:	429a      	cmp	r2, r3
 80020dc:	d004      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80020e2:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <HAL_ADC_ConfigChannel+0x35c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d107      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0019      	movs	r1, r3
 80020f2:	0010      	movs	r0, r2
 80020f4:	f7ff fc66 	bl	80019c4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da4d      	bge.n	800219c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002100:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_ADC_ConfigChannel+0x360>)
 8002102:	0018      	movs	r0, r3
 8002104:	f7ff fbec 	bl	80018e0 <LL_ADC_GetCommonPathInternalCh>
 8002108:	0003      	movs	r3, r0
 800210a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a15      	ldr	r2, [pc, #84]	; (8002168 <HAL_ADC_ConfigChannel+0x364>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d108      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4a18      	ldr	r2, [pc, #96]	; (800217c <HAL_ADC_ConfigChannel+0x378>)
 800211a:	4013      	ands	r3, r2
 800211c:	4a11      	ldr	r2, [pc, #68]	; (8002164 <HAL_ADC_ConfigChannel+0x360>)
 800211e:	0019      	movs	r1, r3
 8002120:	0010      	movs	r0, r2
 8002122:	f7ff fbc9 	bl	80018b8 <LL_ADC_SetCommonPathInternalCh>
 8002126:	e039      	b.n	800219c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a11      	ldr	r2, [pc, #68]	; (8002174 <HAL_ADC_ConfigChannel+0x370>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d108      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4a12      	ldr	r2, [pc, #72]	; (8002180 <HAL_ADC_ConfigChannel+0x37c>)
 8002136:	4013      	ands	r3, r2
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_ADC_ConfigChannel+0x360>)
 800213a:	0019      	movs	r1, r3
 800213c:	0010      	movs	r0, r2
 800213e:	f7ff fbbb 	bl	80018b8 <LL_ADC_SetCommonPathInternalCh>
 8002142:	e02b      	b.n	800219c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <HAL_ADC_ConfigChannel+0x374>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d126      	bne.n	800219c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_ADC_ConfigChannel+0x380>)
 8002152:	4013      	ands	r3, r2
 8002154:	4a03      	ldr	r2, [pc, #12]	; (8002164 <HAL_ADC_ConfigChannel+0x360>)
 8002156:	0019      	movs	r1, r3
 8002158:	0010      	movs	r0, r2
 800215a:	f7ff fbad 	bl	80018b8 <LL_ADC_SetCommonPathInternalCh>
 800215e:	e01d      	b.n	800219c <HAL_ADC_ConfigChannel+0x398>
 8002160:	80000004 	.word	0x80000004
 8002164:	40012708 	.word	0x40012708
 8002168:	b0001000 	.word	0xb0001000
 800216c:	20000070 	.word	0x20000070
 8002170:	00030d40 	.word	0x00030d40
 8002174:	b8004000 	.word	0xb8004000
 8002178:	b4002000 	.word	0xb4002000
 800217c:	ff7fffff 	.word	0xff7fffff
 8002180:	feffffff 	.word	0xfeffffff
 8002184:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	2220      	movs	r2, #32
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002194:	2317      	movs	r3, #23
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2254      	movs	r2, #84	; 0x54
 80021a0:	2100      	movs	r1, #0
 80021a2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80021a4:	2317      	movs	r3, #23
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	781b      	ldrb	r3, [r3, #0]
}
 80021aa:	0018      	movs	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b006      	add	sp, #24
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)

080021b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	0002      	movs	r2, r0
 80021bc:	1dfb      	adds	r3, r7, #7
 80021be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	1dfb      	adds	r3, r7, #7
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b7f      	cmp	r3, #127	; 0x7f
 80021c6:	d809      	bhi.n	80021dc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	001a      	movs	r2, r3
 80021ce:	231f      	movs	r3, #31
 80021d0:	401a      	ands	r2, r3
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__NVIC_EnableIRQ+0x30>)
 80021d4:	2101      	movs	r1, #1
 80021d6:	4091      	lsls	r1, r2
 80021d8:	000a      	movs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	e000e100 	.word	0xe000e100

080021e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	0002      	movs	r2, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	1dfb      	adds	r3, r7, #7
 80021f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021f6:	1dfb      	adds	r3, r7, #7
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b7f      	cmp	r3, #127	; 0x7f
 80021fc:	d828      	bhi.n	8002250 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021fe:	4a2f      	ldr	r2, [pc, #188]	; (80022bc <__NVIC_SetPriority+0xd4>)
 8002200:	1dfb      	adds	r3, r7, #7
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	b25b      	sxtb	r3, r3
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	33c0      	adds	r3, #192	; 0xc0
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	589b      	ldr	r3, [r3, r2]
 800220e:	1dfa      	adds	r2, r7, #7
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	0011      	movs	r1, r2
 8002214:	2203      	movs	r2, #3
 8002216:	400a      	ands	r2, r1
 8002218:	00d2      	lsls	r2, r2, #3
 800221a:	21ff      	movs	r1, #255	; 0xff
 800221c:	4091      	lsls	r1, r2
 800221e:	000a      	movs	r2, r1
 8002220:	43d2      	mvns	r2, r2
 8002222:	401a      	ands	r2, r3
 8002224:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	019b      	lsls	r3, r3, #6
 800222a:	22ff      	movs	r2, #255	; 0xff
 800222c:	401a      	ands	r2, r3
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	0018      	movs	r0, r3
 8002234:	2303      	movs	r3, #3
 8002236:	4003      	ands	r3, r0
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800223c:	481f      	ldr	r0, [pc, #124]	; (80022bc <__NVIC_SetPriority+0xd4>)
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b25b      	sxtb	r3, r3
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	430a      	orrs	r2, r1
 8002248:	33c0      	adds	r3, #192	; 0xc0
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800224e:	e031      	b.n	80022b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002250:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <__NVIC_SetPriority+0xd8>)
 8002252:	1dfb      	adds	r3, r7, #7
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	0019      	movs	r1, r3
 8002258:	230f      	movs	r3, #15
 800225a:	400b      	ands	r3, r1
 800225c:	3b08      	subs	r3, #8
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3306      	adds	r3, #6
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	18d3      	adds	r3, r2, r3
 8002266:	3304      	adds	r3, #4
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	1dfa      	adds	r2, r7, #7
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	0011      	movs	r1, r2
 8002270:	2203      	movs	r2, #3
 8002272:	400a      	ands	r2, r1
 8002274:	00d2      	lsls	r2, r2, #3
 8002276:	21ff      	movs	r1, #255	; 0xff
 8002278:	4091      	lsls	r1, r2
 800227a:	000a      	movs	r2, r1
 800227c:	43d2      	mvns	r2, r2
 800227e:	401a      	ands	r2, r3
 8002280:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	019b      	lsls	r3, r3, #6
 8002286:	22ff      	movs	r2, #255	; 0xff
 8002288:	401a      	ands	r2, r3
 800228a:	1dfb      	adds	r3, r7, #7
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	0018      	movs	r0, r3
 8002290:	2303      	movs	r3, #3
 8002292:	4003      	ands	r3, r0
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002298:	4809      	ldr	r0, [pc, #36]	; (80022c0 <__NVIC_SetPriority+0xd8>)
 800229a:	1dfb      	adds	r3, r7, #7
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	001c      	movs	r4, r3
 80022a0:	230f      	movs	r3, #15
 80022a2:	4023      	ands	r3, r4
 80022a4:	3b08      	subs	r3, #8
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	430a      	orrs	r2, r1
 80022aa:	3306      	adds	r3, #6
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	18c3      	adds	r3, r0, r3
 80022b0:	3304      	adds	r3, #4
 80022b2:	601a      	str	r2, [r3, #0]
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b003      	add	sp, #12
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	e000e100 	.word	0xe000e100
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	045b      	lsls	r3, r3, #17
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d301      	bcc.n	80022dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d8:	2301      	movs	r3, #1
 80022da:	e010      	b.n	80022fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <SysTick_Config+0x44>)
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	3a01      	subs	r2, #1
 80022e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e4:	2301      	movs	r3, #1
 80022e6:	425b      	negs	r3, r3
 80022e8:	2103      	movs	r1, #3
 80022ea:	0018      	movs	r0, r3
 80022ec:	f7ff ff7c 	bl	80021e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <SysTick_Config+0x44>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f6:	4b04      	ldr	r3, [pc, #16]	; (8002308 <SysTick_Config+0x44>)
 80022f8:	2207      	movs	r2, #7
 80022fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b002      	add	sp, #8
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	e000e010 	.word	0xe000e010

0800230c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	210f      	movs	r1, #15
 8002318:	187b      	adds	r3, r7, r1
 800231a:	1c02      	adds	r2, r0, #0
 800231c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	187b      	adds	r3, r7, r1
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b25b      	sxtb	r3, r3
 8002326:	0011      	movs	r1, r2
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff ff5d 	bl	80021e8 <__NVIC_SetPriority>
}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	b004      	add	sp, #16
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	0002      	movs	r2, r0
 800233e:	1dfb      	adds	r3, r7, #7
 8002340:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	b25b      	sxtb	r3, r3
 8002348:	0018      	movs	r0, r3
 800234a:	f7ff ff33 	bl	80021b4 <__NVIC_EnableIRQ>
}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	0018      	movs	r0, r3
 8002362:	f7ff ffaf 	bl	80022c4 <SysTick_Config>
 8002366:	0003      	movs	r3, r0
}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	b002      	add	sp, #8
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e077      	b.n	8002472 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a3d      	ldr	r2, [pc, #244]	; (800247c <HAL_DMA_Init+0x10c>)
 8002388:	4694      	mov	ip, r2
 800238a:	4463      	add	r3, ip
 800238c:	2114      	movs	r1, #20
 800238e:	0018      	movs	r0, r3
 8002390:	f7fd feb6 	bl	8000100 <__udivsi3>
 8002394:	0003      	movs	r3, r0
 8002396:	009a      	lsls	r2, r3, #2
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2225      	movs	r2, #37	; 0x25
 80023a0:	2102      	movs	r1, #2
 80023a2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4934      	ldr	r1, [pc, #208]	; (8002480 <HAL_DMA_Init+0x110>)
 80023b0:	400a      	ands	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6819      	ldr	r1, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f000 fa8d 	bl	800290c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	01db      	lsls	r3, r3, #7
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d102      	bne.n	8002404 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	213f      	movs	r1, #63	; 0x3f
 800240e:	400a      	ands	r2, r1
 8002410:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800241a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d011      	beq.n	8002448 <HAL_DMA_Init+0xd8>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b04      	cmp	r3, #4
 800242a:	d80d      	bhi.n	8002448 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	0018      	movs	r0, r3
 8002430:	f000 fa98 	bl	8002964 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	e008      	b.n	800245a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2225      	movs	r2, #37	; 0x25
 8002464:	2101      	movs	r1, #1
 8002466:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2224      	movs	r2, #36	; 0x24
 800246c:	2100      	movs	r1, #0
 800246e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	0018      	movs	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	b002      	add	sp, #8
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	bffdfff8 	.word	0xbffdfff8
 8002480:	ffff800f 	.word	0xffff800f

08002484 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2317      	movs	r3, #23
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2224      	movs	r2, #36	; 0x24
 800249e:	5c9b      	ldrb	r3, [r3, r2]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_DMA_Start_IT+0x24>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e06f      	b.n	8002588 <HAL_DMA_Start_IT+0x104>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2224      	movs	r2, #36	; 0x24
 80024ac:	2101      	movs	r1, #1
 80024ae:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2225      	movs	r2, #37	; 0x25
 80024b4:	5c9b      	ldrb	r3, [r3, r2]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d157      	bne.n	800256c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2225      	movs	r2, #37	; 0x25
 80024c0:	2102      	movs	r1, #2
 80024c2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2101      	movs	r1, #1
 80024d6:	438a      	bics	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f9d3 	bl	800288c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d008      	beq.n	8002500 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	210e      	movs	r1, #14
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e00f      	b.n	8002520 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2104      	movs	r1, #4
 800250c:	438a      	bics	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	210a      	movs	r1, #10
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	025b      	lsls	r3, r3, #9
 800252a:	4013      	ands	r3, r2
 800252c:	d008      	beq.n	8002540 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	0049      	lsls	r1, r1, #1
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	0049      	lsls	r1, r1, #1
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2101      	movs	r1, #1
 8002566:	430a      	orrs	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e00a      	b.n	8002582 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2224      	movs	r2, #36	; 0x24
 8002576:	2100      	movs	r1, #0
 8002578:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800257a:	2317      	movs	r3, #23
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002582:	2317      	movs	r3, #23
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	781b      	ldrb	r3, [r3, #0]
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b006      	add	sp, #24
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e050      	b.n	8002644 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2225      	movs	r2, #37	; 0x25
 80025a6:	5c9b      	ldrb	r3, [r3, r2]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d008      	beq.n	80025c0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2204      	movs	r2, #4
 80025b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2224      	movs	r2, #36	; 0x24
 80025b8:	2100      	movs	r1, #0
 80025ba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e041      	b.n	8002644 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	210e      	movs	r1, #14
 80025cc:	438a      	bics	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	491c      	ldr	r1, [pc, #112]	; (800264c <HAL_DMA_Abort+0xbc>)
 80025dc:	400a      	ands	r2, r1
 80025de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2101      	movs	r1, #1
 80025ec:	438a      	bics	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80025f0:	4b17      	ldr	r3, [pc, #92]	; (8002650 <HAL_DMA_Abort+0xc0>)
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	221c      	movs	r2, #28
 80025fa:	4013      	ands	r3, r2
 80025fc:	2201      	movs	r2, #1
 80025fe:	409a      	lsls	r2, r3
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <HAL_DMA_Abort+0xc0>)
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800260e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00c      	beq.n	8002632 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002622:	490a      	ldr	r1, [pc, #40]	; (800264c <HAL_DMA_Abort+0xbc>)
 8002624:	400a      	ands	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002630:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2225      	movs	r2, #37	; 0x25
 8002636:	2101      	movs	r1, #1
 8002638:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2224      	movs	r2, #36	; 0x24
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b002      	add	sp, #8
 800264a:	bd80      	pop	{r7, pc}
 800264c:	fffffeff 	.word	0xfffffeff
 8002650:	40020000 	.word	0x40020000

08002654 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800265c:	210f      	movs	r1, #15
 800265e:	187b      	adds	r3, r7, r1
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2225      	movs	r2, #37	; 0x25
 8002668:	5c9b      	ldrb	r3, [r3, r2]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d006      	beq.n	800267e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2204      	movs	r2, #4
 8002674:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002676:	187b      	adds	r3, r7, r1
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e049      	b.n	8002712 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	210e      	movs	r1, #14
 800268a:	438a      	bics	r2, r1
 800268c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	438a      	bics	r2, r1
 800269c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	491d      	ldr	r1, [pc, #116]	; (8002720 <HAL_DMA_Abort_IT+0xcc>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_DMA_Abort_IT+0xd0>)
 80026b0:	6859      	ldr	r1, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	221c      	movs	r2, #28
 80026b8:	4013      	ands	r3, r2
 80026ba:	2201      	movs	r2, #1
 80026bc:	409a      	lsls	r2, r3
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_DMA_Abort_IT+0xd0>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80026cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00c      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e0:	490f      	ldr	r1, [pc, #60]	; (8002720 <HAL_DMA_Abort_IT+0xcc>)
 80026e2:	400a      	ands	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80026ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2225      	movs	r2, #37	; 0x25
 80026f4:	2101      	movs	r1, #1
 80026f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2224      	movs	r2, #36	; 0x24
 80026fc:	2100      	movs	r1, #0
 80026fe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	2b00      	cmp	r3, #0
 8002706:	d004      	beq.n	8002712 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	0010      	movs	r0, r2
 8002710:	4798      	blx	r3
    }
  }
  return status;
 8002712:	230f      	movs	r3, #15
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	781b      	ldrb	r3, [r3, #0]
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b004      	add	sp, #16
 800271e:	bd80      	pop	{r7, pc}
 8002720:	fffffeff 	.word	0xfffffeff
 8002724:	40020000 	.word	0x40020000

08002728 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002730:	4b55      	ldr	r3, [pc, #340]	; (8002888 <HAL_DMA_IRQHandler+0x160>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	221c      	movs	r2, #28
 8002744:	4013      	ands	r3, r2
 8002746:	2204      	movs	r2, #4
 8002748:	409a      	lsls	r2, r3
 800274a:	0013      	movs	r3, r2
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4013      	ands	r3, r2
 8002750:	d027      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x7a>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2204      	movs	r2, #4
 8002756:	4013      	ands	r3, r2
 8002758:	d023      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2220      	movs	r2, #32
 8002762:	4013      	ands	r3, r2
 8002764:	d107      	bne.n	8002776 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2104      	movs	r1, #4
 8002772:	438a      	bics	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002776:	4b44      	ldr	r3, [pc, #272]	; (8002888 <HAL_DMA_IRQHandler+0x160>)
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	221c      	movs	r2, #28
 8002780:	4013      	ands	r3, r2
 8002782:	2204      	movs	r2, #4
 8002784:	409a      	lsls	r2, r3
 8002786:	4b40      	ldr	r3, [pc, #256]	; (8002888 <HAL_DMA_IRQHandler+0x160>)
 8002788:	430a      	orrs	r2, r1
 800278a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	2b00      	cmp	r3, #0
 8002792:	d100      	bne.n	8002796 <HAL_DMA_IRQHandler+0x6e>
 8002794:	e073      	b.n	800287e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	0010      	movs	r0, r2
 800279e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80027a0:	e06d      	b.n	800287e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	221c      	movs	r2, #28
 80027a8:	4013      	ands	r3, r2
 80027aa:	2202      	movs	r2, #2
 80027ac:	409a      	lsls	r2, r3
 80027ae:	0013      	movs	r3, r2
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4013      	ands	r3, r2
 80027b4:	d02e      	beq.n	8002814 <HAL_DMA_IRQHandler+0xec>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2202      	movs	r2, #2
 80027ba:	4013      	ands	r3, r2
 80027bc:	d02a      	beq.n	8002814 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2220      	movs	r2, #32
 80027c6:	4013      	ands	r3, r2
 80027c8:	d10b      	bne.n	80027e2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	210a      	movs	r1, #10
 80027d6:	438a      	bics	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2225      	movs	r2, #37	; 0x25
 80027de:	2101      	movs	r1, #1
 80027e0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80027e2:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_DMA_IRQHandler+0x160>)
 80027e4:	6859      	ldr	r1, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	221c      	movs	r2, #28
 80027ec:	4013      	ands	r3, r2
 80027ee:	2202      	movs	r2, #2
 80027f0:	409a      	lsls	r2, r3
 80027f2:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_DMA_IRQHandler+0x160>)
 80027f4:	430a      	orrs	r2, r1
 80027f6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2224      	movs	r2, #36	; 0x24
 80027fc:	2100      	movs	r1, #0
 80027fe:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d03a      	beq.n	800287e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	0010      	movs	r0, r2
 8002810:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002812:	e034      	b.n	800287e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	221c      	movs	r2, #28
 800281a:	4013      	ands	r3, r2
 800281c:	2208      	movs	r2, #8
 800281e:	409a      	lsls	r2, r3
 8002820:	0013      	movs	r3, r2
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4013      	ands	r3, r2
 8002826:	d02b      	beq.n	8002880 <HAL_DMA_IRQHandler+0x158>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2208      	movs	r2, #8
 800282c:	4013      	ands	r3, r2
 800282e:	d027      	beq.n	8002880 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	210e      	movs	r1, #14
 800283c:	438a      	bics	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_DMA_IRQHandler+0x160>)
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	221c      	movs	r2, #28
 800284a:	4013      	ands	r3, r2
 800284c:	2201      	movs	r2, #1
 800284e:	409a      	lsls	r2, r3
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_DMA_IRQHandler+0x160>)
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2225      	movs	r2, #37	; 0x25
 8002860:	2101      	movs	r1, #1
 8002862:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2224      	movs	r2, #36	; 0x24
 8002868:	2100      	movs	r1, #0
 800286a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	0010      	movs	r0, r2
 800287c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	46c0      	nop			; (mov r8, r8)
}
 8002882:	46bd      	mov	sp, r7
 8002884:	b004      	add	sp, #16
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40020000 	.word	0x40020000

0800288c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d004      	beq.n	80028b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80028b4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <DMA_SetConfig+0x7c>)
 80028b8:	6859      	ldr	r1, [r3, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	221c      	movs	r2, #28
 80028c0:	4013      	ands	r3, r2
 80028c2:	2201      	movs	r2, #1
 80028c4:	409a      	lsls	r2, r3
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <DMA_SetConfig+0x7c>)
 80028c8:	430a      	orrs	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d108      	bne.n	80028ee <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028ec:	e007      	b.n	80028fe <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	60da      	str	r2, [r3, #12]
}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	46bd      	mov	sp, r7
 8002902:	b004      	add	sp, #16
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	40020000 	.word	0x40020000

0800290c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	4a10      	ldr	r2, [pc, #64]	; (800295c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800291c:	4694      	mov	ip, r2
 800291e:	4463      	add	r3, ip
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	001a      	movs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	001a      	movs	r2, r3
 800292e:	23ff      	movs	r3, #255	; 0xff
 8002930:	4013      	ands	r3, r2
 8002932:	3b08      	subs	r3, #8
 8002934:	2114      	movs	r1, #20
 8002936:	0018      	movs	r0, r3
 8002938:	f7fd fbe2 	bl	8000100 <__udivsi3>
 800293c:	0003      	movs	r3, r0
 800293e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a07      	ldr	r2, [pc, #28]	; (8002960 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002944:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	221f      	movs	r2, #31
 800294a:	4013      	ands	r3, r2
 800294c:	2201      	movs	r2, #1
 800294e:	409a      	lsls	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b004      	add	sp, #16
 800295a:	bd80      	pop	{r7, pc}
 800295c:	10008200 	.word	0x10008200
 8002960:	40020880 	.word	0x40020880

08002964 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	223f      	movs	r2, #63	; 0x3f
 8002972:	4013      	ands	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800297a:	4694      	mov	ip, r2
 800297c:	4463      	add	r3, ip
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	001a      	movs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800298a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3b01      	subs	r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	4013      	ands	r3, r2
 8002994:	2201      	movs	r2, #1
 8002996:	409a      	lsls	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b004      	add	sp, #16
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	1000823f 	.word	0x1000823f
 80029a8:	40020940 	.word	0x40020940

080029ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ba:	e147      	b.n	8002c4c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2101      	movs	r1, #1
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4091      	lsls	r1, r2
 80029c6:	000a      	movs	r2, r1
 80029c8:	4013      	ands	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d100      	bne.n	80029d4 <HAL_GPIO_Init+0x28>
 80029d2:	e138      	b.n	8002c46 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2203      	movs	r2, #3
 80029da:	4013      	ands	r3, r2
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d005      	beq.n	80029ec <HAL_GPIO_Init+0x40>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2203      	movs	r2, #3
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d130      	bne.n	8002a4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	409a      	lsls	r2, r3
 80029fa:	0013      	movs	r3, r2
 80029fc:	43da      	mvns	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a22:	2201      	movs	r2, #1
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	409a      	lsls	r2, r3
 8002a28:	0013      	movs	r3, r2
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	2201      	movs	r2, #1
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	0013      	movs	r3, r2
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2203      	movs	r2, #3
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d017      	beq.n	8002a8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	2203      	movs	r2, #3
 8002a66:	409a      	lsls	r2, r3
 8002a68:	0013      	movs	r3, r2
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	0013      	movs	r3, r2
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d123      	bne.n	8002ade <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	08da      	lsrs	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3208      	adds	r2, #8
 8002a9e:	0092      	lsls	r2, r2, #2
 8002aa0:	58d3      	ldr	r3, [r2, r3]
 8002aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2207      	movs	r2, #7
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	220f      	movs	r2, #15
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2107      	movs	r1, #7
 8002ac2:	400b      	ands	r3, r1
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	0013      	movs	r3, r2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	08da      	lsrs	r2, r3, #3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3208      	adds	r2, #8
 8002ad8:	0092      	lsls	r2, r2, #2
 8002ada:	6939      	ldr	r1, [r7, #16]
 8002adc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	2203      	movs	r2, #3
 8002aea:	409a      	lsls	r2, r3
 8002aec:	0013      	movs	r3, r2
 8002aee:	43da      	mvns	r2, r3
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2203      	movs	r2, #3
 8002afc:	401a      	ands	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	409a      	lsls	r2, r3
 8002b04:	0013      	movs	r3, r2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	23c0      	movs	r3, #192	; 0xc0
 8002b18:	029b      	lsls	r3, r3, #10
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d100      	bne.n	8002b20 <HAL_GPIO_Init+0x174>
 8002b1e:	e092      	b.n	8002c46 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002b20:	4a50      	ldr	r2, [pc, #320]	; (8002c64 <HAL_GPIO_Init+0x2b8>)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	3318      	adds	r3, #24
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	589b      	ldr	r3, [r3, r2]
 8002b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2203      	movs	r2, #3
 8002b32:	4013      	ands	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	220f      	movs	r2, #15
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	0013      	movs	r3, r2
 8002b3c:	43da      	mvns	r2, r3
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	23a0      	movs	r3, #160	; 0xa0
 8002b48:	05db      	lsls	r3, r3, #23
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d013      	beq.n	8002b76 <HAL_GPIO_Init+0x1ca>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a45      	ldr	r2, [pc, #276]	; (8002c68 <HAL_GPIO_Init+0x2bc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00d      	beq.n	8002b72 <HAL_GPIO_Init+0x1c6>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a44      	ldr	r2, [pc, #272]	; (8002c6c <HAL_GPIO_Init+0x2c0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d007      	beq.n	8002b6e <HAL_GPIO_Init+0x1c2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a43      	ldr	r2, [pc, #268]	; (8002c70 <HAL_GPIO_Init+0x2c4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d101      	bne.n	8002b6a <HAL_GPIO_Init+0x1be>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e006      	b.n	8002b78 <HAL_GPIO_Init+0x1cc>
 8002b6a:	2305      	movs	r3, #5
 8002b6c:	e004      	b.n	8002b78 <HAL_GPIO_Init+0x1cc>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e002      	b.n	8002b78 <HAL_GPIO_Init+0x1cc>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_GPIO_Init+0x1cc>
 8002b76:	2300      	movs	r3, #0
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	2103      	movs	r1, #3
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	00d2      	lsls	r2, r2, #3
 8002b80:	4093      	lsls	r3, r2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002b88:	4936      	ldr	r1, [pc, #216]	; (8002c64 <HAL_GPIO_Init+0x2b8>)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	3318      	adds	r3, #24
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b96:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <HAL_GPIO_Init+0x2b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	035b      	lsls	r3, r3, #13
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bba:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <HAL_GPIO_Init+0x2b8>)
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002bc0:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <HAL_GPIO_Init+0x2b8>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	43da      	mvns	r2, r3
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	039b      	lsls	r3, r3, #14
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002be4:	4b1f      	ldr	r3, [pc, #124]	; (8002c64 <HAL_GPIO_Init+0x2b8>)
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bea:	4a1e      	ldr	r2, [pc, #120]	; (8002c64 <HAL_GPIO_Init+0x2b8>)
 8002bec:	2384      	movs	r3, #132	; 0x84
 8002bee:	58d3      	ldr	r3, [r2, r3]
 8002bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	029b      	lsls	r3, r3, #10
 8002c04:	4013      	ands	r3, r2
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c10:	4914      	ldr	r1, [pc, #80]	; (8002c64 <HAL_GPIO_Init+0x2b8>)
 8002c12:	2284      	movs	r2, #132	; 0x84
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002c18:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <HAL_GPIO_Init+0x2b8>)
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	58d3      	ldr	r3, [r2, r3]
 8002c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	43da      	mvns	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	025b      	lsls	r3, r3, #9
 8002c32:	4013      	ands	r3, r2
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c3e:	4909      	ldr	r1, [pc, #36]	; (8002c64 <HAL_GPIO_Init+0x2b8>)
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	40da      	lsrs	r2, r3
 8002c54:	1e13      	subs	r3, r2, #0
 8002c56:	d000      	beq.n	8002c5a <HAL_GPIO_Init+0x2ae>
 8002c58:	e6b0      	b.n	80029bc <HAL_GPIO_Init+0x10>
  }
}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b006      	add	sp, #24
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021800 	.word	0x40021800
 8002c68:	50000400 	.word	0x50000400
 8002c6c:	50000800 	.word	0x50000800
 8002c70:	50000c00 	.word	0x50000c00

08002c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	0008      	movs	r0, r1
 8002c7e:	0011      	movs	r1, r2
 8002c80:	1cbb      	adds	r3, r7, #2
 8002c82:	1c02      	adds	r2, r0, #0
 8002c84:	801a      	strh	r2, [r3, #0]
 8002c86:	1c7b      	adds	r3, r7, #1
 8002c88:	1c0a      	adds	r2, r1, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c8c:	1c7b      	adds	r3, r7, #1
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d004      	beq.n	8002c9e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c94:	1cbb      	adds	r3, r7, #2
 8002c96:	881a      	ldrh	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c9c:	e003      	b.n	8002ca6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c9e:	1cbb      	adds	r3, r7, #2
 8002ca0:	881a      	ldrh	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b002      	add	sp, #8
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e082      	b.n	8002dc8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2241      	movs	r2, #65	; 0x41
 8002cc6:	5c9b      	ldrb	r3, [r3, r2]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d107      	bne.n	8002cde <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2240      	movs	r2, #64	; 0x40
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7fe f891 	bl	8000e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2241      	movs	r2, #65	; 0x41
 8002ce2:	2124      	movs	r1, #36	; 0x24
 8002ce4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	438a      	bics	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4934      	ldr	r1, [pc, #208]	; (8002dd0 <HAL_I2C_Init+0x120>)
 8002d00:	400a      	ands	r2, r1
 8002d02:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4931      	ldr	r1, [pc, #196]	; (8002dd4 <HAL_I2C_Init+0x124>)
 8002d10:	400a      	ands	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d108      	bne.n	8002d2e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	0209      	lsls	r1, r1, #8
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	e007      	b.n	8002d3e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2184      	movs	r1, #132	; 0x84
 8002d38:	0209      	lsls	r1, r1, #8
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d104      	bne.n	8002d50 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	0112      	lsls	r2, r2, #4
 8002d4e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	491f      	ldr	r1, [pc, #124]	; (8002dd8 <HAL_I2C_Init+0x128>)
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	491a      	ldr	r1, [pc, #104]	; (8002dd4 <HAL_I2C_Init+0x124>)
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69d9      	ldr	r1, [r3, #28]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1a      	ldr	r2, [r3, #32]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2101      	movs	r1, #1
 8002da6:	430a      	orrs	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2241      	movs	r2, #65	; 0x41
 8002db4:	2120      	movs	r1, #32
 8002db6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2242      	movs	r2, #66	; 0x42
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b002      	add	sp, #8
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	f0ffffff 	.word	0xf0ffffff
 8002dd4:	ffff7fff 	.word	0xffff7fff
 8002dd8:	02008000 	.word	0x02008000

08002ddc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2241      	movs	r2, #65	; 0x41
 8002dea:	5c9b      	ldrb	r3, [r3, r2]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d138      	bne.n	8002e64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2240      	movs	r2, #64	; 0x40
 8002df6:	5c9b      	ldrb	r3, [r3, r2]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e032      	b.n	8002e66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2240      	movs	r2, #64	; 0x40
 8002e04:	2101      	movs	r1, #1
 8002e06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2241      	movs	r2, #65	; 0x41
 8002e0c:	2124      	movs	r1, #36	; 0x24
 8002e0e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	438a      	bics	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4911      	ldr	r1, [pc, #68]	; (8002e70 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6819      	ldr	r1, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2241      	movs	r2, #65	; 0x41
 8002e54:	2120      	movs	r1, #32
 8002e56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2240      	movs	r2, #64	; 0x40
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e000      	b.n	8002e66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e64:	2302      	movs	r3, #2
  }
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b002      	add	sp, #8
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	ffffefff 	.word	0xffffefff

08002e74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2241      	movs	r2, #65	; 0x41
 8002e82:	5c9b      	ldrb	r3, [r3, r2]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d139      	bne.n	8002efe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2240      	movs	r2, #64	; 0x40
 8002e8e:	5c9b      	ldrb	r3, [r3, r2]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e033      	b.n	8002f00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2240      	movs	r2, #64	; 0x40
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2241      	movs	r2, #65	; 0x41
 8002ea4:	2124      	movs	r1, #36	; 0x24
 8002ea6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	438a      	bics	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4a11      	ldr	r2, [pc, #68]	; (8002f08 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2241      	movs	r2, #65	; 0x41
 8002eee:	2120      	movs	r1, #32
 8002ef0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2240      	movs	r2, #64	; 0x40
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
  }
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b004      	add	sp, #16
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	fffff0ff 	.word	0xfffff0ff

08002f0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d11f      	bne.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	0013      	movs	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	189b      	adds	r3, r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4912      	ldr	r1, [pc, #72]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f7fd f8de 	bl	8000100 <__udivsi3>
 8002f44:	0003      	movs	r3, r0
 8002f46:	3301      	adds	r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f4a:	e008      	b.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	e001      	b.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e009      	b.n	8002f72 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f5e:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	401a      	ands	r2, r3
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d0ed      	beq.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b004      	add	sp, #16
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	40007000 	.word	0x40007000
 8002f80:	fffff9ff 	.word	0xfffff9ff
 8002f84:	20000070 	.word	0x20000070
 8002f88:	000f4240 	.word	0x000f4240

08002f8c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	23e0      	movs	r3, #224	; 0xe0
 8002f96:	01db      	lsls	r3, r3, #7
 8002f98:	4013      	ands	r3, r2
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000

08002fa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e2fe      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d100      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x1e>
 8002fc0:	e07c      	b.n	80030bc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc2:	4bc3      	ldr	r3, [pc, #780]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2238      	movs	r2, #56	; 0x38
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fcc:	4bc0      	ldr	r3, [pc, #768]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d102      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x3e>
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d002      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d10b      	bne.n	8003000 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	4bb9      	ldr	r3, [pc, #740]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	029b      	lsls	r3, r3, #10
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d062      	beq.n	80030ba <HAL_RCC_OscConfig+0x116>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d15e      	bne.n	80030ba <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e2d9      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	025b      	lsls	r3, r3, #9
 8003008:	429a      	cmp	r2, r3
 800300a:	d107      	bne.n	800301c <HAL_RCC_OscConfig+0x78>
 800300c:	4bb0      	ldr	r3, [pc, #704]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4baf      	ldr	r3, [pc, #700]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	0249      	lsls	r1, r1, #9
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	e020      	b.n	800305e <HAL_RCC_OscConfig+0xba>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	23a0      	movs	r3, #160	; 0xa0
 8003022:	02db      	lsls	r3, r3, #11
 8003024:	429a      	cmp	r2, r3
 8003026:	d10e      	bne.n	8003046 <HAL_RCC_OscConfig+0xa2>
 8003028:	4ba9      	ldr	r3, [pc, #676]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4ba8      	ldr	r3, [pc, #672]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 800302e:	2180      	movs	r1, #128	; 0x80
 8003030:	02c9      	lsls	r1, r1, #11
 8003032:	430a      	orrs	r2, r1
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	4ba6      	ldr	r3, [pc, #664]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4ba5      	ldr	r3, [pc, #660]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 800303c:	2180      	movs	r1, #128	; 0x80
 800303e:	0249      	lsls	r1, r1, #9
 8003040:	430a      	orrs	r2, r1
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	e00b      	b.n	800305e <HAL_RCC_OscConfig+0xba>
 8003046:	4ba2      	ldr	r3, [pc, #648]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4ba1      	ldr	r3, [pc, #644]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 800304c:	49a1      	ldr	r1, [pc, #644]	; (80032d4 <HAL_RCC_OscConfig+0x330>)
 800304e:	400a      	ands	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	4b9f      	ldr	r3, [pc, #636]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b9e      	ldr	r3, [pc, #632]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003058:	499f      	ldr	r1, [pc, #636]	; (80032d8 <HAL_RCC_OscConfig+0x334>)
 800305a:	400a      	ands	r2, r1
 800305c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d014      	beq.n	8003090 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7fe fc1d 	bl	80018a4 <HAL_GetTick>
 800306a:	0003      	movs	r3, r0
 800306c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003070:	f7fe fc18 	bl	80018a4 <HAL_GetTick>
 8003074:	0002      	movs	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e298      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003082:	4b93      	ldr	r3, [pc, #588]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	029b      	lsls	r3, r3, #10
 800308a:	4013      	ands	r3, r2
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0xcc>
 800308e:	e015      	b.n	80030bc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fe fc08 	bl	80018a4 <HAL_GetTick>
 8003094:	0003      	movs	r3, r0
 8003096:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309a:	f7fe fc03 	bl	80018a4 <HAL_GetTick>
 800309e:	0002      	movs	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b64      	cmp	r3, #100	; 0x64
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e283      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ac:	4b88      	ldr	r3, [pc, #544]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	029b      	lsls	r3, r3, #10
 80030b4:	4013      	ands	r3, r2
 80030b6:	d1f0      	bne.n	800309a <HAL_RCC_OscConfig+0xf6>
 80030b8:	e000      	b.n	80030bc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2202      	movs	r2, #2
 80030c2:	4013      	ands	r3, r2
 80030c4:	d100      	bne.n	80030c8 <HAL_RCC_OscConfig+0x124>
 80030c6:	e099      	b.n	80031fc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030c8:	4b81      	ldr	r3, [pc, #516]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2238      	movs	r2, #56	; 0x38
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030d2:	4b7f      	ldr	r3, [pc, #508]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2203      	movs	r2, #3
 80030d8:	4013      	ands	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d102      	bne.n	80030e8 <HAL_RCC_OscConfig+0x144>
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d002      	beq.n	80030ee <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d135      	bne.n	800315a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ee:	4b78      	ldr	r3, [pc, #480]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4013      	ands	r3, r2
 80030f8:	d005      	beq.n	8003106 <HAL_RCC_OscConfig+0x162>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e256      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003106:	4b72      	ldr	r3, [pc, #456]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a74      	ldr	r2, [pc, #464]	; (80032dc <HAL_RCC_OscConfig+0x338>)
 800310c:	4013      	ands	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	021a      	lsls	r2, r3, #8
 8003116:	4b6e      	ldr	r3, [pc, #440]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d112      	bne.n	8003148 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003122:	4b6b      	ldr	r3, [pc, #428]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6e      	ldr	r2, [pc, #440]	; (80032e0 <HAL_RCC_OscConfig+0x33c>)
 8003128:	4013      	ands	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	4b67      	ldr	r3, [pc, #412]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003136:	4b66      	ldr	r3, [pc, #408]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	0adb      	lsrs	r3, r3, #11
 800313c:	2207      	movs	r2, #7
 800313e:	4013      	ands	r3, r2
 8003140:	4a68      	ldr	r2, [pc, #416]	; (80032e4 <HAL_RCC_OscConfig+0x340>)
 8003142:	40da      	lsrs	r2, r3
 8003144:	4b68      	ldr	r3, [pc, #416]	; (80032e8 <HAL_RCC_OscConfig+0x344>)
 8003146:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003148:	4b68      	ldr	r3, [pc, #416]	; (80032ec <HAL_RCC_OscConfig+0x348>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0018      	movs	r0, r3
 800314e:	f7fe fb4d 	bl	80017ec <HAL_InitTick>
 8003152:	1e03      	subs	r3, r0, #0
 8003154:	d051      	beq.n	80031fa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e22c      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d030      	beq.n	80031c4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003162:	4b5b      	ldr	r3, [pc, #364]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5e      	ldr	r2, [pc, #376]	; (80032e0 <HAL_RCC_OscConfig+0x33c>)
 8003168:	4013      	ands	r3, r2
 800316a:	0019      	movs	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003172:	430a      	orrs	r2, r1
 8003174:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003176:	4b56      	ldr	r3, [pc, #344]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b55      	ldr	r3, [pc, #340]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 800317c:	2180      	movs	r1, #128	; 0x80
 800317e:	0049      	lsls	r1, r1, #1
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe fb8e 	bl	80018a4 <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800318e:	f7fe fb89 	bl	80018a4 <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e209      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a0:	4b4b      	ldr	r3, [pc, #300]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4013      	ands	r3, r2
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ac:	4b48      	ldr	r3, [pc, #288]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a4a      	ldr	r2, [pc, #296]	; (80032dc <HAL_RCC_OscConfig+0x338>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	0019      	movs	r1, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	021a      	lsls	r2, r3, #8
 80031bc:	4b44      	ldr	r3, [pc, #272]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	e01b      	b.n	80031fc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80031c4:	4b42      	ldr	r3, [pc, #264]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 80031ca:	4949      	ldr	r1, [pc, #292]	; (80032f0 <HAL_RCC_OscConfig+0x34c>)
 80031cc:	400a      	ands	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe fb68 	bl	80018a4 <HAL_GetTick>
 80031d4:	0003      	movs	r3, r0
 80031d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031da:	f7fe fb63 	bl	80018a4 <HAL_GetTick>
 80031de:	0002      	movs	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e1e3      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ec:	4b38      	ldr	r3, [pc, #224]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4013      	ands	r3, r2
 80031f6:	d1f0      	bne.n	80031da <HAL_RCC_OscConfig+0x236>
 80031f8:	e000      	b.n	80031fc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2208      	movs	r2, #8
 8003202:	4013      	ands	r3, r2
 8003204:	d047      	beq.n	8003296 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003206:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2238      	movs	r2, #56	; 0x38
 800320c:	4013      	ands	r3, r2
 800320e:	2b18      	cmp	r3, #24
 8003210:	d10a      	bne.n	8003228 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003212:	4b2f      	ldr	r3, [pc, #188]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003216:	2202      	movs	r2, #2
 8003218:	4013      	ands	r3, r2
 800321a:	d03c      	beq.n	8003296 <HAL_RCC_OscConfig+0x2f2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d138      	bne.n	8003296 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e1c5      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d019      	beq.n	8003264 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003232:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003234:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003236:	2101      	movs	r1, #1
 8003238:	430a      	orrs	r2, r1
 800323a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fb32 	bl	80018a4 <HAL_GetTick>
 8003240:	0003      	movs	r3, r0
 8003242:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003246:	f7fe fb2d 	bl	80018a4 <HAL_GetTick>
 800324a:	0002      	movs	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e1ad      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 800325a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325c:	2202      	movs	r2, #2
 800325e:	4013      	ands	r3, r2
 8003260:	d0f1      	beq.n	8003246 <HAL_RCC_OscConfig+0x2a2>
 8003262:	e018      	b.n	8003296 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 8003266:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 800326a:	2101      	movs	r1, #1
 800326c:	438a      	bics	r2, r1
 800326e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe fb18 	bl	80018a4 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327a:	f7fe fb13 	bl	80018a4 <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e193      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800328c:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 800328e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003290:	2202      	movs	r2, #2
 8003292:	4013      	ands	r3, r2
 8003294:	d1f1      	bne.n	800327a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2204      	movs	r2, #4
 800329c:	4013      	ands	r3, r2
 800329e:	d100      	bne.n	80032a2 <HAL_RCC_OscConfig+0x2fe>
 80032a0:	e0c6      	b.n	8003430 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a2:	231f      	movs	r3, #31
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032aa:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2238      	movs	r2, #56	; 0x38
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d11e      	bne.n	80032f4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_OscConfig+0x32c>)
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	2202      	movs	r2, #2
 80032bc:	4013      	ands	r3, r2
 80032be:	d100      	bne.n	80032c2 <HAL_RCC_OscConfig+0x31e>
 80032c0:	e0b6      	b.n	8003430 <HAL_RCC_OscConfig+0x48c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d000      	beq.n	80032cc <HAL_RCC_OscConfig+0x328>
 80032ca:	e0b1      	b.n	8003430 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e171      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
 80032d0:	40021000 	.word	0x40021000
 80032d4:	fffeffff 	.word	0xfffeffff
 80032d8:	fffbffff 	.word	0xfffbffff
 80032dc:	ffff80ff 	.word	0xffff80ff
 80032e0:	ffffc7ff 	.word	0xffffc7ff
 80032e4:	00f42400 	.word	0x00f42400
 80032e8:	20000070 	.word	0x20000070
 80032ec:	20000074 	.word	0x20000074
 80032f0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032f4:	4bb1      	ldr	r3, [pc, #708]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 80032f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	055b      	lsls	r3, r3, #21
 80032fc:	4013      	ands	r3, r2
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_OscConfig+0x360>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x362>
 8003304:	2300      	movs	r3, #0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d011      	beq.n	800332e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800330a:	4bac      	ldr	r3, [pc, #688]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 800330c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800330e:	4bab      	ldr	r3, [pc, #684]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 8003310:	2180      	movs	r1, #128	; 0x80
 8003312:	0549      	lsls	r1, r1, #21
 8003314:	430a      	orrs	r2, r1
 8003316:	63da      	str	r2, [r3, #60]	; 0x3c
 8003318:	4ba8      	ldr	r3, [pc, #672]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 800331a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	055b      	lsls	r3, r3, #21
 8003320:	4013      	ands	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003326:	231f      	movs	r3, #31
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800332e:	4ba4      	ldr	r3, [pc, #656]	; (80035c0 <HAL_RCC_OscConfig+0x61c>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	2380      	movs	r3, #128	; 0x80
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4013      	ands	r3, r2
 8003338:	d11a      	bne.n	8003370 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800333a:	4ba1      	ldr	r3, [pc, #644]	; (80035c0 <HAL_RCC_OscConfig+0x61c>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4ba0      	ldr	r3, [pc, #640]	; (80035c0 <HAL_RCC_OscConfig+0x61c>)
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	0049      	lsls	r1, r1, #1
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003348:	f7fe faac 	bl	80018a4 <HAL_GetTick>
 800334c:	0003      	movs	r3, r0
 800334e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7fe faa7 	bl	80018a4 <HAL_GetTick>
 8003356:	0002      	movs	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e127      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003364:	4b96      	ldr	r3, [pc, #600]	; (80035c0 <HAL_RCC_OscConfig+0x61c>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4013      	ands	r3, r2
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x3e2>
 8003378:	4b90      	ldr	r3, [pc, #576]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 800337a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800337c:	4b8f      	ldr	r3, [pc, #572]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 800337e:	2101      	movs	r1, #1
 8003380:	430a      	orrs	r2, r1
 8003382:	65da      	str	r2, [r3, #92]	; 0x5c
 8003384:	e01c      	b.n	80033c0 <HAL_RCC_OscConfig+0x41c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b05      	cmp	r3, #5
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x404>
 800338e:	4b8b      	ldr	r3, [pc, #556]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 8003390:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003392:	4b8a      	ldr	r3, [pc, #552]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 8003394:	2104      	movs	r1, #4
 8003396:	430a      	orrs	r2, r1
 8003398:	65da      	str	r2, [r3, #92]	; 0x5c
 800339a:	4b88      	ldr	r3, [pc, #544]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 800339c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800339e:	4b87      	ldr	r3, [pc, #540]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 80033a0:	2101      	movs	r1, #1
 80033a2:	430a      	orrs	r2, r1
 80033a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0x41c>
 80033a8:	4b84      	ldr	r3, [pc, #528]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 80033aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033ac:	4b83      	ldr	r3, [pc, #524]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 80033ae:	2101      	movs	r1, #1
 80033b0:	438a      	bics	r2, r1
 80033b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80033b4:	4b81      	ldr	r3, [pc, #516]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 80033b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033b8:	4b80      	ldr	r3, [pc, #512]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 80033ba:	2104      	movs	r1, #4
 80033bc:	438a      	bics	r2, r1
 80033be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d014      	beq.n	80033f2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe fa6c 	bl	80018a4 <HAL_GetTick>
 80033cc:	0003      	movs	r3, r0
 80033ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d0:	e009      	b.n	80033e6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7fe fa67 	bl	80018a4 <HAL_GetTick>
 80033d6:	0002      	movs	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	4a79      	ldr	r2, [pc, #484]	; (80035c4 <HAL_RCC_OscConfig+0x620>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e0e6      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e6:	4b75      	ldr	r3, [pc, #468]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	2202      	movs	r2, #2
 80033ec:	4013      	ands	r3, r2
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x42e>
 80033f0:	e013      	b.n	800341a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f2:	f7fe fa57 	bl	80018a4 <HAL_GetTick>
 80033f6:	0003      	movs	r3, r0
 80033f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033fa:	e009      	b.n	8003410 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fc:	f7fe fa52 	bl	80018a4 <HAL_GetTick>
 8003400:	0002      	movs	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	4a6f      	ldr	r2, [pc, #444]	; (80035c4 <HAL_RCC_OscConfig+0x620>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e0d1      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003410:	4b6a      	ldr	r3, [pc, #424]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	2202      	movs	r2, #2
 8003416:	4013      	ands	r3, r2
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800341a:	231f      	movs	r3, #31
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003424:	4b65      	ldr	r3, [pc, #404]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 8003426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003428:	4b64      	ldr	r3, [pc, #400]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 800342a:	4967      	ldr	r1, [pc, #412]	; (80035c8 <HAL_RCC_OscConfig+0x624>)
 800342c:	400a      	ands	r2, r1
 800342e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d100      	bne.n	800343a <HAL_RCC_OscConfig+0x496>
 8003438:	e0bb      	b.n	80035b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800343a:	4b60      	ldr	r3, [pc, #384]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2238      	movs	r2, #56	; 0x38
 8003440:	4013      	ands	r3, r2
 8003442:	2b10      	cmp	r3, #16
 8003444:	d100      	bne.n	8003448 <HAL_RCC_OscConfig+0x4a4>
 8003446:	e07b      	b.n	8003540 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d156      	bne.n	80034fe <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003450:	4b5a      	ldr	r3, [pc, #360]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b59      	ldr	r3, [pc, #356]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 8003456:	495d      	ldr	r1, [pc, #372]	; (80035cc <HAL_RCC_OscConfig+0x628>)
 8003458:	400a      	ands	r2, r1
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fa22 	bl	80018a4 <HAL_GetTick>
 8003460:	0003      	movs	r3, r0
 8003462:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe fa1d 	bl	80018a4 <HAL_GetTick>
 800346a:	0002      	movs	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e09d      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003478:	4b50      	ldr	r3, [pc, #320]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	049b      	lsls	r3, r3, #18
 8003480:	4013      	ands	r3, r2
 8003482:	d1f0      	bne.n	8003466 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003484:	4b4d      	ldr	r3, [pc, #308]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4a51      	ldr	r2, [pc, #324]	; (80035d0 <HAL_RCC_OscConfig+0x62c>)
 800348a:	4013      	ands	r3, r2
 800348c:	0019      	movs	r1, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1a      	ldr	r2, [r3, #32]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b0:	431a      	orrs	r2, r3
 80034b2:	4b42      	ldr	r3, [pc, #264]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 80034b4:	430a      	orrs	r2, r1
 80034b6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b8:	4b40      	ldr	r3, [pc, #256]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4b3f      	ldr	r3, [pc, #252]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 80034be:	2180      	movs	r1, #128	; 0x80
 80034c0:	0449      	lsls	r1, r1, #17
 80034c2:	430a      	orrs	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80034c6:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	4b3c      	ldr	r3, [pc, #240]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 80034cc:	2180      	movs	r1, #128	; 0x80
 80034ce:	0549      	lsls	r1, r1, #21
 80034d0:	430a      	orrs	r2, r1
 80034d2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fe f9e6 	bl	80018a4 <HAL_GetTick>
 80034d8:	0003      	movs	r3, r0
 80034da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034de:	f7fe f9e1 	bl	80018a4 <HAL_GetTick>
 80034e2:	0002      	movs	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e061      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f0:	4b32      	ldr	r3, [pc, #200]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	049b      	lsls	r3, r3, #18
 80034f8:	4013      	ands	r3, r2
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x53a>
 80034fc:	e059      	b.n	80035b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fe:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4b2e      	ldr	r3, [pc, #184]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 8003504:	4931      	ldr	r1, [pc, #196]	; (80035cc <HAL_RCC_OscConfig+0x628>)
 8003506:	400a      	ands	r2, r1
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fe f9cb 	bl	80018a4 <HAL_GetTick>
 800350e:	0003      	movs	r3, r0
 8003510:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003514:	f7fe f9c6 	bl	80018a4 <HAL_GetTick>
 8003518:	0002      	movs	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e046      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003526:	4b25      	ldr	r3, [pc, #148]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	049b      	lsls	r3, r3, #18
 800352e:	4013      	ands	r3, r2
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003532:	4b22      	ldr	r3, [pc, #136]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	4b21      	ldr	r3, [pc, #132]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 8003538:	4926      	ldr	r1, [pc, #152]	; (80035d4 <HAL_RCC_OscConfig+0x630>)
 800353a:	400a      	ands	r2, r1
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	e038      	b.n	80035b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e033      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <HAL_RCC_OscConfig+0x618>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2203      	movs	r2, #3
 8003556:	401a      	ands	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	429a      	cmp	r2, r3
 800355e:	d126      	bne.n	80035ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2270      	movs	r2, #112	; 0x70
 8003564:	401a      	ands	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d11f      	bne.n	80035ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	23fe      	movs	r3, #254	; 0xfe
 8003572:	01db      	lsls	r3, r3, #7
 8003574:	401a      	ands	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d116      	bne.n	80035ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	23f8      	movs	r3, #248	; 0xf8
 8003584:	039b      	lsls	r3, r3, #14
 8003586:	401a      	ands	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d10e      	bne.n	80035ae <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	23e0      	movs	r3, #224	; 0xe0
 8003594:	051b      	lsls	r3, r3, #20
 8003596:	401a      	ands	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	0f5b      	lsrs	r3, r3, #29
 80035a4:	075a      	lsls	r2, r3, #29
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d001      	beq.n	80035b2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	0018      	movs	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b008      	add	sp, #32
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40007000 	.word	0x40007000
 80035c4:	00001388 	.word	0x00001388
 80035c8:	efffffff 	.word	0xefffffff
 80035cc:	feffffff 	.word	0xfeffffff
 80035d0:	11c1808c 	.word	0x11c1808c
 80035d4:	eefefffc 	.word	0xeefefffc

080035d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0e9      	b.n	80037c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035ec:	4b76      	ldr	r3, [pc, #472]	; (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2207      	movs	r2, #7
 80035f2:	4013      	ands	r3, r2
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d91e      	bls.n	8003638 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	4b73      	ldr	r3, [pc, #460]	; (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2207      	movs	r2, #7
 8003600:	4393      	bics	r3, r2
 8003602:	0019      	movs	r1, r3
 8003604:	4b70      	ldr	r3, [pc, #448]	; (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800360c:	f7fe f94a 	bl	80018a4 <HAL_GetTick>
 8003610:	0003      	movs	r3, r0
 8003612:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003614:	e009      	b.n	800362a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003616:	f7fe f945 	bl	80018a4 <HAL_GetTick>
 800361a:	0002      	movs	r2, r0
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	4a6a      	ldr	r2, [pc, #424]	; (80037cc <HAL_RCC_ClockConfig+0x1f4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e0ca      	b.n	80037c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800362a:	4b67      	ldr	r3, [pc, #412]	; (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2207      	movs	r2, #7
 8003630:	4013      	ands	r3, r2
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d1ee      	bne.n	8003616 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2202      	movs	r2, #2
 800363e:	4013      	ands	r3, r2
 8003640:	d015      	beq.n	800366e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2204      	movs	r2, #4
 8003648:	4013      	ands	r3, r2
 800364a:	d006      	beq.n	800365a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800364c:	4b60      	ldr	r3, [pc, #384]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	4b5f      	ldr	r3, [pc, #380]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003652:	21e0      	movs	r1, #224	; 0xe0
 8003654:	01c9      	lsls	r1, r1, #7
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800365a:	4b5d      	ldr	r3, [pc, #372]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	4a5d      	ldr	r2, [pc, #372]	; (80037d4 <HAL_RCC_ClockConfig+0x1fc>)
 8003660:	4013      	ands	r3, r2
 8003662:	0019      	movs	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	4b59      	ldr	r3, [pc, #356]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 800366a:	430a      	orrs	r2, r1
 800366c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2201      	movs	r2, #1
 8003674:	4013      	ands	r3, r2
 8003676:	d057      	beq.n	8003728 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d107      	bne.n	8003690 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003680:	4b53      	ldr	r3, [pc, #332]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	029b      	lsls	r3, r3, #10
 8003688:	4013      	ands	r3, r2
 800368a:	d12b      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e097      	b.n	80037c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003698:	4b4d      	ldr	r3, [pc, #308]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	049b      	lsls	r3, r3, #18
 80036a0:	4013      	ands	r3, r2
 80036a2:	d11f      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e08b      	b.n	80037c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d107      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b0:	4b47      	ldr	r3, [pc, #284]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	2380      	movs	r3, #128	; 0x80
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4013      	ands	r3, r2
 80036ba:	d113      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e07f      	b.n	80037c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d106      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036c8:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 80036ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036cc:	2202      	movs	r2, #2
 80036ce:	4013      	ands	r3, r2
 80036d0:	d108      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e074      	b.n	80037c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d6:	4b3e      	ldr	r3, [pc, #248]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	2202      	movs	r2, #2
 80036dc:	4013      	ands	r3, r2
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e06d      	b.n	80037c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036e4:	4b3a      	ldr	r3, [pc, #232]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2207      	movs	r2, #7
 80036ea:	4393      	bics	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	4b37      	ldr	r3, [pc, #220]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f8:	f7fe f8d4 	bl	80018a4 <HAL_GetTick>
 80036fc:	0003      	movs	r3, r0
 80036fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003700:	e009      	b.n	8003716 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003702:	f7fe f8cf 	bl	80018a4 <HAL_GetTick>
 8003706:	0002      	movs	r2, r0
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	4a2f      	ldr	r2, [pc, #188]	; (80037cc <HAL_RCC_ClockConfig+0x1f4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e054      	b.n	80037c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2238      	movs	r2, #56	; 0x38
 800371c:	401a      	ands	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	429a      	cmp	r2, r3
 8003726:	d1ec      	bne.n	8003702 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003728:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2207      	movs	r2, #7
 800372e:	4013      	ands	r3, r2
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d21e      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2207      	movs	r2, #7
 800373c:	4393      	bics	r3, r2
 800373e:	0019      	movs	r1, r3
 8003740:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003748:	f7fe f8ac 	bl	80018a4 <HAL_GetTick>
 800374c:	0003      	movs	r3, r0
 800374e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003750:	e009      	b.n	8003766 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003752:	f7fe f8a7 	bl	80018a4 <HAL_GetTick>
 8003756:	0002      	movs	r2, r0
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	4a1b      	ldr	r2, [pc, #108]	; (80037cc <HAL_RCC_ClockConfig+0x1f4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e02c      	b.n	80037c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003766:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2207      	movs	r2, #7
 800376c:	4013      	ands	r3, r2
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d1ee      	bne.n	8003752 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2204      	movs	r2, #4
 800377a:	4013      	ands	r3, r2
 800377c:	d009      	beq.n	8003792 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800377e:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <HAL_RCC_ClockConfig+0x200>)
 8003784:	4013      	ands	r3, r2
 8003786:	0019      	movs	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 800378e:	430a      	orrs	r2, r1
 8003790:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003792:	f000 f829 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 8003796:	0001      	movs	r1, r0
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	0a1b      	lsrs	r3, r3, #8
 800379e:	220f      	movs	r2, #15
 80037a0:	401a      	ands	r2, r3
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_RCC_ClockConfig+0x204>)
 80037a4:	0092      	lsls	r2, r2, #2
 80037a6:	58d3      	ldr	r3, [r2, r3]
 80037a8:	221f      	movs	r2, #31
 80037aa:	4013      	ands	r3, r2
 80037ac:	000a      	movs	r2, r1
 80037ae:	40da      	lsrs	r2, r3
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_ClockConfig+0x208>)
 80037b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_ClockConfig+0x20c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7fe f817 	bl	80017ec <HAL_InitTick>
 80037be:	0003      	movs	r3, r0
}
 80037c0:	0018      	movs	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b004      	add	sp, #16
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40022000 	.word	0x40022000
 80037cc:	00001388 	.word	0x00001388
 80037d0:	40021000 	.word	0x40021000
 80037d4:	fffff0ff 	.word	0xfffff0ff
 80037d8:	ffff8fff 	.word	0xffff8fff
 80037dc:	080056e4 	.word	0x080056e4
 80037e0:	20000070 	.word	0x20000070
 80037e4:	20000074 	.word	0x20000074

080037e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ee:	4b3c      	ldr	r3, [pc, #240]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2238      	movs	r2, #56	; 0x38
 80037f4:	4013      	ands	r3, r2
 80037f6:	d10f      	bne.n	8003818 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80037f8:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	0adb      	lsrs	r3, r3, #11
 80037fe:	2207      	movs	r2, #7
 8003800:	4013      	ands	r3, r2
 8003802:	2201      	movs	r2, #1
 8003804:	409a      	lsls	r2, r3
 8003806:	0013      	movs	r3, r2
 8003808:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800380a:	6839      	ldr	r1, [r7, #0]
 800380c:	4835      	ldr	r0, [pc, #212]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800380e:	f7fc fc77 	bl	8000100 <__udivsi3>
 8003812:	0003      	movs	r3, r0
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	e05d      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003818:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2238      	movs	r2, #56	; 0x38
 800381e:	4013      	ands	r3, r2
 8003820:	2b08      	cmp	r3, #8
 8003822:	d102      	bne.n	800382a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003824:	4b30      	ldr	r3, [pc, #192]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	e054      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800382a:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2238      	movs	r2, #56	; 0x38
 8003830:	4013      	ands	r3, r2
 8003832:	2b10      	cmp	r3, #16
 8003834:	d138      	bne.n	80038a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003836:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	2203      	movs	r2, #3
 800383c:	4013      	ands	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003840:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	2207      	movs	r2, #7
 8003848:	4013      	ands	r3, r2
 800384a:	3301      	adds	r3, #1
 800384c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d10d      	bne.n	8003870 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	4824      	ldr	r0, [pc, #144]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003858:	f7fc fc52 	bl	8000100 <__udivsi3>
 800385c:	0003      	movs	r3, r0
 800385e:	0019      	movs	r1, r3
 8003860:	4b1f      	ldr	r3, [pc, #124]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	227f      	movs	r2, #127	; 0x7f
 8003868:	4013      	ands	r3, r2
 800386a:	434b      	muls	r3, r1
 800386c:	617b      	str	r3, [r7, #20]
        break;
 800386e:	e00d      	b.n	800388c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	481c      	ldr	r0, [pc, #112]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003874:	f7fc fc44 	bl	8000100 <__udivsi3>
 8003878:	0003      	movs	r3, r0
 800387a:	0019      	movs	r1, r3
 800387c:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	0a1b      	lsrs	r3, r3, #8
 8003882:	227f      	movs	r2, #127	; 0x7f
 8003884:	4013      	ands	r3, r2
 8003886:	434b      	muls	r3, r1
 8003888:	617b      	str	r3, [r7, #20]
        break;
 800388a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	0f5b      	lsrs	r3, r3, #29
 8003892:	2207      	movs	r2, #7
 8003894:	4013      	ands	r3, r2
 8003896:	3301      	adds	r3, #1
 8003898:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	6978      	ldr	r0, [r7, #20]
 800389e:	f7fc fc2f 	bl	8000100 <__udivsi3>
 80038a2:	0003      	movs	r3, r0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	e015      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80038a8:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2238      	movs	r2, #56	; 0x38
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d103      	bne.n	80038bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80038b4:	2380      	movs	r3, #128	; 0x80
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	e00b      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80038bc:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2238      	movs	r2, #56	; 0x38
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b18      	cmp	r3, #24
 80038c6:	d103      	bne.n	80038d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80038c8:	23fa      	movs	r3, #250	; 0xfa
 80038ca:	01db      	lsls	r3, r3, #7
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	e001      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038d4:	693b      	ldr	r3, [r7, #16]
}
 80038d6:	0018      	movs	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	b006      	add	sp, #24
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	40021000 	.word	0x40021000
 80038e4:	00f42400 	.word	0x00f42400
 80038e8:	007a1200 	.word	0x007a1200

080038ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b02      	ldr	r3, [pc, #8]	; (80038fc <HAL_RCC_GetHCLKFreq+0x10>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	20000070 	.word	0x20000070

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b5b0      	push	{r4, r5, r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003904:	f7ff fff2 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003908:	0004      	movs	r4, r0
 800390a:	f7ff fb3f 	bl	8002f8c <LL_RCC_GetAPB1Prescaler>
 800390e:	0003      	movs	r3, r0
 8003910:	0b1a      	lsrs	r2, r3, #12
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003914:	0092      	lsls	r2, r2, #2
 8003916:	58d3      	ldr	r3, [r2, r3]
 8003918:	221f      	movs	r2, #31
 800391a:	4013      	ands	r3, r2
 800391c:	40dc      	lsrs	r4, r3
 800391e:	0023      	movs	r3, r4
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	bdb0      	pop	{r4, r5, r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	08005724 	.word	0x08005724

0800392c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003934:	2313      	movs	r3, #19
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800393c:	2312      	movs	r3, #18
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	029b      	lsls	r3, r3, #10
 800394c:	4013      	ands	r3, r2
 800394e:	d100      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003950:	e0a3      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003952:	2011      	movs	r0, #17
 8003954:	183b      	adds	r3, r7, r0
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800395a:	4bb3      	ldr	r3, [pc, #716]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800395c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	055b      	lsls	r3, r3, #21
 8003962:	4013      	ands	r3, r2
 8003964:	d110      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003966:	4bb0      	ldr	r3, [pc, #704]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800396a:	4baf      	ldr	r3, [pc, #700]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800396c:	2180      	movs	r1, #128	; 0x80
 800396e:	0549      	lsls	r1, r1, #21
 8003970:	430a      	orrs	r2, r1
 8003972:	63da      	str	r2, [r3, #60]	; 0x3c
 8003974:	4bac      	ldr	r3, [pc, #688]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	055b      	lsls	r3, r3, #21
 800397c:	4013      	ands	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003982:	183b      	adds	r3, r7, r0
 8003984:	2201      	movs	r2, #1
 8003986:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003988:	4ba8      	ldr	r3, [pc, #672]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4ba7      	ldr	r3, [pc, #668]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800398e:	2180      	movs	r1, #128	; 0x80
 8003990:	0049      	lsls	r1, r1, #1
 8003992:	430a      	orrs	r2, r1
 8003994:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003996:	f7fd ff85 	bl	80018a4 <HAL_GetTick>
 800399a:	0003      	movs	r3, r0
 800399c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800399e:	e00b      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a0:	f7fd ff80 	bl	80018a4 <HAL_GetTick>
 80039a4:	0002      	movs	r2, r0
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d904      	bls.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80039ae:	2313      	movs	r3, #19
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	2203      	movs	r2, #3
 80039b4:	701a      	strb	r2, [r3, #0]
        break;
 80039b6:	e005      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039b8:	4b9c      	ldr	r3, [pc, #624]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	2380      	movs	r3, #128	; 0x80
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	4013      	ands	r3, r2
 80039c2:	d0ed      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80039c4:	2313      	movs	r3, #19
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d154      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039ce:	4b96      	ldr	r3, [pc, #600]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80039d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039d2:	23c0      	movs	r3, #192	; 0xc0
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4013      	ands	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d019      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d014      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039ea:	4b8f      	ldr	r3, [pc, #572]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80039ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ee:	4a90      	ldr	r2, [pc, #576]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039f4:	4b8c      	ldr	r3, [pc, #560]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80039f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039f8:	4b8b      	ldr	r3, [pc, #556]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80039fa:	2180      	movs	r1, #128	; 0x80
 80039fc:	0249      	lsls	r1, r1, #9
 80039fe:	430a      	orrs	r2, r1
 8003a00:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a02:	4b89      	ldr	r3, [pc, #548]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003a04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a06:	4b88      	ldr	r3, [pc, #544]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003a08:	498a      	ldr	r1, [pc, #552]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a0e:	4b86      	ldr	r3, [pc, #536]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2201      	movs	r2, #1
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d016      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fd ff42 	bl	80018a4 <HAL_GetTick>
 8003a20:	0003      	movs	r3, r0
 8003a22:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a24:	e00c      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a26:	f7fd ff3d 	bl	80018a4 <HAL_GetTick>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	4a81      	ldr	r2, [pc, #516]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d904      	bls.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003a36:	2313      	movs	r3, #19
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	701a      	strb	r2, [r3, #0]
            break;
 8003a3e:	e004      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a40:	4b79      	ldr	r3, [pc, #484]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a44:	2202      	movs	r2, #2
 8003a46:	4013      	ands	r3, r2
 8003a48:	d0ed      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003a4a:	2313      	movs	r3, #19
 8003a4c:	18fb      	adds	r3, r7, r3
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a54:	4b74      	ldr	r3, [pc, #464]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	4a75      	ldr	r2, [pc, #468]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a62:	4b71      	ldr	r3, [pc, #452]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003a64:	430a      	orrs	r2, r1
 8003a66:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a68:	e00c      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a6a:	2312      	movs	r3, #18
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	2213      	movs	r2, #19
 8003a70:	18ba      	adds	r2, r7, r2
 8003a72:	7812      	ldrb	r2, [r2, #0]
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e005      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a78:	2312      	movs	r3, #18
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	2213      	movs	r2, #19
 8003a7e:	18ba      	adds	r2, r7, r2
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a84:	2311      	movs	r3, #17
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d105      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8e:	4b66      	ldr	r3, [pc, #408]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a92:	4b65      	ldr	r3, [pc, #404]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003a94:	4969      	ldr	r1, [pc, #420]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a96:	400a      	ands	r2, r1
 8003a98:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d009      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aa4:	4b60      	ldr	r3, [pc, #384]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	4393      	bics	r3, r2
 8003aac:	0019      	movs	r1, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	4b5d      	ldr	r3, [pc, #372]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2210      	movs	r2, #16
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d009      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ac2:	4b59      	ldr	r3, [pc, #356]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	4a5e      	ldr	r2, [pc, #376]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	0019      	movs	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	4b55      	ldr	r3, [pc, #340]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ae2:	4b51      	ldr	r3, [pc, #324]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae6:	4a57      	ldr	r2, [pc, #348]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	0019      	movs	r1, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695a      	ldr	r2, [r3, #20]
 8003af0:	4b4d      	ldr	r3, [pc, #308]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003af2:	430a      	orrs	r2, r1
 8003af4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4013      	ands	r3, r2
 8003b00:	d009      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b02:	4b49      	ldr	r3, [pc, #292]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	4a50      	ldr	r2, [pc, #320]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	4b45      	ldr	r3, [pc, #276]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b12:	430a      	orrs	r2, r1
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d009      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b20:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	4a49      	ldr	r2, [pc, #292]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	0019      	movs	r1, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	4b3e      	ldr	r3, [pc, #248]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b30:	430a      	orrs	r2, r1
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	01db      	lsls	r3, r3, #7
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d015      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b40:	4b39      	ldr	r3, [pc, #228]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	0899      	lsrs	r1, r3, #2
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	4b36      	ldr	r3, [pc, #216]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	05db      	lsls	r3, r3, #23
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d106      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b5e:	4b32      	ldr	r3, [pc, #200]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	4b31      	ldr	r3, [pc, #196]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	0249      	lsls	r1, r1, #9
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	039b      	lsls	r3, r3, #14
 8003b74:	4013      	ands	r3, r2
 8003b76:	d016      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b78:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	4a34      	ldr	r2, [pc, #208]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	0019      	movs	r1, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1a      	ldr	r2, [r3, #32]
 8003b86:	4b28      	ldr	r3, [pc, #160]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1a      	ldr	r2, [r3, #32]
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	03db      	lsls	r3, r3, #15
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003b98:	4b23      	ldr	r3, [pc, #140]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b9e:	2180      	movs	r1, #128	; 0x80
 8003ba0:	0449      	lsls	r1, r1, #17
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	03db      	lsls	r3, r3, #15
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d016      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb6:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	0019      	movs	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc0:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	045b      	lsls	r3, r3, #17
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d106      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003bd2:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003bd8:	2180      	movs	r1, #128	; 0x80
 8003bda:	0449      	lsls	r1, r1, #17
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	4013      	ands	r3, r2
 8003bea:	d016      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf0:	4a19      	ldr	r2, [pc, #100]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	01db      	lsls	r3, r3, #7
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d106      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c0c:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c12:	2180      	movs	r1, #128	; 0x80
 8003c14:	0249      	lsls	r1, r1, #9
 8003c16:	430a      	orrs	r2, r1
 8003c18:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003c1a:	2312      	movs	r3, #18
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	781b      	ldrb	r3, [r3, #0]
}
 8003c20:	0018      	movs	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b006      	add	sp, #24
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40007000 	.word	0x40007000
 8003c30:	fffffcff 	.word	0xfffffcff
 8003c34:	fffeffff 	.word	0xfffeffff
 8003c38:	00001388 	.word	0x00001388
 8003c3c:	efffffff 	.word	0xefffffff
 8003c40:	fffff3ff 	.word	0xfffff3ff
 8003c44:	fff3ffff 	.word	0xfff3ffff
 8003c48:	ffcfffff 	.word	0xffcfffff
 8003c4c:	ffffcfff 	.word	0xffffcfff
 8003c50:	ffbfffff 	.word	0xffbfffff
 8003c54:	feffffff 	.word	0xfeffffff
 8003c58:	ffff3fff 	.word	0xffff3fff

08003c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e046      	b.n	8003cfc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2288      	movs	r2, #136	; 0x88
 8003c72:	589b      	ldr	r3, [r3, r2]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d107      	bne.n	8003c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2284      	movs	r2, #132	; 0x84
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	0018      	movs	r0, r3
 8003c84:	f7fd fc90 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2288      	movs	r2, #136	; 0x88
 8003c8c:	2124      	movs	r1, #36	; 0x24
 8003c8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	438a      	bics	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f000 fc12 	bl	80044cc <UART_SetConfig>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e024      	b.n	8003cfc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f000 fe7d 	bl	80049bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	490d      	ldr	r1, [pc, #52]	; (8003d04 <HAL_UART_Init+0xa8>)
 8003cce:	400a      	ands	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	212a      	movs	r1, #42	; 0x2a
 8003cde:	438a      	bics	r2, r1
 8003ce0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2101      	movs	r1, #1
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f000 ff15 	bl	8004b24 <UART_CheckIdleState>
 8003cfa:	0003      	movs	r3, r0
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	ffffb7ff 	.word	0xffffb7ff

08003d08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	; 0x28
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	1dbb      	adds	r3, r7, #6
 8003d16:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2288      	movs	r2, #136	; 0x88
 8003d1c:	589b      	ldr	r3, [r3, r2]
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d000      	beq.n	8003d24 <HAL_UART_Transmit+0x1c>
 8003d22:	e088      	b.n	8003e36 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_UART_Transmit+0x2a>
 8003d2a:	1dbb      	adds	r3, r7, #6
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e080      	b.n	8003e38 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	015b      	lsls	r3, r3, #5
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d109      	bne.n	8003d56 <HAL_UART_Transmit+0x4e>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d105      	bne.n	8003d56 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d001      	beq.n	8003d56 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e070      	b.n	8003e38 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2290      	movs	r2, #144	; 0x90
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2288      	movs	r2, #136	; 0x88
 8003d62:	2121      	movs	r1, #33	; 0x21
 8003d64:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d66:	f7fd fd9d 	bl	80018a4 <HAL_GetTick>
 8003d6a:	0003      	movs	r3, r0
 8003d6c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1dba      	adds	r2, r7, #6
 8003d72:	2154      	movs	r1, #84	; 0x54
 8003d74:	8812      	ldrh	r2, [r2, #0]
 8003d76:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1dba      	adds	r2, r7, #6
 8003d7c:	2156      	movs	r1, #86	; 0x56
 8003d7e:	8812      	ldrh	r2, [r2, #0]
 8003d80:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	2380      	movs	r3, #128	; 0x80
 8003d88:	015b      	lsls	r3, r3, #5
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d108      	bne.n	8003da0 <HAL_UART_Transmit+0x98>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d104      	bne.n	8003da0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	e003      	b.n	8003da8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003da8:	e02c      	b.n	8003e04 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	0013      	movs	r3, r2
 8003db4:	2200      	movs	r2, #0
 8003db6:	2180      	movs	r1, #128	; 0x80
 8003db8:	f000 ff02 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8003dbc:	1e03      	subs	r3, r0, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e039      	b.n	8003e38 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10b      	bne.n	8003de2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	001a      	movs	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	05d2      	lsls	r2, r2, #23
 8003dd6:	0dd2      	lsrs	r2, r2, #23
 8003dd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	3302      	adds	r3, #2
 8003dde:	61bb      	str	r3, [r7, #24]
 8003de0:	e007      	b.n	8003df2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	3301      	adds	r3, #1
 8003df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2256      	movs	r2, #86	; 0x56
 8003df6:	5a9b      	ldrh	r3, [r3, r2]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b299      	uxth	r1, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2256      	movs	r2, #86	; 0x56
 8003e02:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2256      	movs	r2, #86	; 0x56
 8003e08:	5a9b      	ldrh	r3, [r3, r2]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1cc      	bne.n	8003daa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	0013      	movs	r3, r2
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2140      	movs	r1, #64	; 0x40
 8003e1e:	f000 fecf 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8003e22:	1e03      	subs	r3, r0, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e006      	b.n	8003e38 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2288      	movs	r2, #136	; 0x88
 8003e2e:	2120      	movs	r1, #32
 8003e30:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
  }
}
 8003e38:	0018      	movs	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b008      	add	sp, #32
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e40:	b5b0      	push	{r4, r5, r7, lr}
 8003e42:	b0aa      	sub	sp, #168	; 0xa8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	22a4      	movs	r2, #164	; 0xa4
 8003e50:	18b9      	adds	r1, r7, r2
 8003e52:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	20a0      	movs	r0, #160	; 0xa0
 8003e5c:	1839      	adds	r1, r7, r0
 8003e5e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	249c      	movs	r4, #156	; 0x9c
 8003e68:	1939      	adds	r1, r7, r4
 8003e6a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e6c:	0011      	movs	r1, r2
 8003e6e:	18bb      	adds	r3, r7, r2
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4aa2      	ldr	r2, [pc, #648]	; (80040fc <HAL_UART_IRQHandler+0x2bc>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	2298      	movs	r2, #152	; 0x98
 8003e78:	18bd      	adds	r5, r7, r2
 8003e7a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003e7c:	18bb      	adds	r3, r7, r2
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d11a      	bne.n	8003eba <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e84:	187b      	adds	r3, r7, r1
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d015      	beq.n	8003eba <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e8e:	183b      	adds	r3, r7, r0
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2220      	movs	r2, #32
 8003e94:	4013      	ands	r3, r2
 8003e96:	d105      	bne.n	8003ea4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e98:	193b      	adds	r3, r7, r4
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	055b      	lsls	r3, r3, #21
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d00a      	beq.n	8003eba <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d100      	bne.n	8003eae <HAL_UART_IRQHandler+0x6e>
 8003eac:	e2dc      	b.n	8004468 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	0010      	movs	r0, r2
 8003eb6:	4798      	blx	r3
      }
      return;
 8003eb8:	e2d6      	b.n	8004468 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003eba:	2398      	movs	r3, #152	; 0x98
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d100      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x86>
 8003ec4:	e122      	b.n	800410c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003ec6:	239c      	movs	r3, #156	; 0x9c
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a8c      	ldr	r2, [pc, #560]	; (8004100 <HAL_UART_IRQHandler+0x2c0>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d106      	bne.n	8003ee0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003ed2:	23a0      	movs	r3, #160	; 0xa0
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a8a      	ldr	r2, [pc, #552]	; (8004104 <HAL_UART_IRQHandler+0x2c4>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	d100      	bne.n	8003ee0 <HAL_UART_IRQHandler+0xa0>
 8003ede:	e115      	b.n	800410c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ee0:	23a4      	movs	r3, #164	; 0xa4
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d012      	beq.n	8003f12 <HAL_UART_IRQHandler+0xd2>
 8003eec:	23a0      	movs	r3, #160	; 0xa0
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d00b      	beq.n	8003f12 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2201      	movs	r2, #1
 8003f00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2290      	movs	r2, #144	; 0x90
 8003f06:	589b      	ldr	r3, [r3, r2]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2190      	movs	r1, #144	; 0x90
 8003f10:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f12:	23a4      	movs	r3, #164	; 0xa4
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d011      	beq.n	8003f42 <HAL_UART_IRQHandler+0x102>
 8003f1e:	239c      	movs	r3, #156	; 0x9c
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2201      	movs	r2, #1
 8003f26:	4013      	ands	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2290      	movs	r2, #144	; 0x90
 8003f36:	589b      	ldr	r3, [r3, r2]
 8003f38:	2204      	movs	r2, #4
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2190      	movs	r1, #144	; 0x90
 8003f40:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f42:	23a4      	movs	r3, #164	; 0xa4
 8003f44:	18fb      	adds	r3, r7, r3
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d011      	beq.n	8003f72 <HAL_UART_IRQHandler+0x132>
 8003f4e:	239c      	movs	r3, #156	; 0x9c
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2201      	movs	r2, #1
 8003f56:	4013      	ands	r3, r2
 8003f58:	d00b      	beq.n	8003f72 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2204      	movs	r2, #4
 8003f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2290      	movs	r2, #144	; 0x90
 8003f66:	589b      	ldr	r3, [r3, r2]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2190      	movs	r1, #144	; 0x90
 8003f70:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f72:	23a4      	movs	r3, #164	; 0xa4
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2208      	movs	r2, #8
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d017      	beq.n	8003fae <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f7e:	23a0      	movs	r3, #160	; 0xa0
 8003f80:	18fb      	adds	r3, r7, r3
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2220      	movs	r2, #32
 8003f86:	4013      	ands	r3, r2
 8003f88:	d105      	bne.n	8003f96 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003f8a:	239c      	movs	r3, #156	; 0x9c
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a5b      	ldr	r2, [pc, #364]	; (8004100 <HAL_UART_IRQHandler+0x2c0>)
 8003f92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f94:	d00b      	beq.n	8003fae <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2290      	movs	r2, #144	; 0x90
 8003fa2:	589b      	ldr	r3, [r3, r2]
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2190      	movs	r1, #144	; 0x90
 8003fac:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fae:	23a4      	movs	r3, #164	; 0xa4
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d013      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x1a4>
 8003fbc:	23a0      	movs	r3, #160	; 0xa0
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	04db      	lsls	r3, r3, #19
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d00c      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2280      	movs	r2, #128	; 0x80
 8003fd0:	0112      	lsls	r2, r2, #4
 8003fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2290      	movs	r2, #144	; 0x90
 8003fd8:	589b      	ldr	r3, [r3, r2]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2190      	movs	r1, #144	; 0x90
 8003fe2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2290      	movs	r2, #144	; 0x90
 8003fe8:	589b      	ldr	r3, [r3, r2]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d100      	bne.n	8003ff0 <HAL_UART_IRQHandler+0x1b0>
 8003fee:	e23d      	b.n	800446c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ff0:	23a4      	movs	r3, #164	; 0xa4
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d015      	beq.n	8004028 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ffc:	23a0      	movs	r3, #160	; 0xa0
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2220      	movs	r2, #32
 8004004:	4013      	ands	r3, r2
 8004006:	d106      	bne.n	8004016 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004008:	239c      	movs	r3, #156	; 0x9c
 800400a:	18fb      	adds	r3, r7, r3
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	055b      	lsls	r3, r3, #21
 8004012:	4013      	ands	r3, r2
 8004014:	d008      	beq.n	8004028 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	0010      	movs	r0, r2
 8004026:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2290      	movs	r2, #144	; 0x90
 800402c:	589b      	ldr	r3, [r3, r2]
 800402e:	2194      	movs	r1, #148	; 0x94
 8004030:	187a      	adds	r2, r7, r1
 8004032:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2240      	movs	r2, #64	; 0x40
 800403c:	4013      	ands	r3, r2
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d004      	beq.n	800404c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004042:	187b      	adds	r3, r7, r1
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2228      	movs	r2, #40	; 0x28
 8004048:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800404a:	d04c      	beq.n	80040e6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	0018      	movs	r0, r3
 8004050:	f000 ff64 	bl	8004f1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2240      	movs	r2, #64	; 0x40
 800405c:	4013      	ands	r3, r2
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d13c      	bne.n	80040dc <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004062:	f3ef 8310 	mrs	r3, PRIMASK
 8004066:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800406a:	2090      	movs	r0, #144	; 0x90
 800406c:	183a      	adds	r2, r7, r0
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	2301      	movs	r3, #1
 8004072:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004076:	f383 8810 	msr	PRIMASK, r3
}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2140      	movs	r1, #64	; 0x40
 8004088:	438a      	bics	r2, r1
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	183b      	adds	r3, r7, r0
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004092:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004094:	f383 8810 	msr	PRIMASK, r3
}
 8004098:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2280      	movs	r2, #128	; 0x80
 800409e:	589b      	ldr	r3, [r3, r2]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d016      	beq.n	80040d2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	589b      	ldr	r3, [r3, r2]
 80040aa:	4a17      	ldr	r2, [pc, #92]	; (8004108 <HAL_UART_IRQHandler+0x2c8>)
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2280      	movs	r2, #128	; 0x80
 80040b2:	589b      	ldr	r3, [r3, r2]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f7fe facd 	bl	8002654 <HAL_DMA_Abort_IT>
 80040ba:	1e03      	subs	r3, r0, #0
 80040bc:	d01c      	beq.n	80040f8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2280      	movs	r2, #128	; 0x80
 80040c2:	589b      	ldr	r3, [r3, r2]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	2180      	movs	r1, #128	; 0x80
 80040ca:	5852      	ldr	r2, [r2, r1]
 80040cc:	0010      	movs	r0, r2
 80040ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d0:	e012      	b.n	80040f8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f000 f9f1 	bl	80044bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040da:	e00d      	b.n	80040f8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	0018      	movs	r0, r3
 80040e0:	f000 f9ec 	bl	80044bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e4:	e008      	b.n	80040f8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f000 f9e7 	bl	80044bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2290      	movs	r2, #144	; 0x90
 80040f2:	2100      	movs	r1, #0
 80040f4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80040f6:	e1b9      	b.n	800446c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	46c0      	nop			; (mov r8, r8)
    return;
 80040fa:	e1b7      	b.n	800446c <HAL_UART_IRQHandler+0x62c>
 80040fc:	0000080f 	.word	0x0000080f
 8004100:	10000001 	.word	0x10000001
 8004104:	04000120 	.word	0x04000120
 8004108:	080051e1 	.word	0x080051e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d000      	beq.n	8004116 <HAL_UART_IRQHandler+0x2d6>
 8004114:	e13e      	b.n	8004394 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004116:	23a4      	movs	r3, #164	; 0xa4
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2210      	movs	r2, #16
 800411e:	4013      	ands	r3, r2
 8004120:	d100      	bne.n	8004124 <HAL_UART_IRQHandler+0x2e4>
 8004122:	e137      	b.n	8004394 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004124:	23a0      	movs	r3, #160	; 0xa0
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2210      	movs	r2, #16
 800412c:	4013      	ands	r3, r2
 800412e:	d100      	bne.n	8004132 <HAL_UART_IRQHandler+0x2f2>
 8004130:	e130      	b.n	8004394 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2210      	movs	r2, #16
 8004138:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2240      	movs	r2, #64	; 0x40
 8004142:	4013      	ands	r3, r2
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d000      	beq.n	800414a <HAL_UART_IRQHandler+0x30a>
 8004148:	e0a4      	b.n	8004294 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2280      	movs	r2, #128	; 0x80
 800414e:	589b      	ldr	r3, [r3, r2]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	217e      	movs	r1, #126	; 0x7e
 8004156:	187b      	adds	r3, r7, r1
 8004158:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800415a:	187b      	adds	r3, r7, r1
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d100      	bne.n	8004164 <HAL_UART_IRQHandler+0x324>
 8004162:	e185      	b.n	8004470 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	225c      	movs	r2, #92	; 0x5c
 8004168:	5a9b      	ldrh	r3, [r3, r2]
 800416a:	187a      	adds	r2, r7, r1
 800416c:	8812      	ldrh	r2, [r2, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d300      	bcc.n	8004174 <HAL_UART_IRQHandler+0x334>
 8004172:	e17d      	b.n	8004470 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	187a      	adds	r2, r7, r1
 8004178:	215e      	movs	r1, #94	; 0x5e
 800417a:	8812      	ldrh	r2, [r2, #0]
 800417c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2280      	movs	r2, #128	; 0x80
 8004182:	589b      	ldr	r3, [r3, r2]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2220      	movs	r2, #32
 800418a:	4013      	ands	r3, r2
 800418c:	d170      	bne.n	8004270 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800418e:	f3ef 8310 	mrs	r3, PRIMASK
 8004192:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004196:	67bb      	str	r3, [r7, #120]	; 0x78
 8004198:	2301      	movs	r3, #1
 800419a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419e:	f383 8810 	msr	PRIMASK, r3
}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	49b4      	ldr	r1, [pc, #720]	; (8004480 <HAL_UART_IRQHandler+0x640>)
 80041b0:	400a      	ands	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ba:	f383 8810 	msr	PRIMASK, r3
}
 80041be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c0:	f3ef 8310 	mrs	r3, PRIMASK
 80041c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80041c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c8:	677b      	str	r3, [r7, #116]	; 0x74
 80041ca:	2301      	movs	r3, #1
 80041cc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d0:	f383 8810 	msr	PRIMASK, r3
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2101      	movs	r1, #1
 80041e2:	438a      	bics	r2, r1
 80041e4:	609a      	str	r2, [r3, #8]
 80041e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ec:	f383 8810 	msr	PRIMASK, r3
}
 80041f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f2:	f3ef 8310 	mrs	r3, PRIMASK
 80041f6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80041f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041fa:	673b      	str	r3, [r7, #112]	; 0x70
 80041fc:	2301      	movs	r3, #1
 80041fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004202:	f383 8810 	msr	PRIMASK, r3
}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2140      	movs	r1, #64	; 0x40
 8004214:	438a      	bics	r2, r1
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800421a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800421e:	f383 8810 	msr	PRIMASK, r3
}
 8004222:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	228c      	movs	r2, #140	; 0x8c
 8004228:	2120      	movs	r1, #32
 800422a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004232:	f3ef 8310 	mrs	r3, PRIMASK
 8004236:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004238:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800423c:	2301      	movs	r3, #1
 800423e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004242:	f383 8810 	msr	PRIMASK, r3
}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2110      	movs	r1, #16
 8004254:	438a      	bics	r2, r1
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425e:	f383 8810 	msr	PRIMASK, r3
}
 8004262:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2280      	movs	r2, #128	; 0x80
 8004268:	589b      	ldr	r3, [r3, r2]
 800426a:	0018      	movs	r0, r3
 800426c:	f7fe f990 	bl	8002590 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	225c      	movs	r2, #92	; 0x5c
 800427a:	5a9a      	ldrh	r2, [r3, r2]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	215e      	movs	r1, #94	; 0x5e
 8004280:	5a5b      	ldrh	r3, [r3, r1]
 8004282:	b29b      	uxth	r3, r3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	0011      	movs	r1, r2
 800428c:	0018      	movs	r0, r3
 800428e:	f7fc fab3 	bl	80007f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004292:	e0ed      	b.n	8004470 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	225c      	movs	r2, #92	; 0x5c
 8004298:	5a99      	ldrh	r1, [r3, r2]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	225e      	movs	r2, #94	; 0x5e
 800429e:	5a9b      	ldrh	r3, [r3, r2]
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	208e      	movs	r0, #142	; 0x8e
 80042a4:	183b      	adds	r3, r7, r0
 80042a6:	1a8a      	subs	r2, r1, r2
 80042a8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	225e      	movs	r2, #94	; 0x5e
 80042ae:	5a9b      	ldrh	r3, [r3, r2]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d100      	bne.n	80042b8 <HAL_UART_IRQHandler+0x478>
 80042b6:	e0dd      	b.n	8004474 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80042b8:	183b      	adds	r3, r7, r0
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d100      	bne.n	80042c2 <HAL_UART_IRQHandler+0x482>
 80042c0:	e0d8      	b.n	8004474 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c2:	f3ef 8310 	mrs	r3, PRIMASK
 80042c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80042c8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042ca:	2488      	movs	r4, #136	; 0x88
 80042cc:	193a      	adds	r2, r7, r4
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	2301      	movs	r3, #1
 80042d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f383 8810 	msr	PRIMASK, r3
}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4967      	ldr	r1, [pc, #412]	; (8004484 <HAL_UART_IRQHandler+0x644>)
 80042e8:	400a      	ands	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	193b      	adds	r3, r7, r4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f383 8810 	msr	PRIMASK, r3
}
 80042f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fa:	f3ef 8310 	mrs	r3, PRIMASK
 80042fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8004300:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004302:	2484      	movs	r4, #132	; 0x84
 8004304:	193a      	adds	r2, r7, r4
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	2301      	movs	r3, #1
 800430a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f383 8810 	msr	PRIMASK, r3
}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	495a      	ldr	r1, [pc, #360]	; (8004488 <HAL_UART_IRQHandler+0x648>)
 8004320:	400a      	ands	r2, r1
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	193b      	adds	r3, r7, r4
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	f383 8810 	msr	PRIMASK, r3
}
 8004330:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	228c      	movs	r2, #140	; 0x8c
 8004336:	2120      	movs	r1, #32
 8004338:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004346:	f3ef 8310 	mrs	r3, PRIMASK
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434e:	2480      	movs	r4, #128	; 0x80
 8004350:	193a      	adds	r2, r7, r4
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	2301      	movs	r3, #1
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	f383 8810 	msr	PRIMASK, r3
}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2110      	movs	r1, #16
 800436c:	438a      	bics	r2, r1
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	193b      	adds	r3, r7, r4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	f383 8810 	msr	PRIMASK, r3
}
 800437c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004384:	183b      	adds	r3, r7, r0
 8004386:	881a      	ldrh	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	0011      	movs	r1, r2
 800438c:	0018      	movs	r0, r3
 800438e:	f7fc fa33 	bl	80007f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004392:	e06f      	b.n	8004474 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004394:	23a4      	movs	r3, #164	; 0xa4
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	035b      	lsls	r3, r3, #13
 800439e:	4013      	ands	r3, r2
 80043a0:	d010      	beq.n	80043c4 <HAL_UART_IRQHandler+0x584>
 80043a2:	239c      	movs	r3, #156	; 0x9c
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	03db      	lsls	r3, r3, #15
 80043ac:	4013      	ands	r3, r2
 80043ae:	d009      	beq.n	80043c4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2280      	movs	r2, #128	; 0x80
 80043b6:	0352      	lsls	r2, r2, #13
 80043b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	0018      	movs	r0, r3
 80043be:	f000 ff52 	bl	8005266 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043c2:	e05a      	b.n	800447a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80043c4:	23a4      	movs	r3, #164	; 0xa4
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2280      	movs	r2, #128	; 0x80
 80043cc:	4013      	ands	r3, r2
 80043ce:	d016      	beq.n	80043fe <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80043d0:	23a0      	movs	r3, #160	; 0xa0
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2280      	movs	r2, #128	; 0x80
 80043d8:	4013      	ands	r3, r2
 80043da:	d106      	bne.n	80043ea <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80043dc:	239c      	movs	r3, #156	; 0x9c
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	4013      	ands	r3, r2
 80043e8:	d009      	beq.n	80043fe <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d042      	beq.n	8004478 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	0010      	movs	r0, r2
 80043fa:	4798      	blx	r3
    }
    return;
 80043fc:	e03c      	b.n	8004478 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043fe:	23a4      	movs	r3, #164	; 0xa4
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2240      	movs	r2, #64	; 0x40
 8004406:	4013      	ands	r3, r2
 8004408:	d00a      	beq.n	8004420 <HAL_UART_IRQHandler+0x5e0>
 800440a:	23a0      	movs	r3, #160	; 0xa0
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2240      	movs	r2, #64	; 0x40
 8004412:	4013      	ands	r3, r2
 8004414:	d004      	beq.n	8004420 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	0018      	movs	r0, r3
 800441a:	f000 fef8 	bl	800520e <UART_EndTransmit_IT>
    return;
 800441e:	e02c      	b.n	800447a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004420:	23a4      	movs	r3, #164	; 0xa4
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	041b      	lsls	r3, r3, #16
 800442a:	4013      	ands	r3, r2
 800442c:	d00b      	beq.n	8004446 <HAL_UART_IRQHandler+0x606>
 800442e:	23a0      	movs	r3, #160	; 0xa0
 8004430:	18fb      	adds	r3, r7, r3
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	05db      	lsls	r3, r3, #23
 8004438:	4013      	ands	r3, r2
 800443a:	d004      	beq.n	8004446 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	0018      	movs	r0, r3
 8004440:	f000 ff21 	bl	8005286 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004444:	e019      	b.n	800447a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004446:	23a4      	movs	r3, #164	; 0xa4
 8004448:	18fb      	adds	r3, r7, r3
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	045b      	lsls	r3, r3, #17
 8004450:	4013      	ands	r3, r2
 8004452:	d012      	beq.n	800447a <HAL_UART_IRQHandler+0x63a>
 8004454:	23a0      	movs	r3, #160	; 0xa0
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	da0d      	bge.n	800447a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	0018      	movs	r0, r3
 8004462:	f000 ff08 	bl	8005276 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004466:	e008      	b.n	800447a <HAL_UART_IRQHandler+0x63a>
      return;
 8004468:	46c0      	nop			; (mov r8, r8)
 800446a:	e006      	b.n	800447a <HAL_UART_IRQHandler+0x63a>
    return;
 800446c:	46c0      	nop			; (mov r8, r8)
 800446e:	e004      	b.n	800447a <HAL_UART_IRQHandler+0x63a>
      return;
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	e002      	b.n	800447a <HAL_UART_IRQHandler+0x63a>
      return;
 8004474:	46c0      	nop			; (mov r8, r8)
 8004476:	e000      	b.n	800447a <HAL_UART_IRQHandler+0x63a>
    return;
 8004478:	46c0      	nop			; (mov r8, r8)
  }
}
 800447a:	46bd      	mov	sp, r7
 800447c:	b02a      	add	sp, #168	; 0xa8
 800447e:	bdb0      	pop	{r4, r5, r7, pc}
 8004480:	fffffeff 	.word	0xfffffeff
 8004484:	fffffedf 	.word	0xfffffedf
 8004488:	effffffe 	.word	0xeffffffe

0800448c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b002      	add	sp, #8
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80044a4:	46c0      	nop			; (mov r8, r8)
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b002      	add	sp, #8
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b002      	add	sp, #8
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044c4:	46c0      	nop			; (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b002      	add	sp, #8
 80044ca:	bd80      	pop	{r7, pc}

080044cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044cc:	b5b0      	push	{r4, r5, r7, lr}
 80044ce:	b090      	sub	sp, #64	; 0x40
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044d4:	231a      	movs	r3, #26
 80044d6:	2220      	movs	r2, #32
 80044d8:	189b      	adds	r3, r3, r2
 80044da:	19db      	adds	r3, r3, r7
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4ac4      	ldr	r2, [pc, #784]	; (8004810 <UART_SetConfig+0x344>)
 8004500:	4013      	ands	r3, r2
 8004502:	0019      	movs	r1, r3
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450a:	430b      	orrs	r3, r1
 800450c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4abf      	ldr	r2, [pc, #764]	; (8004814 <UART_SetConfig+0x348>)
 8004516:	4013      	ands	r3, r2
 8004518:	0018      	movs	r0, r3
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	68d9      	ldr	r1, [r3, #12]
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	0003      	movs	r3, r0
 8004524:	430b      	orrs	r3, r1
 8004526:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4ab9      	ldr	r2, [pc, #740]	; (8004818 <UART_SetConfig+0x34c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d004      	beq.n	8004542 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800453e:	4313      	orrs	r3, r2
 8004540:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	4ab4      	ldr	r2, [pc, #720]	; (800481c <UART_SetConfig+0x350>)
 800454a:	4013      	ands	r3, r2
 800454c:	0019      	movs	r1, r3
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004554:	430b      	orrs	r3, r1
 8004556:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	220f      	movs	r2, #15
 8004560:	4393      	bics	r3, r2
 8004562:	0018      	movs	r0, r3
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	0003      	movs	r3, r0
 800456e:	430b      	orrs	r3, r1
 8004570:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4aaa      	ldr	r2, [pc, #680]	; (8004820 <UART_SetConfig+0x354>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d131      	bne.n	80045e0 <UART_SetConfig+0x114>
 800457c:	4ba9      	ldr	r3, [pc, #676]	; (8004824 <UART_SetConfig+0x358>)
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	2203      	movs	r2, #3
 8004582:	4013      	ands	r3, r2
 8004584:	2b03      	cmp	r3, #3
 8004586:	d01d      	beq.n	80045c4 <UART_SetConfig+0xf8>
 8004588:	d823      	bhi.n	80045d2 <UART_SetConfig+0x106>
 800458a:	2b02      	cmp	r3, #2
 800458c:	d00c      	beq.n	80045a8 <UART_SetConfig+0xdc>
 800458e:	d820      	bhi.n	80045d2 <UART_SetConfig+0x106>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <UART_SetConfig+0xce>
 8004594:	2b01      	cmp	r3, #1
 8004596:	d00e      	beq.n	80045b6 <UART_SetConfig+0xea>
 8004598:	e01b      	b.n	80045d2 <UART_SetConfig+0x106>
 800459a:	231b      	movs	r3, #27
 800459c:	2220      	movs	r2, #32
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	19db      	adds	r3, r3, r7
 80045a2:	2200      	movs	r2, #0
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e071      	b.n	800468c <UART_SetConfig+0x1c0>
 80045a8:	231b      	movs	r3, #27
 80045aa:	2220      	movs	r2, #32
 80045ac:	189b      	adds	r3, r3, r2
 80045ae:	19db      	adds	r3, r3, r7
 80045b0:	2202      	movs	r2, #2
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	e06a      	b.n	800468c <UART_SetConfig+0x1c0>
 80045b6:	231b      	movs	r3, #27
 80045b8:	2220      	movs	r2, #32
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	19db      	adds	r3, r3, r7
 80045be:	2204      	movs	r2, #4
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	e063      	b.n	800468c <UART_SetConfig+0x1c0>
 80045c4:	231b      	movs	r3, #27
 80045c6:	2220      	movs	r2, #32
 80045c8:	189b      	adds	r3, r3, r2
 80045ca:	19db      	adds	r3, r3, r7
 80045cc:	2208      	movs	r2, #8
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	e05c      	b.n	800468c <UART_SetConfig+0x1c0>
 80045d2:	231b      	movs	r3, #27
 80045d4:	2220      	movs	r2, #32
 80045d6:	189b      	adds	r3, r3, r2
 80045d8:	19db      	adds	r3, r3, r7
 80045da:	2210      	movs	r2, #16
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e055      	b.n	800468c <UART_SetConfig+0x1c0>
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a90      	ldr	r2, [pc, #576]	; (8004828 <UART_SetConfig+0x35c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d106      	bne.n	80045f8 <UART_SetConfig+0x12c>
 80045ea:	231b      	movs	r3, #27
 80045ec:	2220      	movs	r2, #32
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	19db      	adds	r3, r3, r7
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	e049      	b.n	800468c <UART_SetConfig+0x1c0>
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a86      	ldr	r2, [pc, #536]	; (8004818 <UART_SetConfig+0x34c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d13e      	bne.n	8004680 <UART_SetConfig+0x1b4>
 8004602:	4b88      	ldr	r3, [pc, #544]	; (8004824 <UART_SetConfig+0x358>)
 8004604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004606:	23c0      	movs	r3, #192	; 0xc0
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	4013      	ands	r3, r2
 800460c:	22c0      	movs	r2, #192	; 0xc0
 800460e:	0112      	lsls	r2, r2, #4
 8004610:	4293      	cmp	r3, r2
 8004612:	d027      	beq.n	8004664 <UART_SetConfig+0x198>
 8004614:	22c0      	movs	r2, #192	; 0xc0
 8004616:	0112      	lsls	r2, r2, #4
 8004618:	4293      	cmp	r3, r2
 800461a:	d82a      	bhi.n	8004672 <UART_SetConfig+0x1a6>
 800461c:	2280      	movs	r2, #128	; 0x80
 800461e:	0112      	lsls	r2, r2, #4
 8004620:	4293      	cmp	r3, r2
 8004622:	d011      	beq.n	8004648 <UART_SetConfig+0x17c>
 8004624:	2280      	movs	r2, #128	; 0x80
 8004626:	0112      	lsls	r2, r2, #4
 8004628:	4293      	cmp	r3, r2
 800462a:	d822      	bhi.n	8004672 <UART_SetConfig+0x1a6>
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <UART_SetConfig+0x16e>
 8004630:	2280      	movs	r2, #128	; 0x80
 8004632:	00d2      	lsls	r2, r2, #3
 8004634:	4293      	cmp	r3, r2
 8004636:	d00e      	beq.n	8004656 <UART_SetConfig+0x18a>
 8004638:	e01b      	b.n	8004672 <UART_SetConfig+0x1a6>
 800463a:	231b      	movs	r3, #27
 800463c:	2220      	movs	r2, #32
 800463e:	189b      	adds	r3, r3, r2
 8004640:	19db      	adds	r3, r3, r7
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e021      	b.n	800468c <UART_SetConfig+0x1c0>
 8004648:	231b      	movs	r3, #27
 800464a:	2220      	movs	r2, #32
 800464c:	189b      	adds	r3, r3, r2
 800464e:	19db      	adds	r3, r3, r7
 8004650:	2202      	movs	r2, #2
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	e01a      	b.n	800468c <UART_SetConfig+0x1c0>
 8004656:	231b      	movs	r3, #27
 8004658:	2220      	movs	r2, #32
 800465a:	189b      	adds	r3, r3, r2
 800465c:	19db      	adds	r3, r3, r7
 800465e:	2204      	movs	r2, #4
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	e013      	b.n	800468c <UART_SetConfig+0x1c0>
 8004664:	231b      	movs	r3, #27
 8004666:	2220      	movs	r2, #32
 8004668:	189b      	adds	r3, r3, r2
 800466a:	19db      	adds	r3, r3, r7
 800466c:	2208      	movs	r2, #8
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	e00c      	b.n	800468c <UART_SetConfig+0x1c0>
 8004672:	231b      	movs	r3, #27
 8004674:	2220      	movs	r2, #32
 8004676:	189b      	adds	r3, r3, r2
 8004678:	19db      	adds	r3, r3, r7
 800467a:	2210      	movs	r2, #16
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	e005      	b.n	800468c <UART_SetConfig+0x1c0>
 8004680:	231b      	movs	r3, #27
 8004682:	2220      	movs	r2, #32
 8004684:	189b      	adds	r3, r3, r2
 8004686:	19db      	adds	r3, r3, r7
 8004688:	2210      	movs	r2, #16
 800468a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a61      	ldr	r2, [pc, #388]	; (8004818 <UART_SetConfig+0x34c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d000      	beq.n	8004698 <UART_SetConfig+0x1cc>
 8004696:	e092      	b.n	80047be <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004698:	231b      	movs	r3, #27
 800469a:	2220      	movs	r2, #32
 800469c:	189b      	adds	r3, r3, r2
 800469e:	19db      	adds	r3, r3, r7
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d015      	beq.n	80046d2 <UART_SetConfig+0x206>
 80046a6:	dc18      	bgt.n	80046da <UART_SetConfig+0x20e>
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d00d      	beq.n	80046c8 <UART_SetConfig+0x1fc>
 80046ac:	dc15      	bgt.n	80046da <UART_SetConfig+0x20e>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <UART_SetConfig+0x1ec>
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d005      	beq.n	80046c2 <UART_SetConfig+0x1f6>
 80046b6:	e010      	b.n	80046da <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b8:	f7ff f922 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 80046bc:	0003      	movs	r3, r0
 80046be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046c0:	e014      	b.n	80046ec <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c2:	4b5a      	ldr	r3, [pc, #360]	; (800482c <UART_SetConfig+0x360>)
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046c6:	e011      	b.n	80046ec <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046c8:	f7ff f88e 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 80046cc:	0003      	movs	r3, r0
 80046ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046d0:	e00c      	b.n	80046ec <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046d8:	e008      	b.n	80046ec <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80046de:	231a      	movs	r3, #26
 80046e0:	2220      	movs	r2, #32
 80046e2:	189b      	adds	r3, r3, r2
 80046e4:	19db      	adds	r3, r3, r7
 80046e6:	2201      	movs	r2, #1
 80046e8:	701a      	strb	r2, [r3, #0]
        break;
 80046ea:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d100      	bne.n	80046f4 <UART_SetConfig+0x228>
 80046f2:	e147      	b.n	8004984 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f8:	4b4d      	ldr	r3, [pc, #308]	; (8004830 <UART_SetConfig+0x364>)
 80046fa:	0052      	lsls	r2, r2, #1
 80046fc:	5ad3      	ldrh	r3, [r2, r3]
 80046fe:	0019      	movs	r1, r3
 8004700:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004702:	f7fb fcfd 	bl	8000100 <__udivsi3>
 8004706:	0003      	movs	r3, r0
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	0013      	movs	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	189b      	adds	r3, r3, r2
 8004714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004716:	429a      	cmp	r2, r3
 8004718:	d305      	bcc.n	8004726 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004722:	429a      	cmp	r2, r3
 8004724:	d906      	bls.n	8004734 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004726:	231a      	movs	r3, #26
 8004728:	2220      	movs	r2, #32
 800472a:	189b      	adds	r3, r3, r2
 800472c:	19db      	adds	r3, r3, r7
 800472e:	2201      	movs	r2, #1
 8004730:	701a      	strb	r2, [r3, #0]
 8004732:	e127      	b.n	8004984 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	2300      	movs	r3, #0
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004740:	4b3b      	ldr	r3, [pc, #236]	; (8004830 <UART_SetConfig+0x364>)
 8004742:	0052      	lsls	r2, r2, #1
 8004744:	5ad3      	ldrh	r3, [r2, r3]
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	69b8      	ldr	r0, [r7, #24]
 8004752:	69f9      	ldr	r1, [r7, #28]
 8004754:	f7fb fe4a 	bl	80003ec <__aeabi_uldivmod>
 8004758:	0002      	movs	r2, r0
 800475a:	000b      	movs	r3, r1
 800475c:	0e11      	lsrs	r1, r2, #24
 800475e:	021d      	lsls	r5, r3, #8
 8004760:	430d      	orrs	r5, r1
 8004762:	0214      	lsls	r4, r2, #8
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68b8      	ldr	r0, [r7, #8]
 8004772:	68f9      	ldr	r1, [r7, #12]
 8004774:	1900      	adds	r0, r0, r4
 8004776:	4169      	adcs	r1, r5
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	2300      	movs	r3, #0
 8004780:	607b      	str	r3, [r7, #4]
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f7fb fe31 	bl	80003ec <__aeabi_uldivmod>
 800478a:	0002      	movs	r2, r0
 800478c:	000b      	movs	r3, r1
 800478e:	0013      	movs	r3, r2
 8004790:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004794:	23c0      	movs	r3, #192	; 0xc0
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	429a      	cmp	r2, r3
 800479a:	d309      	bcc.n	80047b0 <UART_SetConfig+0x2e4>
 800479c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	035b      	lsls	r3, r3, #13
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d204      	bcs.n	80047b0 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	e0e9      	b.n	8004984 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80047b0:	231a      	movs	r3, #26
 80047b2:	2220      	movs	r2, #32
 80047b4:	189b      	adds	r3, r3, r2
 80047b6:	19db      	adds	r3, r3, r7
 80047b8:	2201      	movs	r2, #1
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	e0e2      	b.n	8004984 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d000      	beq.n	80047cc <UART_SetConfig+0x300>
 80047ca:	e083      	b.n	80048d4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80047cc:	231b      	movs	r3, #27
 80047ce:	2220      	movs	r2, #32
 80047d0:	189b      	adds	r3, r3, r2
 80047d2:	19db      	adds	r3, r3, r7
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d015      	beq.n	8004806 <UART_SetConfig+0x33a>
 80047da:	dc2b      	bgt.n	8004834 <UART_SetConfig+0x368>
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d00d      	beq.n	80047fc <UART_SetConfig+0x330>
 80047e0:	dc28      	bgt.n	8004834 <UART_SetConfig+0x368>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <UART_SetConfig+0x320>
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d005      	beq.n	80047f6 <UART_SetConfig+0x32a>
 80047ea:	e023      	b.n	8004834 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ec:	f7ff f888 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 80047f0:	0003      	movs	r3, r0
 80047f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047f4:	e027      	b.n	8004846 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f6:	4b0d      	ldr	r3, [pc, #52]	; (800482c <UART_SetConfig+0x360>)
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047fa:	e024      	b.n	8004846 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047fc:	f7fe fff4 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 8004800:	0003      	movs	r3, r0
 8004802:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004804:	e01f      	b.n	8004846 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004806:	2380      	movs	r3, #128	; 0x80
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800480c:	e01b      	b.n	8004846 <UART_SetConfig+0x37a>
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	cfff69f3 	.word	0xcfff69f3
 8004814:	ffffcfff 	.word	0xffffcfff
 8004818:	40008000 	.word	0x40008000
 800481c:	11fff4ff 	.word	0x11fff4ff
 8004820:	40013800 	.word	0x40013800
 8004824:	40021000 	.word	0x40021000
 8004828:	40004400 	.word	0x40004400
 800482c:	00f42400 	.word	0x00f42400
 8004830:	08005744 	.word	0x08005744
      default:
        pclk = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004838:	231a      	movs	r3, #26
 800483a:	2220      	movs	r2, #32
 800483c:	189b      	adds	r3, r3, r2
 800483e:	19db      	adds	r3, r3, r7
 8004840:	2201      	movs	r2, #1
 8004842:	701a      	strb	r2, [r3, #0]
        break;
 8004844:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004848:	2b00      	cmp	r3, #0
 800484a:	d100      	bne.n	800484e <UART_SetConfig+0x382>
 800484c:	e09a      	b.n	8004984 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004852:	4b58      	ldr	r3, [pc, #352]	; (80049b4 <UART_SetConfig+0x4e8>)
 8004854:	0052      	lsls	r2, r2, #1
 8004856:	5ad3      	ldrh	r3, [r2, r3]
 8004858:	0019      	movs	r1, r3
 800485a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800485c:	f7fb fc50 	bl	8000100 <__udivsi3>
 8004860:	0003      	movs	r3, r0
 8004862:	005a      	lsls	r2, r3, #1
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	18d2      	adds	r2, r2, r3
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	0019      	movs	r1, r3
 8004872:	0010      	movs	r0, r2
 8004874:	f7fb fc44 	bl	8000100 <__udivsi3>
 8004878:	0003      	movs	r3, r0
 800487a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487e:	2b0f      	cmp	r3, #15
 8004880:	d921      	bls.n	80048c6 <UART_SetConfig+0x3fa>
 8004882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	025b      	lsls	r3, r3, #9
 8004888:	429a      	cmp	r2, r3
 800488a:	d21c      	bcs.n	80048c6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	b29a      	uxth	r2, r3
 8004890:	200e      	movs	r0, #14
 8004892:	2420      	movs	r4, #32
 8004894:	1903      	adds	r3, r0, r4
 8004896:	19db      	adds	r3, r3, r7
 8004898:	210f      	movs	r1, #15
 800489a:	438a      	bics	r2, r1
 800489c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2207      	movs	r2, #7
 80048a6:	4013      	ands	r3, r2
 80048a8:	b299      	uxth	r1, r3
 80048aa:	1903      	adds	r3, r0, r4
 80048ac:	19db      	adds	r3, r3, r7
 80048ae:	1902      	adds	r2, r0, r4
 80048b0:	19d2      	adds	r2, r2, r7
 80048b2:	8812      	ldrh	r2, [r2, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	1902      	adds	r2, r0, r4
 80048be:	19d2      	adds	r2, r2, r7
 80048c0:	8812      	ldrh	r2, [r2, #0]
 80048c2:	60da      	str	r2, [r3, #12]
 80048c4:	e05e      	b.n	8004984 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80048c6:	231a      	movs	r3, #26
 80048c8:	2220      	movs	r2, #32
 80048ca:	189b      	adds	r3, r3, r2
 80048cc:	19db      	adds	r3, r3, r7
 80048ce:	2201      	movs	r2, #1
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e057      	b.n	8004984 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048d4:	231b      	movs	r3, #27
 80048d6:	2220      	movs	r2, #32
 80048d8:	189b      	adds	r3, r3, r2
 80048da:	19db      	adds	r3, r3, r7
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d015      	beq.n	800490e <UART_SetConfig+0x442>
 80048e2:	dc18      	bgt.n	8004916 <UART_SetConfig+0x44a>
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d00d      	beq.n	8004904 <UART_SetConfig+0x438>
 80048e8:	dc15      	bgt.n	8004916 <UART_SetConfig+0x44a>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <UART_SetConfig+0x428>
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d005      	beq.n	80048fe <UART_SetConfig+0x432>
 80048f2:	e010      	b.n	8004916 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f4:	f7ff f804 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 80048f8:	0003      	movs	r3, r0
 80048fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048fc:	e014      	b.n	8004928 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048fe:	4b2e      	ldr	r3, [pc, #184]	; (80049b8 <UART_SetConfig+0x4ec>)
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004902:	e011      	b.n	8004928 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004904:	f7fe ff70 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 8004908:	0003      	movs	r3, r0
 800490a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800490c:	e00c      	b.n	8004928 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004914:	e008      	b.n	8004928 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800491a:	231a      	movs	r3, #26
 800491c:	2220      	movs	r2, #32
 800491e:	189b      	adds	r3, r3, r2
 8004920:	19db      	adds	r3, r3, r7
 8004922:	2201      	movs	r2, #1
 8004924:	701a      	strb	r2, [r3, #0]
        break;
 8004926:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492a:	2b00      	cmp	r3, #0
 800492c:	d02a      	beq.n	8004984 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004932:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <UART_SetConfig+0x4e8>)
 8004934:	0052      	lsls	r2, r2, #1
 8004936:	5ad3      	ldrh	r3, [r2, r3]
 8004938:	0019      	movs	r1, r3
 800493a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800493c:	f7fb fbe0 	bl	8000100 <__udivsi3>
 8004940:	0003      	movs	r3, r0
 8004942:	001a      	movs	r2, r3
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	18d2      	adds	r2, r2, r3
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	0019      	movs	r1, r3
 8004952:	0010      	movs	r0, r2
 8004954:	f7fb fbd4 	bl	8000100 <__udivsi3>
 8004958:	0003      	movs	r3, r0
 800495a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	2b0f      	cmp	r3, #15
 8004960:	d90a      	bls.n	8004978 <UART_SetConfig+0x4ac>
 8004962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004964:	2380      	movs	r3, #128	; 0x80
 8004966:	025b      	lsls	r3, r3, #9
 8004968:	429a      	cmp	r2, r3
 800496a:	d205      	bcs.n	8004978 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496e:	b29a      	uxth	r2, r3
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	e005      	b.n	8004984 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004978:	231a      	movs	r3, #26
 800497a:	2220      	movs	r2, #32
 800497c:	189b      	adds	r3, r3, r2
 800497e:	19db      	adds	r3, r3, r7
 8004980:	2201      	movs	r2, #1
 8004982:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	226a      	movs	r2, #106	; 0x6a
 8004988:	2101      	movs	r1, #1
 800498a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	2268      	movs	r2, #104	; 0x68
 8004990:	2101      	movs	r1, #1
 8004992:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	2200      	movs	r2, #0
 8004998:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	2200      	movs	r2, #0
 800499e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80049a0:	231a      	movs	r3, #26
 80049a2:	2220      	movs	r2, #32
 80049a4:	189b      	adds	r3, r3, r2
 80049a6:	19db      	adds	r3, r3, r7
 80049a8:	781b      	ldrb	r3, [r3, #0]
}
 80049aa:	0018      	movs	r0, r3
 80049ac:	46bd      	mov	sp, r7
 80049ae:	b010      	add	sp, #64	; 0x40
 80049b0:	bdb0      	pop	{r4, r5, r7, pc}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	08005744 	.word	0x08005744
 80049b8:	00f42400 	.word	0x00f42400

080049bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	2201      	movs	r2, #1
 80049ca:	4013      	ands	r3, r2
 80049cc:	d00b      	beq.n	80049e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	4a4a      	ldr	r2, [pc, #296]	; (8004b00 <UART_AdvFeatureConfig+0x144>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	0019      	movs	r1, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	2202      	movs	r2, #2
 80049ec:	4013      	ands	r3, r2
 80049ee:	d00b      	beq.n	8004a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4a43      	ldr	r2, [pc, #268]	; (8004b04 <UART_AdvFeatureConfig+0x148>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	0019      	movs	r1, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d00b      	beq.n	8004a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4a3b      	ldr	r2, [pc, #236]	; (8004b08 <UART_AdvFeatureConfig+0x14c>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	0019      	movs	r1, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	2208      	movs	r2, #8
 8004a30:	4013      	ands	r3, r2
 8004a32:	d00b      	beq.n	8004a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4a34      	ldr	r2, [pc, #208]	; (8004b0c <UART_AdvFeatureConfig+0x150>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	0019      	movs	r1, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	2210      	movs	r2, #16
 8004a52:	4013      	ands	r3, r2
 8004a54:	d00b      	beq.n	8004a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4a2c      	ldr	r2, [pc, #176]	; (8004b10 <UART_AdvFeatureConfig+0x154>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	0019      	movs	r1, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	2220      	movs	r2, #32
 8004a74:	4013      	ands	r3, r2
 8004a76:	d00b      	beq.n	8004a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	4a25      	ldr	r2, [pc, #148]	; (8004b14 <UART_AdvFeatureConfig+0x158>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	0019      	movs	r1, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	2240      	movs	r2, #64	; 0x40
 8004a96:	4013      	ands	r3, r2
 8004a98:	d01d      	beq.n	8004ad6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4a1d      	ldr	r2, [pc, #116]	; (8004b18 <UART_AdvFeatureConfig+0x15c>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	035b      	lsls	r3, r3, #13
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d10b      	bne.n	8004ad6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	4a15      	ldr	r2, [pc, #84]	; (8004b1c <UART_AdvFeatureConfig+0x160>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	0019      	movs	r1, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	2280      	movs	r2, #128	; 0x80
 8004adc:	4013      	ands	r3, r2
 8004ade:	d00b      	beq.n	8004af8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	4a0e      	ldr	r2, [pc, #56]	; (8004b20 <UART_AdvFeatureConfig+0x164>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	0019      	movs	r1, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	605a      	str	r2, [r3, #4]
  }
}
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b002      	add	sp, #8
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	fffdffff 	.word	0xfffdffff
 8004b04:	fffeffff 	.word	0xfffeffff
 8004b08:	fffbffff 	.word	0xfffbffff
 8004b0c:	ffff7fff 	.word	0xffff7fff
 8004b10:	ffffefff 	.word	0xffffefff
 8004b14:	ffffdfff 	.word	0xffffdfff
 8004b18:	ffefffff 	.word	0xffefffff
 8004b1c:	ff9fffff 	.word	0xff9fffff
 8004b20:	fff7ffff 	.word	0xfff7ffff

08004b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2290      	movs	r2, #144	; 0x90
 8004b30:	2100      	movs	r1, #0
 8004b32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b34:	f7fc feb6 	bl	80018a4 <HAL_GetTick>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2208      	movs	r2, #8
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d10c      	bne.n	8004b64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2280      	movs	r2, #128	; 0x80
 8004b4e:	0391      	lsls	r1, r2, #14
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	4a1a      	ldr	r2, [pc, #104]	; (8004bbc <UART_CheckIdleState+0x98>)
 8004b54:	9200      	str	r2, [sp, #0]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f000 f832 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8004b5c:	1e03      	subs	r3, r0, #0
 8004b5e:	d001      	beq.n	8004b64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e026      	b.n	8004bb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d10c      	bne.n	8004b8c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2280      	movs	r2, #128	; 0x80
 8004b76:	03d1      	lsls	r1, r2, #15
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	4a10      	ldr	r2, [pc, #64]	; (8004bbc <UART_CheckIdleState+0x98>)
 8004b7c:	9200      	str	r2, [sp, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f000 f81e 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8004b84:	1e03      	subs	r3, r0, #0
 8004b86:	d001      	beq.n	8004b8c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e012      	b.n	8004bb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2288      	movs	r2, #136	; 0x88
 8004b90:	2120      	movs	r1, #32
 8004b92:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	228c      	movs	r2, #140	; 0x8c
 8004b98:	2120      	movs	r1, #32
 8004b9a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2284      	movs	r2, #132	; 0x84
 8004bac:	2100      	movs	r1, #0
 8004bae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	b004      	add	sp, #16
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	01ffffff 	.word	0x01ffffff

08004bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b094      	sub	sp, #80	; 0x50
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	1dfb      	adds	r3, r7, #7
 8004bce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd0:	e0a7      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	d100      	bne.n	8004bda <UART_WaitOnFlagUntilTimeout+0x1a>
 8004bd8:	e0a3      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bda:	f7fc fe63 	bl	80018a4 <HAL_GetTick>
 8004bde:	0002      	movs	r2, r0
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d13f      	bne.n	8004c70 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	f383 8810 	msr	PRIMASK, r3
}
 8004c04:	46c0      	nop			; (mov r8, r8)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	494e      	ldr	r1, [pc, #312]	; (8004d4c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004c12:	400a      	ands	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c18:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	f383 8810 	msr	PRIMASK, r3
}
 8004c20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c22:	f3ef 8310 	mrs	r3, PRIMASK
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c32:	f383 8810 	msr	PRIMASK, r3
}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2101      	movs	r1, #1
 8004c44:	438a      	bics	r2, r1
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4e:	f383 8810 	msr	PRIMASK, r3
}
 8004c52:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2288      	movs	r2, #136	; 0x88
 8004c58:	2120      	movs	r1, #32
 8004c5a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	228c      	movs	r2, #140	; 0x8c
 8004c60:	2120      	movs	r1, #32
 8004c62:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2284      	movs	r2, #132	; 0x84
 8004c68:	2100      	movs	r1, #0
 8004c6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e069      	b.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2204      	movs	r2, #4
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d052      	beq.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	2380      	movs	r3, #128	; 0x80
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	401a      	ands	r2, r3
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d148      	bne.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2280      	movs	r2, #128	; 0x80
 8004c96:	0112      	lsls	r2, r2, #4
 8004c98:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c9e:	613b      	str	r3, [r7, #16]
  return(result);
 8004ca0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f383 8810 	msr	PRIMASK, r3
}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4924      	ldr	r1, [pc, #144]	; (8004d4c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004cbc:	400a      	ands	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	f383 8810 	msr	PRIMASK, r3
}
 8004cca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cd2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	f383 8810 	msr	PRIMASK, r3
}
 8004ce0:	46c0      	nop			; (mov r8, r8)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	438a      	bics	r2, r1
 8004cf0:	609a      	str	r2, [r3, #8]
 8004cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	f383 8810 	msr	PRIMASK, r3
}
 8004cfc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2288      	movs	r2, #136	; 0x88
 8004d02:	2120      	movs	r1, #32
 8004d04:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	228c      	movs	r2, #140	; 0x8c
 8004d0a:	2120      	movs	r1, #32
 8004d0c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2290      	movs	r2, #144	; 0x90
 8004d12:	2120      	movs	r1, #32
 8004d14:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2284      	movs	r2, #132	; 0x84
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e010      	b.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	425a      	negs	r2, r3
 8004d32:	4153      	adcs	r3, r2
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	001a      	movs	r2, r3
 8004d38:	1dfb      	adds	r3, r7, #7
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d100      	bne.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x182>
 8004d40:	e747      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	0018      	movs	r0, r3
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b014      	add	sp, #80	; 0x50
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	fffffe5f 	.word	0xfffffe5f

08004d50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b090      	sub	sp, #64	; 0x40
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	1dbb      	adds	r3, r7, #6
 8004d5c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	1dba      	adds	r2, r7, #6
 8004d68:	215c      	movs	r1, #92	; 0x5c
 8004d6a:	8812      	ldrh	r2, [r2, #0]
 8004d6c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2290      	movs	r2, #144	; 0x90
 8004d72:	2100      	movs	r1, #0
 8004d74:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	228c      	movs	r2, #140	; 0x8c
 8004d7a:	2122      	movs	r1, #34	; 0x22
 8004d7c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2280      	movs	r2, #128	; 0x80
 8004d82:	589b      	ldr	r3, [r3, r2]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d02d      	beq.n	8004de4 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2280      	movs	r2, #128	; 0x80
 8004d8c:	589b      	ldr	r3, [r3, r2]
 8004d8e:	4a40      	ldr	r2, [pc, #256]	; (8004e90 <UART_Start_Receive_DMA+0x140>)
 8004d90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2280      	movs	r2, #128	; 0x80
 8004d96:	589b      	ldr	r3, [r3, r2]
 8004d98:	4a3e      	ldr	r2, [pc, #248]	; (8004e94 <UART_Start_Receive_DMA+0x144>)
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2280      	movs	r2, #128	; 0x80
 8004da0:	589b      	ldr	r3, [r3, r2]
 8004da2:	4a3d      	ldr	r2, [pc, #244]	; (8004e98 <UART_Start_Receive_DMA+0x148>)
 8004da4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2280      	movs	r2, #128	; 0x80
 8004daa:	589b      	ldr	r3, [r3, r2]
 8004dac:	2200      	movs	r2, #0
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2280      	movs	r2, #128	; 0x80
 8004db4:	5898      	ldr	r0, [r3, r2]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3324      	adds	r3, #36	; 0x24
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	001a      	movs	r2, r3
 8004dc4:	1dbb      	adds	r3, r7, #6
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	f7fd fb5c 	bl	8002484 <HAL_DMA_Start_IT>
 8004dcc:	1e03      	subs	r3, r0, #0
 8004dce:	d009      	beq.n	8004de4 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2290      	movs	r2, #144	; 0x90
 8004dd4:	2110      	movs	r1, #16
 8004dd6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	228c      	movs	r2, #140	; 0x8c
 8004ddc:	2120      	movs	r1, #32
 8004dde:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e050      	b.n	8004e86 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d019      	beq.n	8004e20 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dec:	f3ef 8310 	mrs	r3, PRIMASK
 8004df0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df6:	2301      	movs	r3, #1
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	f383 8810 	msr	PRIMASK, r3
}
 8004e00:	46c0      	nop			; (mov r8, r8)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2180      	movs	r1, #128	; 0x80
 8004e0e:	0049      	lsls	r1, r1, #1
 8004e10:	430a      	orrs	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e16:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	f383 8810 	msr	PRIMASK, r3
}
 8004e1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e20:	f3ef 8310 	mrs	r3, PRIMASK
 8004e24:	613b      	str	r3, [r7, #16]
  return(result);
 8004e26:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e28:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f383 8810 	msr	PRIMASK, r3
}
 8004e34:	46c0      	nop			; (mov r8, r8)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2101      	movs	r1, #1
 8004e42:	430a      	orrs	r2, r1
 8004e44:	609a      	str	r2, [r3, #8]
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f383 8810 	msr	PRIMASK, r3
}
 8004e50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e52:	f3ef 8310 	mrs	r3, PRIMASK
 8004e56:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e58:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	f383 8810 	msr	PRIMASK, r3
}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2140      	movs	r1, #64	; 0x40
 8004e74:	430a      	orrs	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
 8004e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	f383 8810 	msr	PRIMASK, r3
}
 8004e82:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	0018      	movs	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b010      	add	sp, #64	; 0x40
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	08004fe9 	.word	0x08004fe9
 8004e94:	08005119 	.word	0x08005119
 8004e98:	0800515b 	.word	0x0800515b

08004e9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	; 0x28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
 8004eae:	2301      	movs	r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f383 8810 	msr	PRIMASK, r3
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	21c0      	movs	r1, #192	; 0xc0
 8004ec6:	438a      	bics	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f383 8810 	msr	PRIMASK, r3
}
 8004ed4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eda:	617b      	str	r3, [r7, #20]
  return(result);
 8004edc:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004ede:	623b      	str	r3, [r7, #32]
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f383 8810 	msr	PRIMASK, r3
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4908      	ldr	r1, [pc, #32]	; (8004f18 <UART_EndTxTransfer+0x7c>)
 8004ef8:	400a      	ands	r2, r1
 8004efa:	609a      	str	r2, [r3, #8]
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f383 8810 	msr	PRIMASK, r3
}
 8004f06:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2288      	movs	r2, #136	; 0x88
 8004f0c:	2120      	movs	r1, #32
 8004f0e:	5099      	str	r1, [r3, r2]
}
 8004f10:	46c0      	nop			; (mov r8, r8)
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b00a      	add	sp, #40	; 0x28
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	ff7fffff 	.word	0xff7fffff

08004f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08e      	sub	sp, #56	; 0x38
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f24:	f3ef 8310 	mrs	r3, PRIMASK
 8004f28:	617b      	str	r3, [r7, #20]
  return(result);
 8004f2a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2e:	2301      	movs	r3, #1
 8004f30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	f383 8810 	msr	PRIMASK, r3
}
 8004f38:	46c0      	nop			; (mov r8, r8)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4926      	ldr	r1, [pc, #152]	; (8004fe0 <UART_EndRxTransfer+0xc4>)
 8004f46:	400a      	ands	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f383 8810 	msr	PRIMASK, r3
}
 8004f54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f56:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5a:	623b      	str	r3, [r7, #32]
  return(result);
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f5e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f60:	2301      	movs	r3, #1
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	f383 8810 	msr	PRIMASK, r3
}
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	491b      	ldr	r1, [pc, #108]	; (8004fe4 <UART_EndRxTransfer+0xc8>)
 8004f78:	400a      	ands	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	f383 8810 	msr	PRIMASK, r3
}
 8004f86:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d118      	bne.n	8004fc2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f90:	f3ef 8310 	mrs	r3, PRIMASK
 8004f94:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f96:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f383 8810 	msr	PRIMASK, r3
}
 8004fa4:	46c0      	nop			; (mov r8, r8)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2110      	movs	r1, #16
 8004fb2:	438a      	bics	r2, r1
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f383 8810 	msr	PRIMASK, r3
}
 8004fc0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	228c      	movs	r2, #140	; 0x8c
 8004fc6:	2120      	movs	r1, #32
 8004fc8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004fd6:	46c0      	nop			; (mov r8, r8)
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b00e      	add	sp, #56	; 0x38
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	fffffedf 	.word	0xfffffedf
 8004fe4:	effffffe 	.word	0xeffffffe

08004fe8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b094      	sub	sp, #80	; 0x50
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	4013      	ands	r3, r2
 8005000:	d16f      	bne.n	80050e2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005004:	225e      	movs	r2, #94	; 0x5e
 8005006:	2100      	movs	r1, #0
 8005008:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500a:	f3ef 8310 	mrs	r3, PRIMASK
 800500e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005010:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005012:	64bb      	str	r3, [r7, #72]	; 0x48
 8005014:	2301      	movs	r3, #1
 8005016:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f383 8810 	msr	PRIMASK, r3
}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	493a      	ldr	r1, [pc, #232]	; (8005114 <UART_DMAReceiveCplt+0x12c>)
 800502c:	400a      	ands	r2, r1
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005032:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	f383 8810 	msr	PRIMASK, r3
}
 800503a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800503c:	f3ef 8310 	mrs	r3, PRIMASK
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005044:	647b      	str	r3, [r7, #68]	; 0x44
 8005046:	2301      	movs	r3, #1
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	f383 8810 	msr	PRIMASK, r3
}
 8005050:	46c0      	nop			; (mov r8, r8)
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2101      	movs	r1, #1
 800505e:	438a      	bics	r2, r1
 8005060:	609a      	str	r2, [r3, #8]
 8005062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005068:	f383 8810 	msr	PRIMASK, r3
}
 800506c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506e:	f3ef 8310 	mrs	r3, PRIMASK
 8005072:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005076:	643b      	str	r3, [r7, #64]	; 0x40
 8005078:	2301      	movs	r3, #1
 800507a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	f383 8810 	msr	PRIMASK, r3
}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2140      	movs	r1, #64	; 0x40
 8005090:	438a      	bics	r2, r1
 8005092:	609a      	str	r2, [r3, #8]
 8005094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005096:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	f383 8810 	msr	PRIMASK, r3
}
 800509e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a2:	228c      	movs	r2, #140	; 0x8c
 80050a4:	2120      	movs	r1, #32
 80050a6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d118      	bne.n	80050e2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b0:	f3ef 8310 	mrs	r3, PRIMASK
 80050b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80050b6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050ba:	2301      	movs	r3, #1
 80050bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f383 8810 	msr	PRIMASK, r3
}
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2110      	movs	r1, #16
 80050d2:	438a      	bics	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f383 8810 	msr	PRIMASK, r3
}
 80050e0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e4:	2200      	movs	r2, #0
 80050e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d108      	bne.n	8005102 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f2:	225c      	movs	r2, #92	; 0x5c
 80050f4:	5a9a      	ldrh	r2, [r3, r2]
 80050f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f8:	0011      	movs	r1, r2
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7fb fb7c 	bl	80007f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005100:	e003      	b.n	800510a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8005102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005104:	0018      	movs	r0, r3
 8005106:	f7ff f9c9 	bl	800449c <HAL_UART_RxCpltCallback>
}
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	46bd      	mov	sp, r7
 800510e:	b014      	add	sp, #80	; 0x50
 8005110:	bd80      	pop	{r7, pc}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	fffffeff 	.word	0xfffffeff

08005118 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2201      	movs	r2, #1
 800512a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d10a      	bne.n	800514a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	225c      	movs	r2, #92	; 0x5c
 8005138:	5a9b      	ldrh	r3, [r3, r2]
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	0011      	movs	r1, r2
 8005142:	0018      	movs	r0, r3
 8005144:	f7fb fb58 	bl	80007f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005148:	e003      	b.n	8005152 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	0018      	movs	r0, r3
 800514e:	f7ff f9ad 	bl	80044ac <HAL_UART_RxHalfCpltCallback>
}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	46bd      	mov	sp, r7
 8005156:	b004      	add	sp, #16
 8005158:	bd80      	pop	{r7, pc}

0800515a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b086      	sub	sp, #24
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2288      	movs	r2, #136	; 0x88
 800516c:	589b      	ldr	r3, [r3, r2]
 800516e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	228c      	movs	r2, #140	; 0x8c
 8005174:	589b      	ldr	r3, [r3, r2]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2280      	movs	r2, #128	; 0x80
 8005180:	4013      	ands	r3, r2
 8005182:	2b80      	cmp	r3, #128	; 0x80
 8005184:	d10a      	bne.n	800519c <UART_DMAError+0x42>
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b21      	cmp	r3, #33	; 0x21
 800518a:	d107      	bne.n	800519c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2256      	movs	r2, #86	; 0x56
 8005190:	2100      	movs	r1, #0
 8005192:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	0018      	movs	r0, r3
 8005198:	f7ff fe80 	bl	8004e9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2240      	movs	r2, #64	; 0x40
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b40      	cmp	r3, #64	; 0x40
 80051a8:	d10a      	bne.n	80051c0 <UART_DMAError+0x66>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b22      	cmp	r3, #34	; 0x22
 80051ae:	d107      	bne.n	80051c0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	225e      	movs	r2, #94	; 0x5e
 80051b4:	2100      	movs	r1, #0
 80051b6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	0018      	movs	r0, r3
 80051bc:	f7ff feae 	bl	8004f1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2290      	movs	r2, #144	; 0x90
 80051c4:	589b      	ldr	r3, [r3, r2]
 80051c6:	2210      	movs	r2, #16
 80051c8:	431a      	orrs	r2, r3
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2190      	movs	r1, #144	; 0x90
 80051ce:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f7ff f972 	bl	80044bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d8:	46c0      	nop			; (mov r8, r8)
 80051da:	46bd      	mov	sp, r7
 80051dc:	b006      	add	sp, #24
 80051de:	bd80      	pop	{r7, pc}

080051e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	225e      	movs	r2, #94	; 0x5e
 80051f2:	2100      	movs	r1, #0
 80051f4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2256      	movs	r2, #86	; 0x56
 80051fa:	2100      	movs	r1, #0
 80051fc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	0018      	movs	r0, r3
 8005202:	f7ff f95b 	bl	80044bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	46bd      	mov	sp, r7
 800520a:	b004      	add	sp, #16
 800520c:	bd80      	pop	{r7, pc}

0800520e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b086      	sub	sp, #24
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005216:	f3ef 8310 	mrs	r3, PRIMASK
 800521a:	60bb      	str	r3, [r7, #8]
  return(result);
 800521c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	2301      	movs	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f383 8810 	msr	PRIMASK, r3
}
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2140      	movs	r1, #64	; 0x40
 8005238:	438a      	bics	r2, r1
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f383 8810 	msr	PRIMASK, r3
}
 8005246:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2288      	movs	r2, #136	; 0x88
 800524c:	2120      	movs	r1, #32
 800524e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	0018      	movs	r0, r3
 800525a:	f7ff f917 	bl	800448c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	46bd      	mov	sp, r7
 8005262:	b006      	add	sp, #24
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	46bd      	mov	sp, r7
 8005272:	b002      	add	sp, #8
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	46bd      	mov	sp, r7
 8005282:	b002      	add	sp, #8
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	46bd      	mov	sp, r7
 8005292:	b002      	add	sp, #8
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2284      	movs	r2, #132	; 0x84
 80052a4:	5c9b      	ldrb	r3, [r3, r2]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_UARTEx_DisableFifoMode+0x16>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e027      	b.n	80052fe <HAL_UARTEx_DisableFifoMode+0x66>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2284      	movs	r2, #132	; 0x84
 80052b2:	2101      	movs	r1, #1
 80052b4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2288      	movs	r2, #136	; 0x88
 80052ba:	2124      	movs	r1, #36	; 0x24
 80052bc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2101      	movs	r1, #1
 80052d2:	438a      	bics	r2, r1
 80052d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a0b      	ldr	r2, [pc, #44]	; (8005308 <HAL_UARTEx_DisableFifoMode+0x70>)
 80052da:	4013      	ands	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2288      	movs	r2, #136	; 0x88
 80052f0:	2120      	movs	r1, #32
 80052f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2284      	movs	r2, #132	; 0x84
 80052f8:	2100      	movs	r1, #0
 80052fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	0018      	movs	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	b004      	add	sp, #16
 8005304:	bd80      	pop	{r7, pc}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	dfffffff 	.word	0xdfffffff

0800530c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2284      	movs	r2, #132	; 0x84
 800531a:	5c9b      	ldrb	r3, [r3, r2]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005320:	2302      	movs	r3, #2
 8005322:	e02e      	b.n	8005382 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2284      	movs	r2, #132	; 0x84
 8005328:	2101      	movs	r1, #1
 800532a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2288      	movs	r2, #136	; 0x88
 8005330:	2124      	movs	r1, #36	; 0x24
 8005332:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2101      	movs	r1, #1
 8005348:	438a      	bics	r2, r1
 800534a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	08d9      	lsrs	r1, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	0018      	movs	r0, r3
 8005364:	f000 f8bc 	bl	80054e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2288      	movs	r2, #136	; 0x88
 8005374:	2120      	movs	r1, #32
 8005376:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2284      	movs	r2, #132	; 0x84
 800537c:	2100      	movs	r1, #0
 800537e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	0018      	movs	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	b004      	add	sp, #16
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2284      	movs	r2, #132	; 0x84
 800539a:	5c9b      	ldrb	r3, [r3, r2]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e02f      	b.n	8005404 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2284      	movs	r2, #132	; 0x84
 80053a8:	2101      	movs	r1, #1
 80053aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2288      	movs	r2, #136	; 0x88
 80053b0:	2124      	movs	r1, #36	; 0x24
 80053b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2101      	movs	r1, #1
 80053c8:	438a      	bics	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4a0e      	ldr	r2, [pc, #56]	; (800540c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	0019      	movs	r1, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	0018      	movs	r0, r3
 80053e6:	f000 f87b 	bl	80054e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2288      	movs	r2, #136	; 0x88
 80053f6:	2120      	movs	r1, #32
 80053f8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2284      	movs	r2, #132	; 0x84
 80053fe:	2100      	movs	r1, #0
 8005400:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	0018      	movs	r0, r3
 8005406:	46bd      	mov	sp, r7
 8005408:	b004      	add	sp, #16
 800540a:	bd80      	pop	{r7, pc}
 800540c:	f1ffffff 	.word	0xf1ffffff

08005410 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005410:	b5b0      	push	{r4, r5, r7, lr}
 8005412:	b08a      	sub	sp, #40	; 0x28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	1dbb      	adds	r3, r7, #6
 800541c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	228c      	movs	r2, #140	; 0x8c
 8005422:	589b      	ldr	r3, [r3, r2]
 8005424:	2b20      	cmp	r3, #32
 8005426:	d156      	bne.n	80054d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800542e:	1dbb      	adds	r3, r7, #6
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e04e      	b.n	80054d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	015b      	lsls	r3, r3, #5
 8005442:	429a      	cmp	r2, r3
 8005444:	d109      	bne.n	800545a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d105      	bne.n	800545a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2201      	movs	r2, #1
 8005452:	4013      	ands	r3, r2
 8005454:	d001      	beq.n	800545a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e03e      	b.n	80054d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005466:	2527      	movs	r5, #39	; 0x27
 8005468:	197c      	adds	r4, r7, r5
 800546a:	1dbb      	adds	r3, r7, #6
 800546c:	881a      	ldrh	r2, [r3, #0]
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	0018      	movs	r0, r3
 8005474:	f7ff fc6c 	bl	8004d50 <UART_Start_Receive_DMA>
 8005478:	0003      	movs	r3, r0
 800547a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800547c:	197b      	adds	r3, r7, r5
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d124      	bne.n	80054ce <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d11c      	bne.n	80054c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2210      	movs	r2, #16
 8005492:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005494:	f3ef 8310 	mrs	r3, PRIMASK
 8005498:	617b      	str	r3, [r7, #20]
  return(result);
 800549a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549c:	623b      	str	r3, [r7, #32]
 800549e:	2301      	movs	r3, #1
 80054a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	f383 8810 	msr	PRIMASK, r3
}
 80054a8:	46c0      	nop			; (mov r8, r8)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2110      	movs	r1, #16
 80054b6:	430a      	orrs	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f383 8810 	msr	PRIMASK, r3
}
 80054c4:	e003      	b.n	80054ce <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80054c6:	2327      	movs	r3, #39	; 0x27
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80054ce:	2327      	movs	r3, #39	; 0x27
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	e000      	b.n	80054d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
  }
}
 80054d8:	0018      	movs	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	b00a      	add	sp, #40	; 0x28
 80054de:	bdb0      	pop	{r4, r5, r7, pc}

080054e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d108      	bne.n	8005502 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	226a      	movs	r2, #106	; 0x6a
 80054f4:	2101      	movs	r1, #1
 80054f6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2268      	movs	r2, #104	; 0x68
 80054fc:	2101      	movs	r1, #1
 80054fe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005500:	e043      	b.n	800558a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005502:	260f      	movs	r6, #15
 8005504:	19bb      	adds	r3, r7, r6
 8005506:	2208      	movs	r2, #8
 8005508:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800550a:	200e      	movs	r0, #14
 800550c:	183b      	adds	r3, r7, r0
 800550e:	2208      	movs	r2, #8
 8005510:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	0e5b      	lsrs	r3, r3, #25
 800551a:	b2da      	uxtb	r2, r3
 800551c:	240d      	movs	r4, #13
 800551e:	193b      	adds	r3, r7, r4
 8005520:	2107      	movs	r1, #7
 8005522:	400a      	ands	r2, r1
 8005524:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	0f5b      	lsrs	r3, r3, #29
 800552e:	b2da      	uxtb	r2, r3
 8005530:	250c      	movs	r5, #12
 8005532:	197b      	adds	r3, r7, r5
 8005534:	2107      	movs	r1, #7
 8005536:	400a      	ands	r2, r1
 8005538:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800553a:	183b      	adds	r3, r7, r0
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	197a      	adds	r2, r7, r5
 8005540:	7812      	ldrb	r2, [r2, #0]
 8005542:	4914      	ldr	r1, [pc, #80]	; (8005594 <UARTEx_SetNbDataToProcess+0xb4>)
 8005544:	5c8a      	ldrb	r2, [r1, r2]
 8005546:	435a      	muls	r2, r3
 8005548:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800554a:	197b      	adds	r3, r7, r5
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	4a12      	ldr	r2, [pc, #72]	; (8005598 <UARTEx_SetNbDataToProcess+0xb8>)
 8005550:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005552:	0019      	movs	r1, r3
 8005554:	f7fa fe5e 	bl	8000214 <__divsi3>
 8005558:	0003      	movs	r3, r0
 800555a:	b299      	uxth	r1, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	226a      	movs	r2, #106	; 0x6a
 8005560:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005562:	19bb      	adds	r3, r7, r6
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	193a      	adds	r2, r7, r4
 8005568:	7812      	ldrb	r2, [r2, #0]
 800556a:	490a      	ldr	r1, [pc, #40]	; (8005594 <UARTEx_SetNbDataToProcess+0xb4>)
 800556c:	5c8a      	ldrb	r2, [r1, r2]
 800556e:	435a      	muls	r2, r3
 8005570:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005572:	193b      	adds	r3, r7, r4
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	4a08      	ldr	r2, [pc, #32]	; (8005598 <UARTEx_SetNbDataToProcess+0xb8>)
 8005578:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800557a:	0019      	movs	r1, r3
 800557c:	f7fa fe4a 	bl	8000214 <__divsi3>
 8005580:	0003      	movs	r3, r0
 8005582:	b299      	uxth	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2268      	movs	r2, #104	; 0x68
 8005588:	5299      	strh	r1, [r3, r2]
}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	46bd      	mov	sp, r7
 800558e:	b005      	add	sp, #20
 8005590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	0800575c 	.word	0x0800575c
 8005598:	08005764 	.word	0x08005764

0800559c <__libc_init_array>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	2600      	movs	r6, #0
 80055a0:	4d0c      	ldr	r5, [pc, #48]	; (80055d4 <__libc_init_array+0x38>)
 80055a2:	4c0d      	ldr	r4, [pc, #52]	; (80055d8 <__libc_init_array+0x3c>)
 80055a4:	1b64      	subs	r4, r4, r5
 80055a6:	10a4      	asrs	r4, r4, #2
 80055a8:	42a6      	cmp	r6, r4
 80055aa:	d109      	bne.n	80055c0 <__libc_init_array+0x24>
 80055ac:	2600      	movs	r6, #0
 80055ae:	f000 f88d 	bl	80056cc <_init>
 80055b2:	4d0a      	ldr	r5, [pc, #40]	; (80055dc <__libc_init_array+0x40>)
 80055b4:	4c0a      	ldr	r4, [pc, #40]	; (80055e0 <__libc_init_array+0x44>)
 80055b6:	1b64      	subs	r4, r4, r5
 80055b8:	10a4      	asrs	r4, r4, #2
 80055ba:	42a6      	cmp	r6, r4
 80055bc:	d105      	bne.n	80055ca <__libc_init_array+0x2e>
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	00b3      	lsls	r3, r6, #2
 80055c2:	58eb      	ldr	r3, [r5, r3]
 80055c4:	4798      	blx	r3
 80055c6:	3601      	adds	r6, #1
 80055c8:	e7ee      	b.n	80055a8 <__libc_init_array+0xc>
 80055ca:	00b3      	lsls	r3, r6, #2
 80055cc:	58eb      	ldr	r3, [r5, r3]
 80055ce:	4798      	blx	r3
 80055d0:	3601      	adds	r6, #1
 80055d2:	e7f2      	b.n	80055ba <__libc_init_array+0x1e>
 80055d4:	08005778 	.word	0x08005778
 80055d8:	08005778 	.word	0x08005778
 80055dc:	08005778 	.word	0x08005778
 80055e0:	08005780 	.word	0x08005780

080055e4 <memset>:
 80055e4:	0003      	movs	r3, r0
 80055e6:	1882      	adds	r2, r0, r2
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d100      	bne.n	80055ee <memset+0xa>
 80055ec:	4770      	bx	lr
 80055ee:	7019      	strb	r1, [r3, #0]
 80055f0:	3301      	adds	r3, #1
 80055f2:	e7f9      	b.n	80055e8 <memset+0x4>

080055f4 <register_fini>:
 80055f4:	4b03      	ldr	r3, [pc, #12]	; (8005604 <register_fini+0x10>)
 80055f6:	b510      	push	{r4, lr}
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <register_fini+0xe>
 80055fc:	4802      	ldr	r0, [pc, #8]	; (8005608 <register_fini+0x14>)
 80055fe:	f000 f805 	bl	800560c <atexit>
 8005602:	bd10      	pop	{r4, pc}
 8005604:	00000000 	.word	0x00000000
 8005608:	0800561d 	.word	0x0800561d

0800560c <atexit>:
 800560c:	2300      	movs	r3, #0
 800560e:	b510      	push	{r4, lr}
 8005610:	0001      	movs	r1, r0
 8005612:	001a      	movs	r2, r3
 8005614:	0018      	movs	r0, r3
 8005616:	f000 f817 	bl	8005648 <__register_exitproc>
 800561a:	bd10      	pop	{r4, pc}

0800561c <__libc_fini_array>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	4d07      	ldr	r5, [pc, #28]	; (800563c <__libc_fini_array+0x20>)
 8005620:	4c07      	ldr	r4, [pc, #28]	; (8005640 <__libc_fini_array+0x24>)
 8005622:	1b64      	subs	r4, r4, r5
 8005624:	10a4      	asrs	r4, r4, #2
 8005626:	2c00      	cmp	r4, #0
 8005628:	d102      	bne.n	8005630 <__libc_fini_array+0x14>
 800562a:	f000 f855 	bl	80056d8 <_fini>
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	3c01      	subs	r4, #1
 8005632:	00a3      	lsls	r3, r4, #2
 8005634:	58eb      	ldr	r3, [r5, r3]
 8005636:	4798      	blx	r3
 8005638:	e7f5      	b.n	8005626 <__libc_fini_array+0xa>
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	08005780 	.word	0x08005780
 8005640:	08005784 	.word	0x08005784

08005644 <__retarget_lock_acquire_recursive>:
 8005644:	4770      	bx	lr

08005646 <__retarget_lock_release_recursive>:
 8005646:	4770      	bx	lr

08005648 <__register_exitproc>:
 8005648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800564a:	4f1e      	ldr	r7, [pc, #120]	; (80056c4 <__register_exitproc+0x7c>)
 800564c:	0004      	movs	r4, r0
 800564e:	6838      	ldr	r0, [r7, #0]
 8005650:	0016      	movs	r6, r2
 8005652:	9100      	str	r1, [sp, #0]
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	f7ff fff5 	bl	8005644 <__retarget_lock_acquire_recursive>
 800565a:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <__register_exitproc+0x80>)
 800565c:	6819      	ldr	r1, [r3, #0]
 800565e:	000b      	movs	r3, r1
 8005660:	33fc      	adds	r3, #252	; 0xfc
 8005662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005664:	2a00      	cmp	r2, #0
 8005666:	d103      	bne.n	8005670 <__register_exitproc+0x28>
 8005668:	000a      	movs	r2, r1
 800566a:	324d      	adds	r2, #77	; 0x4d
 800566c:	32ff      	adds	r2, #255	; 0xff
 800566e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005670:	6853      	ldr	r3, [r2, #4]
 8005672:	6838      	ldr	r0, [r7, #0]
 8005674:	2b1f      	cmp	r3, #31
 8005676:	dd04      	ble.n	8005682 <__register_exitproc+0x3a>
 8005678:	f7ff ffe5 	bl	8005646 <__retarget_lock_release_recursive>
 800567c:	2001      	movs	r0, #1
 800567e:	4240      	negs	r0, r0
 8005680:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005682:	2c00      	cmp	r4, #0
 8005684:	d014      	beq.n	80056b0 <__register_exitproc+0x68>
 8005686:	0099      	lsls	r1, r3, #2
 8005688:	1851      	adds	r1, r2, r1
 800568a:	000f      	movs	r7, r1
 800568c:	3788      	adds	r7, #136	; 0x88
 800568e:	603e      	str	r6, [r7, #0]
 8005690:	2701      	movs	r7, #1
 8005692:	0016      	movs	r6, r2
 8005694:	409f      	lsls	r7, r3
 8005696:	3685      	adds	r6, #133	; 0x85
 8005698:	36ff      	adds	r6, #255	; 0xff
 800569a:	6875      	ldr	r5, [r6, #4]
 800569c:	31fc      	adds	r1, #252	; 0xfc
 800569e:	433d      	orrs	r5, r7
 80056a0:	6075      	str	r5, [r6, #4]
 80056a2:	9d01      	ldr	r5, [sp, #4]
 80056a4:	60cd      	str	r5, [r1, #12]
 80056a6:	2c02      	cmp	r4, #2
 80056a8:	d102      	bne.n	80056b0 <__register_exitproc+0x68>
 80056aa:	68b1      	ldr	r1, [r6, #8]
 80056ac:	430f      	orrs	r7, r1
 80056ae:	60b7      	str	r7, [r6, #8]
 80056b0:	1c59      	adds	r1, r3, #1
 80056b2:	6051      	str	r1, [r2, #4]
 80056b4:	3302      	adds	r3, #2
 80056b6:	9900      	ldr	r1, [sp, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	5099      	str	r1, [r3, r2]
 80056bc:	f7ff ffc3 	bl	8005646 <__retarget_lock_release_recursive>
 80056c0:	2000      	movs	r0, #0
 80056c2:	e7dd      	b.n	8005680 <__register_exitproc+0x38>
 80056c4:	200004a8 	.word	0x200004a8
 80056c8:	0800576c 	.word	0x0800576c

080056cc <_init>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d2:	bc08      	pop	{r3}
 80056d4:	469e      	mov	lr, r3
 80056d6:	4770      	bx	lr

080056d8 <_fini>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056de:	bc08      	pop	{r3}
 80056e0:	469e      	mov	lr, r3
 80056e2:	4770      	bx	lr
