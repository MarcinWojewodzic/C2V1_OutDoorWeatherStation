
C2V1_OutDoorWeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003798  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d8  080038d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038e0  080038e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e0  080038e0  000138e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038e4  080038e4  000138e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000000c  080038f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  080038f4  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010662  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002617  00000000  00000000  00030696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00032cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00033a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017eb4  00000000  00000000  000346c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001224f  00000000  00000000  0004c57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097841  00000000  00000000  0005e7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f600c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fe8  00000000  00000000  000f605c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003838 	.word	0x08003838

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003838 	.word	0x08003838

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_uldivmod>:
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d111      	bne.n	8000414 <__aeabi_uldivmod+0x28>
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	d10f      	bne.n	8000414 <__aeabi_uldivmod+0x28>
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d100      	bne.n	80003fa <__aeabi_uldivmod+0xe>
 80003f8:	2800      	cmp	r0, #0
 80003fa:	d002      	beq.n	8000402 <__aeabi_uldivmod+0x16>
 80003fc:	2100      	movs	r1, #0
 80003fe:	43c9      	mvns	r1, r1
 8000400:	0008      	movs	r0, r1
 8000402:	b407      	push	{r0, r1, r2}
 8000404:	4802      	ldr	r0, [pc, #8]	; (8000410 <__aeabi_uldivmod+0x24>)
 8000406:	a102      	add	r1, pc, #8	; (adr r1, 8000410 <__aeabi_uldivmod+0x24>)
 8000408:	1840      	adds	r0, r0, r1
 800040a:	9002      	str	r0, [sp, #8]
 800040c:	bd03      	pop	{r0, r1, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	ffffffd9 	.word	0xffffffd9
 8000414:	b403      	push	{r0, r1}
 8000416:	4668      	mov	r0, sp
 8000418:	b501      	push	{r0, lr}
 800041a:	9802      	ldr	r0, [sp, #8]
 800041c:	f000 f806 	bl	800042c <__udivmoddi4>
 8000420:	9b01      	ldr	r3, [sp, #4]
 8000422:	469e      	mov	lr, r3
 8000424:	b002      	add	sp, #8
 8000426:	bc0c      	pop	{r2, r3}
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__udivmoddi4>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	4657      	mov	r7, sl
 8000430:	464e      	mov	r6, r9
 8000432:	4645      	mov	r5, r8
 8000434:	46de      	mov	lr, fp
 8000436:	b5e0      	push	{r5, r6, r7, lr}
 8000438:	0004      	movs	r4, r0
 800043a:	000d      	movs	r5, r1
 800043c:	4692      	mov	sl, r2
 800043e:	4699      	mov	r9, r3
 8000440:	b083      	sub	sp, #12
 8000442:	428b      	cmp	r3, r1
 8000444:	d830      	bhi.n	80004a8 <__udivmoddi4+0x7c>
 8000446:	d02d      	beq.n	80004a4 <__udivmoddi4+0x78>
 8000448:	4649      	mov	r1, r9
 800044a:	4650      	mov	r0, sl
 800044c:	f000 f8ba 	bl	80005c4 <__clzdi2>
 8000450:	0029      	movs	r1, r5
 8000452:	0006      	movs	r6, r0
 8000454:	0020      	movs	r0, r4
 8000456:	f000 f8b5 	bl	80005c4 <__clzdi2>
 800045a:	1a33      	subs	r3, r6, r0
 800045c:	4698      	mov	r8, r3
 800045e:	3b20      	subs	r3, #32
 8000460:	469b      	mov	fp, r3
 8000462:	d433      	bmi.n	80004cc <__udivmoddi4+0xa0>
 8000464:	465a      	mov	r2, fp
 8000466:	4653      	mov	r3, sl
 8000468:	4093      	lsls	r3, r2
 800046a:	4642      	mov	r2, r8
 800046c:	001f      	movs	r7, r3
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001e      	movs	r6, r3
 8000474:	42af      	cmp	r7, r5
 8000476:	d83a      	bhi.n	80004ee <__udivmoddi4+0xc2>
 8000478:	42af      	cmp	r7, r5
 800047a:	d100      	bne.n	800047e <__udivmoddi4+0x52>
 800047c:	e078      	b.n	8000570 <__udivmoddi4+0x144>
 800047e:	465b      	mov	r3, fp
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5e>
 8000488:	e075      	b.n	8000576 <__udivmoddi4+0x14a>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	465a      	mov	r2, fp
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4642      	mov	r2, r8
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e028      	b.n	80004f6 <__udivmoddi4+0xca>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9cf      	bls.n	8000448 <__udivmoddi4+0x1c>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8e>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b003      	add	sp, #12
 80004c0:	bcf0      	pop	{r4, r5, r6, r7}
 80004c2:	46bb      	mov	fp, r7
 80004c4:	46b2      	mov	sl, r6
 80004c6:	46a9      	mov	r9, r5
 80004c8:	46a0      	mov	r8, r4
 80004ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004cc:	4642      	mov	r2, r8
 80004ce:	2320      	movs	r3, #32
 80004d0:	1a9b      	subs	r3, r3, r2
 80004d2:	4652      	mov	r2, sl
 80004d4:	40da      	lsrs	r2, r3
 80004d6:	4641      	mov	r1, r8
 80004d8:	0013      	movs	r3, r2
 80004da:	464a      	mov	r2, r9
 80004dc:	408a      	lsls	r2, r1
 80004de:	0017      	movs	r7, r2
 80004e0:	4642      	mov	r2, r8
 80004e2:	431f      	orrs	r7, r3
 80004e4:	4653      	mov	r3, sl
 80004e6:	4093      	lsls	r3, r2
 80004e8:	001e      	movs	r6, r3
 80004ea:	42af      	cmp	r7, r5
 80004ec:	d9c4      	bls.n	8000478 <__udivmoddi4+0x4c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	4643      	mov	r3, r8
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0d9      	beq.n	80004b0 <__udivmoddi4+0x84>
 80004fc:	07fb      	lsls	r3, r7, #31
 80004fe:	0872      	lsrs	r2, r6, #1
 8000500:	431a      	orrs	r2, r3
 8000502:	4646      	mov	r6, r8
 8000504:	087b      	lsrs	r3, r7, #1
 8000506:	e00e      	b.n	8000526 <__udivmoddi4+0xfa>
 8000508:	42ab      	cmp	r3, r5
 800050a:	d101      	bne.n	8000510 <__udivmoddi4+0xe4>
 800050c:	42a2      	cmp	r2, r4
 800050e:	d80c      	bhi.n	800052a <__udivmoddi4+0xfe>
 8000510:	1aa4      	subs	r4, r4, r2
 8000512:	419d      	sbcs	r5, r3
 8000514:	2001      	movs	r0, #1
 8000516:	1924      	adds	r4, r4, r4
 8000518:	416d      	adcs	r5, r5
 800051a:	2100      	movs	r1, #0
 800051c:	3e01      	subs	r6, #1
 800051e:	1824      	adds	r4, r4, r0
 8000520:	414d      	adcs	r5, r1
 8000522:	2e00      	cmp	r6, #0
 8000524:	d006      	beq.n	8000534 <__udivmoddi4+0x108>
 8000526:	42ab      	cmp	r3, r5
 8000528:	d9ee      	bls.n	8000508 <__udivmoddi4+0xdc>
 800052a:	3e01      	subs	r6, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2e00      	cmp	r6, #0
 8000532:	d1f8      	bne.n	8000526 <__udivmoddi4+0xfa>
 8000534:	9800      	ldr	r0, [sp, #0]
 8000536:	9901      	ldr	r1, [sp, #4]
 8000538:	465b      	mov	r3, fp
 800053a:	1900      	adds	r0, r0, r4
 800053c:	4169      	adcs	r1, r5
 800053e:	2b00      	cmp	r3, #0
 8000540:	db24      	blt.n	800058c <__udivmoddi4+0x160>
 8000542:	002b      	movs	r3, r5
 8000544:	465a      	mov	r2, fp
 8000546:	4644      	mov	r4, r8
 8000548:	40d3      	lsrs	r3, r2
 800054a:	002a      	movs	r2, r5
 800054c:	40e2      	lsrs	r2, r4
 800054e:	001c      	movs	r4, r3
 8000550:	465b      	mov	r3, fp
 8000552:	0015      	movs	r5, r2
 8000554:	2b00      	cmp	r3, #0
 8000556:	db2a      	blt.n	80005ae <__udivmoddi4+0x182>
 8000558:	0026      	movs	r6, r4
 800055a:	409e      	lsls	r6, r3
 800055c:	0033      	movs	r3, r6
 800055e:	0026      	movs	r6, r4
 8000560:	4647      	mov	r7, r8
 8000562:	40be      	lsls	r6, r7
 8000564:	0032      	movs	r2, r6
 8000566:	1a80      	subs	r0, r0, r2
 8000568:	4199      	sbcs	r1, r3
 800056a:	9000      	str	r0, [sp, #0]
 800056c:	9101      	str	r1, [sp, #4]
 800056e:	e79f      	b.n	80004b0 <__udivmoddi4+0x84>
 8000570:	42a3      	cmp	r3, r4
 8000572:	d8bc      	bhi.n	80004ee <__udivmoddi4+0xc2>
 8000574:	e783      	b.n	800047e <__udivmoddi4+0x52>
 8000576:	4642      	mov	r2, r8
 8000578:	2320      	movs	r3, #32
 800057a:	2100      	movs	r1, #0
 800057c:	1a9b      	subs	r3, r3, r2
 800057e:	2200      	movs	r2, #0
 8000580:	9100      	str	r1, [sp, #0]
 8000582:	9201      	str	r2, [sp, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	40da      	lsrs	r2, r3
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	e786      	b.n	800049a <__udivmoddi4+0x6e>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	002a      	movs	r2, r5
 8000594:	4646      	mov	r6, r8
 8000596:	409a      	lsls	r2, r3
 8000598:	0023      	movs	r3, r4
 800059a:	40f3      	lsrs	r3, r6
 800059c:	4644      	mov	r4, r8
 800059e:	4313      	orrs	r3, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	40e2      	lsrs	r2, r4
 80005a4:	001c      	movs	r4, r3
 80005a6:	465b      	mov	r3, fp
 80005a8:	0015      	movs	r5, r2
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	dad4      	bge.n	8000558 <__udivmoddi4+0x12c>
 80005ae:	4642      	mov	r2, r8
 80005b0:	002f      	movs	r7, r5
 80005b2:	2320      	movs	r3, #32
 80005b4:	0026      	movs	r6, r4
 80005b6:	4097      	lsls	r7, r2
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	40de      	lsrs	r6, r3
 80005bc:	003b      	movs	r3, r7
 80005be:	4333      	orrs	r3, r6
 80005c0:	e7cd      	b.n	800055e <__udivmoddi4+0x132>
 80005c2:	46c0      	nop			; (mov r8, r8)

080005c4 <__clzdi2>:
 80005c4:	b510      	push	{r4, lr}
 80005c6:	2900      	cmp	r1, #0
 80005c8:	d103      	bne.n	80005d2 <__clzdi2+0xe>
 80005ca:	f000 f807 	bl	80005dc <__clzsi2>
 80005ce:	3020      	adds	r0, #32
 80005d0:	e002      	b.n	80005d8 <__clzdi2+0x14>
 80005d2:	0008      	movs	r0, r1
 80005d4:	f000 f802 	bl	80005dc <__clzsi2>
 80005d8:	bd10      	pop	{r4, pc}
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzsi2>:
 80005dc:	211c      	movs	r1, #28
 80005de:	2301      	movs	r3, #1
 80005e0:	041b      	lsls	r3, r3, #16
 80005e2:	4298      	cmp	r0, r3
 80005e4:	d301      	bcc.n	80005ea <__clzsi2+0xe>
 80005e6:	0c00      	lsrs	r0, r0, #16
 80005e8:	3910      	subs	r1, #16
 80005ea:	0a1b      	lsrs	r3, r3, #8
 80005ec:	4298      	cmp	r0, r3
 80005ee:	d301      	bcc.n	80005f4 <__clzsi2+0x18>
 80005f0:	0a00      	lsrs	r0, r0, #8
 80005f2:	3908      	subs	r1, #8
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0x22>
 80005fa:	0900      	lsrs	r0, r0, #4
 80005fc:	3904      	subs	r1, #4
 80005fe:	a202      	add	r2, pc, #8	; (adr r2, 8000608 <__clzsi2+0x2c>)
 8000600:	5c10      	ldrb	r0, [r2, r0]
 8000602:	1840      	adds	r0, r0, r1
 8000604:	4770      	bx	lr
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	02020304 	.word	0x02020304
 800060c:	01010101 	.word	0x01010101
	...

08000618 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	0018      	movs	r0, r3
 8000622:	230c      	movs	r3, #12
 8000624:	001a      	movs	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f003 f8fe 	bl	8003828 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800062c:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <MX_ADC1_Init+0xcc>)
 800062e:	4a2e      	ldr	r2, [pc, #184]	; (80006e8 <MX_ADC1_Init+0xd0>)
 8000630:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000632:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <MX_ADC1_Init+0xcc>)
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	05d2      	lsls	r2, r2, #23
 8000638:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063a:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <MX_ADC1_Init+0xcc>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <MX_ADC1_Init+0xcc>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000646:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <MX_ADC1_Init+0xcc>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <MX_ADC1_Init+0xcc>)
 800064e:	2204      	movs	r2, #4
 8000650:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <MX_ADC1_Init+0xcc>)
 8000654:	2200      	movs	r2, #0
 8000656:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_ADC1_Init+0xcc>)
 800065a:	2200      	movs	r2, #0
 800065c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_ADC1_Init+0xcc>)
 8000660:	2200      	movs	r2, #0
 8000662:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_ADC1_Init+0xcc>)
 8000666:	2201      	movs	r2, #1
 8000668:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_ADC1_Init+0xcc>)
 800066c:	2220      	movs	r2, #32
 800066e:	2100      	movs	r1, #0
 8000670:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_ADC1_Init+0xcc>)
 8000674:	2200      	movs	r2, #0
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_ADC1_Init+0xcc>)
 800067a:	2200      	movs	r2, #0
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_ADC1_Init+0xcc>)
 8000680:	222c      	movs	r2, #44	; 0x2c
 8000682:	2100      	movs	r1, #0
 8000684:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_ADC1_Init+0xcc>)
 8000688:	2200      	movs	r2, #0
 800068a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_ADC1_Init+0xcc>)
 800068e:	2200      	movs	r2, #0
 8000690:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_ADC1_Init+0xcc>)
 8000694:	2200      	movs	r2, #0
 8000696:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_ADC1_Init+0xcc>)
 800069a:	223c      	movs	r2, #60	; 0x3c
 800069c:	2100      	movs	r1, #0
 800069e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_ADC1_Init+0xcc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_ADC1_Init+0xcc>)
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fd5b 	bl	8001164 <HAL_ADC_Init>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80006b2:	f000 fa14 	bl	8000ade <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4a0c      	ldr	r2, [pc, #48]	; (80006ec <MX_ADC1_Init+0xd4>)
 80006ba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c8:	1d3a      	adds	r2, r7, #4
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_ADC1_Init+0xcc>)
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 fef0 	bl	80014b4 <HAL_ADC_ConfigChannel>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80006d8:	f000 fa01 	bl	8000ade <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b004      	add	sp, #16
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000028 	.word	0x20000028
 80006e8:	40012400 	.word	0x40012400
 80006ec:	20000100 	.word	0x20000100

080006f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b08b      	sub	sp, #44	; 0x2c
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	2414      	movs	r4, #20
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	0018      	movs	r0, r3
 80006fe:	2314      	movs	r3, #20
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f003 f890 	bl	8003828 <memset>
  if(adcHandle->Instance==ADC1)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a17      	ldr	r2, [pc, #92]	; (800076c <HAL_ADC_MspInit+0x7c>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d128      	bne.n	8000764 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <HAL_ADC_MspInit+0x80>)
 8000714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <HAL_ADC_MspInit+0x80>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0349      	lsls	r1, r1, #13
 800071c:	430a      	orrs	r2, r1
 800071e:	641a      	str	r2, [r3, #64]	; 0x40
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <HAL_ADC_MspInit+0x80>)
 8000722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	035b      	lsls	r3, r3, #13
 8000728:	4013      	ands	r3, r2
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <HAL_ADC_MspInit+0x80>)
 8000730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <HAL_ADC_MspInit+0x80>)
 8000734:	2102      	movs	r1, #2
 8000736:	430a      	orrs	r2, r1
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <HAL_ADC_MspInit+0x80>)
 800073c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073e:	2202      	movs	r2, #2
 8000740:	4013      	ands	r3, r2
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2201      	movs	r2, #1
 800074a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2203      	movs	r2, #3
 8000750:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000758:	193b      	adds	r3, r7, r4
 800075a:	4a06      	ldr	r2, [pc, #24]	; (8000774 <HAL_ADC_MspInit+0x84>)
 800075c:	0019      	movs	r1, r3
 800075e:	0010      	movs	r0, r2
 8000760:	f001 f934 	bl	80019cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b00b      	add	sp, #44	; 0x2c
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	40012400 	.word	0x40012400
 8000770:	40021000 	.word	0x40021000
 8000774:	50000400 	.word	0x50000400

08000778 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	240c      	movs	r4, #12
 8000780:	193b      	adds	r3, r7, r4
 8000782:	0018      	movs	r0, r3
 8000784:	2314      	movs	r3, #20
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f003 f84d 	bl	8003828 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b48      	ldr	r3, [pc, #288]	; (80008b0 <MX_GPIO_Init+0x138>)
 8000790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000792:	4b47      	ldr	r3, [pc, #284]	; (80008b0 <MX_GPIO_Init+0x138>)
 8000794:	2102      	movs	r1, #2
 8000796:	430a      	orrs	r2, r1
 8000798:	635a      	str	r2, [r3, #52]	; 0x34
 800079a:	4b45      	ldr	r3, [pc, #276]	; (80008b0 <MX_GPIO_Init+0x138>)
 800079c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800079e:	2202      	movs	r2, #2
 80007a0:	4013      	ands	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b42      	ldr	r3, [pc, #264]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007aa:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007ac:	2101      	movs	r1, #1
 80007ae:	430a      	orrs	r2, r1
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
 80007b2:	4b3f      	ldr	r3, [pc, #252]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007b6:	2201      	movs	r2, #1
 80007b8:	4013      	ands	r3, r2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAX485_SEL_Pin|LED1_Pin|LED2_Pin|HC12_SET_Pin
 80007be:	493d      	ldr	r1, [pc, #244]	; (80008b4 <MX_GPIO_Init+0x13c>)
 80007c0:	23a0      	movs	r3, #160	; 0xa0
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	2200      	movs	r2, #0
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 fa64 	bl	8001c94 <HAL_GPIO_WritePin>
                          |DS18B20_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|PMS_RST_Pin|PMS_SET_Pin, GPIO_PIN_RESET);
 80007cc:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <MX_GPIO_Init+0x140>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	211a      	movs	r1, #26
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 fa5e 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COVERTER_PG_Pin;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	0092      	lsls	r2, r2, #2
 80007de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(COVERTER_PG_GPIO_Port, &GPIO_InitStruct);
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	4a32      	ldr	r2, [pc, #200]	; (80008b8 <MX_GPIO_Init+0x140>)
 80007f0:	0019      	movs	r1, r3
 80007f2:	0010      	movs	r0, r2
 80007f4:	f001 f8ea 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BATTERY_CHRG_Pin|BATTERY_STDBY_Pin;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2203      	movs	r2, #3
 80007fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	193a      	adds	r2, r7, r4
 800080c:	23a0      	movs	r3, #160	; 0xa0
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	0011      	movs	r1, r2
 8000812:	0018      	movs	r0, r3
 8000814:	f001 f8da 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = MAX485_SEL_Pin|LED1_Pin|LED2_Pin|HC12_SET_Pin
 8000818:	193b      	adds	r3, r7, r4
 800081a:	4a26      	ldr	r2, [pc, #152]	; (80008b4 <MX_GPIO_Init+0x13c>)
 800081c:	601a      	str	r2, [r3, #0]
                          |DS18B20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2201      	movs	r2, #1
 8000822:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	193b      	adds	r3, r7, r4
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	193a      	adds	r2, r7, r4
 8000832:	23a0      	movs	r3, #160	; 0xa0
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	0011      	movs	r1, r2
 8000838:	0018      	movs	r0, r3
 800083a:	f001 f8c7 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED3_Pin;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2220      	movs	r2, #32
 8000842:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	2203      	movs	r2, #3
 8000848:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	193b      	adds	r3, r7, r4
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000850:	193a      	adds	r2, r7, r4
 8000852:	23a0      	movs	r3, #160	; 0xa0
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	0011      	movs	r1, r2
 8000858:	0018      	movs	r0, r3
 800085a:	f001 f8b7 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|PMS_RST_Pin|PMS_SET_Pin;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	221a      	movs	r2, #26
 8000862:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2201      	movs	r2, #1
 8000868:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	193b      	adds	r3, r7, r4
 8000878:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <MX_GPIO_Init+0x140>)
 800087a:	0019      	movs	r1, r3
 800087c:	0010      	movs	r0, r2
 800087e:	f001 f8a5 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8000882:	0021      	movs	r1, r4
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2280      	movs	r2, #128	; 0x80
 8000888:	0052      	lsls	r2, r2, #1
 800088a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2284      	movs	r2, #132	; 0x84
 8000890:	0392      	lsls	r2, r2, #14
 8000892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 800089a:	187a      	adds	r2, r7, r1
 800089c:	23a0      	movs	r3, #160	; 0xa0
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	0011      	movs	r1, r2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f001 f892 	bl	80019cc <HAL_GPIO_Init>

}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b009      	add	sp, #36	; 0x24
 80008ae:	bd90      	pop	{r4, r7, pc}
 80008b0:	40021000 	.word	0x40021000
 80008b4:	000018d0 	.word	0x000018d0
 80008b8:	50000400 	.word	0x50000400

080008bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_I2C1_Init+0x74>)
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <MX_I2C1_Init+0x78>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_I2C1_Init+0x74>)
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <MX_I2C1_Init+0x7c>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_I2C1_Init+0x74>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_I2C1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_I2C1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_I2C1_Init+0x74>)
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 f9e9 	bl	8001cd0 <HAL_I2C_Init>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000902:	f000 f8ec 	bl	8000ade <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_I2C1_Init+0x74>)
 8000908:	2100      	movs	r1, #0
 800090a:	0018      	movs	r0, r3
 800090c:	f001 fa76 	bl	8001dfc <HAL_I2CEx_ConfigAnalogFilter>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000914:	f000 f8e3 	bl	8000ade <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <MX_I2C1_Init+0x74>)
 800091a:	2100      	movs	r1, #0
 800091c:	0018      	movs	r0, r3
 800091e:	f001 fab9 	bl	8001e94 <HAL_I2CEx_ConfigDigitalFilter>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d001      	beq.n	800092a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 f8da 	bl	8000ade <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000008c 	.word	0x2000008c
 8000934:	40005400 	.word	0x40005400
 8000938:	10707dbc 	.word	0x10707dbc

0800093c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b095      	sub	sp, #84	; 0x54
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	233c      	movs	r3, #60	; 0x3c
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	0018      	movs	r0, r3
 800094a:	2314      	movs	r3, #20
 800094c:	001a      	movs	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	f002 ff6a 	bl	8003828 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000954:	2410      	movs	r4, #16
 8000956:	193b      	adds	r3, r7, r4
 8000958:	0018      	movs	r0, r3
 800095a:	232c      	movs	r3, #44	; 0x2c
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f002 ff62 	bl	8003828 <memset>
  if(i2cHandle->Instance==I2C1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <HAL_I2C_MspInit+0xb8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d13d      	bne.n	80009ea <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2220      	movs	r2, #32
 8000972:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097a:	193b      	adds	r3, r7, r4
 800097c:	0018      	movs	r0, r3
 800097e:	f001 ffe5 	bl	800294c <HAL_RCCEx_PeriphCLKConfig>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000986:	f000 f8aa 	bl	8000ade <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <HAL_I2C_MspInit+0xbc>)
 800098c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <HAL_I2C_MspInit+0xbc>)
 8000990:	2102      	movs	r1, #2
 8000992:	430a      	orrs	r2, r1
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_I2C_MspInit+0xbc>)
 8000998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099a:	2202      	movs	r2, #2
 800099c:	4013      	ands	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009a2:	213c      	movs	r1, #60	; 0x3c
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	22c0      	movs	r2, #192	; 0xc0
 80009a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2212      	movs	r2, #18
 80009ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2206      	movs	r2, #6
 80009c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <HAL_I2C_MspInit+0xc0>)
 80009c6:	0019      	movs	r1, r3
 80009c8:	0010      	movs	r0, r2
 80009ca:	f000 ffff 	bl	80019cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_I2C_MspInit+0xbc>)
 80009d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_I2C_MspInit+0xbc>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0389      	lsls	r1, r1, #14
 80009d8:	430a      	orrs	r2, r1
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_I2C_MspInit+0xbc>)
 80009de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	039b      	lsls	r3, r3, #14
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b015      	add	sp, #84	; 0x54
 80009f0:	bd90      	pop	{r4, r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40005400 	.word	0x40005400
 80009f8:	40021000 	.word	0x40021000
 80009fc:	50000400 	.word	0x50000400

08000a00 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
   /* USER CODE END 1 */

   /* MCU Configuration--------------------------------------------------------*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000a04:	f000 fa2a 	bl	8000e5c <HAL_Init>
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */

   /* Configure the system clock */
   SystemClock_Config();
 8000a08:	f000 f80b 	bl	8000a22 <SystemClock_Config>
   /* USER CODE BEGIN SysInit */

   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000a0c:	f7ff feb4 	bl	8000778 <MX_GPIO_Init>
   MX_ADC1_Init();
 8000a10:	f7ff fe02 	bl	8000618 <MX_ADC1_Init>
   MX_I2C1_Init();
 8000a14:	f7ff ff52 	bl	80008bc <MX_I2C1_Init>
   MX_LPUART1_UART_Init();
 8000a18:	f000 f8ae 	bl	8000b78 <MX_LPUART1_UART_Init>
   MX_USART1_UART_Init();
 8000a1c:	f000 f8fc 	bl	8000c18 <MX_USART1_UART_Init>

   /* USER CODE END 2 */

   /* Infinite loop */
   /* USER CODE BEGIN WHILE */
   while(1)
 8000a20:	e7fe      	b.n	8000a20 <main+0x20>

08000a22 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a22:	b590      	push	{r4, r7, lr}
 8000a24:	b093      	sub	sp, #76	; 0x4c
 8000a26:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a28:	2410      	movs	r4, #16
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	2338      	movs	r3, #56	; 0x38
 8000a30:	001a      	movs	r2, r3
 8000a32:	2100      	movs	r1, #0
 8000a34:	f002 fef8 	bl	8003828 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a38:	003b      	movs	r3, r7
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	001a      	movs	r2, r3
 8000a40:	2100      	movs	r1, #0
 8000a42:	f002 fef1 	bl	8003828 <memset>

   /** Configure the main internal regulator output voltage
    */
   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 fa6e 	bl	8001f2c <HAL_PWREx_ControlVoltageScaling>

   /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
   RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2202      	movs	r2, #2
 8000a54:	601a      	str	r2, [r3, #0]
   RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	0052      	lsls	r2, r2, #1
 8000a5c:	60da      	str	r2, [r3, #12]
   RCC_OscInitStruct.HSIDiv              = RCC_HSI_DIV1;
 8000a5e:	0021      	movs	r1, r4
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2240      	movs	r2, #64	; 0x40
 8000a6a:	615a      	str	r2, [r3, #20]
   RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2202      	movs	r2, #2
 8000a70:	61da      	str	r2, [r3, #28]
   RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2202      	movs	r2, #2
 8000a76:	621a      	str	r2, [r3, #32]
   RCC_OscInitStruct.PLL.PLLM            = RCC_PLLM_DIV1;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
   RCC_OscInitStruct.PLL.PLLN            = 8;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2208      	movs	r2, #8
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
   RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	0292      	lsls	r2, r2, #10
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
   RCC_OscInitStruct.PLL.PLLQ            = RCC_PLLQ_DIV2;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2280      	movs	r2, #128	; 0x80
 8000a90:	0492      	lsls	r2, r2, #18
 8000a92:	631a      	str	r2, [r3, #48]	; 0x30
   RCC_OscInitStruct.PLL.PLLR            = RCC_PLLR_DIV2;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	0592      	lsls	r2, r2, #22
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34
   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f001 fa90 	bl	8001fc4 <HAL_RCC_OscConfig>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x8a>
   {
      Error_Handler();
 8000aa8:	f000 f819 	bl	8000ade <Error_Handler>
   }

   /** Initializes the CPU, AHB and APB buses clocks
    */
   RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000aac:	003b      	movs	r3, r7
 8000aae:	2207      	movs	r2, #7
 8000ab0:	601a      	str	r2, [r3, #0]
   RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	605a      	str	r2, [r3, #4]
   RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000ab8:	003b      	movs	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000abe:	003b      	movs	r3, r7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]

   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac4:	003b      	movs	r3, r7
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f001 fd95 	bl	80025f8 <HAL_RCC_ClockConfig>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0xb4>
   {
      Error_Handler();
 8000ad2:	f000 f804 	bl	8000ade <Error_Handler>
   }
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b013      	add	sp, #76	; 0x4c
 8000adc:	bd90      	pop	{r4, r7, pc}

08000ade <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae2:	b672      	cpsid	i
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8000ae6:	e7fe      	b.n	8000ae6 <Error_Handler+0x8>

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_MspInit+0x44>)
 8000af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_MspInit+0x44>)
 8000af4:	2101      	movs	r1, #1
 8000af6:	430a      	orrs	r2, r1
 8000af8:	641a      	str	r2, [r3, #64]	; 0x40
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_MspInit+0x44>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	2201      	movs	r2, #1
 8000b00:	4013      	ands	r3, r2
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x44>)
 8000b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_MspInit+0x44>)
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	0549      	lsls	r1, r1, #21
 8000b10:	430a      	orrs	r2, r1
 8000b12:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_MspInit+0x44>)
 8000b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	055b      	lsls	r3, r3, #21
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b002      	add	sp, #8
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	40021000 	.word	0x40021000

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 f9ec 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <SystemInit+0x14>)
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	0512      	lsls	r2, r2, #20
 8000b6a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000b7e:	4a24      	ldr	r2, [pc, #144]	; (8000c10 <MX_LPUART1_UART_Init+0x98>)
 8000b80:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b82:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000b84:	4a23      	ldr	r2, [pc, #140]	; (8000c14 <MX_LPUART1_UART_Init+0x9c>)
 8000b86:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	0552      	lsls	r2, r2, #21
 8000b8e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f002 f85a 	bl	8002c7c <HAL_UART_Init>
 8000bc8:	1e03      	subs	r3, r0, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bcc:	f7ff ff87 	bl	8000ade <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 fd23 	bl	8003620 <HAL_UARTEx_SetTxFifoThreshold>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bde:	f7ff ff7e 	bl	8000ade <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000be4:	2100      	movs	r1, #0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f002 fd5a 	bl	80036a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bf0:	f7ff ff75 	bl	8000ade <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <MX_LPUART1_UART_Init+0x94>)
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f002 fcd8 	bl	80035ac <HAL_UARTEx_DisableFifoMode>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c00:	f7ff ff6d 	bl	8000ade <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	200000e0 	.word	0x200000e0
 8000c10:	40008000 	.word	0x40008000
 8000c14:	00033324 	.word	0x00033324

08000c18 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c1c:	4b23      	ldr	r3, [pc, #140]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c1e:	4a24      	ldr	r2, [pc, #144]	; (8000cb0 <MX_USART1_UART_Init+0x98>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c22:	4b22      	ldr	r3, [pc, #136]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c24:	22e1      	movs	r2, #225	; 0xe1
 8000c26:	0252      	lsls	r2, r2, #9
 8000c28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f002 f80a 	bl	8002c7c <HAL_UART_Init>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c6c:	f7ff ff37 	bl	8000ade <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c72:	2100      	movs	r1, #0
 8000c74:	0018      	movs	r0, r3
 8000c76:	f002 fcd3 	bl	8003620 <HAL_UARTEx_SetTxFifoThreshold>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7e:	f7ff ff2e 	bl	8000ade <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c84:	2100      	movs	r1, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f002 fd0a 	bl	80036a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c90:	f7ff ff25 	bl	8000ade <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <MX_USART1_UART_Init+0x94>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f002 fc88 	bl	80035ac <HAL_UARTEx_DisableFifoMode>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ca0:	f7ff ff1d 	bl	8000ade <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	20000174 	.word	0x20000174
 8000cb0:	40013800 	.word	0x40013800

08000cb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b097      	sub	sp, #92	; 0x5c
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	2344      	movs	r3, #68	; 0x44
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	2314      	movs	r3, #20
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f002 fdae 	bl	8003828 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ccc:	2418      	movs	r4, #24
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	232c      	movs	r3, #44	; 0x2c
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	f002 fda6 	bl	8003828 <memset>
  if(uartHandle->Instance==LPUART1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a46      	ldr	r2, [pc, #280]	; (8000dfc <HAL_UART_MspInit+0x148>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d13f      	bne.n	8000d66 <HAL_UART_MspInit+0xb2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	2210      	movs	r2, #16
 8000cea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f001 fe29 	bl	800294c <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	1e03      	subs	r3, r0, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cfe:	f7ff feee 	bl	8000ade <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d02:	4b3f      	ldr	r3, [pc, #252]	; (8000e00 <HAL_UART_MspInit+0x14c>)
 8000d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d06:	4b3e      	ldr	r3, [pc, #248]	; (8000e00 <HAL_UART_MspInit+0x14c>)
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	0349      	lsls	r1, r1, #13
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d10:	4b3b      	ldr	r3, [pc, #236]	; (8000e00 <HAL_UART_MspInit+0x14c>)
 8000d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	035b      	lsls	r3, r3, #13
 8000d18:	4013      	ands	r3, r2
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b38      	ldr	r3, [pc, #224]	; (8000e00 <HAL_UART_MspInit+0x14c>)
 8000d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d22:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <HAL_UART_MspInit+0x14c>)
 8000d24:	2101      	movs	r1, #1
 8000d26:	430a      	orrs	r2, r1
 8000d28:	635a      	str	r2, [r3, #52]	; 0x34
 8000d2a:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <HAL_UART_MspInit+0x14c>)
 8000d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d36:	2144      	movs	r1, #68	; 0x44
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2202      	movs	r2, #2
 8000d42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2206      	movs	r2, #6
 8000d54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	187a      	adds	r2, r7, r1
 8000d58:	23a0      	movs	r3, #160	; 0xa0
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	0011      	movs	r1, r2
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 fe34 	bl	80019cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d64:	e045      	b.n	8000df2 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART1)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a26      	ldr	r2, [pc, #152]	; (8000e04 <HAL_UART_MspInit+0x150>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d140      	bne.n	8000df2 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d70:	2118      	movs	r1, #24
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	0018      	movs	r0, r3
 8000d82:	f001 fde3 	bl	800294c <HAL_RCCEx_PeriphCLKConfig>
 8000d86:	1e03      	subs	r3, r0, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_UART_MspInit+0xda>
      Error_Handler();
 8000d8a:	f7ff fea8 	bl	8000ade <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <HAL_UART_MspInit+0x14c>)
 8000d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_UART_MspInit+0x14c>)
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	01c9      	lsls	r1, r1, #7
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <HAL_UART_MspInit+0x14c>)
 8000d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	01db      	lsls	r3, r3, #7
 8000da4:	4013      	ands	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_UART_MspInit+0x14c>)
 8000dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_UART_MspInit+0x14c>)
 8000db0:	2101      	movs	r1, #1
 8000db2:	430a      	orrs	r2, r1
 8000db4:	635a      	str	r2, [r3, #52]	; 0x34
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_UART_MspInit+0x14c>)
 8000db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dc2:	2144      	movs	r1, #68	; 0x44
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	22c0      	movs	r2, #192	; 0xc0
 8000dc8:	00d2      	lsls	r2, r2, #3
 8000dca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2202      	movs	r2, #2
 8000dd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2201      	movs	r2, #1
 8000de2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	187a      	adds	r2, r7, r1
 8000de6:	23a0      	movs	r3, #160	; 0xa0
 8000de8:	05db      	lsls	r3, r3, #23
 8000dea:	0011      	movs	r1, r2
 8000dec:	0018      	movs	r0, r3
 8000dee:	f000 fded 	bl	80019cc <HAL_GPIO_Init>
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b017      	add	sp, #92	; 0x5c
 8000df8:	bd90      	pop	{r4, r7, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	40008000 	.word	0x40008000
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40013800 	.word	0x40013800

08000e08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e0c:	f7ff fea8 	bl	8000b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e12:	490d      	ldr	r1, [pc, #52]	; (8000e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <LoopForever+0xe>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e28:	4c0a      	ldr	r4, [pc, #40]	; (8000e54 <LoopForever+0x16>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e36:	f002 fcd3 	bl	80037e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e3a:	f7ff fde1 	bl	8000a00 <main>

08000e3e <LoopForever>:

LoopForever:
  b LoopForever
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
  ldr   r0, =_estack
 8000e40:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e4c:	080038e8 	.word	0x080038e8
  ldr r2, =_sbss
 8000e50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e54:	2000020c 	.word	0x2000020c

08000e58 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_COMP_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x3c>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_Init+0x3c>)
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	0049      	lsls	r1, r1, #1
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e76:	2003      	movs	r0, #3
 8000e78:	f000 f810 	bl	8000e9c <HAL_InitTick>
 8000e7c:	1e03      	subs	r3, r0, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	e001      	b.n	8000e8c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fe2e 	bl	8000ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	781b      	ldrb	r3, [r3, #0]
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_InitTick+0x88>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d02b      	beq.n	8000f0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <HAL_InitTick+0x8c>)
 8000eb6:	681c      	ldr	r4, [r3, #0]
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_InitTick+0x88>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	23fa      	movs	r3, #250	; 0xfa
 8000ec0:	0098      	lsls	r0, r3, #2
 8000ec2:	f7ff f91d 	bl	8000100 <__udivsi3>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	0019      	movs	r1, r3
 8000eca:	0020      	movs	r0, r4
 8000ecc:	f7ff f918 	bl	8000100 <__udivsi3>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f000 fd6d 	bl	80019b2 <HAL_SYSTICK_Config>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d112      	bne.n	8000f02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d80a      	bhi.n	8000ef8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	425b      	negs	r3, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 fd4c 	bl	8001988 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_InitTick+0x90>)
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e00d      	b.n	8000f14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ef8:	230f      	movs	r3, #15
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e008      	b.n	8000f14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f02:	230f      	movs	r3, #15
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e003      	b.n	8000f14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f14:	230f      	movs	r3, #15
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	781b      	ldrb	r3, [r3, #0]
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b005      	add	sp, #20
 8000f20:	bd90      	pop	{r4, r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_IncTick+0x1c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	001a      	movs	r2, r3
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_IncTick+0x20>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	18d2      	adds	r2, r2, r3
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_IncTick+0x20>)
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000208 	.word	0x20000208

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b02      	ldr	r3, [pc, #8]	; (8000f64 <HAL_GetTick+0x10>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	20000208 	.word	0x20000208

08000f68 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000f78:	401a      	ands	r2, r3
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	601a      	str	r2, [r3, #0]
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	fe3fffff 	.word	0xfe3fffff

08000f90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	23e0      	movs	r3, #224	; 0xe0
 8000f9e:	045b      	lsls	r3, r3, #17
 8000fa0:	4013      	ands	r3, r2
}
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	400a      	ands	r2, r1
 8000fc0:	2107      	movs	r1, #7
 8000fc2:	4091      	lsls	r1, r2
 8000fc4:	000a      	movs	r2, r1
 8000fc6:	43d2      	mvns	r2, r2
 8000fc8:	401a      	ands	r2, r3
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2104      	movs	r1, #4
 8000fce:	400b      	ands	r3, r1
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4099      	lsls	r1, r3
 8000fd4:	000b      	movs	r3, r1
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b004      	add	sp, #16
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	400a      	ands	r2, r1
 8000ff8:	2107      	movs	r1, #7
 8000ffa:	4091      	lsls	r1, r2
 8000ffc:	000a      	movs	r2, r1
 8000ffe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	2104      	movs	r1, #4
 8001004:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001006:	40da      	lsrs	r2, r3
 8001008:	0013      	movs	r3, r2
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}

08001012 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	211f      	movs	r1, #31
 8001026:	400a      	ands	r2, r1
 8001028:	210f      	movs	r1, #15
 800102a:	4091      	lsls	r1, r2
 800102c:	000a      	movs	r2, r1
 800102e:	43d2      	mvns	r2, r2
 8001030:	401a      	ands	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	0e9b      	lsrs	r3, r3, #26
 8001036:	210f      	movs	r1, #15
 8001038:	4019      	ands	r1, r3
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	201f      	movs	r0, #31
 800103e:	4003      	ands	r3, r0
 8001040:	4099      	lsls	r1, r3
 8001042:	000b      	movs	r3, r1
 8001044:	431a      	orrs	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bd80      	pop	{r7, pc}

08001052 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	035b      	lsls	r3, r3, #13
 8001064:	0b5b      	lsrs	r3, r3, #13
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}

08001074 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	0352      	lsls	r2, r2, #13
 8001086:	0b52      	lsrs	r2, r2, #13
 8001088:	43d2      	mvns	r2, r2
 800108a:	401a      	ands	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b002      	add	sp, #8
 8001096:	bd80      	pop	{r7, pc}

08001098 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	0212      	lsls	r2, r2, #8
 80010ac:	43d2      	mvns	r2, r2
 80010ae:	401a      	ands	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	400b      	ands	r3, r1
 80010b8:	4904      	ldr	r1, [pc, #16]	; (80010cc <LL_ADC_SetChannelSamplingTime+0x34>)
 80010ba:	400b      	ands	r3, r1
 80010bc:	431a      	orrs	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b004      	add	sp, #16
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	07ffff00 	.word	0x07ffff00

080010d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80010de:	4013      	ands	r3, r2
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	0552      	lsls	r2, r2, #21
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	6fffffe8 	.word	0x6fffffe8

080010f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	055b      	lsls	r3, r3, #21
 8001108:	401a      	ands	r2, r3
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	055b      	lsls	r3, r3, #21
 800110e:	429a      	cmp	r2, r3
 8001110:	d101      	bne.n	8001116 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001116:	2300      	movs	r3, #0
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}

08001120 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2201      	movs	r2, #1
 800112e:	4013      	ands	r3, r2
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <LL_ADC_IsEnabled+0x18>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <LL_ADC_IsEnabled+0x1a>
 8001138:	2300      	movs	r3, #0
}
 800113a:	0018      	movs	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	b002      	add	sp, #8
 8001140:	bd80      	pop	{r7, pc}

08001142 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2204      	movs	r2, #4
 8001150:	4013      	ands	r3, r2
 8001152:	2b04      	cmp	r3, #4
 8001154:	d101      	bne.n	800115a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800115a:	2300      	movs	r3, #0
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116c:	231f      	movs	r3, #31
 800116e:	18fb      	adds	r3, r7, r3
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e17f      	b.n	800148a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10a      	bne.n	80011a8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff faab 	bl	80006f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2254      	movs	r2, #84	; 0x54
 80011a4:	2100      	movs	r1, #0
 80011a6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff ffa3 	bl	80010f8 <LL_ADC_IsInternalRegulatorEnabled>
 80011b2:	1e03      	subs	r3, r0, #0
 80011b4:	d115      	bne.n	80011e2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff ff88 	bl	80010d0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011c0:	4bb4      	ldr	r3, [pc, #720]	; (8001494 <HAL_ADC_Init+0x330>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	49b4      	ldr	r1, [pc, #720]	; (8001498 <HAL_ADC_Init+0x334>)
 80011c6:	0018      	movs	r0, r3
 80011c8:	f7fe ff9a 	bl	8000100 <__udivsi3>
 80011cc:	0003      	movs	r3, r0
 80011ce:	3301      	adds	r3, #1
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011d4:	e002      	b.n	80011dc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3b01      	subs	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f9      	bne.n	80011d6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff ff86 	bl	80010f8 <LL_ADC_IsInternalRegulatorEnabled>
 80011ec:	1e03      	subs	r3, r0, #0
 80011ee:	d10f      	bne.n	8001210 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	2210      	movs	r2, #16
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001200:	2201      	movs	r2, #1
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001208:	231f      	movs	r3, #31
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff ff94 	bl	8001142 <LL_ADC_REG_IsConversionOngoing>
 800121a:	0003      	movs	r3, r0
 800121c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	2210      	movs	r2, #16
 8001224:	4013      	ands	r3, r2
 8001226:	d000      	beq.n	800122a <HAL_ADC_Init+0xc6>
 8001228:	e122      	b.n	8001470 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d000      	beq.n	8001232 <HAL_ADC_Init+0xce>
 8001230:	e11e      	b.n	8001470 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	4a99      	ldr	r2, [pc, #612]	; (800149c <HAL_ADC_Init+0x338>)
 8001238:	4013      	ands	r3, r2
 800123a:	2202      	movs	r2, #2
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	0018      	movs	r0, r3
 8001248:	f7ff ff6a 	bl	8001120 <LL_ADC_IsEnabled>
 800124c:	1e03      	subs	r3, r0, #0
 800124e:	d000      	beq.n	8001252 <HAL_ADC_Init+0xee>
 8001250:	e0ad      	b.n	80013ae <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7e1b      	ldrb	r3, [r3, #24]
 800125a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800125c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7e5b      	ldrb	r3, [r3, #25]
 8001262:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001264:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	7e9b      	ldrb	r3, [r3, #26]
 800126a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800126c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <HAL_ADC_Init+0x118>
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	015b      	lsls	r3, r3, #5
 800127a:	e000      	b.n	800127e <HAL_ADC_Init+0x11a>
 800127c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800127e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001284:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	2b00      	cmp	r3, #0
 800128c:	da04      	bge.n	8001298 <HAL_ADC_Init+0x134>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	085b      	lsrs	r3, r3, #1
 8001296:	e001      	b.n	800129c <HAL_ADC_Init+0x138>
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800129c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	212c      	movs	r1, #44	; 0x2c
 80012a2:	5c5b      	ldrb	r3, [r3, r1]
 80012a4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80012a6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2220      	movs	r2, #32
 80012b2:	5c9b      	ldrb	r3, [r3, r2]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d115      	bne.n	80012e4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7e9b      	ldrb	r3, [r3, #26]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d105      	bne.n	80012cc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	0252      	lsls	r2, r2, #9
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	e00b      	b.n	80012e4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d0:	2220      	movs	r2, #32
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012dc:	2201      	movs	r2, #1
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00a      	beq.n	8001302 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012f0:	23e0      	movs	r3, #224	; 0xe0
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012fa:	4313      	orrs	r3, r2
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	4a65      	ldr	r2, [pc, #404]	; (80014a0 <HAL_ADC_Init+0x33c>)
 800130a:	4013      	ands	r3, r2
 800130c:	0019      	movs	r1, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	430a      	orrs	r2, r1
 8001316:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	0f9b      	lsrs	r3, r3, #30
 800131e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001324:	4313      	orrs	r3, r2
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	4313      	orrs	r3, r2
 800132a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	223c      	movs	r2, #60	; 0x3c
 8001330:	5c9b      	ldrb	r3, [r3, r2]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d111      	bne.n	800135a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	0f9b      	lsrs	r3, r3, #30
 800133c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001342:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001348:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800134e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	4313      	orrs	r3, r2
 8001354:	2201      	movs	r2, #1
 8001356:	4313      	orrs	r3, r2
 8001358:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	4a50      	ldr	r2, [pc, #320]	; (80014a4 <HAL_ADC_Init+0x340>)
 8001362:	4013      	ands	r3, r2
 8001364:	0019      	movs	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	430a      	orrs	r2, r1
 800136e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	23c0      	movs	r3, #192	; 0xc0
 8001376:	061b      	lsls	r3, r3, #24
 8001378:	429a      	cmp	r2, r3
 800137a:	d018      	beq.n	80013ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	05db      	lsls	r3, r3, #23
 8001384:	429a      	cmp	r2, r3
 8001386:	d012      	beq.n	80013ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	061b      	lsls	r3, r3, #24
 8001390:	429a      	cmp	r2, r3
 8001392:	d00c      	beq.n	80013ae <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001394:	4b44      	ldr	r3, [pc, #272]	; (80014a8 <HAL_ADC_Init+0x344>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a44      	ldr	r2, [pc, #272]	; (80014ac <HAL_ADC_Init+0x348>)
 800139a:	4013      	ands	r3, r2
 800139c:	0019      	movs	r1, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	23f0      	movs	r3, #240	; 0xf0
 80013a4:	039b      	lsls	r3, r3, #14
 80013a6:	401a      	ands	r2, r3
 80013a8:	4b3f      	ldr	r3, [pc, #252]	; (80014a8 <HAL_ADC_Init+0x344>)
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b6:	001a      	movs	r2, r3
 80013b8:	2100      	movs	r1, #0
 80013ba:	f7ff fdf6 	bl	8000faa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c6:	493a      	ldr	r1, [pc, #232]	; (80014b0 <HAL_ADC_Init+0x34c>)
 80013c8:	001a      	movs	r2, r3
 80013ca:	f7ff fdee 	bl	8000faa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d109      	bne.n	80013ea <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2110      	movs	r1, #16
 80013e2:	4249      	negs	r1, r1
 80013e4:	430a      	orrs	r2, r1
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
 80013e8:	e018      	b.n	800141c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691a      	ldr	r2, [r3, #16]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	039b      	lsls	r3, r3, #14
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d112      	bne.n	800141c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	3b01      	subs	r3, #1
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	221c      	movs	r2, #28
 8001406:	4013      	ands	r3, r2
 8001408:	2210      	movs	r2, #16
 800140a:	4252      	negs	r2, r2
 800140c:	409a      	lsls	r2, r3
 800140e:	0011      	movs	r1, r2
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2100      	movs	r1, #0
 8001422:	0018      	movs	r0, r3
 8001424:	f7ff fdde 	bl	8000fe4 <LL_ADC_GetSamplingTimeCommonChannels>
 8001428:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800142e:	429a      	cmp	r2, r3
 8001430:	d10b      	bne.n	800144a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143c:	2203      	movs	r2, #3
 800143e:	4393      	bics	r3, r2
 8001440:	2201      	movs	r2, #1
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001448:	e01c      	b.n	8001484 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	2212      	movs	r2, #18
 8001450:	4393      	bics	r3, r2
 8001452:	2210      	movs	r2, #16
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145e:	2201      	movs	r2, #1
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001466:	231f      	movs	r3, #31
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800146e:	e009      	b.n	8001484 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	2210      	movs	r2, #16
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800147c:	231f      	movs	r3, #31
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001484:	231f      	movs	r3, #31
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	781b      	ldrb	r3, [r3, #0]
}
 800148a:	0018      	movs	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	b008      	add	sp, #32
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	20000000 	.word	0x20000000
 8001498:	00030d40 	.word	0x00030d40
 800149c:	fffffefd 	.word	0xfffffefd
 80014a0:	fffe0201 	.word	0xfffe0201
 80014a4:	1ffffc02 	.word	0x1ffffc02
 80014a8:	40012708 	.word	0x40012708
 80014ac:	ffc3ffff 	.word	0xffc3ffff
 80014b0:	07ffff04 	.word	0x07ffff04

080014b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014be:	2317      	movs	r3, #23
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2254      	movs	r2, #84	; 0x54
 80014ce:	5c9b      	ldrb	r3, [r3, r2]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0x24>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e1c0      	b.n	800185a <HAL_ADC_ConfigChannel+0x3a6>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2254      	movs	r2, #84	; 0x54
 80014dc:	2101      	movs	r1, #1
 80014de:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff fe2c 	bl	8001142 <LL_ADC_REG_IsConversionOngoing>
 80014ea:	1e03      	subs	r3, r0, #0
 80014ec:	d000      	beq.n	80014f0 <HAL_ADC_ConfigChannel+0x3c>
 80014ee:	e1a3      	b.n	8001838 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d100      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x46>
 80014f8:	e143      	b.n	8001782 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	061b      	lsls	r3, r3, #24
 8001502:	429a      	cmp	r2, r3
 8001504:	d004      	beq.n	8001510 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800150a:	4ac1      	ldr	r2, [pc, #772]	; (8001810 <HAL_ADC_ConfigChannel+0x35c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d108      	bne.n	8001522 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0019      	movs	r1, r3
 800151a:	0010      	movs	r0, r2
 800151c:	f7ff fd99 	bl	8001052 <LL_ADC_REG_SetSequencerChAdd>
 8001520:	e0c9      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	211f      	movs	r1, #31
 800152c:	400b      	ands	r3, r1
 800152e:	210f      	movs	r1, #15
 8001530:	4099      	lsls	r1, r3
 8001532:	000b      	movs	r3, r1
 8001534:	43db      	mvns	r3, r3
 8001536:	4013      	ands	r3, r2
 8001538:	0019      	movs	r1, r3
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	035b      	lsls	r3, r3, #13
 8001540:	0b5b      	lsrs	r3, r3, #13
 8001542:	d105      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x9c>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0e9b      	lsrs	r3, r3, #26
 800154a:	221f      	movs	r2, #31
 800154c:	4013      	ands	r3, r2
 800154e:	e098      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2201      	movs	r2, #1
 8001556:	4013      	ands	r3, r2
 8001558:	d000      	beq.n	800155c <HAL_ADC_ConfigChannel+0xa8>
 800155a:	e091      	b.n	8001680 <HAL_ADC_ConfigChannel+0x1cc>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2202      	movs	r2, #2
 8001562:	4013      	ands	r3, r2
 8001564:	d000      	beq.n	8001568 <HAL_ADC_ConfigChannel+0xb4>
 8001566:	e089      	b.n	800167c <HAL_ADC_ConfigChannel+0x1c8>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2204      	movs	r2, #4
 800156e:	4013      	ands	r3, r2
 8001570:	d000      	beq.n	8001574 <HAL_ADC_ConfigChannel+0xc0>
 8001572:	e081      	b.n	8001678 <HAL_ADC_ConfigChannel+0x1c4>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2208      	movs	r2, #8
 800157a:	4013      	ands	r3, r2
 800157c:	d000      	beq.n	8001580 <HAL_ADC_ConfigChannel+0xcc>
 800157e:	e079      	b.n	8001674 <HAL_ADC_ConfigChannel+0x1c0>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2210      	movs	r2, #16
 8001586:	4013      	ands	r3, r2
 8001588:	d000      	beq.n	800158c <HAL_ADC_ConfigChannel+0xd8>
 800158a:	e071      	b.n	8001670 <HAL_ADC_ConfigChannel+0x1bc>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2220      	movs	r2, #32
 8001592:	4013      	ands	r3, r2
 8001594:	d000      	beq.n	8001598 <HAL_ADC_ConfigChannel+0xe4>
 8001596:	e069      	b.n	800166c <HAL_ADC_ConfigChannel+0x1b8>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2240      	movs	r2, #64	; 0x40
 800159e:	4013      	ands	r3, r2
 80015a0:	d000      	beq.n	80015a4 <HAL_ADC_ConfigChannel+0xf0>
 80015a2:	e061      	b.n	8001668 <HAL_ADC_ConfigChannel+0x1b4>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	4013      	ands	r3, r2
 80015ac:	d000      	beq.n	80015b0 <HAL_ADC_ConfigChannel+0xfc>
 80015ae:	e059      	b.n	8001664 <HAL_ADC_ConfigChannel+0x1b0>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4013      	ands	r3, r2
 80015ba:	d151      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1ac>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d149      	bne.n	800165c <HAL_ADC_ConfigChannel+0x1a8>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4013      	ands	r3, r2
 80015d2:	d141      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x1a4>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	4013      	ands	r3, r2
 80015de:	d139      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x1a0>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	4013      	ands	r3, r2
 80015ea:	d131      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x19c>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	019b      	lsls	r3, r3, #6
 80015f4:	4013      	ands	r3, r2
 80015f6:	d129      	bne.n	800164c <HAL_ADC_ConfigChannel+0x198>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	01db      	lsls	r3, r3, #7
 8001600:	4013      	ands	r3, r2
 8001602:	d121      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x194>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	4013      	ands	r3, r2
 800160e:	d119      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x190>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	025b      	lsls	r3, r3, #9
 8001618:	4013      	ands	r3, r2
 800161a:	d111      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x18c>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	029b      	lsls	r3, r3, #10
 8001624:	4013      	ands	r3, r2
 8001626:	d109      	bne.n	800163c <HAL_ADC_ConfigChannel+0x188>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	02db      	lsls	r3, r3, #11
 8001630:	4013      	ands	r3, r2
 8001632:	d001      	beq.n	8001638 <HAL_ADC_ConfigChannel+0x184>
 8001634:	2312      	movs	r3, #18
 8001636:	e024      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001638:	2300      	movs	r3, #0
 800163a:	e022      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 800163c:	2311      	movs	r3, #17
 800163e:	e020      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001640:	2310      	movs	r3, #16
 8001642:	e01e      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001644:	230f      	movs	r3, #15
 8001646:	e01c      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001648:	230e      	movs	r3, #14
 800164a:	e01a      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 800164c:	230d      	movs	r3, #13
 800164e:	e018      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001650:	230c      	movs	r3, #12
 8001652:	e016      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001654:	230b      	movs	r3, #11
 8001656:	e014      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001658:	230a      	movs	r3, #10
 800165a:	e012      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 800165c:	2309      	movs	r3, #9
 800165e:	e010      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001660:	2308      	movs	r3, #8
 8001662:	e00e      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001664:	2307      	movs	r3, #7
 8001666:	e00c      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001668:	2306      	movs	r3, #6
 800166a:	e00a      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 800166c:	2305      	movs	r3, #5
 800166e:	e008      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001670:	2304      	movs	r3, #4
 8001672:	e006      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001674:	2303      	movs	r3, #3
 8001676:	e004      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001678:	2302      	movs	r3, #2
 800167a:	e002      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1ce>
 8001680:	2300      	movs	r3, #0
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	6852      	ldr	r2, [r2, #4]
 8001686:	201f      	movs	r0, #31
 8001688:	4002      	ands	r2, r0
 800168a:	4093      	lsls	r3, r2
 800168c:	000a      	movs	r2, r1
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d808      	bhi.n	80016b6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	001a      	movs	r2, r3
 80016b2:	f7ff fcae 	bl	8001012 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	6819      	ldr	r1, [r3, #0]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	001a      	movs	r2, r3
 80016c4:	f7ff fce8 	bl	8001098 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db00      	blt.n	80016d2 <HAL_ADC_ConfigChannel+0x21e>
 80016d0:	e0bc      	b.n	800184c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016d2:	4b50      	ldr	r3, [pc, #320]	; (8001814 <HAL_ADC_ConfigChannel+0x360>)
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff fc5b 	bl	8000f90 <LL_ADC_GetCommonPathInternalCh>
 80016da:	0003      	movs	r3, r0
 80016dc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a4d      	ldr	r2, [pc, #308]	; (8001818 <HAL_ADC_ConfigChannel+0x364>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d122      	bne.n	800172e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016f0:	d11d      	bne.n	800172e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	0412      	lsls	r2, r2, #16
 80016f8:	4313      	orrs	r3, r2
 80016fa:	4a46      	ldr	r2, [pc, #280]	; (8001814 <HAL_ADC_ConfigChannel+0x360>)
 80016fc:	0019      	movs	r1, r3
 80016fe:	0010      	movs	r0, r2
 8001700:	f7ff fc32 	bl	8000f68 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001704:	4b45      	ldr	r3, [pc, #276]	; (800181c <HAL_ADC_ConfigChannel+0x368>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4945      	ldr	r1, [pc, #276]	; (8001820 <HAL_ADC_ConfigChannel+0x36c>)
 800170a:	0018      	movs	r0, r3
 800170c:	f7fe fcf8 	bl	8000100 <__udivsi3>
 8001710:	0003      	movs	r3, r0
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	0013      	movs	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	189b      	adds	r3, r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800171e:	e002      	b.n	8001726 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3b01      	subs	r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f9      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800172c:	e08e      	b.n	800184c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a3c      	ldr	r2, [pc, #240]	; (8001824 <HAL_ADC_ConfigChannel+0x370>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d10e      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	045b      	lsls	r3, r3, #17
 800173e:	4013      	ands	r3, r2
 8001740:	d109      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2280      	movs	r2, #128	; 0x80
 8001746:	0452      	lsls	r2, r2, #17
 8001748:	4313      	orrs	r3, r2
 800174a:	4a32      	ldr	r2, [pc, #200]	; (8001814 <HAL_ADC_ConfigChannel+0x360>)
 800174c:	0019      	movs	r1, r3
 800174e:	0010      	movs	r0, r2
 8001750:	f7ff fc0a 	bl	8000f68 <LL_ADC_SetCommonPathInternalCh>
 8001754:	e07a      	b.n	800184c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a33      	ldr	r2, [pc, #204]	; (8001828 <HAL_ADC_ConfigChannel+0x374>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d000      	beq.n	8001762 <HAL_ADC_ConfigChannel+0x2ae>
 8001760:	e074      	b.n	800184c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	03db      	lsls	r3, r3, #15
 8001768:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800176a:	d000      	beq.n	800176e <HAL_ADC_ConfigChannel+0x2ba>
 800176c:	e06e      	b.n	800184c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2280      	movs	r2, #128	; 0x80
 8001772:	03d2      	lsls	r2, r2, #15
 8001774:	4313      	orrs	r3, r2
 8001776:	4a27      	ldr	r2, [pc, #156]	; (8001814 <HAL_ADC_ConfigChannel+0x360>)
 8001778:	0019      	movs	r1, r3
 800177a:	0010      	movs	r0, r2
 800177c:	f7ff fbf4 	bl	8000f68 <LL_ADC_SetCommonPathInternalCh>
 8001780:	e064      	b.n	800184c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	429a      	cmp	r2, r3
 800178c:	d004      	beq.n	8001798 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001792:	4a1f      	ldr	r2, [pc, #124]	; (8001810 <HAL_ADC_ConfigChannel+0x35c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d107      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0019      	movs	r1, r3
 80017a2:	0010      	movs	r0, r2
 80017a4:	f7ff fc66 	bl	8001074 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da4d      	bge.n	800184c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017b0:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_ADC_ConfigChannel+0x360>)
 80017b2:	0018      	movs	r0, r3
 80017b4:	f7ff fbec 	bl	8000f90 <LL_ADC_GetCommonPathInternalCh>
 80017b8:	0003      	movs	r3, r0
 80017ba:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a15      	ldr	r2, [pc, #84]	; (8001818 <HAL_ADC_ConfigChannel+0x364>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d108      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4a18      	ldr	r2, [pc, #96]	; (800182c <HAL_ADC_ConfigChannel+0x378>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	4a11      	ldr	r2, [pc, #68]	; (8001814 <HAL_ADC_ConfigChannel+0x360>)
 80017ce:	0019      	movs	r1, r3
 80017d0:	0010      	movs	r0, r2
 80017d2:	f7ff fbc9 	bl	8000f68 <LL_ADC_SetCommonPathInternalCh>
 80017d6:	e039      	b.n	800184c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_ADC_ConfigChannel+0x370>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d108      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4a12      	ldr	r2, [pc, #72]	; (8001830 <HAL_ADC_ConfigChannel+0x37c>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_ADC_ConfigChannel+0x360>)
 80017ea:	0019      	movs	r1, r3
 80017ec:	0010      	movs	r0, r2
 80017ee:	f7ff fbbb 	bl	8000f68 <LL_ADC_SetCommonPathInternalCh>
 80017f2:	e02b      	b.n	800184c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <HAL_ADC_ConfigChannel+0x374>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d126      	bne.n	800184c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <HAL_ADC_ConfigChannel+0x380>)
 8001802:	4013      	ands	r3, r2
 8001804:	4a03      	ldr	r2, [pc, #12]	; (8001814 <HAL_ADC_ConfigChannel+0x360>)
 8001806:	0019      	movs	r1, r3
 8001808:	0010      	movs	r0, r2
 800180a:	f7ff fbad 	bl	8000f68 <LL_ADC_SetCommonPathInternalCh>
 800180e:	e01d      	b.n	800184c <HAL_ADC_ConfigChannel+0x398>
 8001810:	80000004 	.word	0x80000004
 8001814:	40012708 	.word	0x40012708
 8001818:	b0001000 	.word	0xb0001000
 800181c:	20000000 	.word	0x20000000
 8001820:	00030d40 	.word	0x00030d40
 8001824:	b8004000 	.word	0xb8004000
 8001828:	b4002000 	.word	0xb4002000
 800182c:	ff7fffff 	.word	0xff7fffff
 8001830:	feffffff 	.word	0xfeffffff
 8001834:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	2220      	movs	r2, #32
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001844:	2317      	movs	r3, #23
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2254      	movs	r2, #84	; 0x54
 8001850:	2100      	movs	r1, #0
 8001852:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001854:	2317      	movs	r3, #23
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	781b      	ldrb	r3, [r3, #0]
}
 800185a:	0018      	movs	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	b006      	add	sp, #24
 8001860:	bd80      	pop	{r7, pc}
 8001862:	46c0      	nop			; (mov r8, r8)

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	0002      	movs	r2, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b7f      	cmp	r3, #127	; 0x7f
 8001878:	d828      	bhi.n	80018cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800187a:	4a2f      	ldr	r2, [pc, #188]	; (8001938 <__NVIC_SetPriority+0xd4>)
 800187c:	1dfb      	adds	r3, r7, #7
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b25b      	sxtb	r3, r3
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	33c0      	adds	r3, #192	; 0xc0
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	589b      	ldr	r3, [r3, r2]
 800188a:	1dfa      	adds	r2, r7, #7
 800188c:	7812      	ldrb	r2, [r2, #0]
 800188e:	0011      	movs	r1, r2
 8001890:	2203      	movs	r2, #3
 8001892:	400a      	ands	r2, r1
 8001894:	00d2      	lsls	r2, r2, #3
 8001896:	21ff      	movs	r1, #255	; 0xff
 8001898:	4091      	lsls	r1, r2
 800189a:	000a      	movs	r2, r1
 800189c:	43d2      	mvns	r2, r2
 800189e:	401a      	ands	r2, r3
 80018a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	019b      	lsls	r3, r3, #6
 80018a6:	22ff      	movs	r2, #255	; 0xff
 80018a8:	401a      	ands	r2, r3
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	0018      	movs	r0, r3
 80018b0:	2303      	movs	r3, #3
 80018b2:	4003      	ands	r3, r0
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b8:	481f      	ldr	r0, [pc, #124]	; (8001938 <__NVIC_SetPriority+0xd4>)
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	430a      	orrs	r2, r1
 80018c4:	33c0      	adds	r3, #192	; 0xc0
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018ca:	e031      	b.n	8001930 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018cc:	4a1b      	ldr	r2, [pc, #108]	; (800193c <__NVIC_SetPriority+0xd8>)
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	0019      	movs	r1, r3
 80018d4:	230f      	movs	r3, #15
 80018d6:	400b      	ands	r3, r1
 80018d8:	3b08      	subs	r3, #8
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	3306      	adds	r3, #6
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	18d3      	adds	r3, r2, r3
 80018e2:	3304      	adds	r3, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	1dfa      	adds	r2, r7, #7
 80018e8:	7812      	ldrb	r2, [r2, #0]
 80018ea:	0011      	movs	r1, r2
 80018ec:	2203      	movs	r2, #3
 80018ee:	400a      	ands	r2, r1
 80018f0:	00d2      	lsls	r2, r2, #3
 80018f2:	21ff      	movs	r1, #255	; 0xff
 80018f4:	4091      	lsls	r1, r2
 80018f6:	000a      	movs	r2, r1
 80018f8:	43d2      	mvns	r2, r2
 80018fa:	401a      	ands	r2, r3
 80018fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	019b      	lsls	r3, r3, #6
 8001902:	22ff      	movs	r2, #255	; 0xff
 8001904:	401a      	ands	r2, r3
 8001906:	1dfb      	adds	r3, r7, #7
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	0018      	movs	r0, r3
 800190c:	2303      	movs	r3, #3
 800190e:	4003      	ands	r3, r0
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001914:	4809      	ldr	r0, [pc, #36]	; (800193c <__NVIC_SetPriority+0xd8>)
 8001916:	1dfb      	adds	r3, r7, #7
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	001c      	movs	r4, r3
 800191c:	230f      	movs	r3, #15
 800191e:	4023      	ands	r3, r4
 8001920:	3b08      	subs	r3, #8
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	430a      	orrs	r2, r1
 8001926:	3306      	adds	r3, #6
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	18c3      	adds	r3, r0, r3
 800192c:	3304      	adds	r3, #4
 800192e:	601a      	str	r2, [r3, #0]
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b003      	add	sp, #12
 8001936:	bd90      	pop	{r4, r7, pc}
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	1e5a      	subs	r2, r3, #1
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	045b      	lsls	r3, r3, #17
 8001950:	429a      	cmp	r2, r3
 8001952:	d301      	bcc.n	8001958 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001954:	2301      	movs	r3, #1
 8001956:	e010      	b.n	800197a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <SysTick_Config+0x44>)
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	3a01      	subs	r2, #1
 800195e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001960:	2301      	movs	r3, #1
 8001962:	425b      	negs	r3, r3
 8001964:	2103      	movs	r1, #3
 8001966:	0018      	movs	r0, r3
 8001968:	f7ff ff7c 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <SysTick_Config+0x44>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <SysTick_Config+0x44>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	0018      	movs	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	210f      	movs	r1, #15
 8001994:	187b      	adds	r3, r7, r1
 8001996:	1c02      	adds	r2, r0, #0
 8001998:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	187b      	adds	r3, r7, r1
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b25b      	sxtb	r3, r3
 80019a2:	0011      	movs	r1, r2
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff ff5d 	bl	8001864 <__NVIC_SetPriority>
}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b004      	add	sp, #16
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	0018      	movs	r0, r3
 80019be:	f7ff ffbf 	bl	8001940 <SysTick_Config>
 80019c2:	0003      	movs	r3, r0
}
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b002      	add	sp, #8
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019da:	e147      	b.n	8001c6c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4091      	lsls	r1, r2
 80019e6:	000a      	movs	r2, r1
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d100      	bne.n	80019f4 <HAL_GPIO_Init+0x28>
 80019f2:	e138      	b.n	8001c66 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2203      	movs	r2, #3
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d005      	beq.n	8001a0c <HAL_GPIO_Init+0x40>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2203      	movs	r2, #3
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d130      	bne.n	8001a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	0013      	movs	r3, r2
 8001a1c:	43da      	mvns	r2, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	0013      	movs	r3, r2
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a42:	2201      	movs	r2, #1
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	2201      	movs	r2, #1
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	0013      	movs	r3, r2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2203      	movs	r2, #3
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d017      	beq.n	8001aaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	409a      	lsls	r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	0013      	movs	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2203      	movs	r2, #3
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d123      	bne.n	8001afe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	0092      	lsls	r2, r2, #2
 8001ac0:	58d3      	ldr	r3, [r2, r3]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	4013      	ands	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2107      	movs	r1, #7
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	0013      	movs	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	6939      	ldr	r1, [r7, #16]
 8001afc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	0013      	movs	r3, r2
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	409a      	lsls	r2, r3
 8001b24:	0013      	movs	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	23c0      	movs	r3, #192	; 0xc0
 8001b38:	029b      	lsls	r3, r3, #10
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d100      	bne.n	8001b40 <HAL_GPIO_Init+0x174>
 8001b3e:	e092      	b.n	8001c66 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b40:	4a50      	ldr	r2, [pc, #320]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3318      	adds	r3, #24
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	589b      	ldr	r3, [r3, r2]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2203      	movs	r2, #3
 8001b52:	4013      	ands	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	220f      	movs	r2, #15
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	23a0      	movs	r3, #160	; 0xa0
 8001b68:	05db      	lsls	r3, r3, #23
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0x1ca>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a45      	ldr	r2, [pc, #276]	; (8001c88 <HAL_GPIO_Init+0x2bc>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00d      	beq.n	8001b92 <HAL_GPIO_Init+0x1c6>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a44      	ldr	r2, [pc, #272]	; (8001c8c <HAL_GPIO_Init+0x2c0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x1c2>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a43      	ldr	r2, [pc, #268]	; (8001c90 <HAL_GPIO_Init+0x2c4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_GPIO_Init+0x1be>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x1cc>
 8001b8a:	2305      	movs	r3, #5
 8001b8c:	e004      	b.n	8001b98 <HAL_GPIO_Init+0x1cc>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e002      	b.n	8001b98 <HAL_GPIO_Init+0x1cc>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_GPIO_Init+0x1cc>
 8001b96:	2300      	movs	r3, #0
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	2103      	movs	r1, #3
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	00d2      	lsls	r2, r2, #3
 8001ba0:	4093      	lsls	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001ba8:	4936      	ldr	r1, [pc, #216]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3318      	adds	r3, #24
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	035b      	lsls	r3, r3, #13
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bda:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	43da      	mvns	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	039b      	lsls	r3, r3, #14
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c0a:	4a1e      	ldr	r2, [pc, #120]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001c0c:	2384      	movs	r3, #132	; 0x84
 8001c0e:	58d3      	ldr	r3, [r2, r3]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43da      	mvns	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	029b      	lsls	r3, r3, #10
 8001c24:	4013      	ands	r3, r2
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c30:	4914      	ldr	r1, [pc, #80]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001c32:	2284      	movs	r2, #132	; 0x84
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001c38:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	58d3      	ldr	r3, [r2, r3]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	43da      	mvns	r2, r3
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	025b      	lsls	r3, r3, #9
 8001c52:	4013      	ands	r3, r2
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c5e:	4909      	ldr	r1, [pc, #36]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	40da      	lsrs	r2, r3
 8001c74:	1e13      	subs	r3, r2, #0
 8001c76:	d000      	beq.n	8001c7a <HAL_GPIO_Init+0x2ae>
 8001c78:	e6b0      	b.n	80019dc <HAL_GPIO_Init+0x10>
  }
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b006      	add	sp, #24
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021800 	.word	0x40021800
 8001c88:	50000400 	.word	0x50000400
 8001c8c:	50000800 	.word	0x50000800
 8001c90:	50000c00 	.word	0x50000c00

08001c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	0008      	movs	r0, r1
 8001c9e:	0011      	movs	r1, r2
 8001ca0:	1cbb      	adds	r3, r7, #2
 8001ca2:	1c02      	adds	r2, r0, #0
 8001ca4:	801a      	strh	r2, [r3, #0]
 8001ca6:	1c7b      	adds	r3, r7, #1
 8001ca8:	1c0a      	adds	r2, r1, #0
 8001caa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cac:	1c7b      	adds	r3, r7, #1
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d004      	beq.n	8001cbe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cb4:	1cbb      	adds	r3, r7, #2
 8001cb6:	881a      	ldrh	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cbc:	e003      	b.n	8001cc6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cbe:	1cbb      	adds	r3, r7, #2
 8001cc0:	881a      	ldrh	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b002      	add	sp, #8
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e082      	b.n	8001de8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2241      	movs	r2, #65	; 0x41
 8001ce6:	5c9b      	ldrb	r3, [r3, r2]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d107      	bne.n	8001cfe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2240      	movs	r2, #64	; 0x40
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f7fe fe1f 	bl	800093c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2241      	movs	r2, #65	; 0x41
 8001d02:	2124      	movs	r1, #36	; 0x24
 8001d04:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	438a      	bics	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4934      	ldr	r1, [pc, #208]	; (8001df0 <HAL_I2C_Init+0x120>)
 8001d20:	400a      	ands	r2, r1
 8001d22:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4931      	ldr	r1, [pc, #196]	; (8001df4 <HAL_I2C_Init+0x124>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d108      	bne.n	8001d4e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	0209      	lsls	r1, r1, #8
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	e007      	b.n	8001d5e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2184      	movs	r1, #132	; 0x84
 8001d58:	0209      	lsls	r1, r1, #8
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d104      	bne.n	8001d70 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	491f      	ldr	r1, [pc, #124]	; (8001df8 <HAL_I2C_Init+0x128>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	491a      	ldr	r1, [pc, #104]	; (8001df4 <HAL_I2C_Init+0x124>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69d9      	ldr	r1, [r3, #28]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1a      	ldr	r2, [r3, #32]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2241      	movs	r2, #65	; 0x41
 8001dd4:	2120      	movs	r1, #32
 8001dd6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2242      	movs	r2, #66	; 0x42
 8001de2:	2100      	movs	r1, #0
 8001de4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b002      	add	sp, #8
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	f0ffffff 	.word	0xf0ffffff
 8001df4:	ffff7fff 	.word	0xffff7fff
 8001df8:	02008000 	.word	0x02008000

08001dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2241      	movs	r2, #65	; 0x41
 8001e0a:	5c9b      	ldrb	r3, [r3, r2]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d138      	bne.n	8001e84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2240      	movs	r2, #64	; 0x40
 8001e16:	5c9b      	ldrb	r3, [r3, r2]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e032      	b.n	8001e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2240      	movs	r2, #64	; 0x40
 8001e24:	2101      	movs	r1, #1
 8001e26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2241      	movs	r2, #65	; 0x41
 8001e2c:	2124      	movs	r1, #36	; 0x24
 8001e2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4911      	ldr	r1, [pc, #68]	; (8001e90 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2241      	movs	r2, #65	; 0x41
 8001e74:	2120      	movs	r1, #32
 8001e76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2240      	movs	r2, #64	; 0x40
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
  }
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	ffffefff 	.word	0xffffefff

08001e94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2241      	movs	r2, #65	; 0x41
 8001ea2:	5c9b      	ldrb	r3, [r3, r2]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	d139      	bne.n	8001f1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2240      	movs	r2, #64	; 0x40
 8001eae:	5c9b      	ldrb	r3, [r3, r2]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e033      	b.n	8001f20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2240      	movs	r2, #64	; 0x40
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2241      	movs	r2, #65	; 0x41
 8001ec4:	2124      	movs	r1, #36	; 0x24
 8001ec6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2101      	movs	r1, #1
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2241      	movs	r2, #65	; 0x41
 8001f0e:	2120      	movs	r1, #32
 8001f10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2240      	movs	r2, #64	; 0x40
 8001f16:	2100      	movs	r1, #0
 8001f18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e000      	b.n	8001f20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f1e:	2302      	movs	r3, #2
  }
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b004      	add	sp, #16
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	fffff0ff 	.word	0xfffff0ff

08001f2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a19      	ldr	r2, [pc, #100]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d11f      	bne.n	8001f90 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	0013      	movs	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	189b      	adds	r3, r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4912      	ldr	r1, [pc, #72]	; (8001fa8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7fe f8ce 	bl	8000100 <__udivsi3>
 8001f64:	0003      	movs	r3, r0
 8001f66:	3301      	adds	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f6a:	e008      	b.n	8001f7e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	e001      	b.n	8001f7e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e009      	b.n	8001f92 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	401a      	ands	r2, r3
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d0ed      	beq.n	8001f6c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b004      	add	sp, #16
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	fffff9ff 	.word	0xfffff9ff
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	000f4240 	.word	0x000f4240

08001fac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	23e0      	movs	r3, #224	; 0xe0
 8001fb6:	01db      	lsls	r3, r3, #7
 8001fb8:	4013      	ands	r3, r2
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e2fe      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d100      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x1e>
 8001fe0:	e07c      	b.n	80020dc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe2:	4bc3      	ldr	r3, [pc, #780]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2238      	movs	r2, #56	; 0x38
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fec:	4bc0      	ldr	r3, [pc, #768]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d102      	bne.n	8002002 <HAL_RCC_OscConfig+0x3e>
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d002      	beq.n	8002008 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b08      	cmp	r3, #8
 8002006:	d10b      	bne.n	8002020 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	4bb9      	ldr	r3, [pc, #740]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	029b      	lsls	r3, r3, #10
 8002010:	4013      	ands	r3, r2
 8002012:	d062      	beq.n	80020da <HAL_RCC_OscConfig+0x116>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d15e      	bne.n	80020da <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e2d9      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	025b      	lsls	r3, r3, #9
 8002028:	429a      	cmp	r2, r3
 800202a:	d107      	bne.n	800203c <HAL_RCC_OscConfig+0x78>
 800202c:	4bb0      	ldr	r3, [pc, #704]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4baf      	ldr	r3, [pc, #700]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	0249      	lsls	r1, r1, #9
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	e020      	b.n	800207e <HAL_RCC_OscConfig+0xba>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	23a0      	movs	r3, #160	; 0xa0
 8002042:	02db      	lsls	r3, r3, #11
 8002044:	429a      	cmp	r2, r3
 8002046:	d10e      	bne.n	8002066 <HAL_RCC_OscConfig+0xa2>
 8002048:	4ba9      	ldr	r3, [pc, #676]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4ba8      	ldr	r3, [pc, #672]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	02c9      	lsls	r1, r1, #11
 8002052:	430a      	orrs	r2, r1
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	4ba6      	ldr	r3, [pc, #664]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4ba5      	ldr	r3, [pc, #660]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	0249      	lsls	r1, r1, #9
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e00b      	b.n	800207e <HAL_RCC_OscConfig+0xba>
 8002066:	4ba2      	ldr	r3, [pc, #648]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4ba1      	ldr	r3, [pc, #644]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800206c:	49a1      	ldr	r1, [pc, #644]	; (80022f4 <HAL_RCC_OscConfig+0x330>)
 800206e:	400a      	ands	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	4b9f      	ldr	r3, [pc, #636]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b9e      	ldr	r3, [pc, #632]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002078:	499f      	ldr	r1, [pc, #636]	; (80022f8 <HAL_RCC_OscConfig+0x334>)
 800207a:	400a      	ands	r2, r1
 800207c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d014      	beq.n	80020b0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7fe ff65 	bl	8000f54 <HAL_GetTick>
 800208a:	0003      	movs	r3, r0
 800208c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7fe ff60 	bl	8000f54 <HAL_GetTick>
 8002094:	0002      	movs	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e298      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a2:	4b93      	ldr	r3, [pc, #588]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	029b      	lsls	r3, r3, #10
 80020aa:	4013      	ands	r3, r2
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0xcc>
 80020ae:	e015      	b.n	80020dc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe ff50 	bl	8000f54 <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ba:	f7fe ff4b 	bl	8000f54 <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b64      	cmp	r3, #100	; 0x64
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e283      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020cc:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	029b      	lsls	r3, r3, #10
 80020d4:	4013      	ands	r3, r2
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0xf6>
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2202      	movs	r2, #2
 80020e2:	4013      	ands	r3, r2
 80020e4:	d100      	bne.n	80020e8 <HAL_RCC_OscConfig+0x124>
 80020e6:	e099      	b.n	800221c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e8:	4b81      	ldr	r3, [pc, #516]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2238      	movs	r2, #56	; 0x38
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020f2:	4b7f      	ldr	r3, [pc, #508]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2203      	movs	r2, #3
 80020f8:	4013      	ands	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b10      	cmp	r3, #16
 8002100:	d102      	bne.n	8002108 <HAL_RCC_OscConfig+0x144>
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d002      	beq.n	800210e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d135      	bne.n	800217a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800210e:	4b78      	ldr	r3, [pc, #480]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4013      	ands	r3, r2
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x162>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e256      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002126:	4b72      	ldr	r3, [pc, #456]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4a74      	ldr	r2, [pc, #464]	; (80022fc <HAL_RCC_OscConfig+0x338>)
 800212c:	4013      	ands	r3, r2
 800212e:	0019      	movs	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	021a      	lsls	r2, r3, #8
 8002136:	4b6e      	ldr	r3, [pc, #440]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002138:	430a      	orrs	r2, r1
 800213a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d112      	bne.n	8002168 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002142:	4b6b      	ldr	r3, [pc, #428]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6e      	ldr	r2, [pc, #440]	; (8002300 <HAL_RCC_OscConfig+0x33c>)
 8002148:	4013      	ands	r3, r2
 800214a:	0019      	movs	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	4b67      	ldr	r3, [pc, #412]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002156:	4b66      	ldr	r3, [pc, #408]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0adb      	lsrs	r3, r3, #11
 800215c:	2207      	movs	r2, #7
 800215e:	4013      	ands	r3, r2
 8002160:	4a68      	ldr	r2, [pc, #416]	; (8002304 <HAL_RCC_OscConfig+0x340>)
 8002162:	40da      	lsrs	r2, r3
 8002164:	4b68      	ldr	r3, [pc, #416]	; (8002308 <HAL_RCC_OscConfig+0x344>)
 8002166:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002168:	4b68      	ldr	r3, [pc, #416]	; (800230c <HAL_RCC_OscConfig+0x348>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0018      	movs	r0, r3
 800216e:	f7fe fe95 	bl	8000e9c <HAL_InitTick>
 8002172:	1e03      	subs	r3, r0, #0
 8002174:	d051      	beq.n	800221a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e22c      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d030      	beq.n	80021e4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002182:	4b5b      	ldr	r3, [pc, #364]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a5e      	ldr	r2, [pc, #376]	; (8002300 <HAL_RCC_OscConfig+0x33c>)
 8002188:	4013      	ands	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002196:	4b56      	ldr	r3, [pc, #344]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4b55      	ldr	r3, [pc, #340]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800219c:	2180      	movs	r1, #128	; 0x80
 800219e:	0049      	lsls	r1, r1, #1
 80021a0:	430a      	orrs	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe fed6 	bl	8000f54 <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ae:	f7fe fed1 	bl	8000f54 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e209      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c0:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4013      	ands	r3, r2
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021cc:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a4a      	ldr	r2, [pc, #296]	; (80022fc <HAL_RCC_OscConfig+0x338>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	021a      	lsls	r2, r3, #8
 80021dc:	4b44      	ldr	r3, [pc, #272]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	e01b      	b.n	800221c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80021e4:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80021ea:	4949      	ldr	r1, [pc, #292]	; (8002310 <HAL_RCC_OscConfig+0x34c>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe feb0 	bl	8000f54 <HAL_GetTick>
 80021f4:	0003      	movs	r3, r0
 80021f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fa:	f7fe feab 	bl	8000f54 <HAL_GetTick>
 80021fe:	0002      	movs	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e1e3      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800220c:	4b38      	ldr	r3, [pc, #224]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4013      	ands	r3, r2
 8002216:	d1f0      	bne.n	80021fa <HAL_RCC_OscConfig+0x236>
 8002218:	e000      	b.n	800221c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2208      	movs	r2, #8
 8002222:	4013      	ands	r3, r2
 8002224:	d047      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002226:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2238      	movs	r2, #56	; 0x38
 800222c:	4013      	ands	r3, r2
 800222e:	2b18      	cmp	r3, #24
 8002230:	d10a      	bne.n	8002248 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002232:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002236:	2202      	movs	r2, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d03c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2f2>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d138      	bne.n	80022b6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e1c5      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d019      	beq.n	8002284 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002252:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002254:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002256:	2101      	movs	r1, #1
 8002258:	430a      	orrs	r2, r1
 800225a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe fe7a 	bl	8000f54 <HAL_GetTick>
 8002260:	0003      	movs	r3, r0
 8002262:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002266:	f7fe fe75 	bl	8000f54 <HAL_GetTick>
 800226a:	0002      	movs	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1ad      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800227a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227c:	2202      	movs	r2, #2
 800227e:	4013      	ands	r3, r2
 8002280:	d0f1      	beq.n	8002266 <HAL_RCC_OscConfig+0x2a2>
 8002282:	e018      	b.n	80022b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002286:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800228a:	2101      	movs	r1, #1
 800228c:	438a      	bics	r2, r1
 800228e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7fe fe60 	bl	8000f54 <HAL_GetTick>
 8002294:	0003      	movs	r3, r0
 8002296:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229a:	f7fe fe5b 	bl	8000f54 <HAL_GetTick>
 800229e:	0002      	movs	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e193      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ac:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80022ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b0:	2202      	movs	r2, #2
 80022b2:	4013      	ands	r3, r2
 80022b4:	d1f1      	bne.n	800229a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2204      	movs	r2, #4
 80022bc:	4013      	ands	r3, r2
 80022be:	d100      	bne.n	80022c2 <HAL_RCC_OscConfig+0x2fe>
 80022c0:	e0c6      	b.n	8002450 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c2:	231f      	movs	r3, #31
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2238      	movs	r2, #56	; 0x38
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d11e      	bne.n	8002314 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	2202      	movs	r2, #2
 80022dc:	4013      	ands	r3, r2
 80022de:	d100      	bne.n	80022e2 <HAL_RCC_OscConfig+0x31e>
 80022e0:	e0b6      	b.n	8002450 <HAL_RCC_OscConfig+0x48c>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d000      	beq.n	80022ec <HAL_RCC_OscConfig+0x328>
 80022ea:	e0b1      	b.n	8002450 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e171      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
 80022f0:	40021000 	.word	0x40021000
 80022f4:	fffeffff 	.word	0xfffeffff
 80022f8:	fffbffff 	.word	0xfffbffff
 80022fc:	ffff80ff 	.word	0xffff80ff
 8002300:	ffffc7ff 	.word	0xffffc7ff
 8002304:	00f42400 	.word	0x00f42400
 8002308:	20000000 	.word	0x20000000
 800230c:	20000004 	.word	0x20000004
 8002310:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002314:	4bb1      	ldr	r3, [pc, #708]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 8002316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	055b      	lsls	r3, r3, #21
 800231c:	4013      	ands	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_RCC_OscConfig+0x360>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x362>
 8002324:	2300      	movs	r3, #0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d011      	beq.n	800234e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	4bac      	ldr	r3, [pc, #688]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 800232c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800232e:	4bab      	ldr	r3, [pc, #684]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	0549      	lsls	r1, r1, #21
 8002334:	430a      	orrs	r2, r1
 8002336:	63da      	str	r2, [r3, #60]	; 0x3c
 8002338:	4ba8      	ldr	r3, [pc, #672]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 800233a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	055b      	lsls	r3, r3, #21
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002346:	231f      	movs	r3, #31
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800234e:	4ba4      	ldr	r3, [pc, #656]	; (80025e0 <HAL_RCC_OscConfig+0x61c>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4013      	ands	r3, r2
 8002358:	d11a      	bne.n	8002390 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800235a:	4ba1      	ldr	r3, [pc, #644]	; (80025e0 <HAL_RCC_OscConfig+0x61c>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4ba0      	ldr	r3, [pc, #640]	; (80025e0 <HAL_RCC_OscConfig+0x61c>)
 8002360:	2180      	movs	r1, #128	; 0x80
 8002362:	0049      	lsls	r1, r1, #1
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002368:	f7fe fdf4 	bl	8000f54 <HAL_GetTick>
 800236c:	0003      	movs	r3, r0
 800236e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002372:	f7fe fdef 	bl	8000f54 <HAL_GetTick>
 8002376:	0002      	movs	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e127      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002384:	4b96      	ldr	r3, [pc, #600]	; (80025e0 <HAL_RCC_OscConfig+0x61c>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4013      	ands	r3, r2
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3e2>
 8002398:	4b90      	ldr	r3, [pc, #576]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 800239a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800239c:	4b8f      	ldr	r3, [pc, #572]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 800239e:	2101      	movs	r1, #1
 80023a0:	430a      	orrs	r2, r1
 80023a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80023a4:	e01c      	b.n	80023e0 <HAL_RCC_OscConfig+0x41c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b05      	cmp	r3, #5
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x404>
 80023ae:	4b8b      	ldr	r3, [pc, #556]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 80023b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023b2:	4b8a      	ldr	r3, [pc, #552]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 80023b4:	2104      	movs	r1, #4
 80023b6:	430a      	orrs	r2, r1
 80023b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80023ba:	4b88      	ldr	r3, [pc, #544]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 80023bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023be:	4b87      	ldr	r3, [pc, #540]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 80023c0:	2101      	movs	r1, #1
 80023c2:	430a      	orrs	r2, r1
 80023c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80023c6:	e00b      	b.n	80023e0 <HAL_RCC_OscConfig+0x41c>
 80023c8:	4b84      	ldr	r3, [pc, #528]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 80023ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023cc:	4b83      	ldr	r3, [pc, #524]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 80023ce:	2101      	movs	r1, #1
 80023d0:	438a      	bics	r2, r1
 80023d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80023d4:	4b81      	ldr	r3, [pc, #516]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 80023d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023d8:	4b80      	ldr	r3, [pc, #512]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 80023da:	2104      	movs	r1, #4
 80023dc:	438a      	bics	r2, r1
 80023de:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d014      	beq.n	8002412 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fdb4 	bl	8000f54 <HAL_GetTick>
 80023ec:	0003      	movs	r3, r0
 80023ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f0:	e009      	b.n	8002406 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe fdaf 	bl	8000f54 <HAL_GetTick>
 80023f6:	0002      	movs	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	4a79      	ldr	r2, [pc, #484]	; (80025e4 <HAL_RCC_OscConfig+0x620>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e0e6      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002406:	4b75      	ldr	r3, [pc, #468]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	2202      	movs	r2, #2
 800240c:	4013      	ands	r3, r2
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x42e>
 8002410:	e013      	b.n	800243a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe fd9f 	bl	8000f54 <HAL_GetTick>
 8002416:	0003      	movs	r3, r0
 8002418:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800241a:	e009      	b.n	8002430 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241c:	f7fe fd9a 	bl	8000f54 <HAL_GetTick>
 8002420:	0002      	movs	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	4a6f      	ldr	r2, [pc, #444]	; (80025e4 <HAL_RCC_OscConfig+0x620>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e0d1      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002430:	4b6a      	ldr	r3, [pc, #424]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 8002432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002434:	2202      	movs	r2, #2
 8002436:	4013      	ands	r3, r2
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800243a:	231f      	movs	r3, #31
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d105      	bne.n	8002450 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002444:	4b65      	ldr	r3, [pc, #404]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 8002446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002448:	4b64      	ldr	r3, [pc, #400]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 800244a:	4967      	ldr	r1, [pc, #412]	; (80025e8 <HAL_RCC_OscConfig+0x624>)
 800244c:	400a      	ands	r2, r1
 800244e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d100      	bne.n	800245a <HAL_RCC_OscConfig+0x496>
 8002458:	e0bb      	b.n	80025d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245a:	4b60      	ldr	r3, [pc, #384]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2238      	movs	r2, #56	; 0x38
 8002460:	4013      	ands	r3, r2
 8002462:	2b10      	cmp	r3, #16
 8002464:	d100      	bne.n	8002468 <HAL_RCC_OscConfig+0x4a4>
 8002466:	e07b      	b.n	8002560 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d156      	bne.n	800251e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002470:	4b5a      	ldr	r3, [pc, #360]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 8002476:	495d      	ldr	r1, [pc, #372]	; (80025ec <HAL_RCC_OscConfig+0x628>)
 8002478:	400a      	ands	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe fd6a 	bl	8000f54 <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7fe fd65 	bl	8000f54 <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e09d      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002498:	4b50      	ldr	r3, [pc, #320]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	049b      	lsls	r3, r3, #18
 80024a0:	4013      	ands	r3, r2
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a4:	4b4d      	ldr	r3, [pc, #308]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a51      	ldr	r2, [pc, #324]	; (80025f0 <HAL_RCC_OscConfig+0x62c>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	0019      	movs	r1, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1a      	ldr	r2, [r3, #32]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d0:	431a      	orrs	r2, r3
 80024d2:	4b42      	ldr	r3, [pc, #264]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 80024d4:	430a      	orrs	r2, r1
 80024d6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d8:	4b40      	ldr	r3, [pc, #256]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b3f      	ldr	r3, [pc, #252]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 80024de:	2180      	movs	r1, #128	; 0x80
 80024e0:	0449      	lsls	r1, r1, #17
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80024e6:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	4b3c      	ldr	r3, [pc, #240]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 80024ec:	2180      	movs	r1, #128	; 0x80
 80024ee:	0549      	lsls	r1, r1, #21
 80024f0:	430a      	orrs	r2, r1
 80024f2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe fd2e 	bl	8000f54 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fe fd29 	bl	8000f54 <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e061      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002510:	4b32      	ldr	r3, [pc, #200]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	049b      	lsls	r3, r3, #18
 8002518:	4013      	ands	r3, r2
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x53a>
 800251c:	e059      	b.n	80025d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b2f      	ldr	r3, [pc, #188]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 8002524:	4931      	ldr	r1, [pc, #196]	; (80025ec <HAL_RCC_OscConfig+0x628>)
 8002526:	400a      	ands	r2, r1
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252a:	f7fe fd13 	bl	8000f54 <HAL_GetTick>
 800252e:	0003      	movs	r3, r0
 8002530:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe fd0e 	bl	8000f54 <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e046      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002546:	4b25      	ldr	r3, [pc, #148]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	049b      	lsls	r3, r3, #18
 800254e:	4013      	ands	r3, r2
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	4b21      	ldr	r3, [pc, #132]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 8002558:	4926      	ldr	r1, [pc, #152]	; (80025f4 <HAL_RCC_OscConfig+0x630>)
 800255a:	400a      	ands	r2, r1
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	e038      	b.n	80025d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e033      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800256c:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <HAL_RCC_OscConfig+0x618>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2203      	movs	r2, #3
 8002576:	401a      	ands	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	429a      	cmp	r2, r3
 800257e:	d126      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2270      	movs	r2, #112	; 0x70
 8002584:	401a      	ands	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d11f      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	23fe      	movs	r3, #254	; 0xfe
 8002592:	01db      	lsls	r3, r3, #7
 8002594:	401a      	ands	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d116      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	23f8      	movs	r3, #248	; 0xf8
 80025a4:	039b      	lsls	r3, r3, #14
 80025a6:	401a      	ands	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d10e      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	23e0      	movs	r3, #224	; 0xe0
 80025b4:	051b      	lsls	r3, r3, #20
 80025b6:	401a      	ands	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	0f5b      	lsrs	r3, r3, #29
 80025c4:	075a      	lsls	r2, r3, #29
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b008      	add	sp, #32
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40007000 	.word	0x40007000
 80025e4:	00001388 	.word	0x00001388
 80025e8:	efffffff 	.word	0xefffffff
 80025ec:	feffffff 	.word	0xfeffffff
 80025f0:	11c1808c 	.word	0x11c1808c
 80025f4:	eefefffc 	.word	0xeefefffc

080025f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0e9      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b76      	ldr	r3, [pc, #472]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2207      	movs	r2, #7
 8002612:	4013      	ands	r3, r2
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d91e      	bls.n	8002658 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b73      	ldr	r3, [pc, #460]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2207      	movs	r2, #7
 8002620:	4393      	bics	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	4b70      	ldr	r3, [pc, #448]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800262c:	f7fe fc92 	bl	8000f54 <HAL_GetTick>
 8002630:	0003      	movs	r3, r0
 8002632:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002634:	e009      	b.n	800264a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002636:	f7fe fc8d 	bl	8000f54 <HAL_GetTick>
 800263a:	0002      	movs	r2, r0
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	4a6a      	ldr	r2, [pc, #424]	; (80027ec <HAL_RCC_ClockConfig+0x1f4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0ca      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800264a:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2207      	movs	r2, #7
 8002650:	4013      	ands	r3, r2
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2202      	movs	r2, #2
 800265e:	4013      	ands	r3, r2
 8002660:	d015      	beq.n	800268e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2204      	movs	r2, #4
 8002668:	4013      	ands	r3, r2
 800266a:	d006      	beq.n	800267a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800266c:	4b60      	ldr	r3, [pc, #384]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	4b5f      	ldr	r3, [pc, #380]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002672:	21e0      	movs	r1, #224	; 0xe0
 8002674:	01c9      	lsls	r1, r1, #7
 8002676:	430a      	orrs	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267a:	4b5d      	ldr	r3, [pc, #372]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	4a5d      	ldr	r2, [pc, #372]	; (80027f4 <HAL_RCC_ClockConfig+0x1fc>)
 8002680:	4013      	ands	r3, r2
 8002682:	0019      	movs	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 800268a:	430a      	orrs	r2, r1
 800268c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2201      	movs	r2, #1
 8002694:	4013      	ands	r3, r2
 8002696:	d057      	beq.n	8002748 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d107      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a0:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	029b      	lsls	r3, r3, #10
 80026a8:	4013      	ands	r3, r2
 80026aa:	d12b      	bne.n	8002704 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e097      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b8:	4b4d      	ldr	r3, [pc, #308]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	049b      	lsls	r3, r3, #18
 80026c0:	4013      	ands	r3, r2
 80026c2:	d11f      	bne.n	8002704 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e08b      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d0:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4013      	ands	r3, r2
 80026da:	d113      	bne.n	8002704 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e07f      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026e8:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80026ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ec:	2202      	movs	r2, #2
 80026ee:	4013      	ands	r3, r2
 80026f0:	d108      	bne.n	8002704 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e074      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f6:	4b3e      	ldr	r3, [pc, #248]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	2202      	movs	r2, #2
 80026fc:	4013      	ands	r3, r2
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e06d      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002704:	4b3a      	ldr	r3, [pc, #232]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2207      	movs	r2, #7
 800270a:	4393      	bics	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	4b37      	ldr	r3, [pc, #220]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002714:	430a      	orrs	r2, r1
 8002716:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002718:	f7fe fc1c 	bl	8000f54 <HAL_GetTick>
 800271c:	0003      	movs	r3, r0
 800271e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002720:	e009      	b.n	8002736 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002722:	f7fe fc17 	bl	8000f54 <HAL_GetTick>
 8002726:	0002      	movs	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	4a2f      	ldr	r2, [pc, #188]	; (80027ec <HAL_RCC_ClockConfig+0x1f4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e054      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2238      	movs	r2, #56	; 0x38
 800273c:	401a      	ands	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	429a      	cmp	r2, r3
 8002746:	d1ec      	bne.n	8002722 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2207      	movs	r2, #7
 800274e:	4013      	ands	r3, r2
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d21e      	bcs.n	8002794 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2207      	movs	r2, #7
 800275c:	4393      	bics	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002768:	f7fe fbf4 	bl	8000f54 <HAL_GetTick>
 800276c:	0003      	movs	r3, r0
 800276e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002770:	e009      	b.n	8002786 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002772:	f7fe fbef 	bl	8000f54 <HAL_GetTick>
 8002776:	0002      	movs	r2, r0
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	4a1b      	ldr	r2, [pc, #108]	; (80027ec <HAL_RCC_ClockConfig+0x1f4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e02c      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2207      	movs	r2, #7
 800278c:	4013      	ands	r3, r2
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d1ee      	bne.n	8002772 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2204      	movs	r2, #4
 800279a:	4013      	ands	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4a15      	ldr	r2, [pc, #84]	; (80027f8 <HAL_RCC_ClockConfig+0x200>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	0019      	movs	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80027b2:	f000 f829 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027b6:	0001      	movs	r1, r0
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	220f      	movs	r2, #15
 80027c0:	401a      	ands	r2, r3
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <HAL_RCC_ClockConfig+0x204>)
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	58d3      	ldr	r3, [r2, r3]
 80027c8:	221f      	movs	r2, #31
 80027ca:	4013      	ands	r3, r2
 80027cc:	000a      	movs	r2, r1
 80027ce:	40da      	lsrs	r2, r3
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCC_ClockConfig+0x208>)
 80027d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_ClockConfig+0x20c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0018      	movs	r0, r3
 80027da:	f7fe fb5f 	bl	8000e9c <HAL_InitTick>
 80027de:	0003      	movs	r3, r0
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b004      	add	sp, #16
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40022000 	.word	0x40022000
 80027ec:	00001388 	.word	0x00001388
 80027f0:	40021000 	.word	0x40021000
 80027f4:	fffff0ff 	.word	0xfffff0ff
 80027f8:	ffff8fff 	.word	0xffff8fff
 80027fc:	08003850 	.word	0x08003850
 8002800:	20000000 	.word	0x20000000
 8002804:	20000004 	.word	0x20000004

08002808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800280e:	4b3c      	ldr	r3, [pc, #240]	; (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2238      	movs	r2, #56	; 0x38
 8002814:	4013      	ands	r3, r2
 8002816:	d10f      	bne.n	8002838 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002818:	4b39      	ldr	r3, [pc, #228]	; (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0adb      	lsrs	r3, r3, #11
 800281e:	2207      	movs	r2, #7
 8002820:	4013      	ands	r3, r2
 8002822:	2201      	movs	r2, #1
 8002824:	409a      	lsls	r2, r3
 8002826:	0013      	movs	r3, r2
 8002828:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800282a:	6839      	ldr	r1, [r7, #0]
 800282c:	4835      	ldr	r0, [pc, #212]	; (8002904 <HAL_RCC_GetSysClockFreq+0xfc>)
 800282e:	f7fd fc67 	bl	8000100 <__udivsi3>
 8002832:	0003      	movs	r3, r0
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	e05d      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2238      	movs	r2, #56	; 0x38
 800283e:	4013      	ands	r3, r2
 8002840:	2b08      	cmp	r3, #8
 8002842:	d102      	bne.n	800284a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002844:	4b30      	ldr	r3, [pc, #192]	; (8002908 <HAL_RCC_GetSysClockFreq+0x100>)
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	e054      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2238      	movs	r2, #56	; 0x38
 8002850:	4013      	ands	r3, r2
 8002852:	2b10      	cmp	r3, #16
 8002854:	d138      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2203      	movs	r2, #3
 800285c:	4013      	ands	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002860:	4b27      	ldr	r3, [pc, #156]	; (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	2207      	movs	r2, #7
 8002868:	4013      	ands	r3, r2
 800286a:	3301      	adds	r3, #1
 800286c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d10d      	bne.n	8002890 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	4824      	ldr	r0, [pc, #144]	; (8002908 <HAL_RCC_GetSysClockFreq+0x100>)
 8002878:	f7fd fc42 	bl	8000100 <__udivsi3>
 800287c:	0003      	movs	r3, r0
 800287e:	0019      	movs	r1, r3
 8002880:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	227f      	movs	r2, #127	; 0x7f
 8002888:	4013      	ands	r3, r2
 800288a:	434b      	muls	r3, r1
 800288c:	617b      	str	r3, [r7, #20]
        break;
 800288e:	e00d      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	481c      	ldr	r0, [pc, #112]	; (8002904 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002894:	f7fd fc34 	bl	8000100 <__udivsi3>
 8002898:	0003      	movs	r3, r0
 800289a:	0019      	movs	r1, r3
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	227f      	movs	r2, #127	; 0x7f
 80028a4:	4013      	ands	r3, r2
 80028a6:	434b      	muls	r3, r1
 80028a8:	617b      	str	r3, [r7, #20]
        break;
 80028aa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0f5b      	lsrs	r3, r3, #29
 80028b2:	2207      	movs	r2, #7
 80028b4:	4013      	ands	r3, r2
 80028b6:	3301      	adds	r3, #1
 80028b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	6978      	ldr	r0, [r7, #20]
 80028be:	f7fd fc1f 	bl	8000100 <__udivsi3>
 80028c2:	0003      	movs	r3, r0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	e015      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80028c8:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2238      	movs	r2, #56	; 0x38
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d103      	bne.n	80028dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2238      	movs	r2, #56	; 0x38
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b18      	cmp	r3, #24
 80028e6:	d103      	bne.n	80028f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80028e8:	23fa      	movs	r3, #250	; 0xfa
 80028ea:	01db      	lsls	r3, r3, #7
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	e001      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028f4:	693b      	ldr	r3, [r7, #16]
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b006      	add	sp, #24
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	40021000 	.word	0x40021000
 8002904:	00f42400 	.word	0x00f42400
 8002908:	007a1200 	.word	0x007a1200

0800290c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b02      	ldr	r3, [pc, #8]	; (800291c <HAL_RCC_GetHCLKFreq+0x10>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	20000000 	.word	0x20000000

08002920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002924:	f7ff fff2 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002928:	0004      	movs	r4, r0
 800292a:	f7ff fb3f 	bl	8001fac <LL_RCC_GetAPB1Prescaler>
 800292e:	0003      	movs	r3, r0
 8002930:	0b1a      	lsrs	r2, r3, #12
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	58d3      	ldr	r3, [r2, r3]
 8002938:	221f      	movs	r2, #31
 800293a:	4013      	ands	r3, r2
 800293c:	40dc      	lsrs	r4, r3
 800293e:	0023      	movs	r3, r4
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	bdb0      	pop	{r4, r5, r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	08003890 	.word	0x08003890

0800294c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002954:	2313      	movs	r3, #19
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800295c:	2312      	movs	r3, #18
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	029b      	lsls	r3, r3, #10
 800296c:	4013      	ands	r3, r2
 800296e:	d100      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002970:	e0a3      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2011      	movs	r0, #17
 8002974:	183b      	adds	r3, r7, r0
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297a:	4bb3      	ldr	r3, [pc, #716]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800297c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	055b      	lsls	r3, r3, #21
 8002982:	4013      	ands	r3, r2
 8002984:	d110      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	4bb0      	ldr	r3, [pc, #704]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800298a:	4baf      	ldr	r3, [pc, #700]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800298c:	2180      	movs	r1, #128	; 0x80
 800298e:	0549      	lsls	r1, r1, #21
 8002990:	430a      	orrs	r2, r1
 8002992:	63da      	str	r2, [r3, #60]	; 0x3c
 8002994:	4bac      	ldr	r3, [pc, #688]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	055b      	lsls	r3, r3, #21
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a2:	183b      	adds	r3, r7, r0
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a8:	4ba8      	ldr	r3, [pc, #672]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4ba7      	ldr	r3, [pc, #668]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029ae:	2180      	movs	r1, #128	; 0x80
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029b6:	f7fe facd 	bl	8000f54 <HAL_GetTick>
 80029ba:	0003      	movs	r3, r0
 80029bc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029be:	e00b      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c0:	f7fe fac8 	bl	8000f54 <HAL_GetTick>
 80029c4:	0002      	movs	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d904      	bls.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80029ce:	2313      	movs	r3, #19
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	2203      	movs	r2, #3
 80029d4:	701a      	strb	r2, [r3, #0]
        break;
 80029d6:	e005      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029d8:	4b9c      	ldr	r3, [pc, #624]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4013      	ands	r3, r2
 80029e2:	d0ed      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80029e4:	2313      	movs	r3, #19
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d154      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029ee:	4b96      	ldr	r3, [pc, #600]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80029f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029f2:	23c0      	movs	r3, #192	; 0xc0
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4013      	ands	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d019      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d014      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a0a:	4b8f      	ldr	r3, [pc, #572]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	4a90      	ldr	r2, [pc, #576]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a14:	4b8c      	ldr	r3, [pc, #560]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a18:	4b8b      	ldr	r3, [pc, #556]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	0249      	lsls	r1, r1, #9
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a22:	4b89      	ldr	r3, [pc, #548]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a26:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a28:	498a      	ldr	r1, [pc, #552]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a2e:	4b86      	ldr	r3, [pc, #536]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2201      	movs	r2, #1
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d016      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fa8a 	bl	8000f54 <HAL_GetTick>
 8002a40:	0003      	movs	r3, r0
 8002a42:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a44:	e00c      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe fa85 	bl	8000f54 <HAL_GetTick>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	4a81      	ldr	r2, [pc, #516]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d904      	bls.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002a56:	2313      	movs	r3, #19
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	701a      	strb	r2, [r3, #0]
            break;
 8002a5e:	e004      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a60:	4b79      	ldr	r3, [pc, #484]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	2202      	movs	r2, #2
 8002a66:	4013      	ands	r3, r2
 8002a68:	d0ed      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a6a:	2313      	movs	r3, #19
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a74:	4b74      	ldr	r3, [pc, #464]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a78:	4a75      	ldr	r2, [pc, #468]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a82:	4b71      	ldr	r3, [pc, #452]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a84:	430a      	orrs	r2, r1
 8002a86:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a88:	e00c      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a8a:	2312      	movs	r3, #18
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2213      	movs	r2, #19
 8002a90:	18ba      	adds	r2, r7, r2
 8002a92:	7812      	ldrb	r2, [r2, #0]
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e005      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a98:	2312      	movs	r3, #18
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	2213      	movs	r2, #19
 8002a9e:	18ba      	adds	r2, r7, r2
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aa4:	2311      	movs	r3, #17
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d105      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aae:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ab2:	4b65      	ldr	r3, [pc, #404]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ab4:	4969      	ldr	r1, [pc, #420]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d009      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ac4:	4b60      	ldr	r3, [pc, #384]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	2203      	movs	r2, #3
 8002aca:	4393      	bics	r3, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2210      	movs	r2, #16
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ae2:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	4a5e      	ldr	r2, [pc, #376]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	4b55      	ldr	r3, [pc, #340]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002af2:	430a      	orrs	r2, r1
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4013      	ands	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b02:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	4a57      	ldr	r2, [pc, #348]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	4b4d      	ldr	r3, [pc, #308]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b12:	430a      	orrs	r2, r1
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	2380      	movs	r3, #128	; 0x80
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b22:	4b49      	ldr	r3, [pc, #292]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b26:	4a50      	ldr	r2, [pc, #320]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699a      	ldr	r2, [r3, #24]
 8002b30:	4b45      	ldr	r3, [pc, #276]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b32:	430a      	orrs	r2, r1
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d009      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b40:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	4a49      	ldr	r2, [pc, #292]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	4b3e      	ldr	r3, [pc, #248]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b50:	430a      	orrs	r2, r1
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	01db      	lsls	r3, r3, #7
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d015      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b60:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	0899      	lsrs	r1, r3, #2
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69da      	ldr	r2, [r3, #28]
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69da      	ldr	r2, [r3, #28]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	05db      	lsls	r3, r3, #23
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d106      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b7e:	4b32      	ldr	r3, [pc, #200]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	0249      	lsls	r1, r1, #9
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	039b      	lsls	r3, r3, #14
 8002b94:	4013      	ands	r3, r2
 8002b96:	d016      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	4a34      	ldr	r2, [pc, #208]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1a      	ldr	r2, [r3, #32]
 8002ba6:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1a      	ldr	r2, [r3, #32]
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	03db      	lsls	r3, r3, #15
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002bb8:	4b23      	ldr	r3, [pc, #140]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bbe:	2180      	movs	r1, #128	; 0x80
 8002bc0:	0449      	lsls	r1, r1, #17
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	03db      	lsls	r3, r3, #15
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d016      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	4a27      	ldr	r2, [pc, #156]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	0019      	movs	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002be2:	430a      	orrs	r2, r1
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	045b      	lsls	r3, r3, #17
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d106      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	0449      	lsls	r1, r1, #17
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d016      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	4a19      	ldr	r2, [pc, #100]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	01db      	lsls	r3, r3, #7
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c32:	2180      	movs	r1, #128	; 0x80
 8002c34:	0249      	lsls	r1, r1, #9
 8002c36:	430a      	orrs	r2, r1
 8002c38:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002c3a:	2312      	movs	r3, #18
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	781b      	ldrb	r3, [r3, #0]
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b006      	add	sp, #24
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	fffffcff 	.word	0xfffffcff
 8002c54:	fffeffff 	.word	0xfffeffff
 8002c58:	00001388 	.word	0x00001388
 8002c5c:	efffffff 	.word	0xefffffff
 8002c60:	fffff3ff 	.word	0xfffff3ff
 8002c64:	fff3ffff 	.word	0xfff3ffff
 8002c68:	ffcfffff 	.word	0xffcfffff
 8002c6c:	ffffcfff 	.word	0xffffcfff
 8002c70:	ffbfffff 	.word	0xffbfffff
 8002c74:	feffffff 	.word	0xfeffffff
 8002c78:	ffff3fff 	.word	0xffff3fff

08002c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e046      	b.n	8002d1c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2288      	movs	r2, #136	; 0x88
 8002c92:	589b      	ldr	r3, [r3, r2]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d107      	bne.n	8002ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2284      	movs	r2, #132	; 0x84
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7fe f806 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2288      	movs	r2, #136	; 0x88
 8002cac:	2124      	movs	r1, #36	; 0x24
 8002cae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2101      	movs	r1, #1
 8002cbc:	438a      	bics	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f000 f830 	bl	8002d28 <UART_SetConfig>
 8002cc8:	0003      	movs	r3, r0
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e024      	b.n	8002d1c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f000 fa9b 	bl	8003218 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	490d      	ldr	r1, [pc, #52]	; (8002d24 <HAL_UART_Init+0xa8>)
 8002cee:	400a      	ands	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	212a      	movs	r1, #42	; 0x2a
 8002cfe:	438a      	bics	r2, r1
 8002d00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	0018      	movs	r0, r3
 8002d16:	f000 fb33 	bl	8003380 <UART_CheckIdleState>
 8002d1a:	0003      	movs	r3, r0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b002      	add	sp, #8
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	ffffb7ff 	.word	0xffffb7ff

08002d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d28:	b5b0      	push	{r4, r5, r7, lr}
 8002d2a:	b090      	sub	sp, #64	; 0x40
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d30:	231a      	movs	r3, #26
 8002d32:	2220      	movs	r2, #32
 8002d34:	189b      	adds	r3, r3, r2
 8002d36:	19db      	adds	r3, r3, r7
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4ac4      	ldr	r2, [pc, #784]	; (800306c <UART_SetConfig+0x344>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d66:	430b      	orrs	r3, r1
 8002d68:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4abf      	ldr	r2, [pc, #764]	; (8003070 <UART_SetConfig+0x348>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	0018      	movs	r0, r3
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	68d9      	ldr	r1, [r3, #12]
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	0003      	movs	r3, r0
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4ab9      	ldr	r2, [pc, #740]	; (8003074 <UART_SetConfig+0x34c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d004      	beq.n	8002d9e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4ab4      	ldr	r2, [pc, #720]	; (8003078 <UART_SetConfig+0x350>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	220f      	movs	r2, #15
 8002dbc:	4393      	bics	r3, r2
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	0003      	movs	r3, r0
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4aaa      	ldr	r2, [pc, #680]	; (800307c <UART_SetConfig+0x354>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d131      	bne.n	8002e3c <UART_SetConfig+0x114>
 8002dd8:	4ba9      	ldr	r3, [pc, #676]	; (8003080 <UART_SetConfig+0x358>)
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	2203      	movs	r2, #3
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d01d      	beq.n	8002e20 <UART_SetConfig+0xf8>
 8002de4:	d823      	bhi.n	8002e2e <UART_SetConfig+0x106>
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d00c      	beq.n	8002e04 <UART_SetConfig+0xdc>
 8002dea:	d820      	bhi.n	8002e2e <UART_SetConfig+0x106>
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <UART_SetConfig+0xce>
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d00e      	beq.n	8002e12 <UART_SetConfig+0xea>
 8002df4:	e01b      	b.n	8002e2e <UART_SetConfig+0x106>
 8002df6:	231b      	movs	r3, #27
 8002df8:	2220      	movs	r2, #32
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	19db      	adds	r3, r3, r7
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e071      	b.n	8002ee8 <UART_SetConfig+0x1c0>
 8002e04:	231b      	movs	r3, #27
 8002e06:	2220      	movs	r2, #32
 8002e08:	189b      	adds	r3, r3, r2
 8002e0a:	19db      	adds	r3, r3, r7
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e06a      	b.n	8002ee8 <UART_SetConfig+0x1c0>
 8002e12:	231b      	movs	r3, #27
 8002e14:	2220      	movs	r2, #32
 8002e16:	189b      	adds	r3, r3, r2
 8002e18:	19db      	adds	r3, r3, r7
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e063      	b.n	8002ee8 <UART_SetConfig+0x1c0>
 8002e20:	231b      	movs	r3, #27
 8002e22:	2220      	movs	r2, #32
 8002e24:	189b      	adds	r3, r3, r2
 8002e26:	19db      	adds	r3, r3, r7
 8002e28:	2208      	movs	r2, #8
 8002e2a:	701a      	strb	r2, [r3, #0]
 8002e2c:	e05c      	b.n	8002ee8 <UART_SetConfig+0x1c0>
 8002e2e:	231b      	movs	r3, #27
 8002e30:	2220      	movs	r2, #32
 8002e32:	189b      	adds	r3, r3, r2
 8002e34:	19db      	adds	r3, r3, r7
 8002e36:	2210      	movs	r2, #16
 8002e38:	701a      	strb	r2, [r3, #0]
 8002e3a:	e055      	b.n	8002ee8 <UART_SetConfig+0x1c0>
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a90      	ldr	r2, [pc, #576]	; (8003084 <UART_SetConfig+0x35c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d106      	bne.n	8002e54 <UART_SetConfig+0x12c>
 8002e46:	231b      	movs	r3, #27
 8002e48:	2220      	movs	r2, #32
 8002e4a:	189b      	adds	r3, r3, r2
 8002e4c:	19db      	adds	r3, r3, r7
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e049      	b.n	8002ee8 <UART_SetConfig+0x1c0>
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a86      	ldr	r2, [pc, #536]	; (8003074 <UART_SetConfig+0x34c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d13e      	bne.n	8002edc <UART_SetConfig+0x1b4>
 8002e5e:	4b88      	ldr	r3, [pc, #544]	; (8003080 <UART_SetConfig+0x358>)
 8002e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e62:	23c0      	movs	r3, #192	; 0xc0
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	4013      	ands	r3, r2
 8002e68:	22c0      	movs	r2, #192	; 0xc0
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d027      	beq.n	8002ec0 <UART_SetConfig+0x198>
 8002e70:	22c0      	movs	r2, #192	; 0xc0
 8002e72:	0112      	lsls	r2, r2, #4
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d82a      	bhi.n	8002ece <UART_SetConfig+0x1a6>
 8002e78:	2280      	movs	r2, #128	; 0x80
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d011      	beq.n	8002ea4 <UART_SetConfig+0x17c>
 8002e80:	2280      	movs	r2, #128	; 0x80
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d822      	bhi.n	8002ece <UART_SetConfig+0x1a6>
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d004      	beq.n	8002e96 <UART_SetConfig+0x16e>
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	00d2      	lsls	r2, r2, #3
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00e      	beq.n	8002eb2 <UART_SetConfig+0x18a>
 8002e94:	e01b      	b.n	8002ece <UART_SetConfig+0x1a6>
 8002e96:	231b      	movs	r3, #27
 8002e98:	2220      	movs	r2, #32
 8002e9a:	189b      	adds	r3, r3, r2
 8002e9c:	19db      	adds	r3, r3, r7
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e021      	b.n	8002ee8 <UART_SetConfig+0x1c0>
 8002ea4:	231b      	movs	r3, #27
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	189b      	adds	r3, r3, r2
 8002eaa:	19db      	adds	r3, r3, r7
 8002eac:	2202      	movs	r2, #2
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e01a      	b.n	8002ee8 <UART_SetConfig+0x1c0>
 8002eb2:	231b      	movs	r3, #27
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	189b      	adds	r3, r3, r2
 8002eb8:	19db      	adds	r3, r3, r7
 8002eba:	2204      	movs	r2, #4
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	e013      	b.n	8002ee8 <UART_SetConfig+0x1c0>
 8002ec0:	231b      	movs	r3, #27
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	189b      	adds	r3, r3, r2
 8002ec6:	19db      	adds	r3, r3, r7
 8002ec8:	2208      	movs	r2, #8
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	e00c      	b.n	8002ee8 <UART_SetConfig+0x1c0>
 8002ece:	231b      	movs	r3, #27
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	189b      	adds	r3, r3, r2
 8002ed4:	19db      	adds	r3, r3, r7
 8002ed6:	2210      	movs	r2, #16
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	e005      	b.n	8002ee8 <UART_SetConfig+0x1c0>
 8002edc:	231b      	movs	r3, #27
 8002ede:	2220      	movs	r2, #32
 8002ee0:	189b      	adds	r3, r3, r2
 8002ee2:	19db      	adds	r3, r3, r7
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a61      	ldr	r2, [pc, #388]	; (8003074 <UART_SetConfig+0x34c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d000      	beq.n	8002ef4 <UART_SetConfig+0x1cc>
 8002ef2:	e092      	b.n	800301a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ef4:	231b      	movs	r3, #27
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	189b      	adds	r3, r3, r2
 8002efa:	19db      	adds	r3, r3, r7
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d015      	beq.n	8002f2e <UART_SetConfig+0x206>
 8002f02:	dc18      	bgt.n	8002f36 <UART_SetConfig+0x20e>
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d00d      	beq.n	8002f24 <UART_SetConfig+0x1fc>
 8002f08:	dc15      	bgt.n	8002f36 <UART_SetConfig+0x20e>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x1ec>
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d005      	beq.n	8002f1e <UART_SetConfig+0x1f6>
 8002f12:	e010      	b.n	8002f36 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f14:	f7ff fd04 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f1c:	e014      	b.n	8002f48 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f1e:	4b5a      	ldr	r3, [pc, #360]	; (8003088 <UART_SetConfig+0x360>)
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f22:	e011      	b.n	8002f48 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f24:	f7ff fc70 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f2c:	e00c      	b.n	8002f48 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f34:	e008      	b.n	8002f48 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002f3a:	231a      	movs	r3, #26
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	189b      	adds	r3, r3, r2
 8002f40:	19db      	adds	r3, r3, r7
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
        break;
 8002f46:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d100      	bne.n	8002f50 <UART_SetConfig+0x228>
 8002f4e:	e147      	b.n	80031e0 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f54:	4b4d      	ldr	r3, [pc, #308]	; (800308c <UART_SetConfig+0x364>)
 8002f56:	0052      	lsls	r2, r2, #1
 8002f58:	5ad3      	ldrh	r3, [r2, r3]
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f5e:	f7fd f8cf 	bl	8000100 <__udivsi3>
 8002f62:	0003      	movs	r3, r0
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	0013      	movs	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	189b      	adds	r3, r3, r2
 8002f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d305      	bcc.n	8002f82 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d906      	bls.n	8002f90 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8002f82:	231a      	movs	r3, #26
 8002f84:	2220      	movs	r2, #32
 8002f86:	189b      	adds	r3, r3, r2
 8002f88:	19db      	adds	r3, r3, r7
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	e127      	b.n	80031e0 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f92:	61bb      	str	r3, [r7, #24]
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f9c:	4b3b      	ldr	r3, [pc, #236]	; (800308c <UART_SetConfig+0x364>)
 8002f9e:	0052      	lsls	r2, r2, #1
 8002fa0:	5ad3      	ldrh	r3, [r2, r3]
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	69b8      	ldr	r0, [r7, #24]
 8002fae:	69f9      	ldr	r1, [r7, #28]
 8002fb0:	f7fd fa1c 	bl	80003ec <__aeabi_uldivmod>
 8002fb4:	0002      	movs	r2, r0
 8002fb6:	000b      	movs	r3, r1
 8002fb8:	0e11      	lsrs	r1, r2, #24
 8002fba:	021d      	lsls	r5, r3, #8
 8002fbc:	430d      	orrs	r5, r1
 8002fbe:	0214      	lsls	r4, r2, #8
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68b8      	ldr	r0, [r7, #8]
 8002fce:	68f9      	ldr	r1, [r7, #12]
 8002fd0:	1900      	adds	r0, r0, r4
 8002fd2:	4169      	adcs	r1, r5
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f7fd fa03 	bl	80003ec <__aeabi_uldivmod>
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	000b      	movs	r3, r1
 8002fea:	0013      	movs	r3, r2
 8002fec:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ff0:	23c0      	movs	r3, #192	; 0xc0
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d309      	bcc.n	800300c <UART_SetConfig+0x2e4>
 8002ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	035b      	lsls	r3, r3, #13
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d204      	bcs.n	800300c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	e0e9      	b.n	80031e0 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800300c:	231a      	movs	r3, #26
 800300e:	2220      	movs	r2, #32
 8003010:	189b      	adds	r3, r3, r2
 8003012:	19db      	adds	r3, r3, r7
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
 8003018:	e0e2      	b.n	80031e0 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	429a      	cmp	r2, r3
 8003024:	d000      	beq.n	8003028 <UART_SetConfig+0x300>
 8003026:	e083      	b.n	8003130 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003028:	231b      	movs	r3, #27
 800302a:	2220      	movs	r2, #32
 800302c:	189b      	adds	r3, r3, r2
 800302e:	19db      	adds	r3, r3, r7
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b08      	cmp	r3, #8
 8003034:	d015      	beq.n	8003062 <UART_SetConfig+0x33a>
 8003036:	dc2b      	bgt.n	8003090 <UART_SetConfig+0x368>
 8003038:	2b04      	cmp	r3, #4
 800303a:	d00d      	beq.n	8003058 <UART_SetConfig+0x330>
 800303c:	dc28      	bgt.n	8003090 <UART_SetConfig+0x368>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <UART_SetConfig+0x320>
 8003042:	2b02      	cmp	r3, #2
 8003044:	d005      	beq.n	8003052 <UART_SetConfig+0x32a>
 8003046:	e023      	b.n	8003090 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003048:	f7ff fc6a 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 800304c:	0003      	movs	r3, r0
 800304e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003050:	e027      	b.n	80030a2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <UART_SetConfig+0x360>)
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003056:	e024      	b.n	80030a2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003058:	f7ff fbd6 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 800305c:	0003      	movs	r3, r0
 800305e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003060:	e01f      	b.n	80030a2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003068:	e01b      	b.n	80030a2 <UART_SetConfig+0x37a>
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	cfff69f3 	.word	0xcfff69f3
 8003070:	ffffcfff 	.word	0xffffcfff
 8003074:	40008000 	.word	0x40008000
 8003078:	11fff4ff 	.word	0x11fff4ff
 800307c:	40013800 	.word	0x40013800
 8003080:	40021000 	.word	0x40021000
 8003084:	40004400 	.word	0x40004400
 8003088:	00f42400 	.word	0x00f42400
 800308c:	080038b0 	.word	0x080038b0
      default:
        pclk = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003094:	231a      	movs	r3, #26
 8003096:	2220      	movs	r2, #32
 8003098:	189b      	adds	r3, r3, r2
 800309a:	19db      	adds	r3, r3, r7
 800309c:	2201      	movs	r2, #1
 800309e:	701a      	strb	r2, [r3, #0]
        break;
 80030a0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d100      	bne.n	80030aa <UART_SetConfig+0x382>
 80030a8:	e09a      	b.n	80031e0 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ae:	4b58      	ldr	r3, [pc, #352]	; (8003210 <UART_SetConfig+0x4e8>)
 80030b0:	0052      	lsls	r2, r2, #1
 80030b2:	5ad3      	ldrh	r3, [r2, r3]
 80030b4:	0019      	movs	r1, r3
 80030b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030b8:	f7fd f822 	bl	8000100 <__udivsi3>
 80030bc:	0003      	movs	r3, r0
 80030be:	005a      	lsls	r2, r3, #1
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	18d2      	adds	r2, r2, r3
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	0019      	movs	r1, r3
 80030ce:	0010      	movs	r0, r2
 80030d0:	f7fd f816 	bl	8000100 <__udivsi3>
 80030d4:	0003      	movs	r3, r0
 80030d6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	2b0f      	cmp	r3, #15
 80030dc:	d921      	bls.n	8003122 <UART_SetConfig+0x3fa>
 80030de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	025b      	lsls	r3, r3, #9
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d21c      	bcs.n	8003122 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	200e      	movs	r0, #14
 80030ee:	2420      	movs	r4, #32
 80030f0:	1903      	adds	r3, r0, r4
 80030f2:	19db      	adds	r3, r3, r7
 80030f4:	210f      	movs	r1, #15
 80030f6:	438a      	bics	r2, r1
 80030f8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2207      	movs	r2, #7
 8003102:	4013      	ands	r3, r2
 8003104:	b299      	uxth	r1, r3
 8003106:	1903      	adds	r3, r0, r4
 8003108:	19db      	adds	r3, r3, r7
 800310a:	1902      	adds	r2, r0, r4
 800310c:	19d2      	adds	r2, r2, r7
 800310e:	8812      	ldrh	r2, [r2, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	1902      	adds	r2, r0, r4
 800311a:	19d2      	adds	r2, r2, r7
 800311c:	8812      	ldrh	r2, [r2, #0]
 800311e:	60da      	str	r2, [r3, #12]
 8003120:	e05e      	b.n	80031e0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003122:	231a      	movs	r3, #26
 8003124:	2220      	movs	r2, #32
 8003126:	189b      	adds	r3, r3, r2
 8003128:	19db      	adds	r3, r3, r7
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	e057      	b.n	80031e0 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003130:	231b      	movs	r3, #27
 8003132:	2220      	movs	r2, #32
 8003134:	189b      	adds	r3, r3, r2
 8003136:	19db      	adds	r3, r3, r7
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b08      	cmp	r3, #8
 800313c:	d015      	beq.n	800316a <UART_SetConfig+0x442>
 800313e:	dc18      	bgt.n	8003172 <UART_SetConfig+0x44a>
 8003140:	2b04      	cmp	r3, #4
 8003142:	d00d      	beq.n	8003160 <UART_SetConfig+0x438>
 8003144:	dc15      	bgt.n	8003172 <UART_SetConfig+0x44a>
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <UART_SetConfig+0x428>
 800314a:	2b02      	cmp	r3, #2
 800314c:	d005      	beq.n	800315a <UART_SetConfig+0x432>
 800314e:	e010      	b.n	8003172 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003150:	f7ff fbe6 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8003154:	0003      	movs	r3, r0
 8003156:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003158:	e014      	b.n	8003184 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800315a:	4b2e      	ldr	r3, [pc, #184]	; (8003214 <UART_SetConfig+0x4ec>)
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800315e:	e011      	b.n	8003184 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003160:	f7ff fb52 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8003164:	0003      	movs	r3, r0
 8003166:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003168:	e00c      	b.n	8003184 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003170:	e008      	b.n	8003184 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003176:	231a      	movs	r3, #26
 8003178:	2220      	movs	r2, #32
 800317a:	189b      	adds	r3, r3, r2
 800317c:	19db      	adds	r3, r3, r7
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
        break;
 8003182:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02a      	beq.n	80031e0 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <UART_SetConfig+0x4e8>)
 8003190:	0052      	lsls	r2, r2, #1
 8003192:	5ad3      	ldrh	r3, [r2, r3]
 8003194:	0019      	movs	r1, r3
 8003196:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003198:	f7fc ffb2 	bl	8000100 <__udivsi3>
 800319c:	0003      	movs	r3, r0
 800319e:	001a      	movs	r2, r3
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	085b      	lsrs	r3, r3, #1
 80031a6:	18d2      	adds	r2, r2, r3
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	0019      	movs	r1, r3
 80031ae:	0010      	movs	r0, r2
 80031b0:	f7fc ffa6 	bl	8000100 <__udivsi3>
 80031b4:	0003      	movs	r3, r0
 80031b6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	d90a      	bls.n	80031d4 <UART_SetConfig+0x4ac>
 80031be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	025b      	lsls	r3, r3, #9
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d205      	bcs.n	80031d4 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	e005      	b.n	80031e0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80031d4:	231a      	movs	r3, #26
 80031d6:	2220      	movs	r2, #32
 80031d8:	189b      	adds	r3, r3, r2
 80031da:	19db      	adds	r3, r3, r7
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	226a      	movs	r2, #106	; 0x6a
 80031e4:	2101      	movs	r1, #1
 80031e6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	2268      	movs	r2, #104	; 0x68
 80031ec:	2101      	movs	r1, #1
 80031ee:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	2200      	movs	r2, #0
 80031f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	2200      	movs	r2, #0
 80031fa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80031fc:	231a      	movs	r3, #26
 80031fe:	2220      	movs	r2, #32
 8003200:	189b      	adds	r3, r3, r2
 8003202:	19db      	adds	r3, r3, r7
 8003204:	781b      	ldrb	r3, [r3, #0]
}
 8003206:	0018      	movs	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	b010      	add	sp, #64	; 0x40
 800320c:	bdb0      	pop	{r4, r5, r7, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	080038b0 	.word	0x080038b0
 8003214:	00f42400 	.word	0x00f42400

08003218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	2201      	movs	r2, #1
 8003226:	4013      	ands	r3, r2
 8003228:	d00b      	beq.n	8003242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4a4a      	ldr	r2, [pc, #296]	; (800335c <UART_AdvFeatureConfig+0x144>)
 8003232:	4013      	ands	r3, r2
 8003234:	0019      	movs	r1, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	2202      	movs	r2, #2
 8003248:	4013      	ands	r3, r2
 800324a:	d00b      	beq.n	8003264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4a43      	ldr	r2, [pc, #268]	; (8003360 <UART_AdvFeatureConfig+0x148>)
 8003254:	4013      	ands	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	2204      	movs	r2, #4
 800326a:	4013      	ands	r3, r2
 800326c:	d00b      	beq.n	8003286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4a3b      	ldr	r2, [pc, #236]	; (8003364 <UART_AdvFeatureConfig+0x14c>)
 8003276:	4013      	ands	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	2208      	movs	r2, #8
 800328c:	4013      	ands	r3, r2
 800328e:	d00b      	beq.n	80032a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4a34      	ldr	r2, [pc, #208]	; (8003368 <UART_AdvFeatureConfig+0x150>)
 8003298:	4013      	ands	r3, r2
 800329a:	0019      	movs	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	2210      	movs	r2, #16
 80032ae:	4013      	ands	r3, r2
 80032b0:	d00b      	beq.n	80032ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4a2c      	ldr	r2, [pc, #176]	; (800336c <UART_AdvFeatureConfig+0x154>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	0019      	movs	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	2220      	movs	r2, #32
 80032d0:	4013      	ands	r3, r2
 80032d2:	d00b      	beq.n	80032ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4a25      	ldr	r2, [pc, #148]	; (8003370 <UART_AdvFeatureConfig+0x158>)
 80032dc:	4013      	ands	r3, r2
 80032de:	0019      	movs	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	2240      	movs	r2, #64	; 0x40
 80032f2:	4013      	ands	r3, r2
 80032f4:	d01d      	beq.n	8003332 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <UART_AdvFeatureConfig+0x15c>)
 80032fe:	4013      	ands	r3, r2
 8003300:	0019      	movs	r1, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	035b      	lsls	r3, r3, #13
 8003316:	429a      	cmp	r2, r3
 8003318:	d10b      	bne.n	8003332 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a15      	ldr	r2, [pc, #84]	; (8003378 <UART_AdvFeatureConfig+0x160>)
 8003322:	4013      	ands	r3, r2
 8003324:	0019      	movs	r1, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	2280      	movs	r2, #128	; 0x80
 8003338:	4013      	ands	r3, r2
 800333a:	d00b      	beq.n	8003354 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <UART_AdvFeatureConfig+0x164>)
 8003344:	4013      	ands	r3, r2
 8003346:	0019      	movs	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]
  }
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}
 800335c:	fffdffff 	.word	0xfffdffff
 8003360:	fffeffff 	.word	0xfffeffff
 8003364:	fffbffff 	.word	0xfffbffff
 8003368:	ffff7fff 	.word	0xffff7fff
 800336c:	ffffefff 	.word	0xffffefff
 8003370:	ffffdfff 	.word	0xffffdfff
 8003374:	ffefffff 	.word	0xffefffff
 8003378:	ff9fffff 	.word	0xff9fffff
 800337c:	fff7ffff 	.word	0xfff7ffff

08003380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af02      	add	r7, sp, #8
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2290      	movs	r2, #144	; 0x90
 800338c:	2100      	movs	r1, #0
 800338e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003390:	f7fd fde0 	bl	8000f54 <HAL_GetTick>
 8003394:	0003      	movs	r3, r0
 8003396:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2208      	movs	r2, #8
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d10c      	bne.n	80033c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2280      	movs	r2, #128	; 0x80
 80033aa:	0391      	lsls	r1, r2, #14
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4a1a      	ldr	r2, [pc, #104]	; (8003418 <UART_CheckIdleState+0x98>)
 80033b0:	9200      	str	r2, [sp, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f000 f832 	bl	800341c <UART_WaitOnFlagUntilTimeout>
 80033b8:	1e03      	subs	r3, r0, #0
 80033ba:	d001      	beq.n	80033c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e026      	b.n	800340e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2204      	movs	r2, #4
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d10c      	bne.n	80033e8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2280      	movs	r2, #128	; 0x80
 80033d2:	03d1      	lsls	r1, r2, #15
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4a10      	ldr	r2, [pc, #64]	; (8003418 <UART_CheckIdleState+0x98>)
 80033d8:	9200      	str	r2, [sp, #0]
 80033da:	2200      	movs	r2, #0
 80033dc:	f000 f81e 	bl	800341c <UART_WaitOnFlagUntilTimeout>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d001      	beq.n	80033e8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e012      	b.n	800340e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2288      	movs	r2, #136	; 0x88
 80033ec:	2120      	movs	r1, #32
 80033ee:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	228c      	movs	r2, #140	; 0x8c
 80033f4:	2120      	movs	r1, #32
 80033f6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2284      	movs	r2, #132	; 0x84
 8003408:	2100      	movs	r1, #0
 800340a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b004      	add	sp, #16
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	01ffffff 	.word	0x01ffffff

0800341c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b094      	sub	sp, #80	; 0x50
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	1dfb      	adds	r3, r7, #7
 800342a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800342c:	e0a7      	b.n	800357e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003430:	3301      	adds	r3, #1
 8003432:	d100      	bne.n	8003436 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003434:	e0a3      	b.n	800357e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003436:	f7fd fd8d 	bl	8000f54 <HAL_GetTick>
 800343a:	0002      	movs	r2, r0
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <UART_WaitOnFlagUntilTimeout+0x30>
 8003446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003448:	2b00      	cmp	r3, #0
 800344a:	d13f      	bne.n	80034cc <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344c:	f3ef 8310 	mrs	r3, PRIMASK
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003454:	647b      	str	r3, [r7, #68]	; 0x44
 8003456:	2301      	movs	r3, #1
 8003458:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	f383 8810 	msr	PRIMASK, r3
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	494e      	ldr	r1, [pc, #312]	; (80035a8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800346e:	400a      	ands	r2, r1
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003474:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	f383 8810 	msr	PRIMASK, r3
}
 800347c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800347e:	f3ef 8310 	mrs	r3, PRIMASK
 8003482:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003486:	643b      	str	r3, [r7, #64]	; 0x40
 8003488:	2301      	movs	r3, #1
 800348a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	f383 8810 	msr	PRIMASK, r3
}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2101      	movs	r1, #1
 80034a0:	438a      	bics	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034aa:	f383 8810 	msr	PRIMASK, r3
}
 80034ae:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2288      	movs	r2, #136	; 0x88
 80034b4:	2120      	movs	r1, #32
 80034b6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	228c      	movs	r2, #140	; 0x8c
 80034bc:	2120      	movs	r1, #32
 80034be:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2284      	movs	r2, #132	; 0x84
 80034c4:	2100      	movs	r1, #0
 80034c6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e069      	b.n	80035a0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2204      	movs	r2, #4
 80034d4:	4013      	ands	r3, r2
 80034d6:	d052      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69da      	ldr	r2, [r3, #28]
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	401a      	ands	r2, r3
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d148      	bne.n	800357e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2280      	movs	r2, #128	; 0x80
 80034f2:	0112      	lsls	r2, r2, #4
 80034f4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f6:	f3ef 8310 	mrs	r3, PRIMASK
 80034fa:	613b      	str	r3, [r7, #16]
  return(result);
 80034fc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003500:	2301      	movs	r3, #1
 8003502:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f383 8810 	msr	PRIMASK, r3
}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4924      	ldr	r1, [pc, #144]	; (80035a8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003518:	400a      	ands	r2, r1
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	f383 8810 	msr	PRIMASK, r3
}
 8003526:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003528:	f3ef 8310 	mrs	r3, PRIMASK
 800352c:	61fb      	str	r3, [r7, #28]
  return(result);
 800352e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003530:	64bb      	str	r3, [r7, #72]	; 0x48
 8003532:	2301      	movs	r3, #1
 8003534:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2101      	movs	r1, #1
 800354a:	438a      	bics	r2, r1
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	f383 8810 	msr	PRIMASK, r3
}
 8003558:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2288      	movs	r2, #136	; 0x88
 800355e:	2120      	movs	r1, #32
 8003560:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	228c      	movs	r2, #140	; 0x8c
 8003566:	2120      	movs	r1, #32
 8003568:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2290      	movs	r2, #144	; 0x90
 800356e:	2120      	movs	r1, #32
 8003570:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2284      	movs	r2, #132	; 0x84
 8003576:	2100      	movs	r1, #0
 8003578:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e010      	b.n	80035a0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	425a      	negs	r2, r3
 800358e:	4153      	adcs	r3, r2
 8003590:	b2db      	uxtb	r3, r3
 8003592:	001a      	movs	r2, r3
 8003594:	1dfb      	adds	r3, r7, #7
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d100      	bne.n	800359e <UART_WaitOnFlagUntilTimeout+0x182>
 800359c:	e747      	b.n	800342e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	0018      	movs	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b014      	add	sp, #80	; 0x50
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	fffffe5f 	.word	0xfffffe5f

080035ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2284      	movs	r2, #132	; 0x84
 80035b8:	5c9b      	ldrb	r3, [r3, r2]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80035be:	2302      	movs	r3, #2
 80035c0:	e027      	b.n	8003612 <HAL_UARTEx_DisableFifoMode+0x66>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2284      	movs	r2, #132	; 0x84
 80035c6:	2101      	movs	r1, #1
 80035c8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2288      	movs	r2, #136	; 0x88
 80035ce:	2124      	movs	r1, #36	; 0x24
 80035d0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2101      	movs	r1, #1
 80035e6:	438a      	bics	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a0b      	ldr	r2, [pc, #44]	; (800361c <HAL_UARTEx_DisableFifoMode+0x70>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2288      	movs	r2, #136	; 0x88
 8003604:	2120      	movs	r1, #32
 8003606:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2284      	movs	r2, #132	; 0x84
 800360c:	2100      	movs	r1, #0
 800360e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	0018      	movs	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	b004      	add	sp, #16
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	dfffffff 	.word	0xdfffffff

08003620 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2284      	movs	r2, #132	; 0x84
 800362e:	5c9b      	ldrb	r3, [r3, r2]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003634:	2302      	movs	r3, #2
 8003636:	e02e      	b.n	8003696 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2284      	movs	r2, #132	; 0x84
 800363c:	2101      	movs	r1, #1
 800363e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2288      	movs	r2, #136	; 0x88
 8003644:	2124      	movs	r1, #36	; 0x24
 8003646:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2101      	movs	r1, #1
 800365c:	438a      	bics	r2, r1
 800365e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	08d9      	lsrs	r1, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	0018      	movs	r0, r3
 8003678:	f000 f854 	bl	8003724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2288      	movs	r2, #136	; 0x88
 8003688:	2120      	movs	r1, #32
 800368a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2284      	movs	r2, #132	; 0x84
 8003690:	2100      	movs	r1, #0
 8003692:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	0018      	movs	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	b004      	add	sp, #16
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2284      	movs	r2, #132	; 0x84
 80036ae:	5c9b      	ldrb	r3, [r3, r2]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e02f      	b.n	8003718 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2284      	movs	r2, #132	; 0x84
 80036bc:	2101      	movs	r1, #1
 80036be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2288      	movs	r2, #136	; 0x88
 80036c4:	2124      	movs	r1, #36	; 0x24
 80036c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2101      	movs	r1, #1
 80036dc:	438a      	bics	r2, r1
 80036de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	4a0e      	ldr	r2, [pc, #56]	; (8003720 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	0019      	movs	r1, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	0018      	movs	r0, r3
 80036fa:	f000 f813 	bl	8003724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2288      	movs	r2, #136	; 0x88
 800370a:	2120      	movs	r1, #32
 800370c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2284      	movs	r2, #132	; 0x84
 8003712:	2100      	movs	r1, #0
 8003714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	b004      	add	sp, #16
 800371e:	bd80      	pop	{r7, pc}
 8003720:	f1ffffff 	.word	0xf1ffffff

08003724 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003730:	2b00      	cmp	r3, #0
 8003732:	d108      	bne.n	8003746 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	226a      	movs	r2, #106	; 0x6a
 8003738:	2101      	movs	r1, #1
 800373a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2268      	movs	r2, #104	; 0x68
 8003740:	2101      	movs	r1, #1
 8003742:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003744:	e043      	b.n	80037ce <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003746:	260f      	movs	r6, #15
 8003748:	19bb      	adds	r3, r7, r6
 800374a:	2208      	movs	r2, #8
 800374c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800374e:	200e      	movs	r0, #14
 8003750:	183b      	adds	r3, r7, r0
 8003752:	2208      	movs	r2, #8
 8003754:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	0e5b      	lsrs	r3, r3, #25
 800375e:	b2da      	uxtb	r2, r3
 8003760:	240d      	movs	r4, #13
 8003762:	193b      	adds	r3, r7, r4
 8003764:	2107      	movs	r1, #7
 8003766:	400a      	ands	r2, r1
 8003768:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	0f5b      	lsrs	r3, r3, #29
 8003772:	b2da      	uxtb	r2, r3
 8003774:	250c      	movs	r5, #12
 8003776:	197b      	adds	r3, r7, r5
 8003778:	2107      	movs	r1, #7
 800377a:	400a      	ands	r2, r1
 800377c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800377e:	183b      	adds	r3, r7, r0
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	197a      	adds	r2, r7, r5
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	4914      	ldr	r1, [pc, #80]	; (80037d8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003788:	5c8a      	ldrb	r2, [r1, r2]
 800378a:	435a      	muls	r2, r3
 800378c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800378e:	197b      	adds	r3, r7, r5
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	4a12      	ldr	r2, [pc, #72]	; (80037dc <UARTEx_SetNbDataToProcess+0xb8>)
 8003794:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003796:	0019      	movs	r1, r3
 8003798:	f7fc fd3c 	bl	8000214 <__divsi3>
 800379c:	0003      	movs	r3, r0
 800379e:	b299      	uxth	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	226a      	movs	r2, #106	; 0x6a
 80037a4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037a6:	19bb      	adds	r3, r7, r6
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	193a      	adds	r2, r7, r4
 80037ac:	7812      	ldrb	r2, [r2, #0]
 80037ae:	490a      	ldr	r1, [pc, #40]	; (80037d8 <UARTEx_SetNbDataToProcess+0xb4>)
 80037b0:	5c8a      	ldrb	r2, [r1, r2]
 80037b2:	435a      	muls	r2, r3
 80037b4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80037b6:	193b      	adds	r3, r7, r4
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	4a08      	ldr	r2, [pc, #32]	; (80037dc <UARTEx_SetNbDataToProcess+0xb8>)
 80037bc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037be:	0019      	movs	r1, r3
 80037c0:	f7fc fd28 	bl	8000214 <__divsi3>
 80037c4:	0003      	movs	r3, r0
 80037c6:	b299      	uxth	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2268      	movs	r2, #104	; 0x68
 80037cc:	5299      	strh	r1, [r3, r2]
}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b005      	add	sp, #20
 80037d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	080038c8 	.word	0x080038c8
 80037dc:	080038d0 	.word	0x080038d0

080037e0 <__libc_init_array>:
 80037e0:	b570      	push	{r4, r5, r6, lr}
 80037e2:	2600      	movs	r6, #0
 80037e4:	4d0c      	ldr	r5, [pc, #48]	; (8003818 <__libc_init_array+0x38>)
 80037e6:	4c0d      	ldr	r4, [pc, #52]	; (800381c <__libc_init_array+0x3c>)
 80037e8:	1b64      	subs	r4, r4, r5
 80037ea:	10a4      	asrs	r4, r4, #2
 80037ec:	42a6      	cmp	r6, r4
 80037ee:	d109      	bne.n	8003804 <__libc_init_array+0x24>
 80037f0:	2600      	movs	r6, #0
 80037f2:	f000 f821 	bl	8003838 <_init>
 80037f6:	4d0a      	ldr	r5, [pc, #40]	; (8003820 <__libc_init_array+0x40>)
 80037f8:	4c0a      	ldr	r4, [pc, #40]	; (8003824 <__libc_init_array+0x44>)
 80037fa:	1b64      	subs	r4, r4, r5
 80037fc:	10a4      	asrs	r4, r4, #2
 80037fe:	42a6      	cmp	r6, r4
 8003800:	d105      	bne.n	800380e <__libc_init_array+0x2e>
 8003802:	bd70      	pop	{r4, r5, r6, pc}
 8003804:	00b3      	lsls	r3, r6, #2
 8003806:	58eb      	ldr	r3, [r5, r3]
 8003808:	4798      	blx	r3
 800380a:	3601      	adds	r6, #1
 800380c:	e7ee      	b.n	80037ec <__libc_init_array+0xc>
 800380e:	00b3      	lsls	r3, r6, #2
 8003810:	58eb      	ldr	r3, [r5, r3]
 8003812:	4798      	blx	r3
 8003814:	3601      	adds	r6, #1
 8003816:	e7f2      	b.n	80037fe <__libc_init_array+0x1e>
 8003818:	080038e0 	.word	0x080038e0
 800381c:	080038e0 	.word	0x080038e0
 8003820:	080038e0 	.word	0x080038e0
 8003824:	080038e4 	.word	0x080038e4

08003828 <memset>:
 8003828:	0003      	movs	r3, r0
 800382a:	1882      	adds	r2, r0, r2
 800382c:	4293      	cmp	r3, r2
 800382e:	d100      	bne.n	8003832 <memset+0xa>
 8003830:	4770      	bx	lr
 8003832:	7019      	strb	r1, [r3, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	e7f9      	b.n	800382c <memset+0x4>

08003838 <_init>:
 8003838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383e:	bc08      	pop	{r3}
 8003840:	469e      	mov	lr, r3
 8003842:	4770      	bx	lr

08003844 <_fini>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr
