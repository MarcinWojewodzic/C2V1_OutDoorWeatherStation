
C2V1_OutDoorWeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a28  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005ae0  08005ae0  00015ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b6c  08005b6c  000204ac  2**0
                  CONTENTS
  4 .ARM          00000008  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b74  08005b74  000204ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005b74  08005b74  00015b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b7c  08005b7c  00015b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004ac  20000000  08005b80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  200004ac  0800602c  000204ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  20000808  0800602c  00020808  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000204ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a199  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c17  00000000  00000000  0003a66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0003e288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001488  00000000  00000000  0003f8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014701  00000000  00000000  00040d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006d5c  00000000  00000000  00055451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0005c1ad  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005070  00000000  00000000  0005c200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200004ac 	.word	0x200004ac
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005ac8 	.word	0x08005ac8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200004b0 	.word	0x200004b0
 80000fc:	08005ac8 	.word	0x08005ac8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_uldivmod>:
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d111      	bne.n	8000414 <__aeabi_uldivmod+0x28>
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	d10f      	bne.n	8000414 <__aeabi_uldivmod+0x28>
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d100      	bne.n	80003fa <__aeabi_uldivmod+0xe>
 80003f8:	2800      	cmp	r0, #0
 80003fa:	d002      	beq.n	8000402 <__aeabi_uldivmod+0x16>
 80003fc:	2100      	movs	r1, #0
 80003fe:	43c9      	mvns	r1, r1
 8000400:	0008      	movs	r0, r1
 8000402:	b407      	push	{r0, r1, r2}
 8000404:	4802      	ldr	r0, [pc, #8]	; (8000410 <__aeabi_uldivmod+0x24>)
 8000406:	a102      	add	r1, pc, #8	; (adr r1, 8000410 <__aeabi_uldivmod+0x24>)
 8000408:	1840      	adds	r0, r0, r1
 800040a:	9002      	str	r0, [sp, #8]
 800040c:	bd03      	pop	{r0, r1, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	ffffffd9 	.word	0xffffffd9
 8000414:	b403      	push	{r0, r1}
 8000416:	4668      	mov	r0, sp
 8000418:	b501      	push	{r0, lr}
 800041a:	9802      	ldr	r0, [sp, #8]
 800041c:	f000 f806 	bl	800042c <__udivmoddi4>
 8000420:	9b01      	ldr	r3, [sp, #4]
 8000422:	469e      	mov	lr, r3
 8000424:	b002      	add	sp, #8
 8000426:	bc0c      	pop	{r2, r3}
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__udivmoddi4>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	4657      	mov	r7, sl
 8000430:	464e      	mov	r6, r9
 8000432:	4645      	mov	r5, r8
 8000434:	46de      	mov	lr, fp
 8000436:	b5e0      	push	{r5, r6, r7, lr}
 8000438:	0004      	movs	r4, r0
 800043a:	000d      	movs	r5, r1
 800043c:	4692      	mov	sl, r2
 800043e:	4699      	mov	r9, r3
 8000440:	b083      	sub	sp, #12
 8000442:	428b      	cmp	r3, r1
 8000444:	d830      	bhi.n	80004a8 <__udivmoddi4+0x7c>
 8000446:	d02d      	beq.n	80004a4 <__udivmoddi4+0x78>
 8000448:	4649      	mov	r1, r9
 800044a:	4650      	mov	r0, sl
 800044c:	f000 f8d8 	bl	8000600 <__clzdi2>
 8000450:	0029      	movs	r1, r5
 8000452:	0006      	movs	r6, r0
 8000454:	0020      	movs	r0, r4
 8000456:	f000 f8d3 	bl	8000600 <__clzdi2>
 800045a:	1a33      	subs	r3, r6, r0
 800045c:	4698      	mov	r8, r3
 800045e:	3b20      	subs	r3, #32
 8000460:	469b      	mov	fp, r3
 8000462:	d433      	bmi.n	80004cc <__udivmoddi4+0xa0>
 8000464:	465a      	mov	r2, fp
 8000466:	4653      	mov	r3, sl
 8000468:	4093      	lsls	r3, r2
 800046a:	4642      	mov	r2, r8
 800046c:	001f      	movs	r7, r3
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001e      	movs	r6, r3
 8000474:	42af      	cmp	r7, r5
 8000476:	d83a      	bhi.n	80004ee <__udivmoddi4+0xc2>
 8000478:	42af      	cmp	r7, r5
 800047a:	d100      	bne.n	800047e <__udivmoddi4+0x52>
 800047c:	e078      	b.n	8000570 <__udivmoddi4+0x144>
 800047e:	465b      	mov	r3, fp
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5e>
 8000488:	e075      	b.n	8000576 <__udivmoddi4+0x14a>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	465a      	mov	r2, fp
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4642      	mov	r2, r8
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e028      	b.n	80004f6 <__udivmoddi4+0xca>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9cf      	bls.n	8000448 <__udivmoddi4+0x1c>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8e>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b003      	add	sp, #12
 80004c0:	bcf0      	pop	{r4, r5, r6, r7}
 80004c2:	46bb      	mov	fp, r7
 80004c4:	46b2      	mov	sl, r6
 80004c6:	46a9      	mov	r9, r5
 80004c8:	46a0      	mov	r8, r4
 80004ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004cc:	4642      	mov	r2, r8
 80004ce:	2320      	movs	r3, #32
 80004d0:	1a9b      	subs	r3, r3, r2
 80004d2:	4652      	mov	r2, sl
 80004d4:	40da      	lsrs	r2, r3
 80004d6:	4641      	mov	r1, r8
 80004d8:	0013      	movs	r3, r2
 80004da:	464a      	mov	r2, r9
 80004dc:	408a      	lsls	r2, r1
 80004de:	0017      	movs	r7, r2
 80004e0:	4642      	mov	r2, r8
 80004e2:	431f      	orrs	r7, r3
 80004e4:	4653      	mov	r3, sl
 80004e6:	4093      	lsls	r3, r2
 80004e8:	001e      	movs	r6, r3
 80004ea:	42af      	cmp	r7, r5
 80004ec:	d9c4      	bls.n	8000478 <__udivmoddi4+0x4c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	4643      	mov	r3, r8
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0d9      	beq.n	80004b0 <__udivmoddi4+0x84>
 80004fc:	07fb      	lsls	r3, r7, #31
 80004fe:	0872      	lsrs	r2, r6, #1
 8000500:	431a      	orrs	r2, r3
 8000502:	4646      	mov	r6, r8
 8000504:	087b      	lsrs	r3, r7, #1
 8000506:	e00e      	b.n	8000526 <__udivmoddi4+0xfa>
 8000508:	42ab      	cmp	r3, r5
 800050a:	d101      	bne.n	8000510 <__udivmoddi4+0xe4>
 800050c:	42a2      	cmp	r2, r4
 800050e:	d80c      	bhi.n	800052a <__udivmoddi4+0xfe>
 8000510:	1aa4      	subs	r4, r4, r2
 8000512:	419d      	sbcs	r5, r3
 8000514:	2001      	movs	r0, #1
 8000516:	1924      	adds	r4, r4, r4
 8000518:	416d      	adcs	r5, r5
 800051a:	2100      	movs	r1, #0
 800051c:	3e01      	subs	r6, #1
 800051e:	1824      	adds	r4, r4, r0
 8000520:	414d      	adcs	r5, r1
 8000522:	2e00      	cmp	r6, #0
 8000524:	d006      	beq.n	8000534 <__udivmoddi4+0x108>
 8000526:	42ab      	cmp	r3, r5
 8000528:	d9ee      	bls.n	8000508 <__udivmoddi4+0xdc>
 800052a:	3e01      	subs	r6, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2e00      	cmp	r6, #0
 8000532:	d1f8      	bne.n	8000526 <__udivmoddi4+0xfa>
 8000534:	9800      	ldr	r0, [sp, #0]
 8000536:	9901      	ldr	r1, [sp, #4]
 8000538:	465b      	mov	r3, fp
 800053a:	1900      	adds	r0, r0, r4
 800053c:	4169      	adcs	r1, r5
 800053e:	2b00      	cmp	r3, #0
 8000540:	db24      	blt.n	800058c <__udivmoddi4+0x160>
 8000542:	002b      	movs	r3, r5
 8000544:	465a      	mov	r2, fp
 8000546:	4644      	mov	r4, r8
 8000548:	40d3      	lsrs	r3, r2
 800054a:	002a      	movs	r2, r5
 800054c:	40e2      	lsrs	r2, r4
 800054e:	001c      	movs	r4, r3
 8000550:	465b      	mov	r3, fp
 8000552:	0015      	movs	r5, r2
 8000554:	2b00      	cmp	r3, #0
 8000556:	db2a      	blt.n	80005ae <__udivmoddi4+0x182>
 8000558:	0026      	movs	r6, r4
 800055a:	409e      	lsls	r6, r3
 800055c:	0033      	movs	r3, r6
 800055e:	0026      	movs	r6, r4
 8000560:	4647      	mov	r7, r8
 8000562:	40be      	lsls	r6, r7
 8000564:	0032      	movs	r2, r6
 8000566:	1a80      	subs	r0, r0, r2
 8000568:	4199      	sbcs	r1, r3
 800056a:	9000      	str	r0, [sp, #0]
 800056c:	9101      	str	r1, [sp, #4]
 800056e:	e79f      	b.n	80004b0 <__udivmoddi4+0x84>
 8000570:	42a3      	cmp	r3, r4
 8000572:	d8bc      	bhi.n	80004ee <__udivmoddi4+0xc2>
 8000574:	e783      	b.n	800047e <__udivmoddi4+0x52>
 8000576:	4642      	mov	r2, r8
 8000578:	2320      	movs	r3, #32
 800057a:	2100      	movs	r1, #0
 800057c:	1a9b      	subs	r3, r3, r2
 800057e:	2200      	movs	r2, #0
 8000580:	9100      	str	r1, [sp, #0]
 8000582:	9201      	str	r2, [sp, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	40da      	lsrs	r2, r3
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	e786      	b.n	800049a <__udivmoddi4+0x6e>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	002a      	movs	r2, r5
 8000594:	4646      	mov	r6, r8
 8000596:	409a      	lsls	r2, r3
 8000598:	0023      	movs	r3, r4
 800059a:	40f3      	lsrs	r3, r6
 800059c:	4644      	mov	r4, r8
 800059e:	4313      	orrs	r3, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	40e2      	lsrs	r2, r4
 80005a4:	001c      	movs	r4, r3
 80005a6:	465b      	mov	r3, fp
 80005a8:	0015      	movs	r5, r2
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	dad4      	bge.n	8000558 <__udivmoddi4+0x12c>
 80005ae:	4642      	mov	r2, r8
 80005b0:	002f      	movs	r7, r5
 80005b2:	2320      	movs	r3, #32
 80005b4:	0026      	movs	r6, r4
 80005b6:	4097      	lsls	r7, r2
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	40de      	lsrs	r6, r3
 80005bc:	003b      	movs	r3, r7
 80005be:	4333      	orrs	r3, r6
 80005c0:	e7cd      	b.n	800055e <__udivmoddi4+0x132>
 80005c2:	46c0      	nop			; (mov r8, r8)

080005c4 <__clzsi2>:
 80005c4:	211c      	movs	r1, #28
 80005c6:	2301      	movs	r3, #1
 80005c8:	041b      	lsls	r3, r3, #16
 80005ca:	4298      	cmp	r0, r3
 80005cc:	d301      	bcc.n	80005d2 <__clzsi2+0xe>
 80005ce:	0c00      	lsrs	r0, r0, #16
 80005d0:	3910      	subs	r1, #16
 80005d2:	0a1b      	lsrs	r3, r3, #8
 80005d4:	4298      	cmp	r0, r3
 80005d6:	d301      	bcc.n	80005dc <__clzsi2+0x18>
 80005d8:	0a00      	lsrs	r0, r0, #8
 80005da:	3908      	subs	r1, #8
 80005dc:	091b      	lsrs	r3, r3, #4
 80005de:	4298      	cmp	r0, r3
 80005e0:	d301      	bcc.n	80005e6 <__clzsi2+0x22>
 80005e2:	0900      	lsrs	r0, r0, #4
 80005e4:	3904      	subs	r1, #4
 80005e6:	a202      	add	r2, pc, #8	; (adr r2, 80005f0 <__clzsi2+0x2c>)
 80005e8:	5c10      	ldrb	r0, [r2, r0]
 80005ea:	1840      	adds	r0, r0, r1
 80005ec:	4770      	bx	lr
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	02020304 	.word	0x02020304
 80005f4:	01010101 	.word	0x01010101
	...

08000600 <__clzdi2>:
 8000600:	b510      	push	{r4, lr}
 8000602:	2900      	cmp	r1, #0
 8000604:	d103      	bne.n	800060e <__clzdi2+0xe>
 8000606:	f7ff ffdd 	bl	80005c4 <__clzsi2>
 800060a:	3020      	adds	r0, #32
 800060c:	e002      	b.n	8000614 <__clzdi2+0x14>
 800060e:	0008      	movs	r0, r1
 8000610:	f7ff ffd8 	bl	80005c4 <__clzsi2>
 8000614:	bd10      	pop	{r4, pc}
 8000616:	46c0      	nop			; (mov r8, r8)

08000618 <HC12_ExitCommandMode>:
void HC12_EnterCommandMode(void)
{
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 0);
}
void HC12_ExitCommandMode(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 1);
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	0119      	lsls	r1, r3, #4
 8000620:	23a0      	movs	r3, #160	; 0xa0
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	2201      	movs	r2, #1
 8000626:	0018      	movs	r0, r3
 8000628:	f002 fbdc 	bl	8002de4 <HAL_GPIO_WritePin>
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <HC12_TransmitData>:
void HC12_TransmitData(uint8_t *Data, uint32_t Length)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	b29a      	uxth	r2, r3
 8000642:	23fa      	movs	r3, #250	; 0xfa
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <HC12_TransmitData+0x24>)
 800064a:	f003 fd5b 	bl	8004104 <HAL_UART_Transmit>
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	20000710 	.word	0x20000710

0800065c <HC12_ReciveToIdleDMA>:
void HC12_ReciveToIdleDMA(uint8_t *Data, uint32_t Length)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	b29a      	uxth	r2, r3
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <HC12_ReciveToIdleDMA+0x20>)
 800066e:	0018      	movs	r0, r3
 8000670:	f005 f8cc 	bl	800580c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b002      	add	sp, #8
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000710 	.word	0x20000710

08000680 <MAX_Init>:
   {
      MAXFunction[MAX->State].MAXFunction();
   }
}
void MAX_Init(MAX_TypeDef *RadioProtocol, MAXDeviceID_TypeDef Device)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	000a      	movs	r2, r1
 800068a:	1cfb      	adds	r3, r7, #3
 800068c:	701a      	strb	r2, [r3, #0]
   MAX             = RadioProtocol;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MAX_Init+0x6c>)
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	601a      	str	r2, [r3, #0]
   MAX->Initialize = MAX_INITIALIZE;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MAX_Init+0x6c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2201      	movs	r2, #1
 800069a:	70da      	strb	r2, [r3, #3]
   MAX->DeviceType = Device;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MAX_Init+0x6c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	1cfa      	adds	r2, r7, #3
 80006a2:	7812      	ldrb	r2, [r2, #0]
 80006a4:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < MAX_COMMAND_CNT; i++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e007      	b.n	80006bc <MAX_Init+0x3c>
   {
      MAXCommandFunction[i].MAXCommandFunction = NULL;
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MAX_Init+0x70>)
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	0092      	lsls	r2, r2, #2
 80006b2:	2100      	movs	r1, #0
 80006b4:	50d1      	str	r1, [r2, r3]
   for(int i = 0; i < MAX_COMMAND_CNT; i++)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	ddf4      	ble.n	80006ac <MAX_Init+0x2c>
   }
   for(int i = 0; i < MAX_MESSAGE_CNT; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	e007      	b.n	80006d8 <MAX_Init+0x58>
   {
      MAXMessageFunction[i].MAXMessageFunction = NULL;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MAX_Init+0x74>)
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	0092      	lsls	r2, r2, #2
 80006ce:	2100      	movs	r1, #0
 80006d0:	50d1      	str	r1, [r2, r3]
   for(int i = 0; i < MAX_MESSAGE_CNT; i++)
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	ddf4      	ble.n	80006c8 <MAX_Init+0x48>
   }
   MAXDataFunctions.MAXDataFunction = NULL;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MAX_Init+0x78>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b004      	add	sp, #16
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200004c8 	.word	0x200004c8
 80006f0:	200004cc 	.word	0x200004cc
 80006f4:	200004dc 	.word	0x200004dc
 80006f8:	200004d8 	.word	0x200004d8

080006fc <SM_Handle>:
SMTransitionTable_TypeDef SmTransitionTable[] = { { SM_STATE_INITIALIZE, SM_STATE_RUNNING, SM_EVENT_END_INITIALIZE },
                                                  { SM_STATE_RUNNING, SM_STATE_SLEEP, SM_EVENT_END_RUNNING },
                                                  { SM_STATE_SLEEP, SM_STATE_RUNNING, SM_EVENT_END_SLEEP } };
SMFunctions_TypeDef SmFunctions[]             = { { SM_InitializeFunction }, { SM_RunningFunction }, { SM_SleepFunction } };
void SM_Handle(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
   if(Rfp.Initialize == RFP_INITIALIZE)
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <SM_Handle+0x58>)
 8000702:	78db      	ldrb	r3, [r3, #3]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d101      	bne.n	800070c <SM_Handle+0x10>
   {
      RFP_Handle();
 8000708:	f000 fcb4 	bl	8001074 <RFP_Handle>
   }
   if(HAL_GetTick() - Sm.LastTick > 1000)
 800070c:	f001 f982 	bl	8001a14 <HAL_GetTick>
 8000710:	0002      	movs	r2, r0
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SM_Handle+0x5c>)
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	1ad2      	subs	r2, r2, r3
 8000718:	23fa      	movs	r3, #250	; 0xfa
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	429a      	cmp	r2, r3
 800071e:	d915      	bls.n	800074c <SM_Handle+0x50>
   {
      Sm.LastTick = HAL_GetTick();
 8000720:	f001 f978 	bl	8001a14 <HAL_GetTick>
 8000724:	0002      	movs	r2, r0
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <SM_Handle+0x5c>)
 8000728:	611a      	str	r2, [r3, #16]
      SM_ChangeState();
 800072a:	f000 f819 	bl	8000760 <SM_ChangeState>
      if(SmFunctions[Sm.State].SmFunction != NULL)
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <SM_Handle+0x5c>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	001a      	movs	r2, r3
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <SM_Handle+0x60>)
 8000736:	0092      	lsls	r2, r2, #2
 8000738:	58d3      	ldr	r3, [r2, r3]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d006      	beq.n	800074c <SM_Handle+0x50>
      {
         SmFunctions[Sm.State].SmFunction();
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <SM_Handle+0x5c>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	001a      	movs	r2, r3
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <SM_Handle+0x60>)
 8000746:	0092      	lsls	r2, r2, #2
 8000748:	58d3      	ldr	r3, [r2, r3]
 800074a:	4798      	blx	r3
      }
   }
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	2000050c 	.word	0x2000050c
 8000758:	200004ec 	.word	0x200004ec
 800075c:	2000000c 	.word	0x2000000c

08000760 <SM_ChangeState>:
static void SM_ChangeState(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
   for(int i = 0; i < SM_TRANSITION_TABLE_SIZE; i++)
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	e022      	b.n	80007b2 <SM_ChangeState+0x52>
   {
      if(Sm.State == SmTransitionTable[i].Source && Sm.NewEvent == SmTransitionTable[i].Event)
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <SM_ChangeState+0x68>)
 800076e:	7819      	ldrb	r1, [r3, #0]
 8000770:	4816      	ldr	r0, [pc, #88]	; (80007cc <SM_ChangeState+0x6c>)
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	0013      	movs	r3, r2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	189b      	adds	r3, r3, r2
 800077a:	5c1b      	ldrb	r3, [r3, r0]
 800077c:	4299      	cmp	r1, r3
 800077e:	d115      	bne.n	80007ac <SM_ChangeState+0x4c>
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <SM_ChangeState+0x68>)
 8000782:	7859      	ldrb	r1, [r3, #1]
 8000784:	4811      	ldr	r0, [pc, #68]	; (80007cc <SM_ChangeState+0x6c>)
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	0013      	movs	r3, r2
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	189b      	adds	r3, r3, r2
 800078e:	18c3      	adds	r3, r0, r3
 8000790:	3302      	adds	r3, #2
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4299      	cmp	r1, r3
 8000796:	d109      	bne.n	80007ac <SM_ChangeState+0x4c>
      {
         Sm.State = SmTransitionTable[i].Destination;
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <SM_ChangeState+0x6c>)
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	0013      	movs	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	189b      	adds	r3, r3, r2
 80007a2:	18cb      	adds	r3, r1, r3
 80007a4:	3301      	adds	r3, #1
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <SM_ChangeState+0x68>)
 80007aa:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < SM_TRANSITION_TABLE_SIZE; i++)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3301      	adds	r3, #1
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d9d9      	bls.n	800076c <SM_ChangeState+0xc>
      }
   }
   Sm.NewEvent = SM_EVENT_NOTHING;
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <SM_ChangeState+0x68>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	705a      	strb	r2, [r3, #1]
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b002      	add	sp, #8
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	200004ec 	.word	0x200004ec
 80007cc:	20000000 	.word	0x20000000

080007d0 <SM_InitializeFunction>:
static void SM_InitializeFunction(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
   // Sm.Bs       = DATA_GetBsPtr();
   Sm.Sw  = &Sw;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <SM_InitializeFunction+0x50>)
 80007d6:	4a13      	ldr	r2, [pc, #76]	; (8000824 <SM_InitializeFunction+0x54>)
 80007d8:	609a      	str	r2, [r3, #8]
   Sm.Rfp = &Rfp;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <SM_InitializeFunction+0x50>)
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <SM_InitializeFunction+0x58>)
 80007de:	60da      	str	r2, [r3, #12]
   SW_Init(&Sw);
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <SM_InitializeFunction+0x54>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 f918 	bl	8000a18 <SW_Init>
   RFP_Init(&Rfp, RFP_ODWS);
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <SM_InitializeFunction+0x58>)
 80007ea:	2102      	movs	r1, #2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fc5d 	bl	80010ac <RFP_Init>
   MAX_Init(&MAX, MAX_ODWS);
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <SM_InitializeFunction+0x5c>)
 80007f4:	2102      	movs	r1, #2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff ff42 	bl	8000680 <MAX_Init>
   RFP_RegisterCommandFunction(RFP_TEST, SM_CommadTestFunction);
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <SM_InitializeFunction+0x60>)
 80007fe:	0019      	movs	r1, r3
 8000800:	2001      	movs	r0, #1
 8000802:	f000 fcd1 	bl	80011a8 <RFP_RegisterCommandFunction>
   Sw.NewEvent = SW_EVENT_NOTHING;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <SM_InitializeFunction+0x54>)
 8000808:	2201      	movs	r2, #1
 800080a:	705a      	strb	r2, [r3, #1]
   Sw.State    = SW_STATE_INITIALIZE;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <SM_InitializeFunction+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
   Sm.NewEvent = SM_EVENT_END_INITIALIZE;
 8000812:	4b03      	ldr	r3, [pc, #12]	; (8000820 <SM_InitializeFunction+0x50>)
 8000814:	2201      	movs	r2, #1
 8000816:	705a      	strb	r2, [r3, #1]
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	200004ec 	.word	0x200004ec
 8000824:	20000500 	.word	0x20000500
 8000828:	2000050c 	.word	0x2000050c
 800082c:	20000524 	.word	0x20000524
 8000830:	08000861 	.word	0x08000861

08000834 <SM_RunningFunction>:
static void SM_RunningFunction(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
   Switch_Handle();
 8000838:	f000 f83e 	bl	80008b8 <Switch_Handle>
   Sm.NewEvent = SM_EVENT_END_RUNNING;
 800083c:	4b02      	ldr	r3, [pc, #8]	; (8000848 <SM_RunningFunction+0x14>)
 800083e:	2202      	movs	r2, #2
 8000840:	705a      	strb	r2, [r3, #1]
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200004ec 	.word	0x200004ec

0800084c <SM_SleepFunction>:
static void SM_SleepFunction(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
   Sm.NewEvent = SM_EVENT_END_SLEEP;
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <SM_SleepFunction+0x10>)
 8000852:	2203      	movs	r2, #3
 8000854:	705a      	strb	r2, [r3, #1]
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200004ec 	.word	0x200004ec

08000860 <SM_CommadTestFunction>:
void SM_CommadTestFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
   HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <SM_CommadTestFunction+0x20>)
 800086e:	2201      	movs	r2, #1
 8000870:	2102      	movs	r1, #2
 8000872:	0018      	movs	r0, r3
 8000874:	f002 fab6 	bl	8002de4 <HAL_GPIO_WritePin>
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b004      	add	sp, #16
 800087e:	bd80      	pop	{r7, pc}
 8000880:	50000400 	.word	0x50000400

08000884 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	000a      	movs	r2, r1
 800088e:	1cbb      	adds	r3, r7, #2
 8000890:	801a      	strh	r2, [r3, #0]
   HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000892:	23a0      	movs	r3, #160	; 0xa0
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	2201      	movs	r2, #1
 8000898:	2140      	movs	r1, #64	; 0x40
 800089a:	0018      	movs	r0, r3
 800089c:	f002 faa2 	bl	8002de4 <HAL_GPIO_WritePin>
   Rfp.DataSize = Size;
 80008a0:	1cbb      	adds	r3, r7, #2
 80008a2:	881a      	ldrh	r2, [r3, #0]
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <HAL_UARTEx_RxEventCallback+0x30>)
 80008a6:	609a      	str	r2, [r3, #8]
   RFP_InterruptTask();
 80008a8:	f000 fc92 	bl	80011d0 <RFP_InterruptTask>
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000050c 	.word	0x2000050c

080008b8 <Switch_Handle>:
                                                  { SW_STATE_CONFIRM, SW_STATE_RELEASE, SW_EVENT_RELEASE },
                                                  { SW_STATE_RELEASE, SW_STATE_IDLE, SW_EVENT_NOTHING } };
SWFunctions_TypeDef SwFunctions[]             = { { SW_InitializeFunction }, { SW_IdleFunction },    { SW_DebounceFunction }, { SW_TickFunction },
                                                  { SW_PressFunction },      { SW_ConfirmFunction }, { SW_ReleaseFunction } };
void Switch_Handle(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
   SW_ChangeState();
 80008bc:	f000 f818 	bl	80008f0 <SW_ChangeState>
   if(SwFunctions[Sw->State].SwFunction != NULL)
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <Switch_Handle+0x30>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	001a      	movs	r2, r3
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <Switch_Handle+0x34>)
 80008ca:	0092      	lsls	r2, r2, #2
 80008cc:	58d3      	ldr	r3, [r2, r3]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d007      	beq.n	80008e2 <Switch_Handle+0x2a>
   {
      SwFunctions[Sw->State].SwFunction();
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <Switch_Handle+0x30>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	001a      	movs	r2, r3
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <Switch_Handle+0x34>)
 80008dc:	0092      	lsls	r2, r2, #2
 80008de:	58d3      	ldr	r3, [r2, r3]
 80008e0:	4798      	blx	r3
   }
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	2000053c 	.word	0x2000053c
 80008ec:	20000030 	.word	0x20000030

080008f0 <SW_ChangeState>:
static void SW_ChangeState(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
   for(int i = 0; i < SW_TRANSITION_TABLE_SIZE; i++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	e02a      	b.n	8000952 <SW_ChangeState+0x62>
   {
      if(Sw->State == SwTransitionTable[i].Source && Sw->NewEvent == SwTransitionTable[i].Event)
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <SW_ChangeState+0x78>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	7819      	ldrb	r1, [r3, #0]
 8000902:	481a      	ldr	r0, [pc, #104]	; (800096c <SW_ChangeState+0x7c>)
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	0013      	movs	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	189b      	adds	r3, r3, r2
 800090c:	5c1b      	ldrb	r3, [r3, r0]
 800090e:	4299      	cmp	r1, r3
 8000910:	d11c      	bne.n	800094c <SW_ChangeState+0x5c>
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <SW_ChangeState+0x78>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	7859      	ldrb	r1, [r3, #1]
 8000918:	4814      	ldr	r0, [pc, #80]	; (800096c <SW_ChangeState+0x7c>)
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	0013      	movs	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	189b      	adds	r3, r3, r2
 8000922:	18c3      	adds	r3, r0, r3
 8000924:	3302      	adds	r3, #2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4299      	cmp	r1, r3
 800092a:	d10f      	bne.n	800094c <SW_ChangeState+0x5c>
      {
         Sw->State = SwTransitionTable[i].Destination;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <SW_ChangeState+0x78>)
 800092e:	6819      	ldr	r1, [r3, #0]
 8000930:	480e      	ldr	r0, [pc, #56]	; (800096c <SW_ChangeState+0x7c>)
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	0013      	movs	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	189b      	adds	r3, r3, r2
 800093a:	18c3      	adds	r3, r0, r3
 800093c:	3301      	adds	r3, #1
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	700b      	strb	r3, [r1, #0]
         Sw->NewEvent = SW_EVENT_NOTHING;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <SW_ChangeState+0x78>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2201      	movs	r2, #1
 8000948:	705a      	strb	r2, [r3, #1]
         return;
 800094a:	e009      	b.n	8000960 <SW_ChangeState+0x70>
   for(int i = 0; i < SW_TRANSITION_TABLE_SIZE; i++)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3301      	adds	r3, #1
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b07      	cmp	r3, #7
 8000956:	d9d1      	bls.n	80008fc <SW_ChangeState+0xc>
      }
   }
   Sw->NewEvent = SW_EVENT_NOTHING;
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <SW_ChangeState+0x78>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2201      	movs	r2, #1
 800095e:	705a      	strb	r2, [r3, #1]
}
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	2000053c 	.word	0x2000053c
 800096c:	20000018 	.word	0x20000018

08000970 <SW_InitializeFunction>:
static void SW_InitializeFunction(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_END_INITIALIZE;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <SW_InitializeFunction+0x14>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2200      	movs	r2, #0
 800097a:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	2000053c 	.word	0x2000053c

08000988 <SW_IdleFunction>:
static void SW_IdleFunction(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_DEBOUNCE;
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <SW_IdleFunction+0x14>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2202      	movs	r2, #2
 8000992:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	2000053c 	.word	0x2000053c

080009a0 <SW_DebounceFunction>:
static void SW_DebounceFunction(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_PRESS;
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <SW_DebounceFunction+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2203      	movs	r2, #3
 80009aa:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	2000053c 	.word	0x2000053c

080009b8 <SW_TickFunction>:
static void SW_TickFunction(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_RELEASE;
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <SW_TickFunction+0x14>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2204      	movs	r2, #4
 80009c2:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	2000053c 	.word	0x2000053c

080009d0 <SW_PressFunction>:
static void SW_PressFunction(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_CONFIRM;
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <SW_PressFunction+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2205      	movs	r2, #5
 80009da:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	2000053c 	.word	0x2000053c

080009e8 <SW_ConfirmFunction>:
static void SW_ConfirmFunction(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
   Sw->NewEvent = SW_EVENT_RELEASE;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <SW_ConfirmFunction+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2204      	movs	r2, #4
 80009f2:	705a      	strb	r2, [r3, #1]
   //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	2000053c 	.word	0x2000053c

08000a00 <SW_ReleaseFunction>:
static void SW_ReleaseFunction(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
   //HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
   //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
   Sw->NewEvent = SW_EVENT_NOTHING;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <SW_ReleaseFunction+0x14>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	705a      	strb	r2, [r3, #1]
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	2000053c 	.word	0x2000053c

08000a18 <SW_Init>:
void SW_Init(SW_TypeDef *Switch)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
   Sw = Switch;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <SW_Init+0x18>)
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b002      	add	sp, #8
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	2000053c 	.word	0x2000053c

08000a34 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	230c      	movs	r3, #12
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f004 ffcc 	bl	80059e0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a48:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000a4a:	4a2e      	ldr	r2, [pc, #184]	; (8000b04 <MX_ADC1_Init+0xd0>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	05d2      	lsls	r2, r2, #23
 8000a54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a56:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a5c:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a62:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a68:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a6e:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000a80:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000a88:	2220      	movs	r2, #32
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a9a:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000a9c:	222c      	movs	r2, #44	; 0x2c
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000ab6:	223c      	movs	r2, #60	; 0x3c
 8000ab8:	2100      	movs	r1, #0
 8000aba:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f001 f8ad 	bl	8001c24 <HAL_ADC_Init>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000ace:	f000 facb 	bl	8001068 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <MX_ADC1_Init+0xd4>)
 8000ad6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae4:	1d3a      	adds	r2, r7, #4
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_ADC1_Init+0xcc>)
 8000ae8:	0011      	movs	r1, r2
 8000aea:	0018      	movs	r0, r3
 8000aec:	f001 fa42 	bl	8001f74 <HAL_ADC_ConfigChannel>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000af4:	f000 fab8 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b004      	add	sp, #16
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000540 	.word	0x20000540
 8000b04:	40012400 	.word	0x40012400
 8000b08:	20000100 	.word	0x20000100

08000b0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b08b      	sub	sp, #44	; 0x2c
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	2414      	movs	r4, #20
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	0018      	movs	r0, r3
 8000b1a:	2314      	movs	r3, #20
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f004 ff5e 	bl	80059e0 <memset>
  if(adcHandle->Instance==ADC1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_ADC_MspInit+0x7c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d128      	bne.n	8000b80 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0349      	lsls	r1, r1, #13
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	035b      	lsls	r3, r3, #13
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b50:	2102      	movs	r1, #2
 8000b52:	430a      	orrs	r2, r1
 8000b54:	635a      	str	r2, [r3, #52]	; 0x34
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_ADC_MspInit+0x84>)
 8000b78:	0019      	movs	r1, r3
 8000b7a:	0010      	movs	r0, r2
 8000b7c:	f001 ffce 	bl	8002b1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b00b      	add	sp, #44	; 0x2c
 8000b86:	bd90      	pop	{r4, r7, pc}
 8000b88:	40012400 	.word	0x40012400
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	50000400 	.word	0x50000400

08000b94 <Crc>:
 *      Author: M
 */
#include "crc.h"
#include "main.h"
uint32_t Crc(uint32_t PreviousCRC, uint32_t DataLength, uint8_t *data)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
   PreviousCRC ^= data[0];
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4053      	eors	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8000bac:	2301      	movs	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	e018      	b.n	8000be4 <Crc+0x50>
   {
      uint32_t temp = data[i];
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	613b      	str	r3, [r7, #16]
      PreviousCRC ^= ((uint32_t)temp * (256 * i));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4353      	muls	r3, r2
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	4053      	eors	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
      if(PreviousCRC & 0x80000000)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	da03      	bge.n	8000bd8 <Crc+0x44>
      {
         PreviousCRC ^= 0xABC245C2;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <Crc+0x64>)
 8000bd4:	4053      	eors	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
      }
      PreviousCRC <<= 1;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d3e2      	bcc.n	8000bb2 <Crc+0x1e>
   }
   return PreviousCRC;
 8000bec:	68fb      	ldr	r3, [r7, #12]
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b006      	add	sp, #24
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	abc245c2 	.word	0xabc245c2

08000bfc <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
   uint8_t temp = 1;
 8000c08:	2317      	movs	r3, #23
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < DataLength; i++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
 8000c14:	e03e      	b.n	8000c94 <RepareMessage+0x98>
   {
      for(int j = 0; j < 8; j++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
 8000c1a:	e035      	b.n	8000c88 <RepareMessage+0x8c>
      {
         data[i] ^= (temp << j);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	18d3      	adds	r3, r2, r3
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b25a      	sxtb	r2, r3
 8000c26:	2317      	movs	r3, #23
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	7819      	ldrb	r1, [r3, #0]
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	4099      	lsls	r1, r3
 8000c30:	000b      	movs	r3, r1
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	4053      	eors	r3, r2
 8000c36:	b259      	sxtb	r1, r3
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	18d3      	adds	r3, r2, r3
 8000c3e:	b2ca      	uxtb	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength, data))
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	2301      	movs	r3, #1
 8000c48:	425b      	negs	r3, r3
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f7ff ffa2 	bl	8000b94 <Crc>
 8000c50:	0002      	movs	r2, r0
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d101      	bne.n	8000c5c <RepareMessage+0x60>
         {
            return CRC_OK;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e020      	b.n	8000c9e <RepareMessage+0xa2>
         }
         else
         {
            data[i] ^= (temp << j);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	18d3      	adds	r3, r2, r3
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b25a      	sxtb	r2, r3
 8000c66:	2317      	movs	r3, #23
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	7819      	ldrb	r1, [r3, #0]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	4099      	lsls	r1, r3
 8000c70:	000b      	movs	r3, r1
 8000c72:	b25b      	sxtb	r3, r3
 8000c74:	4053      	eors	r3, r2
 8000c76:	b259      	sxtb	r1, r3
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	b2ca      	uxtb	r2, r1
 8000c80:	701a      	strb	r2, [r3, #0]
      for(int j = 0; j < 8; j++)
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	3301      	adds	r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	2b07      	cmp	r3, #7
 8000c8c:	ddc6      	ble.n	8000c1c <RepareMessage+0x20>
   for(int i = 0; i < DataLength; i++)
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3301      	adds	r3, #1
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d8bc      	bhi.n	8000c16 <RepareMessage+0x1a>
         }
      }
   }
   return CRC_ERROR;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b008      	add	sp, #32
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_DMA_Init+0x28>)
 8000cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <MX_DMA_Init+0x28>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <MX_DMA_Init+0x28>)
 8000cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b089      	sub	sp, #36	; 0x24
 8000cd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	240c      	movs	r4, #12
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	0018      	movs	r0, r3
 8000ce0:	2314      	movs	r3, #20
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	f004 fe7b 	bl	80059e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <MX_GPIO_Init+0x128>)
 8000cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cee:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <MX_GPIO_Init+0x128>)
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cf6:	4b41      	ldr	r3, [pc, #260]	; (8000dfc <MX_GPIO_Init+0x128>)
 8000cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	4b3e      	ldr	r3, [pc, #248]	; (8000dfc <MX_GPIO_Init+0x128>)
 8000d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d06:	4b3d      	ldr	r3, [pc, #244]	; (8000dfc <MX_GPIO_Init+0x128>)
 8000d08:	2101      	movs	r1, #1
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d0e:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <MX_GPIO_Init+0x128>)
 8000d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d12:	2201      	movs	r2, #1
 8000d14:	4013      	ands	r3, r2
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAX485_SEL_Pin|LED3_Pin|LED1_Pin|LED2_Pin
 8000d1a:	4939      	ldr	r1, [pc, #228]	; (8000e00 <MX_GPIO_Init+0x12c>)
 8000d1c:	23a0      	movs	r3, #160	; 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	2200      	movs	r2, #0
 8000d22:	0018      	movs	r0, r3
 8000d24:	f002 f85e 	bl	8002de4 <HAL_GPIO_WritePin>
                          |DS18B20_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|PMS_RST_Pin|PMS_SET_Pin, GPIO_PIN_RESET);
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <MX_GPIO_Init+0x130>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	211a      	movs	r1, #26
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f002 f858 	bl	8002de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, GPIO_PIN_SET);
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	0119      	lsls	r1, r3, #4
 8000d38:	23a0      	movs	r3, #160	; 0xa0
 8000d3a:	05db      	lsls	r3, r3, #23
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f002 f850 	bl	8002de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COVERTER_PG_Pin;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	0092      	lsls	r2, r2, #2
 8000d4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(COVERTER_PG_GPIO_Port, &GPIO_InitStruct);
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	4a2a      	ldr	r2, [pc, #168]	; (8000e04 <MX_GPIO_Init+0x130>)
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	0010      	movs	r0, r2
 8000d60:	f001 fedc 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BATTERY_CHRG_Pin|BATTERY_STDBY_Pin;
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2203      	movs	r2, #3
 8000d68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	193b      	adds	r3, r7, r4
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	193a      	adds	r2, r7, r4
 8000d78:	23a0      	movs	r3, #160	; 0xa0
 8000d7a:	05db      	lsls	r3, r3, #23
 8000d7c:	0011      	movs	r1, r2
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f001 fecc 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = MAX485_SEL_Pin|LED3_Pin|LED1_Pin|LED2_Pin
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	4a20      	ldr	r2, [pc, #128]	; (8000e08 <MX_GPIO_Init+0x134>)
 8000d88:	601a      	str	r2, [r3, #0]
                          |HC12_SET_Pin|DS18B20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	193a      	adds	r2, r7, r4
 8000d9e:	23a0      	movs	r3, #160	; 0xa0
 8000da0:	05db      	lsls	r3, r3, #23
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f001 feb9 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|PMS_RST_Pin|PMS_SET_Pin;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	221a      	movs	r2, #26
 8000dae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2201      	movs	r2, #1
 8000db4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <MX_GPIO_Init+0x130>)
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	0010      	movs	r0, r2
 8000dca:	f001 fea7 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8000dce:	0021      	movs	r1, r4
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2280      	movs	r2, #128	; 0x80
 8000dd4:	0052      	lsls	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2284      	movs	r2, #132	; 0x84
 8000ddc:	0392      	lsls	r2, r2, #14
 8000dde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000de6:	187a      	adds	r2, r7, r1
 8000de8:	23a0      	movs	r3, #160	; 0xa0
 8000dea:	05db      	lsls	r3, r3, #23
 8000dec:	0011      	movs	r1, r2
 8000dee:	0018      	movs	r0, r3
 8000df0:	f001 fe94 	bl	8002b1c <HAL_GPIO_Init>

}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b009      	add	sp, #36	; 0x24
 8000dfa:	bd90      	pop	{r4, r7, pc}
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	000010f0 	.word	0x000010f0
 8000e04:	50000400 	.word	0x50000400
 8000e08:	000018f0 	.word	0x000018f0

08000e0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <MX_I2C1_Init+0x74>)
 8000e12:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <MX_I2C1_Init+0x78>)
 8000e14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_I2C1_Init+0x74>)
 8000e18:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <MX_I2C1_Init+0x7c>)
 8000e1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <MX_I2C1_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_I2C1_Init+0x74>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <MX_I2C1_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_I2C1_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_I2C1_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_I2C1_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_I2C1_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_I2C1_Init+0x74>)
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f001 ffe9 	bl	8002e20 <HAL_I2C_Init>
 8000e4e:	1e03      	subs	r3, r0, #0
 8000e50:	d001      	beq.n	8000e56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e52:	f000 f909 	bl	8001068 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_I2C1_Init+0x74>)
 8000e58:	2100      	movs	r1, #0
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f002 f876 	bl	8002f4c <HAL_I2CEx_ConfigAnalogFilter>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d001      	beq.n	8000e68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e64:	f000 f900 	bl	8001068 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <MX_I2C1_Init+0x74>)
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f002 f8b9 	bl	8002fe4 <HAL_I2CEx_ConfigDigitalFilter>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d001      	beq.n	8000e7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e76:	f000 f8f7 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200005a4 	.word	0x200005a4
 8000e84:	40005400 	.word	0x40005400
 8000e88:	10707dbc 	.word	0x10707dbc

08000e8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b095      	sub	sp, #84	; 0x54
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	233c      	movs	r3, #60	; 0x3c
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	0018      	movs	r0, r3
 8000e9a:	2314      	movs	r3, #20
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f004 fd9e 	bl	80059e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea4:	2410      	movs	r4, #16
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	232c      	movs	r3, #44	; 0x2c
 8000eac:	001a      	movs	r2, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f004 fd96 	bl	80059e0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a22      	ldr	r2, [pc, #136]	; (8000f44 <HAL_I2C_MspInit+0xb8>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d13d      	bne.n	8000f3a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	2220      	movs	r2, #32
 8000ec2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eca:	193b      	adds	r3, r7, r4
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f002 fde5 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 8000ed2:	1e03      	subs	r3, r0, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000ed6:	f000 f8c7 	bl	8001068 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eea:	2202      	movs	r2, #2
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ef2:	213c      	movs	r1, #60	; 0x3c
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	22c0      	movs	r2, #192	; 0xc0
 8000ef8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2212      	movs	r2, #18
 8000efe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2206      	movs	r2, #6
 8000f10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_I2C_MspInit+0xc0>)
 8000f16:	0019      	movs	r1, r3
 8000f18:	0010      	movs	r0, r2
 8000f1a:	f001 fdff 	bl	8002b1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	0389      	lsls	r1, r1, #14
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	039b      	lsls	r3, r3, #14
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b015      	add	sp, #84	; 0x54
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	40005400 	.word	0x40005400
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	50000400 	.word	0x50000400

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f000 fce2 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f813 	bl	8000f82 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f7ff feba 	bl	8000cd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f60:	f7ff fea2 	bl	8000ca8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f64:	f7ff fd66 	bl	8000a34 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f68:	f7ff ff50 	bl	8000e0c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000f6c:	f000 fb38 	bl	80015e0 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000f70:	f000 fb84 	bl	800167c <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8000f74:	f000 fada 	bl	800152c <MX_TIM7_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f78:	f000 f861 	bl	800103e <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while(1)
   {
      SM_Handle();
 8000f7c:	f7ff fbbe 	bl	80006fc <SM_Handle>
 8000f80:	e7fc      	b.n	8000f7c <main+0x2c>

08000f82 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f82:	b590      	push	{r4, r7, lr}
 8000f84:	b093      	sub	sp, #76	; 0x4c
 8000f86:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f88:	2410      	movs	r4, #16
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	2338      	movs	r3, #56	; 0x38
 8000f90:	001a      	movs	r2, r3
 8000f92:	2100      	movs	r1, #0
 8000f94:	f004 fd24 	bl	80059e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	003b      	movs	r3, r7
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	2310      	movs	r3, #16
 8000f9e:	001a      	movs	r2, r3
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	f004 fd1d 	bl	80059e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	0018      	movs	r0, r3
 8000fac:	f002 f866 	bl	800307c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	0052      	lsls	r2, r2, #1
 8000fbc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000fbe:	0021      	movs	r1, r4
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2240      	movs	r2, #64	; 0x40
 8000fca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2202      	movs	r2, #2
 8000fd0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	0292      	lsls	r2, r2, #10
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	0492      	lsls	r2, r2, #18
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	0592      	lsls	r2, r2, #22
 8000ffa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	0018      	movs	r0, r3
 8001000:	f002 f888 	bl	8003114 <HAL_RCC_OscConfig>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001008:	f000 f82e 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100c:	003b      	movs	r3, r7
 800100e:	2207      	movs	r2, #7
 8001010:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001012:	003b      	movs	r3, r7
 8001014:	2202      	movs	r2, #2
 8001016:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001018:	003b      	movs	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101e:	003b      	movs	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001024:	003b      	movs	r3, r7
 8001026:	2102      	movs	r1, #2
 8001028:	0018      	movs	r0, r3
 800102a:	f002 fb8d 	bl	8003748 <HAL_RCC_ClockConfig>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001032:	f000 f819 	bl	8001068 <Error_Handler>
  }
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b013      	add	sp, #76	; 0x4c
 800103c:	bd90      	pop	{r4, r7, pc}

0800103e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2009      	movs	r0, #9
 8001048:	f001 fa18 	bl	800247c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800104c:	2009      	movs	r0, #9
 800104e:	f001 fa2a 	bl	80024a6 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	201b      	movs	r0, #27
 8001058:	f001 fa10 	bl	800247c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800105c:	201b      	movs	r0, #27
 800105e:	f001 fa22 	bl	80024a6 <HAL_NVIC_EnableIRQ>
}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8001070:	e7fe      	b.n	8001070 <Error_Handler+0x8>
	...

08001074 <RFP_Handle>:
static RFPTransitionTable_TypeDef RfpTransitionTable[] = { { RFP_STATE_INITIALIZE, RFP_STATE_IDLE, RFP_EVENT_END_INITIALIZE },
                                                           { RFP_STATE_IDLE, RFP_STATE_PARSE, RFP_EVENT_NEW_DATA },
                                                           { RFP_STATE_PARSE, RFP_STATE_IDLE, RFP_EVENT_ERROR },
                                                           { RFP_STATE_PARSE, RFP_STATE_RUNNING, RFP_EVENT_DATA_OK },
                                                           { RFP_STATE_RUNNING, RFP_STATE_IDLE, RFP_EVENT_NOTHING },
                                                           { RFP_STATE_IDLE, RFP_STATE_SEND, RFP_EVENT_SEND },
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
                                                           { RFP_STATE_SEND, RFP_STATE_WAIT_FOR_RESPONSE, RFP_EVENT_WAIT_FOR_RESPONSE },
 8001078:	f000 f856 	bl	8001128 <RFP_ChangeState>
                                                           { RFP_STATE_WAIT_FOR_RESPONSE, RFP_STATE_SEND, RFP_EVENT_ERROR },
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <RFP_Handle+0x30>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	001a      	movs	r2, r3
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <RFP_Handle+0x34>)
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	58d3      	ldr	r3, [r2, r3]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <RFP_Handle+0x2a>
                                                           { RFP_STATE_WAIT_FOR_RESPONSE, RFP_STATE_PARSE_RESPONSE, RFP_EVENT_NEW_DATA },
                                                           { RFP_STATE_PARSE_RESPONSE, RFP_STATE_SEND, RFP_EVENT_ERROR },
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <RFP_Handle+0x30>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	001a      	movs	r2, r3
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <RFP_Handle+0x34>)
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	58d3      	ldr	r3, [r2, r3]
 800109c:	4798      	blx	r3
                                                           { RFP_STATE_PARSE_RESPONSE, RFP_STATE_IDLE, RFP_EVENT_DATA_OK },
                                                           { RFP_STATE_SEND, RFP_STATE_IDLE, RFP_EVENT_ERROR } };
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000060c 	.word	0x2000060c
 80010a8:	20000060 	.word	0x20000060

080010ac <RFP_Init>:
RFPFunctions_TypeDef RfpFunction[]
    = { { RFP_InitializeFunction },      { RFP_IdleFunction },         { RFP_ParseFunction }, { RFP_RunningFunction }, { RFP_SendFunction },
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	000a      	movs	r2, r1
 80010b6:	1cfb      	adds	r3, r7, #3
 80010b8:	701a      	strb	r2, [r3, #0]
        { RFP_WaitForResponseFunction }, { RFP_ParseResponseFunction } };
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <RFP_Init+0x6c>)
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	601a      	str	r2, [r3, #0]
RFPCommandFunctions_TypeDef RfpCommandFunction[RFP_COMMAND_CNT];
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <RFP_Init+0x6c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2201      	movs	r2, #1
 80010c6:	70da      	strb	r2, [r3, #3]
RFPDataFunctions_TypeDef RfpDataFunctions;
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <RFP_Init+0x6c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	1cfa      	adds	r2, r7, #3
 80010ce:	7812      	ldrb	r2, [r2, #0]
 80010d0:	715a      	strb	r2, [r3, #5]
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	e007      	b.n	80010e8 <RFP_Init+0x3c>
void RFP_Handle(void)
{
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <RFP_Init+0x70>)
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	2100      	movs	r1, #0
 80010e0:	50d1      	str	r1, [r2, r3]
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	ddf4      	ble.n	80010d8 <RFP_Init+0x2c>
   RFP_ChangeState();
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	e007      	b.n	8001104 <RFP_Init+0x58>
   {
      RfpFunction[Rfp->State].RfpFunction();
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <RFP_Init+0x74>)
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	2100      	movs	r1, #0
 80010fc:	50d1      	str	r1, [r2, r3]
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	3301      	adds	r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	2b03      	cmp	r3, #3
 8001108:	ddf4      	ble.n	80010f4 <RFP_Init+0x48>
   }
}
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <RFP_Init+0x78>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
void RFP_Init(RFP_TypeDef *RadioProtocol, RFPDeviceID_TypeDef Device)
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b004      	add	sp, #16
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000060c 	.word	0x2000060c
 800111c:	20000610 	.word	0x20000610
 8001120:	20000620 	.word	0x20000620
 8001124:	2000061c 	.word	0x2000061c

08001128 <RFP_ChangeState>:
{
   Rfp             = RadioProtocol;
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
   Rfp->Initialize = RFP_INITIALIZE;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	e02a      	b.n	800118a <RFP_ChangeState+0x62>
   Rfp->DeviceType = Device;
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <RFP_ChangeState+0x78>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	7819      	ldrb	r1, [r3, #0]
 800113a:	481a      	ldr	r0, [pc, #104]	; (80011a4 <RFP_ChangeState+0x7c>)
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	0013      	movs	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	189b      	adds	r3, r3, r2
 8001144:	5c1b      	ldrb	r3, [r3, r0]
 8001146:	4299      	cmp	r1, r3
 8001148:	d11c      	bne.n	8001184 <RFP_ChangeState+0x5c>
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <RFP_ChangeState+0x78>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	7859      	ldrb	r1, [r3, #1]
 8001150:	4814      	ldr	r0, [pc, #80]	; (80011a4 <RFP_ChangeState+0x7c>)
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	0013      	movs	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	189b      	adds	r3, r3, r2
 800115a:	18c3      	adds	r3, r0, r3
 800115c:	3302      	adds	r3, #2
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4299      	cmp	r1, r3
 8001162:	d10f      	bne.n	8001184 <RFP_ChangeState+0x5c>
   {
      RfpCommandFunction[i].RfpCommandFunction = NULL;
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <RFP_ChangeState+0x78>)
 8001166:	6819      	ldr	r1, [r3, #0]
 8001168:	480e      	ldr	r0, [pc, #56]	; (80011a4 <RFP_ChangeState+0x7c>)
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	0013      	movs	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	189b      	adds	r3, r3, r2
 8001172:	18c3      	adds	r3, r0, r3
 8001174:	3301      	adds	r3, #1
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	700b      	strb	r3, [r1, #0]
   }
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <RFP_ChangeState+0x78>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2200      	movs	r2, #0
 8001180:	705a      	strb	r2, [r3, #1]
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 8001182:	e009      	b.n	8001198 <RFP_ChangeState+0x70>
   Rfp->Initialize = RFP_INITIALIZE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3301      	adds	r3, #1
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b05      	cmp	r3, #5
 800118e:	d9d1      	bls.n	8001134 <RFP_ChangeState+0xc>
   {
      RfpMessageFunction[i].RfpMessageFunction = NULL;
   }
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <RFP_ChangeState+0x78>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2200      	movs	r2, #0
 8001196:	705a      	strb	r2, [r3, #1]
   RfpDataFunctions.RfpDataFunction = NULL;
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	2000060c 	.word	0x2000060c
 80011a4:	2000004c 	.word	0x2000004c

080011a8 <RFP_RegisterCommandFunction>:
}
static void RFP_ChangeState(void)
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	0002      	movs	r2, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	701a      	strb	r2, [r3, #0]
{
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	1e5a      	subs	r2, r3, #1
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <RFP_RegisterCommandFunction+0x24>)
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	6839      	ldr	r1, [r7, #0]
 80011c2:	50d1      	str	r1, [r2, r3]
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b002      	add	sp, #8
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000610 	.word	0x20000610

080011d0 <RFP_InterruptTask>:
         Rfp->NewEvent = RFP_EVENT_NOTHING;
         return;
      }
   }
   Rfp->NewEvent = RFP_EVENT_NOTHING;
}
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
void RFP_RegisterCommandFunction(RFPCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <RFP_InterruptTask+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2201      	movs	r2, #1
 80011da:	711a      	strb	r2, [r3, #4]
{
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	2000060c 	.word	0x2000060c

080011e8 <RFP_SendResponseFunction>:
{
   RfpMessageFunction[Message - 1].RfpMessageFunction = Callback;
}
void RFP_InterruptTask(void)
{
   Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_SET;
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	0002      	movs	r2, r0
 80011f0:	1dfb      	adds	r3, r7, #7
 80011f2:	701a      	strb	r2, [r3, #0]
}
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <RFP_SendResponseFunction+0x78>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	7b1a      	ldrb	r2, [r3, #12]
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <RFP_SendResponseFunction+0x7c>)
 80011fc:	701a      	strb	r2, [r3, #0]
void RFP_SendData(RFPDeviceID_TypeDef Destination, RFPMessageType_TypeDef Type, uint8_t *Data, uint32_t Length)
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <RFP_SendResponseFunction+0x78>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	795a      	ldrb	r2, [r3, #5]
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <RFP_SendResponseFunction+0x7c>)
 8001206:	705a      	strb	r2, [r3, #1]
{
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <RFP_SendResponseFunction+0x7c>)
 800120a:	2203      	movs	r2, #3
 800120c:	709a      	strb	r2, [r3, #2]
   RfpDataTransmit[0] = Destination;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <RFP_SendResponseFunction+0x7c>)
 8001210:	1dfa      	adds	r2, r7, #7
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	70da      	strb	r2, [r3, #3]
   RfpDataTransmit[1] = Rfp->DeviceType;
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <RFP_SendResponseFunction+0x7c>)
 8001218:	2301      	movs	r3, #1
 800121a:	425b      	negs	r3, r3
 800121c:	2104      	movs	r1, #4
 800121e:	0018      	movs	r0, r3
 8001220:	f7ff fcb8 	bl	8000b94 <Crc>
 8001224:	0003      	movs	r3, r0
 8001226:	60fb      	str	r3, [r7, #12]
   RfpDataTransmit[2] = Type;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	0e1b      	lsrs	r3, r3, #24
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <RFP_SendResponseFunction+0x7c>)
 8001230:	711a      	strb	r2, [r3, #4]
   for(int i = 0; i < Length; i++)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	0c1b      	lsrs	r3, r3, #16
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <RFP_SendResponseFunction+0x7c>)
 800123a:	715a      	strb	r2, [r3, #5]
   {
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <RFP_SendResponseFunction+0x7c>)
 8001244:	719a      	strb	r2, [r3, #6]
      RfpDataTransmit[i + 3] = Data[i];
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <RFP_SendResponseFunction+0x7c>)
 800124c:	71da      	strb	r2, [r3, #7]
   }
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <RFP_SendResponseFunction+0x7c>)
 8001250:	2108      	movs	r1, #8
 8001252:	0018      	movs	r0, r3
 8001254:	f7ff f9ee 	bl	8000634 <HC12_TransmitData>
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, RfpDataTransmit);
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b004      	add	sp, #16
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000060c 	.word	0x2000060c
 8001264:	200005f8 	.word	0x200005f8

08001268 <RFP_InitializeFunction>:
   RfpDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
   RfpDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
   RfpDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <RFP_InitializeFunction+0x20>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2202      	movs	r2, #2
 8001272:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[3 + Length + 3] = (crc & 0xff);
 8001274:	f7ff f9d0 	bl	8000618 <HC12_ExitCommandMode>
   Rfp->SendFlag                   = RFP_SEND_FLAG_SET;
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <RFP_InitializeFunction+0x24>)
 800127a:	2114      	movs	r1, #20
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff f9ed 	bl	800065c <HC12_ReciveToIdleDMA>
   Rfp->DataSize                   = 3 + Length + 4;
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000060c 	.word	0x2000060c
 800128c:	200005f8 	.word	0x200005f8

08001290 <RFP_IdleFunction>:
}
static void RFP_SendResponseFunction(RFPMessageType_TypeDef Response)
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
{
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <RFP_IdleFunction+0x3c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	791b      	ldrb	r3, [r3, #4]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <RFP_IdleFunction+0x22>
   HAL_Delay(200);
   RfpDataTransmit[0] = Rfp->SourceMessage;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <RFP_IdleFunction+0x3c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	711a      	strb	r2, [r3, #4]
   RfpDataTransmit[1] = Rfp->DeviceType;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <RFP_IdleFunction+0x3c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2201      	movs	r2, #1
 80012ae:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = RFP_MESSAGE;
   RfpDataTransmit[3] = Response;
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, RfpDataTransmit);
   RfpDataTransmit[4] = ((crc >> 24) & 0xff);
   RfpDataTransmit[5] = ((crc >> 16) & 0xff);
   RfpDataTransmit[6] = ((crc >> 8) & 0xff);
 80012b0:	e008      	b.n	80012c4 <RFP_IdleFunction+0x34>
   RfpDataTransmit[3] = Response;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <RFP_IdleFunction+0x3c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	7b5b      	ldrb	r3, [r3, #13]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d103      	bne.n	80012c4 <RFP_IdleFunction+0x34>
   RfpDataTransmit[4] = ((crc >> 24) & 0xff);
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <RFP_IdleFunction+0x3c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2200      	movs	r2, #0
 80012c2:	735a      	strb	r2, [r3, #13]
   RfpDataTransmit[6] = ((crc >> 8) & 0xff);
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	2000060c 	.word	0x2000060c

080012d0 <RFP_ParseFunction>:
   RfpDataTransmit[7] = (crc & 0xff);
   HC12_TransmitData(RfpDataTransmit, 8);
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
}
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
static void RFP_InitializeFunction(void)
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <RFP_ParseFunction+0xd8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a33      	ldr	r2, [pc, #204]	; (80013ac <RFP_ParseFunction+0xdc>)
 80012e0:	7852      	ldrb	r2, [r2, #1]
 80012e2:	731a      	strb	r2, [r3, #12]
{
 80012e4:	4b31      	ldr	r3, [pc, #196]	; (80013ac <RFP_ParseFunction+0xdc>)
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <RFP_ParseFunction+0xd8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	795b      	ldrb	r3, [r3, #5]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d007      	beq.n	8001302 <RFP_ParseFunction+0x32>
   Rfp->NewEvent = RFP_EVENT_END_INITIALIZE;
   HC12_ExitCommandMode();
 80012f2:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <RFP_ParseFunction+0xd8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2203      	movs	r2, #3
 80012f8:	705a      	strb	r2, [r3, #1]
   HC12_Init(Rfp, RfpDataRecive);
 80012fa:	2001      	movs	r0, #1
 80012fc:	f7ff ff74 	bl	80011e8 <RFP_SendResponseFunction>
   if(RfpDataRecive[0] != Rfp->DeviceType)
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
      RFP_SendResponseFunction(RFP_ERROR);
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
 8001300:	e04d      	b.n	800139e <RFP_ParseFunction+0xce>
{
 8001302:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <RFP_ParseFunction+0xd8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d031      	beq.n	8001370 <RFP_ParseFunction+0xa0>
   {
 800130c:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <RFP_ParseFunction+0xd8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	3b04      	subs	r3, #4
 8001314:	4a25      	ldr	r2, [pc, #148]	; (80013ac <RFP_ParseFunction+0xdc>)
 8001316:	5cd3      	ldrb	r3, [r2, r3]
 8001318:	061a      	lsls	r2, r3, #24
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <RFP_ParseFunction+0xd8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	3b03      	subs	r3, #3
 8001322:	4922      	ldr	r1, [pc, #136]	; (80013ac <RFP_ParseFunction+0xdc>)
 8001324:	5ccb      	ldrb	r3, [r1, r3]
 8001326:	041b      	lsls	r3, r3, #16
 8001328:	431a      	orrs	r2, r3
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <RFP_ParseFunction+0xd8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	3b02      	subs	r3, #2
 8001332:	491e      	ldr	r1, [pc, #120]	; (80013ac <RFP_ParseFunction+0xdc>)
 8001334:	5ccb      	ldrb	r3, [r1, r3]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	431a      	orrs	r2, r3
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <RFP_ParseFunction+0xd8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	3b01      	subs	r3, #1
 8001342:	491a      	ldr	r1, [pc, #104]	; (80013ac <RFP_ParseFunction+0xdc>)
 8001344:	5ccb      	ldrb	r3, [r1, r3]
   {
 8001346:	4313      	orrs	r3, r2
 8001348:	607b      	str	r3, [r7, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <RFP_ParseFunction+0xd8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	1f19      	subs	r1, r3, #4
 8001352:	4a16      	ldr	r2, [pc, #88]	; (80013ac <RFP_ParseFunction+0xdc>)
 8001354:	2301      	movs	r3, #1
 8001356:	425b      	negs	r3, r3
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff fc1b 	bl	8000b94 <Crc>
 800135e:	0002      	movs	r2, r0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4293      	cmp	r3, r2
 8001364:	d11b      	bne.n	800139e <RFP_ParseFunction+0xce>
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <RFP_ParseFunction+0xd8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2204      	movs	r2, #4
 800136c:	705a      	strb	r2, [r3, #1]
   }
 800136e:	e016      	b.n	800139e <RFP_ParseFunction+0xce>
   }
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <RFP_ParseFunction+0xd8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	490d      	ldr	r1, [pc, #52]	; (80013ac <RFP_ParseFunction+0xdc>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0018      	movs	r0, r3
 800137c:	f7ff fc3e 	bl	8000bfc <RepareMessage>
 8001380:	0003      	movs	r3, r0
 8001382:	2b01      	cmp	r3, #1
 8001384:	d104      	bne.n	8001390 <RFP_ParseFunction+0xc0>
static void RFP_ParseFunction(void)
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <RFP_ParseFunction+0xd8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2204      	movs	r2, #4
 800138c:	705a      	strb	r2, [r3, #1]
   }
 800138e:	e006      	b.n	800139e <RFP_ParseFunction+0xce>
   if(RfpDataRecive[0] != Rfp->DeviceType)
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <RFP_ParseFunction+0xd8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2203      	movs	r2, #3
 8001396:	705a      	strb	r2, [r3, #1]
   {
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff ff25 	bl	80011e8 <RFP_SendResponseFunction>
   }
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b002      	add	sp, #8
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	2000060c 	.word	0x2000060c
 80013ac:	200005f8 	.word	0x200005f8

080013b0 <RFP_RunningFunction>:
   else
   {
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	af00      	add	r7, sp, #0
      if(Rfp->DataSize != 0)
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <RFP_RunningFunction+0xa8>)
 80013b6:	789b      	ldrb	r3, [r3, #2]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d029      	beq.n	8001410 <RFP_RunningFunction+0x60>
 80013bc:	dc3e      	bgt.n	800143c <RFP_RunningFunction+0x8c>
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d002      	beq.n	80013c8 <RFP_RunningFunction+0x18>
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d016      	beq.n	80013f4 <RFP_RunningFunction+0x44>
      }
   }
}
static void RFP_RunningFunction(void)
{
   switch(RfpDataRecive[2])
 80013c6:	e039      	b.n	800143c <RFP_RunningFunction+0x8c>
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <RFP_RunningFunction+0xa8>)
 80013ca:	78db      	ldrb	r3, [r3, #3]
 80013cc:	1e5a      	subs	r2, r3, #1
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <RFP_RunningFunction+0xac>)
 80013d0:	0092      	lsls	r2, r2, #2
 80013d2:	58d3      	ldr	r3, [r2, r3]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d033      	beq.n	8001440 <RFP_RunningFunction+0x90>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <RFP_RunningFunction+0xa8>)
 80013da:	78db      	ldrb	r3, [r3, #3]
 80013dc:	1e5a      	subs	r2, r3, #1
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <RFP_RunningFunction+0xac>)
 80013e0:	0092      	lsls	r2, r2, #2
 80013e2:	58d4      	ldr	r4, [r2, r3]
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <RFP_RunningFunction+0xb0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6899      	ldr	r1, [r3, #8]
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <RFP_RunningFunction+0xa8>)
 80013ec:	2204      	movs	r2, #4
 80013ee:	0018      	movs	r0, r3
 80013f0:	47a0      	blx	r4
         }
 80013f2:	e025      	b.n	8001440 <RFP_RunningFunction+0x90>
            {
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <RFP_RunningFunction+0xb4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d023      	beq.n	8001444 <RFP_RunningFunction+0x94>
               RFP_SendResponseFunction(RFP_OK);
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <RFP_RunningFunction+0xb4>)
 80013fe:	681c      	ldr	r4, [r3, #0]
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <RFP_RunningFunction+0xb0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6899      	ldr	r1, [r3, #8]
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <RFP_RunningFunction+0xa8>)
 8001408:	2204      	movs	r2, #4
 800140a:	0018      	movs	r0, r3
 800140c:	47a0      	blx	r4
            else
 800140e:	e019      	b.n	8001444 <RFP_RunningFunction+0x94>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <RFP_RunningFunction+0xa8>)
 8001412:	78db      	ldrb	r3, [r3, #3]
 8001414:	1e5a      	subs	r2, r3, #1
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <RFP_RunningFunction+0xb8>)
 8001418:	0092      	lsls	r2, r2, #2
 800141a:	58d3      	ldr	r3, [r2, r3]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <RFP_RunningFunction+0x98>
         }
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <RFP_RunningFunction+0xa8>)
 8001422:	78db      	ldrb	r3, [r3, #3]
 8001424:	1e5a      	subs	r2, r3, #1
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <RFP_RunningFunction+0xb8>)
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	58d4      	ldr	r4, [r2, r3]
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <RFP_RunningFunction+0xb0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6899      	ldr	r1, [r3, #8]
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <RFP_RunningFunction+0xa8>)
 8001434:	2204      	movs	r2, #4
 8001436:	0018      	movs	r0, r3
 8001438:	47a0      	blx	r4
   }
 800143a:	e005      	b.n	8001448 <RFP_RunningFunction+0x98>
   switch(RfpDataRecive[2])
 800143c:	46c0      	nop			; (mov r8, r8)
 800143e:	e004      	b.n	800144a <RFP_RunningFunction+0x9a>
         }
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	e002      	b.n	800144a <RFP_RunningFunction+0x9a>
            else
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	e000      	b.n	800144a <RFP_RunningFunction+0x9a>
   }
 8001448:	46c0      	nop			; (mov r8, r8)
   {
      case RFP_COMMAND:
      {
 800144a:	2004      	movs	r0, #4
 800144c:	f7ff fecc 	bl	80011e8 <RFP_SendResponseFunction>
         if(RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction != NULL)
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	bdb0      	pop	{r4, r5, r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	200005f8 	.word	0x200005f8
 800145c:	20000610 	.word	0x20000610
 8001460:	2000060c 	.word	0x2000060c
 8001464:	2000061c 	.word	0x2000061c
 8001468:	20000620 	.word	0x20000620

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_MspInit+0x44>)
 8001474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_MspInit+0x44>)
 8001478:	2101      	movs	r1, #1
 800147a:	430a      	orrs	r2, r1
 800147c:	641a      	str	r2, [r3, #64]	; 0x40
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_MspInit+0x44>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	2201      	movs	r2, #1
 8001484:	4013      	ands	r3, r2
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_MspInit+0x44>)
 800148c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_MspInit+0x44>)
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0549      	lsls	r1, r1, #21
 8001494:	430a      	orrs	r2, r1
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_MspInit+0x44>)
 800149a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	055b      	lsls	r3, r3, #21
 80014a0:	4013      	ands	r3, r2
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b002      	add	sp, #8
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	40021000 	.word	0x40021000

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <NMI_Handler+0x4>

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 fa8a 	bl	80019f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <DMA1_Channel1_IRQHandler+0x14>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f001 f9d4 	bl	8002898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	200007a4 	.word	0x200007a4

080014fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <USART1_IRQHandler+0x14>)
 8001502:	0018      	movs	r0, r3
 8001504:	f002 fe9a 	bl	800423c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	20000710 	.word	0x20000710

08001514 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <SystemInit+0x14>)
 800151a:	2280      	movs	r2, #128	; 0x80
 800151c:	0512      	lsls	r2, r2, #20
 800151e:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	0018      	movs	r0, r3
 8001536:	230c      	movs	r3, #12
 8001538:	001a      	movs	r2, r3
 800153a:	2100      	movs	r1, #0
 800153c:	f004 fa50 	bl	80059e0 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_TIM7_Init+0x6c>)
 8001542:	4a16      	ldr	r2, [pc, #88]	; (800159c <MX_TIM7_Init+0x70>)
 8001544:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 63;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_TIM7_Init+0x6c>)
 8001548:	223f      	movs	r2, #63	; 0x3f
 800154a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_TIM7_Init+0x6c>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_TIM7_Init+0x6c>)
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <MX_TIM7_Init+0x74>)
 8001556:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_TIM7_Init+0x6c>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_TIM7_Init+0x6c>)
 8001560:	0018      	movs	r0, r3
 8001562:	f002 fc33 	bl	8003dcc <HAL_TIM_Base_Init>
 8001566:	1e03      	subs	r3, r0, #0
 8001568:	d001      	beq.n	800156e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800156a:	f7ff fd7d 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800157a:	1d3a      	adds	r2, r7, #4
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_TIM7_Init+0x6c>)
 800157e:	0011      	movs	r1, r2
 8001580:	0018      	movs	r0, r3
 8001582:	f002 fcfb 	bl	8003f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001586:	1e03      	subs	r3, r0, #0
 8001588:	d001      	beq.n	800158e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800158a:	f7ff fd6d 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	46bd      	mov	sp, r7
 8001592:	b004      	add	sp, #16
 8001594:	bd80      	pop	{r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	20000630 	.word	0x20000630
 800159c:	40001400 	.word	0x40001400
 80015a0:	0000ffff 	.word	0x0000ffff

080015a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_TIM_Base_MspInit+0x34>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10b      	bne.n	80015ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_TIM_Base_MspInit+0x38>)
 80015b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_TIM_Base_MspInit+0x38>)
 80015bc:	2120      	movs	r1, #32
 80015be:	430a      	orrs	r2, r1
 80015c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_TIM_Base_MspInit+0x38>)
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c6:	2220      	movs	r2, #32
 80015c8:	4013      	ands	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	40001400 	.word	0x40001400
 80015dc:	40021000 	.word	0x40021000

080015e0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 80015e6:	4a24      	ldr	r2, [pc, #144]	; (8001678 <MX_LPUART1_UART_Init+0x98>)
 80015e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 80015ec:	22e1      	movs	r2, #225	; 0xe1
 80015ee:	0252      	lsls	r2, r2, #9
 80015f0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 800161e:	2200      	movs	r2, #0
 8001620:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 8001624:	2200      	movs	r2, #0
 8001626:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 800162a:	0018      	movs	r0, r3
 800162c:	f002 fd14 	bl	8004058 <HAL_UART_Init>
 8001630:	1e03      	subs	r3, r0, #0
 8001632:	d001      	beq.n	8001638 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001634:	f7ff fd18 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 800163a:	2100      	movs	r1, #0
 800163c:	0018      	movs	r0, r3
 800163e:	f004 f863 	bl	8005708 <HAL_UARTEx_SetTxFifoThreshold>
 8001642:	1e03      	subs	r3, r0, #0
 8001644:	d001      	beq.n	800164a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001646:	f7ff fd0f 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 800164c:	2100      	movs	r1, #0
 800164e:	0018      	movs	r0, r3
 8001650:	f004 f89a 	bl	8005788 <HAL_UARTEx_SetRxFifoThreshold>
 8001654:	1e03      	subs	r3, r0, #0
 8001656:	d001      	beq.n	800165c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001658:	f7ff fd06 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <MX_LPUART1_UART_Init+0x94>)
 800165e:	0018      	movs	r0, r3
 8001660:	f004 f818 	bl	8005694 <HAL_UARTEx_DisableFifoMode>
 8001664:	1e03      	subs	r3, r0, #0
 8001666:	d001      	beq.n	800166c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001668:	f7ff fcfe 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	2000067c 	.word	0x2000067c
 8001678:	40008000 	.word	0x40008000

0800167c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <MX_USART1_UART_Init+0x94>)
 8001682:	4a24      	ldr	r2, [pc, #144]	; (8001714 <MX_USART1_UART_Init+0x98>)
 8001684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <MX_USART1_UART_Init+0x94>)
 8001688:	2296      	movs	r2, #150	; 0x96
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <MX_USART1_UART_Init+0x94>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <MX_USART1_UART_Init+0x94>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <MX_USART1_UART_Init+0x94>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <MX_USART1_UART_Init+0x94>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <MX_USART1_UART_Init+0x94>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b18      	ldr	r3, [pc, #96]	; (8001710 <MX_USART1_UART_Init+0x94>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <MX_USART1_UART_Init+0x94>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_USART1_UART_Init+0x94>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_USART1_UART_Init+0x94>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_USART1_UART_Init+0x94>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f002 fcc6 	bl	8004058 <HAL_UART_Init>
 80016cc:	1e03      	subs	r3, r0, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016d0:	f7ff fcca 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_USART1_UART_Init+0x94>)
 80016d6:	2100      	movs	r1, #0
 80016d8:	0018      	movs	r0, r3
 80016da:	f004 f815 	bl	8005708 <HAL_UARTEx_SetTxFifoThreshold>
 80016de:	1e03      	subs	r3, r0, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016e2:	f7ff fcc1 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <MX_USART1_UART_Init+0x94>)
 80016e8:	2100      	movs	r1, #0
 80016ea:	0018      	movs	r0, r3
 80016ec:	f004 f84c 	bl	8005788 <HAL_UARTEx_SetRxFifoThreshold>
 80016f0:	1e03      	subs	r3, r0, #0
 80016f2:	d001      	beq.n	80016f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016f4:	f7ff fcb8 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <MX_USART1_UART_Init+0x94>)
 80016fa:	0018      	movs	r0, r3
 80016fc:	f003 ffca 	bl	8005694 <HAL_UARTEx_DisableFifoMode>
 8001700:	1e03      	subs	r3, r0, #0
 8001702:	d001      	beq.n	8001708 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001704:	f7ff fcb0 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	20000710 	.word	0x20000710
 8001714:	40013800 	.word	0x40013800

08001718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b097      	sub	sp, #92	; 0x5c
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	2344      	movs	r3, #68	; 0x44
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	0018      	movs	r0, r3
 8001726:	2314      	movs	r3, #20
 8001728:	001a      	movs	r2, r3
 800172a:	2100      	movs	r1, #0
 800172c:	f004 f958 	bl	80059e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001730:	2418      	movs	r4, #24
 8001732:	193b      	adds	r3, r7, r4
 8001734:	0018      	movs	r0, r3
 8001736:	232c      	movs	r3, #44	; 0x2c
 8001738:	001a      	movs	r2, r3
 800173a:	2100      	movs	r1, #0
 800173c:	f004 f950 	bl	80059e0 <memset>
  if(uartHandle->Instance==LPUART1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a5b      	ldr	r2, [pc, #364]	; (80018b4 <HAL_UART_MspInit+0x19c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d140      	bne.n	80017cc <HAL_UART_MspInit+0xb4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800174a:	193b      	adds	r3, r7, r4
 800174c:	2210      	movs	r2, #16
 800174e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8001750:	193b      	adds	r3, r7, r4
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001758:	193b      	adds	r3, r7, r4
 800175a:	0018      	movs	r0, r3
 800175c:	f002 f99e 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 8001760:	1e03      	subs	r3, r0, #0
 8001762:	d001      	beq.n	8001768 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001764:	f7ff fc80 	bl	8001068 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001768:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <HAL_UART_MspInit+0x1a0>)
 800176a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800176c:	4b52      	ldr	r3, [pc, #328]	; (80018b8 <HAL_UART_MspInit+0x1a0>)
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	0349      	lsls	r1, r1, #13
 8001772:	430a      	orrs	r2, r1
 8001774:	63da      	str	r2, [r3, #60]	; 0x3c
 8001776:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <HAL_UART_MspInit+0x1a0>)
 8001778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	035b      	lsls	r3, r3, #13
 800177e:	4013      	ands	r3, r2
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <HAL_UART_MspInit+0x1a0>)
 8001786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001788:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <HAL_UART_MspInit+0x1a0>)
 800178a:	2101      	movs	r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	635a      	str	r2, [r3, #52]	; 0x34
 8001790:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <HAL_UART_MspInit+0x1a0>)
 8001792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001794:	2201      	movs	r2, #1
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800179c:	2144      	movs	r1, #68	; 0x44
 800179e:	187b      	adds	r3, r7, r1
 80017a0:	220c      	movs	r2, #12
 80017a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	2202      	movs	r2, #2
 80017a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	2206      	movs	r2, #6
 80017ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	187a      	adds	r2, r7, r1
 80017be:	23a0      	movs	r3, #160	; 0xa0
 80017c0:	05db      	lsls	r3, r3, #23
 80017c2:	0011      	movs	r1, r2
 80017c4:	0018      	movs	r0, r3
 80017c6:	f001 f9a9 	bl	8002b1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017ca:	e06f      	b.n	80018ac <HAL_UART_MspInit+0x194>
  else if(uartHandle->Instance==USART1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a3a      	ldr	r2, [pc, #232]	; (80018bc <HAL_UART_MspInit+0x1a4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d16a      	bne.n	80018ac <HAL_UART_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017d6:	2118      	movs	r1, #24
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	0018      	movs	r0, r3
 80017e8:	f002 f958 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 80017ec:	1e03      	subs	r3, r0, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 80017f0:	f7ff fc3a 	bl	8001068 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f4:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <HAL_UART_MspInit+0x1a0>)
 80017f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f8:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <HAL_UART_MspInit+0x1a0>)
 80017fa:	2180      	movs	r1, #128	; 0x80
 80017fc:	01c9      	lsls	r1, r1, #7
 80017fe:	430a      	orrs	r2, r1
 8001800:	641a      	str	r2, [r3, #64]	; 0x40
 8001802:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <HAL_UART_MspInit+0x1a0>)
 8001804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	01db      	lsls	r3, r3, #7
 800180a:	4013      	ands	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <HAL_UART_MspInit+0x1a0>)
 8001812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <HAL_UART_MspInit+0x1a0>)
 8001816:	2101      	movs	r1, #1
 8001818:	430a      	orrs	r2, r1
 800181a:	635a      	str	r2, [r3, #52]	; 0x34
 800181c:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <HAL_UART_MspInit+0x1a0>)
 800181e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001820:	2201      	movs	r2, #1
 8001822:	4013      	ands	r3, r2
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001828:	2144      	movs	r1, #68	; 0x44
 800182a:	187b      	adds	r3, r7, r1
 800182c:	22c0      	movs	r2, #192	; 0xc0
 800182e:	00d2      	lsls	r2, r2, #3
 8001830:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	187b      	adds	r3, r7, r1
 8001834:	2202      	movs	r2, #2
 8001836:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	187b      	adds	r3, r7, r1
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	187b      	adds	r3, r7, r1
 8001840:	2200      	movs	r2, #0
 8001842:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001844:	187b      	adds	r3, r7, r1
 8001846:	2201      	movs	r2, #1
 8001848:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	187a      	adds	r2, r7, r1
 800184c:	23a0      	movs	r3, #160	; 0xa0
 800184e:	05db      	lsls	r3, r3, #23
 8001850:	0011      	movs	r1, r2
 8001852:	0018      	movs	r0, r3
 8001854:	f001 f962 	bl	8002b1c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <HAL_UART_MspInit+0x1a8>)
 800185a:	4a1a      	ldr	r2, [pc, #104]	; (80018c4 <HAL_UART_MspInit+0x1ac>)
 800185c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <HAL_UART_MspInit+0x1a8>)
 8001860:	2232      	movs	r2, #50	; 0x32
 8001862:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HAL_UART_MspInit+0x1a8>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_UART_MspInit+0x1a8>)
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_UART_MspInit+0x1a8>)
 8001872:	2280      	movs	r2, #128	; 0x80
 8001874:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_UART_MspInit+0x1a8>)
 8001878:	2200      	movs	r2, #0
 800187a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_UART_MspInit+0x1a8>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <HAL_UART_MspInit+0x1a8>)
 8001884:	2200      	movs	r2, #0
 8001886:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_UART_MspInit+0x1a8>)
 800188a:	2200      	movs	r2, #0
 800188c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_UART_MspInit+0x1a8>)
 8001890:	0018      	movs	r0, r3
 8001892:	f000 fe25 	bl	80024e0 <HAL_DMA_Init>
 8001896:	1e03      	subs	r3, r0, #0
 8001898:	d001      	beq.n	800189e <HAL_UART_MspInit+0x186>
      Error_Handler();
 800189a:	f7ff fbe5 	bl	8001068 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_UART_MspInit+0x1a8>)
 80018a4:	505a      	str	r2, [r3, r1]
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_UART_MspInit+0x1a8>)
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b017      	add	sp, #92	; 0x5c
 80018b2:	bd90      	pop	{r4, r7, pc}
 80018b4:	40008000 	.word	0x40008000
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40013800 	.word	0x40013800
 80018c0:	200007a4 	.word	0x200007a4
 80018c4:	40020008 	.word	0x40020008

080018c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018c8:	480d      	ldr	r0, [pc, #52]	; (8001900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018cc:	f7ff fe22 	bl	8001514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <LoopForever+0x6>)
  ldr r1, =_edata
 80018d2:	490d      	ldr	r1, [pc, #52]	; (8001908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d4:	4a0d      	ldr	r2, [pc, #52]	; (800190c <LoopForever+0xe>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e8:	4c0a      	ldr	r4, [pc, #40]	; (8001914 <LoopForever+0x16>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018f6:	f004 f84f 	bl	8005998 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80018fa:	f7ff fb29 	bl	8000f50 <main>

080018fe <LoopForever>:

LoopForever:
  b LoopForever
 80018fe:	e7fe      	b.n	80018fe <LoopForever>
  ldr   r0, =_estack
 8001900:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	200004ac 	.word	0x200004ac
  ldr r2, =_sidata
 800190c:	08005b80 	.word	0x08005b80
  ldr r2, =_sbss
 8001910:	200004ac 	.word	0x200004ac
  ldr r4, =_ebss
 8001914:	20000808 	.word	0x20000808

08001918 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC1_COMP_IRQHandler>
	...

0800191c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_Init+0x3c>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_Init+0x3c>)
 800192e:	2180      	movs	r1, #128	; 0x80
 8001930:	0049      	lsls	r1, r1, #1
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001936:	2003      	movs	r0, #3
 8001938:	f000 f810 	bl	800195c <HAL_InitTick>
 800193c:	1e03      	subs	r3, r0, #0
 800193e:	d003      	beq.n	8001948 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001940:	1dfb      	adds	r3, r7, #7
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	e001      	b.n	800194c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001948:	f7ff fd90 	bl	800146c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800194c:	1dfb      	adds	r3, r7, #7
 800194e:	781b      	ldrb	r3, [r3, #0]
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40022000 	.word	0x40022000

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001964:	230f      	movs	r3, #15
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_InitTick+0x88>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d02b      	beq.n	80019cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_InitTick+0x8c>)
 8001976:	681c      	ldr	r4, [r3, #0]
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_InitTick+0x88>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	0019      	movs	r1, r3
 800197e:	23fa      	movs	r3, #250	; 0xfa
 8001980:	0098      	lsls	r0, r3, #2
 8001982:	f7fe fbbd 	bl	8000100 <__udivsi3>
 8001986:	0003      	movs	r3, r0
 8001988:	0019      	movs	r1, r3
 800198a:	0020      	movs	r0, r4
 800198c:	f7fe fbb8 	bl	8000100 <__udivsi3>
 8001990:	0003      	movs	r3, r0
 8001992:	0018      	movs	r0, r3
 8001994:	f000 fd97 	bl	80024c6 <HAL_SYSTICK_Config>
 8001998:	1e03      	subs	r3, r0, #0
 800199a:	d112      	bne.n	80019c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d80a      	bhi.n	80019b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	2301      	movs	r3, #1
 80019a6:	425b      	negs	r3, r3
 80019a8:	2200      	movs	r2, #0
 80019aa:	0018      	movs	r0, r3
 80019ac:	f000 fd66 	bl	800247c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_InitTick+0x90>)
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e00d      	b.n	80019d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80019b8:	230f      	movs	r3, #15
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	e008      	b.n	80019d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019c2:	230f      	movs	r3, #15
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e003      	b.n	80019d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019cc:	230f      	movs	r3, #15
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80019d4:	230f      	movs	r3, #15
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	781b      	ldrb	r3, [r3, #0]
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b005      	add	sp, #20
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	20000078 	.word	0x20000078
 80019e8:	20000070 	.word	0x20000070
 80019ec:	20000074 	.word	0x20000074

080019f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_IncTick+0x1c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	001a      	movs	r2, r3
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_IncTick+0x20>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	18d2      	adds	r2, r2, r3
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_IncTick+0x20>)
 8001a02:	601a      	str	r2, [r3, #0]
}
 8001a04:	46c0      	nop			; (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	20000078 	.word	0x20000078
 8001a10:	20000800 	.word	0x20000800

08001a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  return uwTick;
 8001a18:	4b02      	ldr	r3, [pc, #8]	; (8001a24 <HAL_GetTick+0x10>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	20000800 	.word	0x20000800

08001a28 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001a38:	401a      	ands	r2, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	601a      	str	r2, [r3, #0]
}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b002      	add	sp, #8
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	fe3fffff 	.word	0xfe3fffff

08001a50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	23e0      	movs	r3, #224	; 0xe0
 8001a5e:	045b      	lsls	r3, r3, #17
 8001a60:	4013      	ands	r3, r2
}
 8001a62:	0018      	movs	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b002      	add	sp, #8
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	400a      	ands	r2, r1
 8001a80:	2107      	movs	r1, #7
 8001a82:	4091      	lsls	r1, r2
 8001a84:	000a      	movs	r2, r1
 8001a86:	43d2      	mvns	r2, r2
 8001a88:	401a      	ands	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	400b      	ands	r3, r1
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4099      	lsls	r1, r3
 8001a94:	000b      	movs	r3, r1
 8001a96:	431a      	orrs	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b004      	add	sp, #16
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	2107      	movs	r1, #7
 8001aba:	4091      	lsls	r1, r2
 8001abc:	000a      	movs	r2, r1
 8001abe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001ac6:	40da      	lsrs	r2, r3
 8001ac8:	0013      	movs	r3, r2
}
 8001aca:	0018      	movs	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b002      	add	sp, #8
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	211f      	movs	r1, #31
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	210f      	movs	r1, #15
 8001aea:	4091      	lsls	r1, r2
 8001aec:	000a      	movs	r2, r1
 8001aee:	43d2      	mvns	r2, r2
 8001af0:	401a      	ands	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	0e9b      	lsrs	r3, r3, #26
 8001af6:	210f      	movs	r1, #15
 8001af8:	4019      	ands	r1, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	201f      	movs	r0, #31
 8001afe:	4003      	ands	r3, r0
 8001b00:	4099      	lsls	r1, r3
 8001b02:	000b      	movs	r3, r1
 8001b04:	431a      	orrs	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b004      	add	sp, #16
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	035b      	lsls	r3, r3, #13
 8001b24:	0b5b      	lsrs	r3, r3, #13
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b2c:	46c0      	nop			; (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b002      	add	sp, #8
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	0352      	lsls	r2, r2, #13
 8001b46:	0b52      	lsrs	r2, r2, #13
 8001b48:	43d2      	mvns	r2, r2
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b002      	add	sp, #8
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	0212      	lsls	r2, r2, #8
 8001b6c:	43d2      	mvns	r2, r2
 8001b6e:	401a      	ands	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	400b      	ands	r3, r1
 8001b78:	4904      	ldr	r1, [pc, #16]	; (8001b8c <LL_ADC_SetChannelSamplingTime+0x34>)
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b004      	add	sp, #16
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	07ffff00 	.word	0x07ffff00

08001b90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	0552      	lsls	r2, r2, #21
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b002      	add	sp, #8
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	6fffffe8 	.word	0x6fffffe8

08001bb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	055b      	lsls	r3, r3, #21
 8001bc8:	401a      	ands	r2, r3
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	055b      	lsls	r3, r3, #21
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d101      	bne.n	8001bd6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b002      	add	sp, #8
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <LL_ADC_IsEnabled+0x18>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <LL_ADC_IsEnabled+0x1a>
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b002      	add	sp, #8
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2204      	movs	r2, #4
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d101      	bne.n	8001c1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b002      	add	sp, #8
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2c:	231f      	movs	r3, #31
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e17f      	b.n	8001f4a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10a      	bne.n	8001c68 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7fe ff59 	bl	8000b0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2254      	movs	r2, #84	; 0x54
 8001c64:	2100      	movs	r1, #0
 8001c66:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff ffa3 	bl	8001bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8001c72:	1e03      	subs	r3, r0, #0
 8001c74:	d115      	bne.n	8001ca2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f7ff ff88 	bl	8001b90 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c80:	4bb4      	ldr	r3, [pc, #720]	; (8001f54 <HAL_ADC_Init+0x330>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	49b4      	ldr	r1, [pc, #720]	; (8001f58 <HAL_ADC_Init+0x334>)
 8001c86:	0018      	movs	r0, r3
 8001c88:	f7fe fa3a 	bl	8000100 <__udivsi3>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	3301      	adds	r3, #1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c94:	e002      	b.n	8001c9c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f9      	bne.n	8001c96 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f7ff ff86 	bl	8001bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8001cac:	1e03      	subs	r3, r0, #0
 8001cae:	d10f      	bne.n	8001cd0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cc8:	231f      	movs	r3, #31
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7ff ff94 	bl	8001c02 <LL_ADC_REG_IsConversionOngoing>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d000      	beq.n	8001cea <HAL_ADC_Init+0xc6>
 8001ce8:	e122      	b.n	8001f30 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d000      	beq.n	8001cf2 <HAL_ADC_Init+0xce>
 8001cf0:	e11e      	b.n	8001f30 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	4a99      	ldr	r2, [pc, #612]	; (8001f5c <HAL_ADC_Init+0x338>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0018      	movs	r0, r3
 8001d08:	f7ff ff6a 	bl	8001be0 <LL_ADC_IsEnabled>
 8001d0c:	1e03      	subs	r3, r0, #0
 8001d0e:	d000      	beq.n	8001d12 <HAL_ADC_Init+0xee>
 8001d10:	e0ad      	b.n	8001e6e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7e1b      	ldrb	r3, [r3, #24]
 8001d1a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001d1c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7e5b      	ldrb	r3, [r3, #25]
 8001d22:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d24:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7e9b      	ldrb	r3, [r3, #26]
 8001d2a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d2c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_ADC_Init+0x118>
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	015b      	lsls	r3, r3, #5
 8001d3a:	e000      	b.n	8001d3e <HAL_ADC_Init+0x11a>
 8001d3c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d3e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d44:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	da04      	bge.n	8001d58 <HAL_ADC_Init+0x134>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	e001      	b.n	8001d5c <HAL_ADC_Init+0x138>
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001d5c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	212c      	movs	r1, #44	; 0x2c
 8001d62:	5c5b      	ldrb	r3, [r3, r1]
 8001d64:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001d66:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	5c9b      	ldrb	r3, [r3, r2]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d115      	bne.n	8001da4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7e9b      	ldrb	r3, [r3, #26]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d105      	bne.n	8001d8c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	0252      	lsls	r2, r2, #9
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	e00b      	b.n	8001da4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	2220      	movs	r2, #32
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00a      	beq.n	8001dc2 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db0:	23e0      	movs	r3, #224	; 0xe0
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4a65      	ldr	r2, [pc, #404]	; (8001f60 <HAL_ADC_Init+0x33c>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	0f9b      	lsrs	r3, r3, #30
 8001dde:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001de4:	4313      	orrs	r3, r2
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	223c      	movs	r2, #60	; 0x3c
 8001df0:	5c9b      	ldrb	r3, [r3, r2]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d111      	bne.n	8001e1a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	0f9b      	lsrs	r3, r3, #30
 8001dfc:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e02:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001e08:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001e0e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	2201      	movs	r2, #1
 8001e16:	4313      	orrs	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	4a50      	ldr	r2, [pc, #320]	; (8001f64 <HAL_ADC_Init+0x340>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	23c0      	movs	r3, #192	; 0xc0
 8001e36:	061b      	lsls	r3, r3, #24
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d018      	beq.n	8001e6e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	05db      	lsls	r3, r3, #23
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d012      	beq.n	8001e6e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	061b      	lsls	r3, r3, #24
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d00c      	beq.n	8001e6e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001e54:	4b44      	ldr	r3, [pc, #272]	; (8001f68 <HAL_ADC_Init+0x344>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a44      	ldr	r2, [pc, #272]	; (8001f6c <HAL_ADC_Init+0x348>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	23f0      	movs	r3, #240	; 0xf0
 8001e64:	039b      	lsls	r3, r3, #14
 8001e66:	401a      	ands	r2, r3
 8001e68:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <HAL_ADC_Init+0x344>)
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e76:	001a      	movs	r2, r3
 8001e78:	2100      	movs	r1, #0
 8001e7a:	f7ff fdf6 	bl	8001a6a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	493a      	ldr	r1, [pc, #232]	; (8001f70 <HAL_ADC_Init+0x34c>)
 8001e88:	001a      	movs	r2, r3
 8001e8a:	f7ff fdee 	bl	8001a6a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2110      	movs	r1, #16
 8001ea2:	4249      	negs	r1, r1
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ea8:	e018      	b.n	8001edc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	039b      	lsls	r3, r3, #14
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d112      	bne.n	8001edc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	221c      	movs	r2, #28
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2210      	movs	r2, #16
 8001eca:	4252      	negs	r2, r2
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	0011      	movs	r1, r2
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f7ff fdde 	bl	8001aa4 <LL_ADC_GetSamplingTimeCommonChannels>
 8001ee8:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d10b      	bne.n	8001f0a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	2203      	movs	r2, #3
 8001efe:	4393      	bics	r3, r2
 8001f00:	2201      	movs	r2, #1
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f08:	e01c      	b.n	8001f44 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0e:	2212      	movs	r2, #18
 8001f10:	4393      	bics	r3, r2
 8001f12:	2210      	movs	r2, #16
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1e:	2201      	movs	r2, #1
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001f26:	231f      	movs	r3, #31
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f2e:	e009      	b.n	8001f44 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	2210      	movs	r2, #16
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f3c:	231f      	movs	r3, #31
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001f44:	231f      	movs	r3, #31
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	781b      	ldrb	r3, [r3, #0]
}
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b008      	add	sp, #32
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	20000070 	.word	0x20000070
 8001f58:	00030d40 	.word	0x00030d40
 8001f5c:	fffffefd 	.word	0xfffffefd
 8001f60:	fffe0201 	.word	0xfffe0201
 8001f64:	1ffffc02 	.word	0x1ffffc02
 8001f68:	40012708 	.word	0x40012708
 8001f6c:	ffc3ffff 	.word	0xffc3ffff
 8001f70:	07ffff04 	.word	0x07ffff04

08001f74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7e:	2317      	movs	r3, #23
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2254      	movs	r2, #84	; 0x54
 8001f8e:	5c9b      	ldrb	r3, [r3, r2]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x24>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e1c0      	b.n	800231a <HAL_ADC_ConfigChannel+0x3a6>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2254      	movs	r2, #84	; 0x54
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f7ff fe2c 	bl	8001c02 <LL_ADC_REG_IsConversionOngoing>
 8001faa:	1e03      	subs	r3, r0, #0
 8001fac:	d000      	beq.n	8001fb0 <HAL_ADC_ConfigChannel+0x3c>
 8001fae:	e1a3      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d100      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x46>
 8001fb8:	e143      	b.n	8002242 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	061b      	lsls	r3, r3, #24
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d004      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fca:	4ac1      	ldr	r2, [pc, #772]	; (80022d0 <HAL_ADC_ConfigChannel+0x35c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d108      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0019      	movs	r1, r3
 8001fda:	0010      	movs	r0, r2
 8001fdc:	f7ff fd99 	bl	8001b12 <LL_ADC_REG_SetSequencerChAdd>
 8001fe0:	e0c9      	b.n	8002176 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	211f      	movs	r1, #31
 8001fec:	400b      	ands	r3, r1
 8001fee:	210f      	movs	r1, #15
 8001ff0:	4099      	lsls	r1, r3
 8001ff2:	000b      	movs	r3, r1
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	035b      	lsls	r3, r3, #13
 8002000:	0b5b      	lsrs	r3, r3, #13
 8002002:	d105      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x9c>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	0e9b      	lsrs	r3, r3, #26
 800200a:	221f      	movs	r2, #31
 800200c:	4013      	ands	r3, r2
 800200e:	e098      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2201      	movs	r2, #1
 8002016:	4013      	ands	r3, r2
 8002018:	d000      	beq.n	800201c <HAL_ADC_ConfigChannel+0xa8>
 800201a:	e091      	b.n	8002140 <HAL_ADC_ConfigChannel+0x1cc>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2202      	movs	r2, #2
 8002022:	4013      	ands	r3, r2
 8002024:	d000      	beq.n	8002028 <HAL_ADC_ConfigChannel+0xb4>
 8002026:	e089      	b.n	800213c <HAL_ADC_ConfigChannel+0x1c8>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2204      	movs	r2, #4
 800202e:	4013      	ands	r3, r2
 8002030:	d000      	beq.n	8002034 <HAL_ADC_ConfigChannel+0xc0>
 8002032:	e081      	b.n	8002138 <HAL_ADC_ConfigChannel+0x1c4>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2208      	movs	r2, #8
 800203a:	4013      	ands	r3, r2
 800203c:	d000      	beq.n	8002040 <HAL_ADC_ConfigChannel+0xcc>
 800203e:	e079      	b.n	8002134 <HAL_ADC_ConfigChannel+0x1c0>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2210      	movs	r2, #16
 8002046:	4013      	ands	r3, r2
 8002048:	d000      	beq.n	800204c <HAL_ADC_ConfigChannel+0xd8>
 800204a:	e071      	b.n	8002130 <HAL_ADC_ConfigChannel+0x1bc>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2220      	movs	r2, #32
 8002052:	4013      	ands	r3, r2
 8002054:	d000      	beq.n	8002058 <HAL_ADC_ConfigChannel+0xe4>
 8002056:	e069      	b.n	800212c <HAL_ADC_ConfigChannel+0x1b8>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2240      	movs	r2, #64	; 0x40
 800205e:	4013      	ands	r3, r2
 8002060:	d000      	beq.n	8002064 <HAL_ADC_ConfigChannel+0xf0>
 8002062:	e061      	b.n	8002128 <HAL_ADC_ConfigChannel+0x1b4>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2280      	movs	r2, #128	; 0x80
 800206a:	4013      	ands	r3, r2
 800206c:	d000      	beq.n	8002070 <HAL_ADC_ConfigChannel+0xfc>
 800206e:	e059      	b.n	8002124 <HAL_ADC_ConfigChannel+0x1b0>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4013      	ands	r3, r2
 800207a:	d151      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x1ac>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4013      	ands	r3, r2
 8002086:	d149      	bne.n	800211c <HAL_ADC_ConfigChannel+0x1a8>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4013      	ands	r3, r2
 8002092:	d141      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1a4>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	4013      	ands	r3, r2
 800209e:	d139      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x1a0>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	015b      	lsls	r3, r3, #5
 80020a8:	4013      	ands	r3, r2
 80020aa:	d131      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x19c>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	019b      	lsls	r3, r3, #6
 80020b4:	4013      	ands	r3, r2
 80020b6:	d129      	bne.n	800210c <HAL_ADC_ConfigChannel+0x198>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	01db      	lsls	r3, r3, #7
 80020c0:	4013      	ands	r3, r2
 80020c2:	d121      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x194>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	4013      	ands	r3, r2
 80020ce:	d119      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x190>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	025b      	lsls	r3, r3, #9
 80020d8:	4013      	ands	r3, r2
 80020da:	d111      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x18c>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	029b      	lsls	r3, r3, #10
 80020e4:	4013      	ands	r3, r2
 80020e6:	d109      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x188>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	02db      	lsls	r3, r3, #11
 80020f0:	4013      	ands	r3, r2
 80020f2:	d001      	beq.n	80020f8 <HAL_ADC_ConfigChannel+0x184>
 80020f4:	2312      	movs	r3, #18
 80020f6:	e024      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 80020f8:	2300      	movs	r3, #0
 80020fa:	e022      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 80020fc:	2311      	movs	r3, #17
 80020fe:	e020      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 8002100:	2310      	movs	r3, #16
 8002102:	e01e      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 8002104:	230f      	movs	r3, #15
 8002106:	e01c      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 8002108:	230e      	movs	r3, #14
 800210a:	e01a      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 800210c:	230d      	movs	r3, #13
 800210e:	e018      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 8002110:	230c      	movs	r3, #12
 8002112:	e016      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 8002114:	230b      	movs	r3, #11
 8002116:	e014      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 8002118:	230a      	movs	r3, #10
 800211a:	e012      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 800211c:	2309      	movs	r3, #9
 800211e:	e010      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 8002120:	2308      	movs	r3, #8
 8002122:	e00e      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 8002124:	2307      	movs	r3, #7
 8002126:	e00c      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 8002128:	2306      	movs	r3, #6
 800212a:	e00a      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 800212c:	2305      	movs	r3, #5
 800212e:	e008      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 8002130:	2304      	movs	r3, #4
 8002132:	e006      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 8002134:	2303      	movs	r3, #3
 8002136:	e004      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 8002138:	2302      	movs	r3, #2
 800213a:	e002      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1ce>
 8002140:	2300      	movs	r3, #0
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	6852      	ldr	r2, [r2, #4]
 8002146:	201f      	movs	r0, #31
 8002148:	4002      	ands	r2, r0
 800214a:	4093      	lsls	r3, r2
 800214c:	000a      	movs	r2, r1
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	429a      	cmp	r2, r3
 8002162:	d808      	bhi.n	8002176 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	001a      	movs	r2, r3
 8002172:	f7ff fcae 	bl	8001ad2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6819      	ldr	r1, [r3, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	001a      	movs	r2, r3
 8002184:	f7ff fce8 	bl	8001b58 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db00      	blt.n	8002192 <HAL_ADC_ConfigChannel+0x21e>
 8002190:	e0bc      	b.n	800230c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002192:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <HAL_ADC_ConfigChannel+0x360>)
 8002194:	0018      	movs	r0, r3
 8002196:	f7ff fc5b 	bl	8001a50 <LL_ADC_GetCommonPathInternalCh>
 800219a:	0003      	movs	r3, r0
 800219c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a4d      	ldr	r2, [pc, #308]	; (80022d8 <HAL_ADC_ConfigChannel+0x364>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d122      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021b0:	d11d      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	0412      	lsls	r2, r2, #16
 80021b8:	4313      	orrs	r3, r2
 80021ba:	4a46      	ldr	r2, [pc, #280]	; (80022d4 <HAL_ADC_ConfigChannel+0x360>)
 80021bc:	0019      	movs	r1, r3
 80021be:	0010      	movs	r0, r2
 80021c0:	f7ff fc32 	bl	8001a28 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021c4:	4b45      	ldr	r3, [pc, #276]	; (80022dc <HAL_ADC_ConfigChannel+0x368>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4945      	ldr	r1, [pc, #276]	; (80022e0 <HAL_ADC_ConfigChannel+0x36c>)
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7fd ff98 	bl	8000100 <__udivsi3>
 80021d0:	0003      	movs	r3, r0
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	0013      	movs	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	189b      	adds	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021de:	e002      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f9      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021ec:	e08e      	b.n	800230c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a3c      	ldr	r2, [pc, #240]	; (80022e4 <HAL_ADC_ConfigChannel+0x370>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d10e      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	045b      	lsls	r3, r3, #17
 80021fe:	4013      	ands	r3, r2
 8002200:	d109      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	0452      	lsls	r2, r2, #17
 8002208:	4313      	orrs	r3, r2
 800220a:	4a32      	ldr	r2, [pc, #200]	; (80022d4 <HAL_ADC_ConfigChannel+0x360>)
 800220c:	0019      	movs	r1, r3
 800220e:	0010      	movs	r0, r2
 8002210:	f7ff fc0a 	bl	8001a28 <LL_ADC_SetCommonPathInternalCh>
 8002214:	e07a      	b.n	800230c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a33      	ldr	r2, [pc, #204]	; (80022e8 <HAL_ADC_ConfigChannel+0x374>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d000      	beq.n	8002222 <HAL_ADC_ConfigChannel+0x2ae>
 8002220:	e074      	b.n	800230c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	03db      	lsls	r3, r3, #15
 8002228:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800222a:	d000      	beq.n	800222e <HAL_ADC_ConfigChannel+0x2ba>
 800222c:	e06e      	b.n	800230c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	03d2      	lsls	r2, r2, #15
 8002234:	4313      	orrs	r3, r2
 8002236:	4a27      	ldr	r2, [pc, #156]	; (80022d4 <HAL_ADC_ConfigChannel+0x360>)
 8002238:	0019      	movs	r1, r3
 800223a:	0010      	movs	r0, r2
 800223c:	f7ff fbf4 	bl	8001a28 <LL_ADC_SetCommonPathInternalCh>
 8002240:	e064      	b.n	800230c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	429a      	cmp	r2, r3
 800224c:	d004      	beq.n	8002258 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002252:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <HAL_ADC_ConfigChannel+0x35c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d107      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0019      	movs	r1, r3
 8002262:	0010      	movs	r0, r2
 8002264:	f7ff fc66 	bl	8001b34 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	da4d      	bge.n	800230c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002270:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_ADC_ConfigChannel+0x360>)
 8002272:	0018      	movs	r0, r3
 8002274:	f7ff fbec 	bl	8001a50 <LL_ADC_GetCommonPathInternalCh>
 8002278:	0003      	movs	r3, r0
 800227a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <HAL_ADC_ConfigChannel+0x364>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d108      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4a18      	ldr	r2, [pc, #96]	; (80022ec <HAL_ADC_ConfigChannel+0x378>)
 800228a:	4013      	ands	r3, r2
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <HAL_ADC_ConfigChannel+0x360>)
 800228e:	0019      	movs	r1, r3
 8002290:	0010      	movs	r0, r2
 8002292:	f7ff fbc9 	bl	8001a28 <LL_ADC_SetCommonPathInternalCh>
 8002296:	e039      	b.n	800230c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_ADC_ConfigChannel+0x370>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d108      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <HAL_ADC_ConfigChannel+0x37c>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <HAL_ADC_ConfigChannel+0x360>)
 80022aa:	0019      	movs	r1, r3
 80022ac:	0010      	movs	r0, r2
 80022ae:	f7ff fbbb 	bl	8001a28 <LL_ADC_SetCommonPathInternalCh>
 80022b2:	e02b      	b.n	800230c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <HAL_ADC_ConfigChannel+0x374>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d126      	bne.n	800230c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <HAL_ADC_ConfigChannel+0x380>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	4a03      	ldr	r2, [pc, #12]	; (80022d4 <HAL_ADC_ConfigChannel+0x360>)
 80022c6:	0019      	movs	r1, r3
 80022c8:	0010      	movs	r0, r2
 80022ca:	f7ff fbad 	bl	8001a28 <LL_ADC_SetCommonPathInternalCh>
 80022ce:	e01d      	b.n	800230c <HAL_ADC_ConfigChannel+0x398>
 80022d0:	80000004 	.word	0x80000004
 80022d4:	40012708 	.word	0x40012708
 80022d8:	b0001000 	.word	0xb0001000
 80022dc:	20000070 	.word	0x20000070
 80022e0:	00030d40 	.word	0x00030d40
 80022e4:	b8004000 	.word	0xb8004000
 80022e8:	b4002000 	.word	0xb4002000
 80022ec:	ff7fffff 	.word	0xff7fffff
 80022f0:	feffffff 	.word	0xfeffffff
 80022f4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	2220      	movs	r2, #32
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002304:	2317      	movs	r3, #23
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2254      	movs	r2, #84	; 0x54
 8002310:	2100      	movs	r1, #0
 8002312:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002314:	2317      	movs	r3, #23
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	781b      	ldrb	r3, [r3, #0]
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b006      	add	sp, #24
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)

08002324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	0002      	movs	r2, r0
 800232c:	1dfb      	adds	r3, r7, #7
 800232e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002330:	1dfb      	adds	r3, r7, #7
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b7f      	cmp	r3, #127	; 0x7f
 8002336:	d809      	bhi.n	800234c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002338:	1dfb      	adds	r3, r7, #7
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	001a      	movs	r2, r3
 800233e:	231f      	movs	r3, #31
 8002340:	401a      	ands	r2, r3
 8002342:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_EnableIRQ+0x30>)
 8002344:	2101      	movs	r1, #1
 8002346:	4091      	lsls	r1, r2
 8002348:	000a      	movs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}
 8002354:	e000e100 	.word	0xe000e100

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	0002      	movs	r2, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	1dfb      	adds	r3, r7, #7
 8002364:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002366:	1dfb      	adds	r3, r7, #7
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b7f      	cmp	r3, #127	; 0x7f
 800236c:	d828      	bhi.n	80023c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800236e:	4a2f      	ldr	r2, [pc, #188]	; (800242c <__NVIC_SetPriority+0xd4>)
 8002370:	1dfb      	adds	r3, r7, #7
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b25b      	sxtb	r3, r3
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	33c0      	adds	r3, #192	; 0xc0
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	589b      	ldr	r3, [r3, r2]
 800237e:	1dfa      	adds	r2, r7, #7
 8002380:	7812      	ldrb	r2, [r2, #0]
 8002382:	0011      	movs	r1, r2
 8002384:	2203      	movs	r2, #3
 8002386:	400a      	ands	r2, r1
 8002388:	00d2      	lsls	r2, r2, #3
 800238a:	21ff      	movs	r1, #255	; 0xff
 800238c:	4091      	lsls	r1, r2
 800238e:	000a      	movs	r2, r1
 8002390:	43d2      	mvns	r2, r2
 8002392:	401a      	ands	r2, r3
 8002394:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	019b      	lsls	r3, r3, #6
 800239a:	22ff      	movs	r2, #255	; 0xff
 800239c:	401a      	ands	r2, r3
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	0018      	movs	r0, r3
 80023a4:	2303      	movs	r3, #3
 80023a6:	4003      	ands	r3, r0
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <__NVIC_SetPriority+0xd4>)
 80023ae:	1dfb      	adds	r3, r7, #7
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b25b      	sxtb	r3, r3
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	430a      	orrs	r2, r1
 80023b8:	33c0      	adds	r3, #192	; 0xc0
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023be:	e031      	b.n	8002424 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c0:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <__NVIC_SetPriority+0xd8>)
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	0019      	movs	r1, r3
 80023c8:	230f      	movs	r3, #15
 80023ca:	400b      	ands	r3, r1
 80023cc:	3b08      	subs	r3, #8
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3306      	adds	r3, #6
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	18d3      	adds	r3, r2, r3
 80023d6:	3304      	adds	r3, #4
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	1dfa      	adds	r2, r7, #7
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	0011      	movs	r1, r2
 80023e0:	2203      	movs	r2, #3
 80023e2:	400a      	ands	r2, r1
 80023e4:	00d2      	lsls	r2, r2, #3
 80023e6:	21ff      	movs	r1, #255	; 0xff
 80023e8:	4091      	lsls	r1, r2
 80023ea:	000a      	movs	r2, r1
 80023ec:	43d2      	mvns	r2, r2
 80023ee:	401a      	ands	r2, r3
 80023f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	019b      	lsls	r3, r3, #6
 80023f6:	22ff      	movs	r2, #255	; 0xff
 80023f8:	401a      	ands	r2, r3
 80023fa:	1dfb      	adds	r3, r7, #7
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	0018      	movs	r0, r3
 8002400:	2303      	movs	r3, #3
 8002402:	4003      	ands	r3, r0
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002408:	4809      	ldr	r0, [pc, #36]	; (8002430 <__NVIC_SetPriority+0xd8>)
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	001c      	movs	r4, r3
 8002410:	230f      	movs	r3, #15
 8002412:	4023      	ands	r3, r4
 8002414:	3b08      	subs	r3, #8
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	430a      	orrs	r2, r1
 800241a:	3306      	adds	r3, #6
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	18c3      	adds	r3, r0, r3
 8002420:	3304      	adds	r3, #4
 8002422:	601a      	str	r2, [r3, #0]
}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b003      	add	sp, #12
 800242a:	bd90      	pop	{r4, r7, pc}
 800242c:	e000e100 	.word	0xe000e100
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	1e5a      	subs	r2, r3, #1
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	045b      	lsls	r3, r3, #17
 8002444:	429a      	cmp	r2, r3
 8002446:	d301      	bcc.n	800244c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002448:	2301      	movs	r3, #1
 800244a:	e010      	b.n	800246e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <SysTick_Config+0x44>)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	3a01      	subs	r2, #1
 8002452:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002454:	2301      	movs	r3, #1
 8002456:	425b      	negs	r3, r3
 8002458:	2103      	movs	r1, #3
 800245a:	0018      	movs	r0, r3
 800245c:	f7ff ff7c 	bl	8002358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <SysTick_Config+0x44>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <SysTick_Config+0x44>)
 8002468:	2207      	movs	r2, #7
 800246a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800246c:	2300      	movs	r3, #0
}
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b002      	add	sp, #8
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	e000e010 	.word	0xe000e010

0800247c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	210f      	movs	r1, #15
 8002488:	187b      	adds	r3, r7, r1
 800248a:	1c02      	adds	r2, r0, #0
 800248c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	187b      	adds	r3, r7, r1
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b25b      	sxtb	r3, r3
 8002496:	0011      	movs	r1, r2
 8002498:	0018      	movs	r0, r3
 800249a:	f7ff ff5d 	bl	8002358 <__NVIC_SetPriority>
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b004      	add	sp, #16
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	0002      	movs	r2, r0
 80024ae:	1dfb      	adds	r3, r7, #7
 80024b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7ff ff33 	bl	8002324 <__NVIC_EnableIRQ>
}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b002      	add	sp, #8
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7ff ffaf 	bl	8002434 <SysTick_Config>
 80024d6:	0003      	movs	r3, r0
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b002      	add	sp, #8
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e077      	b.n	80025e2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a3d      	ldr	r2, [pc, #244]	; (80025ec <HAL_DMA_Init+0x10c>)
 80024f8:	4694      	mov	ip, r2
 80024fa:	4463      	add	r3, ip
 80024fc:	2114      	movs	r1, #20
 80024fe:	0018      	movs	r0, r3
 8002500:	f7fd fdfe 	bl	8000100 <__udivsi3>
 8002504:	0003      	movs	r3, r0
 8002506:	009a      	lsls	r2, r3, #2
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2225      	movs	r2, #37	; 0x25
 8002510:	2102      	movs	r1, #2
 8002512:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4934      	ldr	r1, [pc, #208]	; (80025f0 <HAL_DMA_Init+0x110>)
 8002520:	400a      	ands	r2, r1
 8002522:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6819      	ldr	r1, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	0018      	movs	r0, r3
 800255e:	f000 fa8d 	bl	8002a7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	01db      	lsls	r3, r3, #7
 800256a:	429a      	cmp	r2, r3
 800256c:	d102      	bne.n	8002574 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	213f      	movs	r1, #63	; 0x3f
 800257e:	400a      	ands	r2, r1
 8002580:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800258a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d011      	beq.n	80025b8 <HAL_DMA_Init+0xd8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b04      	cmp	r3, #4
 800259a:	d80d      	bhi.n	80025b8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 fa98 	bl	8002ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	e008      	b.n	80025ca <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2225      	movs	r2, #37	; 0x25
 80025d4:	2101      	movs	r1, #1
 80025d6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	; 0x24
 80025dc:	2100      	movs	r1, #0
 80025de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b002      	add	sp, #8
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	bffdfff8 	.word	0xbffdfff8
 80025f0:	ffff800f 	.word	0xffff800f

080025f4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002602:	2317      	movs	r3, #23
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2224      	movs	r2, #36	; 0x24
 800260e:	5c9b      	ldrb	r3, [r3, r2]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_DMA_Start_IT+0x24>
 8002614:	2302      	movs	r3, #2
 8002616:	e06f      	b.n	80026f8 <HAL_DMA_Start_IT+0x104>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2224      	movs	r2, #36	; 0x24
 800261c:	2101      	movs	r1, #1
 800261e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2225      	movs	r2, #37	; 0x25
 8002624:	5c9b      	ldrb	r3, [r3, r2]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d157      	bne.n	80026dc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2225      	movs	r2, #37	; 0x25
 8002630:	2102      	movs	r1, #2
 8002632:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2101      	movs	r1, #1
 8002646:	438a      	bics	r2, r1
 8002648:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f9d3 	bl	80029fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	210e      	movs	r1, #14
 800266a:	430a      	orrs	r2, r1
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e00f      	b.n	8002690 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2104      	movs	r1, #4
 800267c:	438a      	bics	r2, r1
 800267e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	210a      	movs	r1, #10
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	025b      	lsls	r3, r3, #9
 800269a:	4013      	ands	r3, r2
 800269c:	d008      	beq.n	80026b0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	0049      	lsls	r1, r1, #1
 80026ac:	430a      	orrs	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c2:	2180      	movs	r1, #128	; 0x80
 80026c4:	0049      	lsls	r1, r1, #1
 80026c6:	430a      	orrs	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2101      	movs	r1, #1
 80026d6:	430a      	orrs	r2, r1
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e00a      	b.n	80026f2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2280      	movs	r2, #128	; 0x80
 80026e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2224      	movs	r2, #36	; 0x24
 80026e6:	2100      	movs	r1, #0
 80026e8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80026ea:	2317      	movs	r3, #23
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80026f2:	2317      	movs	r3, #23
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	781b      	ldrb	r3, [r3, #0]
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b006      	add	sp, #24
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e050      	b.n	80027b4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2225      	movs	r2, #37	; 0x25
 8002716:	5c9b      	ldrb	r3, [r3, r2]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d008      	beq.n	8002730 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2204      	movs	r2, #4
 8002722:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	; 0x24
 8002728:	2100      	movs	r1, #0
 800272a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e041      	b.n	80027b4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	210e      	movs	r1, #14
 800273c:	438a      	bics	r2, r1
 800273e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	491c      	ldr	r1, [pc, #112]	; (80027bc <HAL_DMA_Abort+0xbc>)
 800274c:	400a      	ands	r2, r1
 800274e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2101      	movs	r1, #1
 800275c:	438a      	bics	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_DMA_Abort+0xc0>)
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	221c      	movs	r2, #28
 800276a:	4013      	ands	r3, r2
 800276c:	2201      	movs	r2, #1
 800276e:	409a      	lsls	r2, r3
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <HAL_DMA_Abort+0xc0>)
 8002772:	430a      	orrs	r2, r1
 8002774:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800277e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00c      	beq.n	80027a2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002792:	490a      	ldr	r1, [pc, #40]	; (80027bc <HAL_DMA_Abort+0xbc>)
 8002794:	400a      	ands	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80027a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2225      	movs	r2, #37	; 0x25
 80027a6:	2101      	movs	r1, #1
 80027a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2224      	movs	r2, #36	; 0x24
 80027ae:	2100      	movs	r1, #0
 80027b0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b002      	add	sp, #8
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	fffffeff 	.word	0xfffffeff
 80027c0:	40020000 	.word	0x40020000

080027c4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027cc:	210f      	movs	r1, #15
 80027ce:	187b      	adds	r3, r7, r1
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2225      	movs	r2, #37	; 0x25
 80027d8:	5c9b      	ldrb	r3, [r3, r2]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d006      	beq.n	80027ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2204      	movs	r2, #4
 80027e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80027e6:	187b      	adds	r3, r7, r1
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
 80027ec:	e049      	b.n	8002882 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	210e      	movs	r1, #14
 80027fa:	438a      	bics	r2, r1
 80027fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2101      	movs	r1, #1
 800280a:	438a      	bics	r2, r1
 800280c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	491d      	ldr	r1, [pc, #116]	; (8002890 <HAL_DMA_Abort_IT+0xcc>)
 800281a:	400a      	ands	r2, r1
 800281c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_DMA_Abort_IT+0xd0>)
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	221c      	movs	r2, #28
 8002828:	4013      	ands	r3, r2
 800282a:	2201      	movs	r2, #1
 800282c:	409a      	lsls	r2, r3
 800282e:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_DMA_Abort_IT+0xd0>)
 8002830:	430a      	orrs	r2, r1
 8002832:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800283c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002850:	490f      	ldr	r1, [pc, #60]	; (8002890 <HAL_DMA_Abort_IT+0xcc>)
 8002852:	400a      	ands	r2, r1
 8002854:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800285e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2225      	movs	r2, #37	; 0x25
 8002864:	2101      	movs	r1, #1
 8002866:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	; 0x24
 800286c:	2100      	movs	r1, #0
 800286e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002874:	2b00      	cmp	r3, #0
 8002876:	d004      	beq.n	8002882 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	0010      	movs	r0, r2
 8002880:	4798      	blx	r3
    }
  }
  return status;
 8002882:	230f      	movs	r3, #15
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	781b      	ldrb	r3, [r3, #0]
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	b004      	add	sp, #16
 800288e:	bd80      	pop	{r7, pc}
 8002890:	fffffeff 	.word	0xfffffeff
 8002894:	40020000 	.word	0x40020000

08002898 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80028a0:	4b55      	ldr	r3, [pc, #340]	; (80029f8 <HAL_DMA_IRQHandler+0x160>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	221c      	movs	r2, #28
 80028b4:	4013      	ands	r3, r2
 80028b6:	2204      	movs	r2, #4
 80028b8:	409a      	lsls	r2, r3
 80028ba:	0013      	movs	r3, r2
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4013      	ands	r3, r2
 80028c0:	d027      	beq.n	8002912 <HAL_DMA_IRQHandler+0x7a>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2204      	movs	r2, #4
 80028c6:	4013      	ands	r3, r2
 80028c8:	d023      	beq.n	8002912 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2220      	movs	r2, #32
 80028d2:	4013      	ands	r3, r2
 80028d4:	d107      	bne.n	80028e6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2104      	movs	r1, #4
 80028e2:	438a      	bics	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80028e6:	4b44      	ldr	r3, [pc, #272]	; (80029f8 <HAL_DMA_IRQHandler+0x160>)
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	221c      	movs	r2, #28
 80028f0:	4013      	ands	r3, r2
 80028f2:	2204      	movs	r2, #4
 80028f4:	409a      	lsls	r2, r3
 80028f6:	4b40      	ldr	r3, [pc, #256]	; (80029f8 <HAL_DMA_IRQHandler+0x160>)
 80028f8:	430a      	orrs	r2, r1
 80028fa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	2b00      	cmp	r3, #0
 8002902:	d100      	bne.n	8002906 <HAL_DMA_IRQHandler+0x6e>
 8002904:	e073      	b.n	80029ee <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	0010      	movs	r0, r2
 800290e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002910:	e06d      	b.n	80029ee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	221c      	movs	r2, #28
 8002918:	4013      	ands	r3, r2
 800291a:	2202      	movs	r2, #2
 800291c:	409a      	lsls	r2, r3
 800291e:	0013      	movs	r3, r2
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4013      	ands	r3, r2
 8002924:	d02e      	beq.n	8002984 <HAL_DMA_IRQHandler+0xec>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2202      	movs	r2, #2
 800292a:	4013      	ands	r3, r2
 800292c:	d02a      	beq.n	8002984 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2220      	movs	r2, #32
 8002936:	4013      	ands	r3, r2
 8002938:	d10b      	bne.n	8002952 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	210a      	movs	r1, #10
 8002946:	438a      	bics	r2, r1
 8002948:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2225      	movs	r2, #37	; 0x25
 800294e:	2101      	movs	r1, #1
 8002950:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002952:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <HAL_DMA_IRQHandler+0x160>)
 8002954:	6859      	ldr	r1, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	221c      	movs	r2, #28
 800295c:	4013      	ands	r3, r2
 800295e:	2202      	movs	r2, #2
 8002960:	409a      	lsls	r2, r3
 8002962:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <HAL_DMA_IRQHandler+0x160>)
 8002964:	430a      	orrs	r2, r1
 8002966:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	2100      	movs	r1, #0
 800296e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d03a      	beq.n	80029ee <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	0010      	movs	r0, r2
 8002980:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002982:	e034      	b.n	80029ee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	221c      	movs	r2, #28
 800298a:	4013      	ands	r3, r2
 800298c:	2208      	movs	r2, #8
 800298e:	409a      	lsls	r2, r3
 8002990:	0013      	movs	r3, r2
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4013      	ands	r3, r2
 8002996:	d02b      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x158>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2208      	movs	r2, #8
 800299c:	4013      	ands	r3, r2
 800299e:	d027      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	210e      	movs	r1, #14
 80029ac:	438a      	bics	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_DMA_IRQHandler+0x160>)
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	221c      	movs	r2, #28
 80029ba:	4013      	ands	r3, r2
 80029bc:	2201      	movs	r2, #1
 80029be:	409a      	lsls	r2, r3
 80029c0:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_DMA_IRQHandler+0x160>)
 80029c2:	430a      	orrs	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2225      	movs	r2, #37	; 0x25
 80029d0:	2101      	movs	r1, #1
 80029d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2224      	movs	r2, #36	; 0x24
 80029d8:	2100      	movs	r1, #0
 80029da:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	0010      	movs	r0, r2
 80029ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	46c0      	nop			; (mov r8, r8)
}
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b004      	add	sp, #16
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40020000 	.word	0x40020000

080029fc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002a24:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002a26:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <DMA_SetConfig+0x7c>)
 8002a28:	6859      	ldr	r1, [r3, #4]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	221c      	movs	r2, #28
 8002a30:	4013      	ands	r3, r2
 8002a32:	2201      	movs	r2, #1
 8002a34:	409a      	lsls	r2, r3
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <DMA_SetConfig+0x7c>)
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d108      	bne.n	8002a5e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a5c:	e007      	b.n	8002a6e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	60da      	str	r2, [r3, #12]
}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b004      	add	sp, #16
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	40020000 	.word	0x40020000

08002a7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	4a10      	ldr	r2, [pc, #64]	; (8002acc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002a8c:	4694      	mov	ip, r2
 8002a8e:	4463      	add	r3, ip
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	001a      	movs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	23ff      	movs	r3, #255	; 0xff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	3b08      	subs	r3, #8
 8002aa4:	2114      	movs	r1, #20
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f7fd fb2a 	bl	8000100 <__udivsi3>
 8002aac:	0003      	movs	r3, r0
 8002aae:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a07      	ldr	r2, [pc, #28]	; (8002ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002ab4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	221f      	movs	r2, #31
 8002aba:	4013      	ands	r3, r2
 8002abc:	2201      	movs	r2, #1
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b004      	add	sp, #16
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	10008200 	.word	0x10008200
 8002ad0:	40020880 	.word	0x40020880

08002ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	223f      	movs	r2, #63	; 0x3f
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002aea:	4694      	mov	ip, r2
 8002aec:	4463      	add	r3, ip
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	001a      	movs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	2203      	movs	r2, #3
 8002b02:	4013      	ands	r3, r2
 8002b04:	2201      	movs	r2, #1
 8002b06:	409a      	lsls	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b004      	add	sp, #16
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	1000823f 	.word	0x1000823f
 8002b18:	40020940 	.word	0x40020940

08002b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b2a:	e147      	b.n	8002dbc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2101      	movs	r1, #1
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4091      	lsls	r1, r2
 8002b36:	000a      	movs	r2, r1
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d100      	bne.n	8002b44 <HAL_GPIO_Init+0x28>
 8002b42:	e138      	b.n	8002db6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d005      	beq.n	8002b5c <HAL_GPIO_Init+0x40>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2203      	movs	r2, #3
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d130      	bne.n	8002bbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	0013      	movs	r3, r2
 8002b6c:	43da      	mvns	r2, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	0013      	movs	r3, r2
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b92:	2201      	movs	r2, #1
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	409a      	lsls	r2, r3
 8002b98:	0013      	movs	r3, r2
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	2201      	movs	r2, #1
 8002baa:	401a      	ands	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	0013      	movs	r3, r2
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d017      	beq.n	8002bfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	0013      	movs	r3, r2
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	409a      	lsls	r2, r3
 8002bec:	0013      	movs	r3, r2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2203      	movs	r2, #3
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d123      	bne.n	8002c4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	0092      	lsls	r2, r2, #2
 8002c10:	58d3      	ldr	r3, [r2, r3]
 8002c12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2207      	movs	r2, #7
 8002c18:	4013      	ands	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	0013      	movs	r3, r2
 8002c22:	43da      	mvns	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2107      	movs	r1, #7
 8002c32:	400b      	ands	r3, r1
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	409a      	lsls	r2, r3
 8002c38:	0013      	movs	r3, r2
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	08da      	lsrs	r2, r3, #3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3208      	adds	r2, #8
 8002c48:	0092      	lsls	r2, r2, #2
 8002c4a:	6939      	ldr	r1, [r7, #16]
 8002c4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	2203      	movs	r2, #3
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	0013      	movs	r3, r2
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	409a      	lsls	r2, r3
 8002c74:	0013      	movs	r3, r2
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	23c0      	movs	r3, #192	; 0xc0
 8002c88:	029b      	lsls	r3, r3, #10
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d100      	bne.n	8002c90 <HAL_GPIO_Init+0x174>
 8002c8e:	e092      	b.n	8002db6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002c90:	4a50      	ldr	r2, [pc, #320]	; (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	089b      	lsrs	r3, r3, #2
 8002c96:	3318      	adds	r3, #24
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	589b      	ldr	r3, [r3, r2]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	0013      	movs	r3, r2
 8002cac:	43da      	mvns	r2, r3
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	23a0      	movs	r3, #160	; 0xa0
 8002cb8:	05db      	lsls	r3, r3, #23
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0x1ca>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a45      	ldr	r2, [pc, #276]	; (8002dd8 <HAL_GPIO_Init+0x2bc>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_GPIO_Init+0x1c6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a44      	ldr	r2, [pc, #272]	; (8002ddc <HAL_GPIO_Init+0x2c0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <HAL_GPIO_Init+0x1c2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a43      	ldr	r2, [pc, #268]	; (8002de0 <HAL_GPIO_Init+0x2c4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_GPIO_Init+0x1be>
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e006      	b.n	8002ce8 <HAL_GPIO_Init+0x1cc>
 8002cda:	2305      	movs	r3, #5
 8002cdc:	e004      	b.n	8002ce8 <HAL_GPIO_Init+0x1cc>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_Init+0x1cc>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_GPIO_Init+0x1cc>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	2103      	movs	r1, #3
 8002cec:	400a      	ands	r2, r1
 8002cee:	00d2      	lsls	r2, r2, #3
 8002cf0:	4093      	lsls	r3, r2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002cf8:	4936      	ldr	r1, [pc, #216]	; (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3318      	adds	r3, #24
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d06:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	035b      	lsls	r3, r3, #13
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d2a:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002d30:	4b28      	ldr	r3, [pc, #160]	; (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	43da      	mvns	r2, r3
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	039b      	lsls	r3, r3, #14
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d54:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d5a:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002d5c:	2384      	movs	r3, #132	; 0x84
 8002d5e:	58d3      	ldr	r3, [r2, r3]
 8002d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	43da      	mvns	r2, r3
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	029b      	lsls	r3, r3, #10
 8002d74:	4013      	ands	r3, r2
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d80:	4914      	ldr	r1, [pc, #80]	; (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002d82:	2284      	movs	r2, #132	; 0x84
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002d88:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	58d3      	ldr	r3, [r2, r3]
 8002d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	43da      	mvns	r2, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	025b      	lsls	r3, r3, #9
 8002da2:	4013      	ands	r3, r2
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dae:	4909      	ldr	r1, [pc, #36]	; (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002db0:	2280      	movs	r2, #128	; 0x80
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	3301      	adds	r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	40da      	lsrs	r2, r3
 8002dc4:	1e13      	subs	r3, r2, #0
 8002dc6:	d000      	beq.n	8002dca <HAL_GPIO_Init+0x2ae>
 8002dc8:	e6b0      	b.n	8002b2c <HAL_GPIO_Init+0x10>
  }
}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b006      	add	sp, #24
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021800 	.word	0x40021800
 8002dd8:	50000400 	.word	0x50000400
 8002ddc:	50000800 	.word	0x50000800
 8002de0:	50000c00 	.word	0x50000c00

08002de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	0008      	movs	r0, r1
 8002dee:	0011      	movs	r1, r2
 8002df0:	1cbb      	adds	r3, r7, #2
 8002df2:	1c02      	adds	r2, r0, #0
 8002df4:	801a      	strh	r2, [r3, #0]
 8002df6:	1c7b      	adds	r3, r7, #1
 8002df8:	1c0a      	adds	r2, r1, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dfc:	1c7b      	adds	r3, r7, #1
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e04:	1cbb      	adds	r3, r7, #2
 8002e06:	881a      	ldrh	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e0c:	e003      	b.n	8002e16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e0e:	1cbb      	adds	r3, r7, #2
 8002e10:	881a      	ldrh	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b002      	add	sp, #8
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e082      	b.n	8002f38 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2241      	movs	r2, #65	; 0x41
 8002e36:	5c9b      	ldrb	r3, [r3, r2]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d107      	bne.n	8002e4e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2240      	movs	r2, #64	; 0x40
 8002e42:	2100      	movs	r1, #0
 8002e44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f7fe f81f 	bl	8000e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2241      	movs	r2, #65	; 0x41
 8002e52:	2124      	movs	r1, #36	; 0x24
 8002e54:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2101      	movs	r1, #1
 8002e62:	438a      	bics	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4934      	ldr	r1, [pc, #208]	; (8002f40 <HAL_I2C_Init+0x120>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4931      	ldr	r1, [pc, #196]	; (8002f44 <HAL_I2C_Init+0x124>)
 8002e80:	400a      	ands	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d108      	bne.n	8002e9e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2180      	movs	r1, #128	; 0x80
 8002e96:	0209      	lsls	r1, r1, #8
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	e007      	b.n	8002eae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2184      	movs	r1, #132	; 0x84
 8002ea8:	0209      	lsls	r1, r1, #8
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d104      	bne.n	8002ec0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2280      	movs	r2, #128	; 0x80
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	491f      	ldr	r1, [pc, #124]	; (8002f48 <HAL_I2C_Init+0x128>)
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	491a      	ldr	r1, [pc, #104]	; (8002f44 <HAL_I2C_Init+0x124>)
 8002edc:	400a      	ands	r2, r1
 8002ede:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69d9      	ldr	r1, [r3, #28]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	430a      	orrs	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2241      	movs	r2, #65	; 0x41
 8002f24:	2120      	movs	r1, #32
 8002f26:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2242      	movs	r2, #66	; 0x42
 8002f32:	2100      	movs	r1, #0
 8002f34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b002      	add	sp, #8
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	f0ffffff 	.word	0xf0ffffff
 8002f44:	ffff7fff 	.word	0xffff7fff
 8002f48:	02008000 	.word	0x02008000

08002f4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2241      	movs	r2, #65	; 0x41
 8002f5a:	5c9b      	ldrb	r3, [r3, r2]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d138      	bne.n	8002fd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2240      	movs	r2, #64	; 0x40
 8002f66:	5c9b      	ldrb	r3, [r3, r2]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e032      	b.n	8002fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	2101      	movs	r1, #1
 8002f76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2241      	movs	r2, #65	; 0x41
 8002f7c:	2124      	movs	r1, #36	; 0x24
 8002f7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	438a      	bics	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4911      	ldr	r1, [pc, #68]	; (8002fe0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2241      	movs	r2, #65	; 0x41
 8002fc4:	2120      	movs	r1, #32
 8002fc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2240      	movs	r2, #64	; 0x40
 8002fcc:	2100      	movs	r1, #0
 8002fce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e000      	b.n	8002fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
  }
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	ffffefff 	.word	0xffffefff

08002fe4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2241      	movs	r2, #65	; 0x41
 8002ff2:	5c9b      	ldrb	r3, [r3, r2]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d139      	bne.n	800306e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2240      	movs	r2, #64	; 0x40
 8002ffe:	5c9b      	ldrb	r3, [r3, r2]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003004:	2302      	movs	r3, #2
 8003006:	e033      	b.n	8003070 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2240      	movs	r2, #64	; 0x40
 800300c:	2101      	movs	r1, #1
 800300e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2241      	movs	r2, #65	; 0x41
 8003014:	2124      	movs	r1, #36	; 0x24
 8003016:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2101      	movs	r1, #1
 8003024:	438a      	bics	r2, r1
 8003026:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a11      	ldr	r2, [pc, #68]	; (8003078 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003034:	4013      	ands	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2101      	movs	r1, #1
 8003056:	430a      	orrs	r2, r1
 8003058:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2241      	movs	r2, #65	; 0x41
 800305e:	2120      	movs	r1, #32
 8003060:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2240      	movs	r2, #64	; 0x40
 8003066:	2100      	movs	r1, #0
 8003068:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	e000      	b.n	8003070 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
  }
}
 8003070:	0018      	movs	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	b004      	add	sp, #16
 8003076:	bd80      	pop	{r7, pc}
 8003078:	fffff0ff 	.word	0xfffff0ff

0800307c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a19      	ldr	r2, [pc, #100]	; (80030f0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800308a:	4013      	ands	r3, r2
 800308c:	0019      	movs	r1, r3
 800308e:	4b17      	ldr	r3, [pc, #92]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	430a      	orrs	r2, r1
 8003094:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d11f      	bne.n	80030e0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80030a0:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	0013      	movs	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	189b      	adds	r3, r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4912      	ldr	r1, [pc, #72]	; (80030f8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7fd f826 	bl	8000100 <__udivsi3>
 80030b4:	0003      	movs	r3, r0
 80030b6:	3301      	adds	r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ba:	e008      	b.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	e001      	b.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e009      	b.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ce:	4b07      	ldr	r3, [pc, #28]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	401a      	ands	r2, r3
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	429a      	cmp	r2, r3
 80030de:	d0ed      	beq.n	80030bc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b004      	add	sp, #16
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	40007000 	.word	0x40007000
 80030f0:	fffff9ff 	.word	0xfffff9ff
 80030f4:	20000070 	.word	0x20000070
 80030f8:	000f4240 	.word	0x000f4240

080030fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	23e0      	movs	r3, #224	; 0xe0
 8003106:	01db      	lsls	r3, r3, #7
 8003108:	4013      	ands	r3, r2
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000

08003114 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e2fe      	b.n	8003724 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2201      	movs	r2, #1
 800312c:	4013      	ands	r3, r2
 800312e:	d100      	bne.n	8003132 <HAL_RCC_OscConfig+0x1e>
 8003130:	e07c      	b.n	800322c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003132:	4bc3      	ldr	r3, [pc, #780]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2238      	movs	r2, #56	; 0x38
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800313c:	4bc0      	ldr	r3, [pc, #768]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2203      	movs	r2, #3
 8003142:	4013      	ands	r3, r2
 8003144:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b10      	cmp	r3, #16
 800314a:	d102      	bne.n	8003152 <HAL_RCC_OscConfig+0x3e>
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2b03      	cmp	r3, #3
 8003150:	d002      	beq.n	8003158 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b08      	cmp	r3, #8
 8003156:	d10b      	bne.n	8003170 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	4bb9      	ldr	r3, [pc, #740]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	029b      	lsls	r3, r3, #10
 8003160:	4013      	ands	r3, r2
 8003162:	d062      	beq.n	800322a <HAL_RCC_OscConfig+0x116>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d15e      	bne.n	800322a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e2d9      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	2380      	movs	r3, #128	; 0x80
 8003176:	025b      	lsls	r3, r3, #9
 8003178:	429a      	cmp	r2, r3
 800317a:	d107      	bne.n	800318c <HAL_RCC_OscConfig+0x78>
 800317c:	4bb0      	ldr	r3, [pc, #704]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4baf      	ldr	r3, [pc, #700]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 8003182:	2180      	movs	r1, #128	; 0x80
 8003184:	0249      	lsls	r1, r1, #9
 8003186:	430a      	orrs	r2, r1
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	e020      	b.n	80031ce <HAL_RCC_OscConfig+0xba>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	23a0      	movs	r3, #160	; 0xa0
 8003192:	02db      	lsls	r3, r3, #11
 8003194:	429a      	cmp	r2, r3
 8003196:	d10e      	bne.n	80031b6 <HAL_RCC_OscConfig+0xa2>
 8003198:	4ba9      	ldr	r3, [pc, #676]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4ba8      	ldr	r3, [pc, #672]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 800319e:	2180      	movs	r1, #128	; 0x80
 80031a0:	02c9      	lsls	r1, r1, #11
 80031a2:	430a      	orrs	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	4ba6      	ldr	r3, [pc, #664]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4ba5      	ldr	r3, [pc, #660]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80031ac:	2180      	movs	r1, #128	; 0x80
 80031ae:	0249      	lsls	r1, r1, #9
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e00b      	b.n	80031ce <HAL_RCC_OscConfig+0xba>
 80031b6:	4ba2      	ldr	r3, [pc, #648]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4ba1      	ldr	r3, [pc, #644]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80031bc:	49a1      	ldr	r1, [pc, #644]	; (8003444 <HAL_RCC_OscConfig+0x330>)
 80031be:	400a      	ands	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	4b9f      	ldr	r3, [pc, #636]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4b9e      	ldr	r3, [pc, #632]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80031c8:	499f      	ldr	r1, [pc, #636]	; (8003448 <HAL_RCC_OscConfig+0x334>)
 80031ca:	400a      	ands	r2, r1
 80031cc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d014      	beq.n	8003200 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fe fc1d 	bl	8001a14 <HAL_GetTick>
 80031da:	0003      	movs	r3, r0
 80031dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e0:	f7fe fc18 	bl	8001a14 <HAL_GetTick>
 80031e4:	0002      	movs	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e298      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f2:	4b93      	ldr	r3, [pc, #588]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	029b      	lsls	r3, r3, #10
 80031fa:	4013      	ands	r3, r2
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0xcc>
 80031fe:	e015      	b.n	800322c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe fc08 	bl	8001a14 <HAL_GetTick>
 8003204:	0003      	movs	r3, r0
 8003206:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800320a:	f7fe fc03 	bl	8001a14 <HAL_GetTick>
 800320e:	0002      	movs	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b64      	cmp	r3, #100	; 0x64
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e283      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800321c:	4b88      	ldr	r3, [pc, #544]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	029b      	lsls	r3, r3, #10
 8003224:	4013      	ands	r3, r2
 8003226:	d1f0      	bne.n	800320a <HAL_RCC_OscConfig+0xf6>
 8003228:	e000      	b.n	800322c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2202      	movs	r2, #2
 8003232:	4013      	ands	r3, r2
 8003234:	d100      	bne.n	8003238 <HAL_RCC_OscConfig+0x124>
 8003236:	e099      	b.n	800336c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003238:	4b81      	ldr	r3, [pc, #516]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2238      	movs	r2, #56	; 0x38
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003242:	4b7f      	ldr	r3, [pc, #508]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2203      	movs	r2, #3
 8003248:	4013      	ands	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b10      	cmp	r3, #16
 8003250:	d102      	bne.n	8003258 <HAL_RCC_OscConfig+0x144>
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d002      	beq.n	800325e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d135      	bne.n	80032ca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800325e:	4b78      	ldr	r3, [pc, #480]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4013      	ands	r3, r2
 8003268:	d005      	beq.n	8003276 <HAL_RCC_OscConfig+0x162>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e256      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003276:	4b72      	ldr	r3, [pc, #456]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4a74      	ldr	r2, [pc, #464]	; (800344c <HAL_RCC_OscConfig+0x338>)
 800327c:	4013      	ands	r3, r2
 800327e:	0019      	movs	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	021a      	lsls	r2, r3, #8
 8003286:	4b6e      	ldr	r3, [pc, #440]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 8003288:	430a      	orrs	r2, r1
 800328a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d112      	bne.n	80032b8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003292:	4b6b      	ldr	r3, [pc, #428]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a6e      	ldr	r2, [pc, #440]	; (8003450 <HAL_RCC_OscConfig+0x33c>)
 8003298:	4013      	ands	r3, r2
 800329a:	0019      	movs	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	4b67      	ldr	r3, [pc, #412]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80032a2:	430a      	orrs	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80032a6:	4b66      	ldr	r3, [pc, #408]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	0adb      	lsrs	r3, r3, #11
 80032ac:	2207      	movs	r2, #7
 80032ae:	4013      	ands	r3, r2
 80032b0:	4a68      	ldr	r2, [pc, #416]	; (8003454 <HAL_RCC_OscConfig+0x340>)
 80032b2:	40da      	lsrs	r2, r3
 80032b4:	4b68      	ldr	r3, [pc, #416]	; (8003458 <HAL_RCC_OscConfig+0x344>)
 80032b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032b8:	4b68      	ldr	r3, [pc, #416]	; (800345c <HAL_RCC_OscConfig+0x348>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	0018      	movs	r0, r3
 80032be:	f7fe fb4d 	bl	800195c <HAL_InitTick>
 80032c2:	1e03      	subs	r3, r0, #0
 80032c4:	d051      	beq.n	800336a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e22c      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d030      	beq.n	8003334 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032d2:	4b5b      	ldr	r3, [pc, #364]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a5e      	ldr	r2, [pc, #376]	; (8003450 <HAL_RCC_OscConfig+0x33c>)
 80032d8:	4013      	ands	r3, r2
 80032da:	0019      	movs	r1, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	4b57      	ldr	r3, [pc, #348]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80032e2:	430a      	orrs	r2, r1
 80032e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80032e6:	4b56      	ldr	r3, [pc, #344]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b55      	ldr	r3, [pc, #340]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	0049      	lsls	r1, r1, #1
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fe fb8e 	bl	8001a14 <HAL_GetTick>
 80032f8:	0003      	movs	r3, r0
 80032fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fe:	f7fe fb89 	bl	8001a14 <HAL_GetTick>
 8003302:	0002      	movs	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e209      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003310:	4b4b      	ldr	r3, [pc, #300]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4013      	ands	r3, r2
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331c:	4b48      	ldr	r3, [pc, #288]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a4a      	ldr	r2, [pc, #296]	; (800344c <HAL_RCC_OscConfig+0x338>)
 8003322:	4013      	ands	r3, r2
 8003324:	0019      	movs	r1, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	021a      	lsls	r2, r3, #8
 800332c:	4b44      	ldr	r3, [pc, #272]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	e01b      	b.n	800336c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003334:	4b42      	ldr	r3, [pc, #264]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b41      	ldr	r3, [pc, #260]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 800333a:	4949      	ldr	r1, [pc, #292]	; (8003460 <HAL_RCC_OscConfig+0x34c>)
 800333c:	400a      	ands	r2, r1
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe fb68 	bl	8001a14 <HAL_GetTick>
 8003344:	0003      	movs	r3, r0
 8003346:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334a:	f7fe fb63 	bl	8001a14 <HAL_GetTick>
 800334e:	0002      	movs	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e1e3      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800335c:	4b38      	ldr	r3, [pc, #224]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4013      	ands	r3, r2
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x236>
 8003368:	e000      	b.n	800336c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800336a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2208      	movs	r2, #8
 8003372:	4013      	ands	r3, r2
 8003374:	d047      	beq.n	8003406 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003376:	4b32      	ldr	r3, [pc, #200]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2238      	movs	r2, #56	; 0x38
 800337c:	4013      	ands	r3, r2
 800337e:	2b18      	cmp	r3, #24
 8003380:	d10a      	bne.n	8003398 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003382:	4b2f      	ldr	r3, [pc, #188]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 8003384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003386:	2202      	movs	r2, #2
 8003388:	4013      	ands	r3, r2
 800338a:	d03c      	beq.n	8003406 <HAL_RCC_OscConfig+0x2f2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d138      	bne.n	8003406 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e1c5      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d019      	beq.n	80033d4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80033a0:	4b27      	ldr	r3, [pc, #156]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80033a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033a4:	4b26      	ldr	r3, [pc, #152]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80033a6:	2101      	movs	r1, #1
 80033a8:	430a      	orrs	r2, r1
 80033aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fe fb32 	bl	8001a14 <HAL_GetTick>
 80033b0:	0003      	movs	r3, r0
 80033b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b6:	f7fe fb2d 	bl	8001a14 <HAL_GetTick>
 80033ba:	0002      	movs	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e1ad      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033c8:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80033ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033cc:	2202      	movs	r2, #2
 80033ce:	4013      	ands	r3, r2
 80033d0:	d0f1      	beq.n	80033b6 <HAL_RCC_OscConfig+0x2a2>
 80033d2:	e018      	b.n	8003406 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80033d4:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80033d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80033da:	2101      	movs	r1, #1
 80033dc:	438a      	bics	r2, r1
 80033de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe fb18 	bl	8001a14 <HAL_GetTick>
 80033e4:	0003      	movs	r3, r0
 80033e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ea:	f7fe fb13 	bl	8001a14 <HAL_GetTick>
 80033ee:	0002      	movs	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e193      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033fc:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 80033fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003400:	2202      	movs	r2, #2
 8003402:	4013      	ands	r3, r2
 8003404:	d1f1      	bne.n	80033ea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2204      	movs	r2, #4
 800340c:	4013      	ands	r3, r2
 800340e:	d100      	bne.n	8003412 <HAL_RCC_OscConfig+0x2fe>
 8003410:	e0c6      	b.n	80035a0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003412:	231f      	movs	r3, #31
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2238      	movs	r2, #56	; 0x38
 8003420:	4013      	ands	r3, r2
 8003422:	2b20      	cmp	r3, #32
 8003424:	d11e      	bne.n	8003464 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCC_OscConfig+0x32c>)
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	2202      	movs	r2, #2
 800342c:	4013      	ands	r3, r2
 800342e:	d100      	bne.n	8003432 <HAL_RCC_OscConfig+0x31e>
 8003430:	e0b6      	b.n	80035a0 <HAL_RCC_OscConfig+0x48c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d000      	beq.n	800343c <HAL_RCC_OscConfig+0x328>
 800343a:	e0b1      	b.n	80035a0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e171      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
 8003440:	40021000 	.word	0x40021000
 8003444:	fffeffff 	.word	0xfffeffff
 8003448:	fffbffff 	.word	0xfffbffff
 800344c:	ffff80ff 	.word	0xffff80ff
 8003450:	ffffc7ff 	.word	0xffffc7ff
 8003454:	00f42400 	.word	0x00f42400
 8003458:	20000070 	.word	0x20000070
 800345c:	20000074 	.word	0x20000074
 8003460:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003464:	4bb1      	ldr	r3, [pc, #708]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	055b      	lsls	r3, r3, #21
 800346c:	4013      	ands	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_RCC_OscConfig+0x360>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <HAL_RCC_OscConfig+0x362>
 8003474:	2300      	movs	r3, #0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d011      	beq.n	800349e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	4bac      	ldr	r3, [pc, #688]	; (800372c <HAL_RCC_OscConfig+0x618>)
 800347c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800347e:	4bab      	ldr	r3, [pc, #684]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003480:	2180      	movs	r1, #128	; 0x80
 8003482:	0549      	lsls	r1, r1, #21
 8003484:	430a      	orrs	r2, r1
 8003486:	63da      	str	r2, [r3, #60]	; 0x3c
 8003488:	4ba8      	ldr	r3, [pc, #672]	; (800372c <HAL_RCC_OscConfig+0x618>)
 800348a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	055b      	lsls	r3, r3, #21
 8003490:	4013      	ands	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003496:	231f      	movs	r3, #31
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349e:	4ba4      	ldr	r3, [pc, #656]	; (8003730 <HAL_RCC_OscConfig+0x61c>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4013      	ands	r3, r2
 80034a8:	d11a      	bne.n	80034e0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034aa:	4ba1      	ldr	r3, [pc, #644]	; (8003730 <HAL_RCC_OscConfig+0x61c>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4ba0      	ldr	r3, [pc, #640]	; (8003730 <HAL_RCC_OscConfig+0x61c>)
 80034b0:	2180      	movs	r1, #128	; 0x80
 80034b2:	0049      	lsls	r1, r1, #1
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80034b8:	f7fe faac 	bl	8001a14 <HAL_GetTick>
 80034bc:	0003      	movs	r3, r0
 80034be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c2:	f7fe faa7 	bl	8001a14 <HAL_GetTick>
 80034c6:	0002      	movs	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e127      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d4:	4b96      	ldr	r3, [pc, #600]	; (8003730 <HAL_RCC_OscConfig+0x61c>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4013      	ands	r3, r2
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x3e2>
 80034e8:	4b90      	ldr	r3, [pc, #576]	; (800372c <HAL_RCC_OscConfig+0x618>)
 80034ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034ec:	4b8f      	ldr	r3, [pc, #572]	; (800372c <HAL_RCC_OscConfig+0x618>)
 80034ee:	2101      	movs	r1, #1
 80034f0:	430a      	orrs	r2, r1
 80034f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80034f4:	e01c      	b.n	8003530 <HAL_RCC_OscConfig+0x41c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0x404>
 80034fe:	4b8b      	ldr	r3, [pc, #556]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003500:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003502:	4b8a      	ldr	r3, [pc, #552]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003504:	2104      	movs	r1, #4
 8003506:	430a      	orrs	r2, r1
 8003508:	65da      	str	r2, [r3, #92]	; 0x5c
 800350a:	4b88      	ldr	r3, [pc, #544]	; (800372c <HAL_RCC_OscConfig+0x618>)
 800350c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800350e:	4b87      	ldr	r3, [pc, #540]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003510:	2101      	movs	r1, #1
 8003512:	430a      	orrs	r2, r1
 8003514:	65da      	str	r2, [r3, #92]	; 0x5c
 8003516:	e00b      	b.n	8003530 <HAL_RCC_OscConfig+0x41c>
 8003518:	4b84      	ldr	r3, [pc, #528]	; (800372c <HAL_RCC_OscConfig+0x618>)
 800351a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800351c:	4b83      	ldr	r3, [pc, #524]	; (800372c <HAL_RCC_OscConfig+0x618>)
 800351e:	2101      	movs	r1, #1
 8003520:	438a      	bics	r2, r1
 8003522:	65da      	str	r2, [r3, #92]	; 0x5c
 8003524:	4b81      	ldr	r3, [pc, #516]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003526:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003528:	4b80      	ldr	r3, [pc, #512]	; (800372c <HAL_RCC_OscConfig+0x618>)
 800352a:	2104      	movs	r1, #4
 800352c:	438a      	bics	r2, r1
 800352e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d014      	beq.n	8003562 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fe fa6c 	bl	8001a14 <HAL_GetTick>
 800353c:	0003      	movs	r3, r0
 800353e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003540:	e009      	b.n	8003556 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003542:	f7fe fa67 	bl	8001a14 <HAL_GetTick>
 8003546:	0002      	movs	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	4a79      	ldr	r2, [pc, #484]	; (8003734 <HAL_RCC_OscConfig+0x620>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0e6      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003556:	4b75      	ldr	r3, [pc, #468]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355a:	2202      	movs	r2, #2
 800355c:	4013      	ands	r3, r2
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x42e>
 8003560:	e013      	b.n	800358a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003562:	f7fe fa57 	bl	8001a14 <HAL_GetTick>
 8003566:	0003      	movs	r3, r0
 8003568:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800356a:	e009      	b.n	8003580 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7fe fa52 	bl	8001a14 <HAL_GetTick>
 8003570:	0002      	movs	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	4a6f      	ldr	r2, [pc, #444]	; (8003734 <HAL_RCC_OscConfig+0x620>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0d1      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003580:	4b6a      	ldr	r3, [pc, #424]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	2202      	movs	r2, #2
 8003586:	4013      	ands	r3, r2
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800358a:	231f      	movs	r3, #31
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d105      	bne.n	80035a0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003594:	4b65      	ldr	r3, [pc, #404]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003598:	4b64      	ldr	r3, [pc, #400]	; (800372c <HAL_RCC_OscConfig+0x618>)
 800359a:	4967      	ldr	r1, [pc, #412]	; (8003738 <HAL_RCC_OscConfig+0x624>)
 800359c:	400a      	ands	r2, r1
 800359e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d100      	bne.n	80035aa <HAL_RCC_OscConfig+0x496>
 80035a8:	e0bb      	b.n	8003722 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035aa:	4b60      	ldr	r3, [pc, #384]	; (800372c <HAL_RCC_OscConfig+0x618>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2238      	movs	r2, #56	; 0x38
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d100      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4a4>
 80035b6:	e07b      	b.n	80036b0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d156      	bne.n	800366e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c0:	4b5a      	ldr	r3, [pc, #360]	; (800372c <HAL_RCC_OscConfig+0x618>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b59      	ldr	r3, [pc, #356]	; (800372c <HAL_RCC_OscConfig+0x618>)
 80035c6:	495d      	ldr	r1, [pc, #372]	; (800373c <HAL_RCC_OscConfig+0x628>)
 80035c8:	400a      	ands	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fe fa22 	bl	8001a14 <HAL_GetTick>
 80035d0:	0003      	movs	r3, r0
 80035d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d6:	f7fe fa1d 	bl	8001a14 <HAL_GetTick>
 80035da:	0002      	movs	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e09d      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e8:	4b50      	ldr	r3, [pc, #320]	; (800372c <HAL_RCC_OscConfig+0x618>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	049b      	lsls	r3, r3, #18
 80035f0:	4013      	ands	r3, r2
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035f4:	4b4d      	ldr	r3, [pc, #308]	; (800372c <HAL_RCC_OscConfig+0x618>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a51      	ldr	r2, [pc, #324]	; (8003740 <HAL_RCC_OscConfig+0x62c>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1a      	ldr	r2, [r3, #32]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003620:	431a      	orrs	r2, r3
 8003622:	4b42      	ldr	r3, [pc, #264]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003624:	430a      	orrs	r2, r1
 8003626:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003628:	4b40      	ldr	r3, [pc, #256]	; (800372c <HAL_RCC_OscConfig+0x618>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b3f      	ldr	r3, [pc, #252]	; (800372c <HAL_RCC_OscConfig+0x618>)
 800362e:	2180      	movs	r1, #128	; 0x80
 8003630:	0449      	lsls	r1, r1, #17
 8003632:	430a      	orrs	r2, r1
 8003634:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003636:	4b3d      	ldr	r3, [pc, #244]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	4b3c      	ldr	r3, [pc, #240]	; (800372c <HAL_RCC_OscConfig+0x618>)
 800363c:	2180      	movs	r1, #128	; 0x80
 800363e:	0549      	lsls	r1, r1, #21
 8003640:	430a      	orrs	r2, r1
 8003642:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fe f9e6 	bl	8001a14 <HAL_GetTick>
 8003648:	0003      	movs	r3, r0
 800364a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364e:	f7fe f9e1 	bl	8001a14 <HAL_GetTick>
 8003652:	0002      	movs	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e061      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003660:	4b32      	ldr	r3, [pc, #200]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	049b      	lsls	r3, r3, #18
 8003668:	4013      	ands	r3, r2
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x53a>
 800366c:	e059      	b.n	8003722 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366e:	4b2f      	ldr	r3, [pc, #188]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4b2e      	ldr	r3, [pc, #184]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003674:	4931      	ldr	r1, [pc, #196]	; (800373c <HAL_RCC_OscConfig+0x628>)
 8003676:	400a      	ands	r2, r1
 8003678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367a:	f7fe f9cb 	bl	8001a14 <HAL_GetTick>
 800367e:	0003      	movs	r3, r0
 8003680:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe f9c6 	bl	8001a14 <HAL_GetTick>
 8003688:	0002      	movs	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e046      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003696:	4b25      	ldr	r3, [pc, #148]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	049b      	lsls	r3, r3, #18
 800369e:	4013      	ands	r3, r2
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80036a2:	4b22      	ldr	r3, [pc, #136]	; (800372c <HAL_RCC_OscConfig+0x618>)
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	4b21      	ldr	r3, [pc, #132]	; (800372c <HAL_RCC_OscConfig+0x618>)
 80036a8:	4926      	ldr	r1, [pc, #152]	; (8003744 <HAL_RCC_OscConfig+0x630>)
 80036aa:	400a      	ands	r2, r1
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	e038      	b.n	8003722 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e033      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <HAL_RCC_OscConfig+0x618>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2203      	movs	r2, #3
 80036c6:	401a      	ands	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d126      	bne.n	800371e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2270      	movs	r2, #112	; 0x70
 80036d4:	401a      	ands	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d11f      	bne.n	800371e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	23fe      	movs	r3, #254	; 0xfe
 80036e2:	01db      	lsls	r3, r3, #7
 80036e4:	401a      	ands	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d116      	bne.n	800371e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	23f8      	movs	r3, #248	; 0xf8
 80036f4:	039b      	lsls	r3, r3, #14
 80036f6:	401a      	ands	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d10e      	bne.n	800371e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	23e0      	movs	r3, #224	; 0xe0
 8003704:	051b      	lsls	r3, r3, #20
 8003706:	401a      	ands	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	0f5b      	lsrs	r3, r3, #29
 8003714:	075a      	lsls	r2, r3, #29
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d001      	beq.n	8003722 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	0018      	movs	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	b008      	add	sp, #32
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000
 8003730:	40007000 	.word	0x40007000
 8003734:	00001388 	.word	0x00001388
 8003738:	efffffff 	.word	0xefffffff
 800373c:	feffffff 	.word	0xfeffffff
 8003740:	11c1808c 	.word	0x11c1808c
 8003744:	eefefffc 	.word	0xeefefffc

08003748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0e9      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800375c:	4b76      	ldr	r3, [pc, #472]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2207      	movs	r2, #7
 8003762:	4013      	ands	r3, r2
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d91e      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376a:	4b73      	ldr	r3, [pc, #460]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2207      	movs	r2, #7
 8003770:	4393      	bics	r3, r2
 8003772:	0019      	movs	r1, r3
 8003774:	4b70      	ldr	r3, [pc, #448]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800377c:	f7fe f94a 	bl	8001a14 <HAL_GetTick>
 8003780:	0003      	movs	r3, r0
 8003782:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003784:	e009      	b.n	800379a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003786:	f7fe f945 	bl	8001a14 <HAL_GetTick>
 800378a:	0002      	movs	r2, r0
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	4a6a      	ldr	r2, [pc, #424]	; (800393c <HAL_RCC_ClockConfig+0x1f4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e0ca      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800379a:	4b67      	ldr	r3, [pc, #412]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2207      	movs	r2, #7
 80037a0:	4013      	ands	r3, r2
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d1ee      	bne.n	8003786 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2202      	movs	r2, #2
 80037ae:	4013      	ands	r3, r2
 80037b0:	d015      	beq.n	80037de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2204      	movs	r2, #4
 80037b8:	4013      	ands	r3, r2
 80037ba:	d006      	beq.n	80037ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80037bc:	4b60      	ldr	r3, [pc, #384]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	4b5f      	ldr	r3, [pc, #380]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 80037c2:	21e0      	movs	r1, #224	; 0xe0
 80037c4:	01c9      	lsls	r1, r1, #7
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ca:	4b5d      	ldr	r3, [pc, #372]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	4a5d      	ldr	r2, [pc, #372]	; (8003944 <HAL_RCC_ClockConfig+0x1fc>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	0019      	movs	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	4b59      	ldr	r3, [pc, #356]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2201      	movs	r2, #1
 80037e4:	4013      	ands	r3, r2
 80037e6:	d057      	beq.n	8003898 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	029b      	lsls	r3, r3, #10
 80037f8:	4013      	ands	r3, r2
 80037fa:	d12b      	bne.n	8003854 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e097      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d107      	bne.n	8003818 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003808:	4b4d      	ldr	r3, [pc, #308]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	049b      	lsls	r3, r3, #18
 8003810:	4013      	ands	r3, r2
 8003812:	d11f      	bne.n	8003854 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e08b      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d107      	bne.n	8003830 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003820:	4b47      	ldr	r3, [pc, #284]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4013      	ands	r3, r2
 800382a:	d113      	bne.n	8003854 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e07f      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b03      	cmp	r3, #3
 8003836:	d106      	bne.n	8003846 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003838:	4b41      	ldr	r3, [pc, #260]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 800383a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383c:	2202      	movs	r2, #2
 800383e:	4013      	ands	r3, r2
 8003840:	d108      	bne.n	8003854 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e074      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003846:	4b3e      	ldr	r3, [pc, #248]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	2202      	movs	r2, #2
 800384c:	4013      	ands	r3, r2
 800384e:	d101      	bne.n	8003854 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e06d      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003854:	4b3a      	ldr	r3, [pc, #232]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2207      	movs	r2, #7
 800385a:	4393      	bics	r3, r2
 800385c:	0019      	movs	r1, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	4b37      	ldr	r3, [pc, #220]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 8003864:	430a      	orrs	r2, r1
 8003866:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003868:	f7fe f8d4 	bl	8001a14 <HAL_GetTick>
 800386c:	0003      	movs	r3, r0
 800386e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003870:	e009      	b.n	8003886 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003872:	f7fe f8cf 	bl	8001a14 <HAL_GetTick>
 8003876:	0002      	movs	r2, r0
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	4a2f      	ldr	r2, [pc, #188]	; (800393c <HAL_RCC_ClockConfig+0x1f4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e054      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	4b2e      	ldr	r3, [pc, #184]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2238      	movs	r2, #56	; 0x38
 800388c:	401a      	ands	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	429a      	cmp	r2, r3
 8003896:	d1ec      	bne.n	8003872 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003898:	4b27      	ldr	r3, [pc, #156]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2207      	movs	r2, #7
 800389e:	4013      	ands	r3, r2
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d21e      	bcs.n	80038e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b24      	ldr	r3, [pc, #144]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2207      	movs	r2, #7
 80038ac:	4393      	bics	r3, r2
 80038ae:	0019      	movs	r1, r3
 80038b0:	4b21      	ldr	r3, [pc, #132]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038b8:	f7fe f8ac 	bl	8001a14 <HAL_GetTick>
 80038bc:	0003      	movs	r3, r0
 80038be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038c0:	e009      	b.n	80038d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c2:	f7fe f8a7 	bl	8001a14 <HAL_GetTick>
 80038c6:	0002      	movs	r2, r0
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	4a1b      	ldr	r2, [pc, #108]	; (800393c <HAL_RCC_ClockConfig+0x1f4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e02c      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038d6:	4b18      	ldr	r3, [pc, #96]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2207      	movs	r2, #7
 80038dc:	4013      	ands	r3, r2
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d1ee      	bne.n	80038c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2204      	movs	r2, #4
 80038ea:	4013      	ands	r3, r2
 80038ec:	d009      	beq.n	8003902 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80038ee:	4b14      	ldr	r3, [pc, #80]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4a15      	ldr	r2, [pc, #84]	; (8003948 <HAL_RCC_ClockConfig+0x200>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	4b10      	ldr	r3, [pc, #64]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 80038fe:	430a      	orrs	r2, r1
 8003900:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003902:	f000 f829 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8003906:	0001      	movs	r1, r0
 8003908:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	220f      	movs	r2, #15
 8003910:	401a      	ands	r2, r3
 8003912:	4b0e      	ldr	r3, [pc, #56]	; (800394c <HAL_RCC_ClockConfig+0x204>)
 8003914:	0092      	lsls	r2, r2, #2
 8003916:	58d3      	ldr	r3, [r2, r3]
 8003918:	221f      	movs	r2, #31
 800391a:	4013      	ands	r3, r2
 800391c:	000a      	movs	r2, r1
 800391e:	40da      	lsrs	r2, r3
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_ClockConfig+0x208>)
 8003922:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_RCC_ClockConfig+0x20c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	0018      	movs	r0, r3
 800392a:	f7fe f817 	bl	800195c <HAL_InitTick>
 800392e:	0003      	movs	r3, r0
}
 8003930:	0018      	movs	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	b004      	add	sp, #16
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40022000 	.word	0x40022000
 800393c:	00001388 	.word	0x00001388
 8003940:	40021000 	.word	0x40021000
 8003944:	fffff0ff 	.word	0xfffff0ff
 8003948:	ffff8fff 	.word	0xffff8fff
 800394c:	08005ae0 	.word	0x08005ae0
 8003950:	20000070 	.word	0x20000070
 8003954:	20000074 	.word	0x20000074

08003958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800395e:	4b3c      	ldr	r3, [pc, #240]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2238      	movs	r2, #56	; 0x38
 8003964:	4013      	ands	r3, r2
 8003966:	d10f      	bne.n	8003988 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003968:	4b39      	ldr	r3, [pc, #228]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	0adb      	lsrs	r3, r3, #11
 800396e:	2207      	movs	r2, #7
 8003970:	4013      	ands	r3, r2
 8003972:	2201      	movs	r2, #1
 8003974:	409a      	lsls	r2, r3
 8003976:	0013      	movs	r3, r2
 8003978:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800397a:	6839      	ldr	r1, [r7, #0]
 800397c:	4835      	ldr	r0, [pc, #212]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xfc>)
 800397e:	f7fc fbbf 	bl	8000100 <__udivsi3>
 8003982:	0003      	movs	r3, r0
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	e05d      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003988:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2238      	movs	r2, #56	; 0x38
 800398e:	4013      	ands	r3, r2
 8003990:	2b08      	cmp	r3, #8
 8003992:	d102      	bne.n	800399a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003994:	4b30      	ldr	r3, [pc, #192]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x100>)
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	e054      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800399a:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2238      	movs	r2, #56	; 0x38
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d138      	bne.n	8003a18 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80039a6:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2203      	movs	r2, #3
 80039ac:	4013      	ands	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039b0:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	2207      	movs	r2, #7
 80039b8:	4013      	ands	r3, r2
 80039ba:	3301      	adds	r3, #1
 80039bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d10d      	bne.n	80039e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	4824      	ldr	r0, [pc, #144]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x100>)
 80039c8:	f7fc fb9a 	bl	8000100 <__udivsi3>
 80039cc:	0003      	movs	r3, r0
 80039ce:	0019      	movs	r1, r3
 80039d0:	4b1f      	ldr	r3, [pc, #124]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	227f      	movs	r2, #127	; 0x7f
 80039d8:	4013      	ands	r3, r2
 80039da:	434b      	muls	r3, r1
 80039dc:	617b      	str	r3, [r7, #20]
        break;
 80039de:	e00d      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	481c      	ldr	r0, [pc, #112]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xfc>)
 80039e4:	f7fc fb8c 	bl	8000100 <__udivsi3>
 80039e8:	0003      	movs	r3, r0
 80039ea:	0019      	movs	r1, r3
 80039ec:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	0a1b      	lsrs	r3, r3, #8
 80039f2:	227f      	movs	r2, #127	; 0x7f
 80039f4:	4013      	ands	r3, r2
 80039f6:	434b      	muls	r3, r1
 80039f8:	617b      	str	r3, [r7, #20]
        break;
 80039fa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80039fc:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	0f5b      	lsrs	r3, r3, #29
 8003a02:	2207      	movs	r2, #7
 8003a04:	4013      	ands	r3, r2
 8003a06:	3301      	adds	r3, #1
 8003a08:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	6978      	ldr	r0, [r7, #20]
 8003a0e:	f7fc fb77 	bl	8000100 <__udivsi3>
 8003a12:	0003      	movs	r3, r0
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	e015      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a18:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2238      	movs	r2, #56	; 0x38
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d103      	bne.n	8003a2c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003a24:	2380      	movs	r3, #128	; 0x80
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003a2c:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2238      	movs	r2, #56	; 0x38
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b18      	cmp	r3, #24
 8003a36:	d103      	bne.n	8003a40 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003a38:	23fa      	movs	r3, #250	; 0xfa
 8003a3a:	01db      	lsls	r3, r3, #7
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	e001      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a44:	693b      	ldr	r3, [r7, #16]
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b006      	add	sp, #24
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	40021000 	.word	0x40021000
 8003a54:	00f42400 	.word	0x00f42400
 8003a58:	007a1200 	.word	0x007a1200

08003a5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a60:	4b02      	ldr	r3, [pc, #8]	; (8003a6c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	0018      	movs	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	20000070 	.word	0x20000070

08003a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003a74:	f7ff fff2 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003a78:	0004      	movs	r4, r0
 8003a7a:	f7ff fb3f 	bl	80030fc <LL_RCC_GetAPB1Prescaler>
 8003a7e:	0003      	movs	r3, r0
 8003a80:	0b1a      	lsrs	r2, r3, #12
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a84:	0092      	lsls	r2, r2, #2
 8003a86:	58d3      	ldr	r3, [r2, r3]
 8003a88:	221f      	movs	r2, #31
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	40dc      	lsrs	r4, r3
 8003a8e:	0023      	movs	r3, r4
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bdb0      	pop	{r4, r5, r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	08005b20 	.word	0x08005b20

08003a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003aa4:	2313      	movs	r3, #19
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003aac:	2312      	movs	r3, #18
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	029b      	lsls	r3, r3, #10
 8003abc:	4013      	ands	r3, r2
 8003abe:	d100      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003ac0:	e0a3      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac2:	2011      	movs	r0, #17
 8003ac4:	183b      	adds	r3, r7, r0
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aca:	4bb3      	ldr	r3, [pc, #716]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003acc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	055b      	lsls	r3, r3, #21
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d110      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad6:	4bb0      	ldr	r3, [pc, #704]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ada:	4baf      	ldr	r3, [pc, #700]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003adc:	2180      	movs	r1, #128	; 0x80
 8003ade:	0549      	lsls	r1, r1, #21
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ae4:	4bac      	ldr	r3, [pc, #688]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	055b      	lsls	r3, r3, #21
 8003aec:	4013      	ands	r3, r2
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af2:	183b      	adds	r3, r7, r0
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af8:	4ba8      	ldr	r3, [pc, #672]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4ba7      	ldr	r3, [pc, #668]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003afe:	2180      	movs	r1, #128	; 0x80
 8003b00:	0049      	lsls	r1, r1, #1
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b06:	f7fd ff85 	bl	8001a14 <HAL_GetTick>
 8003b0a:	0003      	movs	r3, r0
 8003b0c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b0e:	e00b      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b10:	f7fd ff80 	bl	8001a14 <HAL_GetTick>
 8003b14:	0002      	movs	r2, r0
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d904      	bls.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003b1e:	2313      	movs	r3, #19
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	2203      	movs	r2, #3
 8003b24:	701a      	strb	r2, [r3, #0]
        break;
 8003b26:	e005      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b28:	4b9c      	ldr	r3, [pc, #624]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	4013      	ands	r3, r2
 8003b32:	d0ed      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003b34:	2313      	movs	r3, #19
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d154      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b3e:	4b96      	ldr	r3, [pc, #600]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b42:	23c0      	movs	r3, #192	; 0xc0
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4013      	ands	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d019      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d014      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b5a:	4b8f      	ldr	r3, [pc, #572]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5e:	4a90      	ldr	r2, [pc, #576]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b64:	4b8c      	ldr	r3, [pc, #560]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b68:	4b8b      	ldr	r3, [pc, #556]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b6a:	2180      	movs	r1, #128	; 0x80
 8003b6c:	0249      	lsls	r1, r1, #9
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b72:	4b89      	ldr	r3, [pc, #548]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b76:	4b88      	ldr	r3, [pc, #544]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b78:	498a      	ldr	r1, [pc, #552]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b7e:	4b86      	ldr	r3, [pc, #536]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2201      	movs	r2, #1
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d016      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fd ff42 	bl	8001a14 <HAL_GetTick>
 8003b90:	0003      	movs	r3, r0
 8003b92:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b94:	e00c      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b96:	f7fd ff3d 	bl	8001a14 <HAL_GetTick>
 8003b9a:	0002      	movs	r2, r0
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	4a81      	ldr	r2, [pc, #516]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d904      	bls.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003ba6:	2313      	movs	r3, #19
 8003ba8:	18fb      	adds	r3, r7, r3
 8003baa:	2203      	movs	r2, #3
 8003bac:	701a      	strb	r2, [r3, #0]
            break;
 8003bae:	e004      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb0:	4b79      	ldr	r3, [pc, #484]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d0ed      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003bba:	2313      	movs	r3, #19
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc4:	4b74      	ldr	r3, [pc, #464]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	4a75      	ldr	r2, [pc, #468]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	0019      	movs	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bd2:	4b71      	ldr	r3, [pc, #452]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bd8:	e00c      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bda:	2312      	movs	r3, #18
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	2213      	movs	r2, #19
 8003be0:	18ba      	adds	r2, r7, r2
 8003be2:	7812      	ldrb	r2, [r2, #0]
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	e005      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be8:	2312      	movs	r3, #18
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	2213      	movs	r2, #19
 8003bee:	18ba      	adds	r2, r7, r2
 8003bf0:	7812      	ldrb	r2, [r2, #0]
 8003bf2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bf4:	2311      	movs	r3, #17
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d105      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfe:	4b66      	ldr	r3, [pc, #408]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c02:	4b65      	ldr	r3, [pc, #404]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c04:	4969      	ldr	r1, [pc, #420]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c06:	400a      	ands	r2, r1
 8003c08:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	4013      	ands	r3, r2
 8003c12:	d009      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c14:	4b60      	ldr	r3, [pc, #384]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	2203      	movs	r2, #3
 8003c1a:	4393      	bics	r3, r2
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	4b5d      	ldr	r3, [pc, #372]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c24:	430a      	orrs	r2, r1
 8003c26:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d009      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c32:	4b59      	ldr	r3, [pc, #356]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	4a5e      	ldr	r2, [pc, #376]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	4b55      	ldr	r3, [pc, #340]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c42:	430a      	orrs	r2, r1
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c52:	4b51      	ldr	r3, [pc, #324]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c56:	4a57      	ldr	r2, [pc, #348]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	4b4d      	ldr	r3, [pc, #308]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c62:	430a      	orrs	r2, r1
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d009      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c72:	4b49      	ldr	r3, [pc, #292]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c76:	4a50      	ldr	r2, [pc, #320]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699a      	ldr	r2, [r3, #24]
 8003c80:	4b45      	ldr	r3, [pc, #276]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c82:	430a      	orrs	r2, r1
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d009      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c90:	4b41      	ldr	r3, [pc, #260]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	4a49      	ldr	r2, [pc, #292]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	0019      	movs	r1, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	4b3e      	ldr	r3, [pc, #248]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	01db      	lsls	r3, r3, #7
 8003cac:	4013      	ands	r3, r2
 8003cae:	d015      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb0:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	0899      	lsrs	r1, r3, #2
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	4b36      	ldr	r3, [pc, #216]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69da      	ldr	r2, [r3, #28]
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	05db      	lsls	r3, r3, #23
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d106      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003cce:	4b32      	ldr	r3, [pc, #200]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003cd4:	2180      	movs	r1, #128	; 0x80
 8003cd6:	0249      	lsls	r1, r1, #9
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	039b      	lsls	r3, r3, #14
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d016      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ce8:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cec:	4a34      	ldr	r2, [pc, #208]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	0019      	movs	r1, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1a      	ldr	r2, [r3, #32]
 8003cf6:	4b28      	ldr	r3, [pc, #160]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1a      	ldr	r2, [r3, #32]
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	03db      	lsls	r3, r3, #15
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d106      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d08:	4b23      	ldr	r3, [pc, #140]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	4b22      	ldr	r3, [pc, #136]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003d0e:	2180      	movs	r1, #128	; 0x80
 8003d10:	0449      	lsls	r1, r1, #17
 8003d12:	430a      	orrs	r2, r1
 8003d14:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	03db      	lsls	r3, r3, #15
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d016      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d22:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	4a27      	ldr	r2, [pc, #156]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	0019      	movs	r1, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d30:	4b19      	ldr	r3, [pc, #100]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003d32:	430a      	orrs	r2, r1
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	045b      	lsls	r3, r3, #17
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d106      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d42:	4b15      	ldr	r3, [pc, #84]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003d48:	2180      	movs	r1, #128	; 0x80
 8003d4a:	0449      	lsls	r1, r1, #17
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	2380      	movs	r3, #128	; 0x80
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d016      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d60:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	0019      	movs	r1, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	01db      	lsls	r3, r3, #7
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d106      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003d82:	2180      	movs	r1, #128	; 0x80
 8003d84:	0249      	lsls	r1, r1, #9
 8003d86:	430a      	orrs	r2, r1
 8003d88:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003d8a:	2312      	movs	r3, #18
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	781b      	ldrb	r3, [r3, #0]
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b006      	add	sp, #24
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	40007000 	.word	0x40007000
 8003da0:	fffffcff 	.word	0xfffffcff
 8003da4:	fffeffff 	.word	0xfffeffff
 8003da8:	00001388 	.word	0x00001388
 8003dac:	efffffff 	.word	0xefffffff
 8003db0:	fffff3ff 	.word	0xfffff3ff
 8003db4:	fff3ffff 	.word	0xfff3ffff
 8003db8:	ffcfffff 	.word	0xffcfffff
 8003dbc:	ffffcfff 	.word	0xffffcfff
 8003dc0:	ffbfffff 	.word	0xffbfffff
 8003dc4:	feffffff 	.word	0xfeffffff
 8003dc8:	ffff3fff 	.word	0xffff3fff

08003dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e04a      	b.n	8003e74 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	223d      	movs	r2, #61	; 0x3d
 8003de2:	5c9b      	ldrb	r3, [r3, r2]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d107      	bne.n	8003dfa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	223c      	movs	r2, #60	; 0x3c
 8003dee:	2100      	movs	r1, #0
 8003df0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	0018      	movs	r0, r3
 8003df6:	f7fd fbd5 	bl	80015a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	223d      	movs	r2, #61	; 0x3d
 8003dfe:	2102      	movs	r1, #2
 8003e00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	0010      	movs	r0, r2
 8003e0e:	f000 f835 	bl	8003e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2248      	movs	r2, #72	; 0x48
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	223e      	movs	r2, #62	; 0x3e
 8003e1e:	2101      	movs	r1, #1
 8003e20:	5499      	strb	r1, [r3, r2]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	223f      	movs	r2, #63	; 0x3f
 8003e26:	2101      	movs	r1, #1
 8003e28:	5499      	strb	r1, [r3, r2]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2240      	movs	r2, #64	; 0x40
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2241      	movs	r2, #65	; 0x41
 8003e36:	2101      	movs	r1, #1
 8003e38:	5499      	strb	r1, [r3, r2]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2242      	movs	r2, #66	; 0x42
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2243      	movs	r2, #67	; 0x43
 8003e46:	2101      	movs	r1, #1
 8003e48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2244      	movs	r2, #68	; 0x44
 8003e4e:	2101      	movs	r1, #1
 8003e50:	5499      	strb	r1, [r3, r2]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2245      	movs	r2, #69	; 0x45
 8003e56:	2101      	movs	r1, #1
 8003e58:	5499      	strb	r1, [r3, r2]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2246      	movs	r2, #70	; 0x46
 8003e5e:	2101      	movs	r1, #1
 8003e60:	5499      	strb	r1, [r3, r2]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2247      	movs	r2, #71	; 0x47
 8003e66:	2101      	movs	r1, #1
 8003e68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	223d      	movs	r2, #61	; 0x3d
 8003e6e:	2101      	movs	r1, #1
 8003e70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a34      	ldr	r2, [pc, #208]	; (8003f60 <TIM_Base_SetConfig+0xe4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d008      	beq.n	8003ea6 <TIM_Base_SetConfig+0x2a>
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	05db      	lsls	r3, r3, #23
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d003      	beq.n	8003ea6 <TIM_Base_SetConfig+0x2a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a30      	ldr	r2, [pc, #192]	; (8003f64 <TIM_Base_SetConfig+0xe8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d108      	bne.n	8003eb8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2270      	movs	r2, #112	; 0x70
 8003eaa:	4393      	bics	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a29      	ldr	r2, [pc, #164]	; (8003f60 <TIM_Base_SetConfig+0xe4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d018      	beq.n	8003ef2 <TIM_Base_SetConfig+0x76>
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	05db      	lsls	r3, r3, #23
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d013      	beq.n	8003ef2 <TIM_Base_SetConfig+0x76>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a25      	ldr	r2, [pc, #148]	; (8003f64 <TIM_Base_SetConfig+0xe8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00f      	beq.n	8003ef2 <TIM_Base_SetConfig+0x76>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a24      	ldr	r2, [pc, #144]	; (8003f68 <TIM_Base_SetConfig+0xec>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <TIM_Base_SetConfig+0x76>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a23      	ldr	r2, [pc, #140]	; (8003f6c <TIM_Base_SetConfig+0xf0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <TIM_Base_SetConfig+0x76>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <TIM_Base_SetConfig+0xf4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_Base_SetConfig+0x76>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a21      	ldr	r2, [pc, #132]	; (8003f74 <TIM_Base_SetConfig+0xf8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a20      	ldr	r2, [pc, #128]	; (8003f78 <TIM_Base_SetConfig+0xfc>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2280      	movs	r2, #128	; 0x80
 8003f08:	4393      	bics	r3, r2
 8003f0a:	001a      	movs	r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a0c      	ldr	r2, [pc, #48]	; (8003f60 <TIM_Base_SetConfig+0xe4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00b      	beq.n	8003f4a <TIM_Base_SetConfig+0xce>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a0d      	ldr	r2, [pc, #52]	; (8003f6c <TIM_Base_SetConfig+0xf0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <TIM_Base_SetConfig+0xce>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a0c      	ldr	r2, [pc, #48]	; (8003f70 <TIM_Base_SetConfig+0xf4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <TIM_Base_SetConfig+0xce>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <TIM_Base_SetConfig+0xf8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d103      	bne.n	8003f52 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	615a      	str	r2, [r3, #20]
}
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b004      	add	sp, #16
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40002000 	.word	0x40002000
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800
 8003f78:	fffffcff 	.word	0xfffffcff

08003f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	223c      	movs	r2, #60	; 0x3c
 8003f8a:	5c9b      	ldrb	r3, [r3, r2]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e055      	b.n	8004040 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	223c      	movs	r2, #60	; 0x3c
 8003f98:	2101      	movs	r1, #1
 8003f9a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	223d      	movs	r2, #61	; 0x3d
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a23      	ldr	r2, [pc, #140]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d108      	bne.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4a22      	ldr	r2, [pc, #136]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2270      	movs	r2, #112	; 0x70
 8003fd4:	4393      	bics	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a16      	ldr	r2, [pc, #88]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00f      	beq.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	05db      	lsls	r3, r3, #23
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d009      	beq.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a12      	ldr	r2, [pc, #72]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a11      	ldr	r2, [pc, #68]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d10c      	bne.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2280      	movs	r2, #128	; 0x80
 8004018:	4393      	bics	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	4313      	orrs	r3, r2
 8004024:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	223d      	movs	r2, #61	; 0x3d
 8004032:	2101      	movs	r1, #1
 8004034:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	223c      	movs	r2, #60	; 0x3c
 800403a:	2100      	movs	r1, #0
 800403c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	0018      	movs	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	b004      	add	sp, #16
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40012c00 	.word	0x40012c00
 800404c:	ff0fffff 	.word	0xff0fffff
 8004050:	40000400 	.word	0x40000400
 8004054:	40014000 	.word	0x40014000

08004058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e046      	b.n	80040f8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2288      	movs	r2, #136	; 0x88
 800406e:	589b      	ldr	r3, [r3, r2]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d107      	bne.n	8004084 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2284      	movs	r2, #132	; 0x84
 8004078:	2100      	movs	r1, #0
 800407a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	0018      	movs	r0, r3
 8004080:	f7fd fb4a 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2288      	movs	r2, #136	; 0x88
 8004088:	2124      	movs	r1, #36	; 0x24
 800408a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2101      	movs	r1, #1
 8004098:	438a      	bics	r2, r1
 800409a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	0018      	movs	r0, r3
 80040a0:	f000 fc12 	bl	80048c8 <UART_SetConfig>
 80040a4:	0003      	movs	r3, r0
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e024      	b.n	80040f8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	0018      	movs	r0, r3
 80040ba:	f000 fe7d 	bl	8004db8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	490d      	ldr	r1, [pc, #52]	; (8004100 <HAL_UART_Init+0xa8>)
 80040ca:	400a      	ands	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	212a      	movs	r1, #42	; 0x2a
 80040da:	438a      	bics	r2, r1
 80040dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2101      	movs	r1, #1
 80040ea:	430a      	orrs	r2, r1
 80040ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 ff15 	bl	8004f20 <UART_CheckIdleState>
 80040f6:	0003      	movs	r3, r0
}
 80040f8:	0018      	movs	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b002      	add	sp, #8
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	ffffb7ff 	.word	0xffffb7ff

08004104 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	; 0x28
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	1dbb      	adds	r3, r7, #6
 8004112:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2288      	movs	r2, #136	; 0x88
 8004118:	589b      	ldr	r3, [r3, r2]
 800411a:	2b20      	cmp	r3, #32
 800411c:	d000      	beq.n	8004120 <HAL_UART_Transmit+0x1c>
 800411e:	e088      	b.n	8004232 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_UART_Transmit+0x2a>
 8004126:	1dbb      	adds	r3, r7, #6
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e080      	b.n	8004234 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	015b      	lsls	r3, r3, #5
 800413a:	429a      	cmp	r2, r3
 800413c:	d109      	bne.n	8004152 <HAL_UART_Transmit+0x4e>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d105      	bne.n	8004152 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2201      	movs	r2, #1
 800414a:	4013      	ands	r3, r2
 800414c:	d001      	beq.n	8004152 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e070      	b.n	8004234 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2290      	movs	r2, #144	; 0x90
 8004156:	2100      	movs	r1, #0
 8004158:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2288      	movs	r2, #136	; 0x88
 800415e:	2121      	movs	r1, #33	; 0x21
 8004160:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004162:	f7fd fc57 	bl	8001a14 <HAL_GetTick>
 8004166:	0003      	movs	r3, r0
 8004168:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1dba      	adds	r2, r7, #6
 800416e:	2154      	movs	r1, #84	; 0x54
 8004170:	8812      	ldrh	r2, [r2, #0]
 8004172:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1dba      	adds	r2, r7, #6
 8004178:	2156      	movs	r1, #86	; 0x56
 800417a:	8812      	ldrh	r2, [r2, #0]
 800417c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	2380      	movs	r3, #128	; 0x80
 8004184:	015b      	lsls	r3, r3, #5
 8004186:	429a      	cmp	r2, r3
 8004188:	d108      	bne.n	800419c <HAL_UART_Transmit+0x98>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d104      	bne.n	800419c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	e003      	b.n	80041a4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041a4:	e02c      	b.n	8004200 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	0013      	movs	r3, r2
 80041b0:	2200      	movs	r2, #0
 80041b2:	2180      	movs	r1, #128	; 0x80
 80041b4:	f000 ff02 	bl	8004fbc <UART_WaitOnFlagUntilTimeout>
 80041b8:	1e03      	subs	r3, r0, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e039      	b.n	8004234 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	001a      	movs	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	05d2      	lsls	r2, r2, #23
 80041d2:	0dd2      	lsrs	r2, r2, #23
 80041d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	3302      	adds	r3, #2
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	e007      	b.n	80041ee <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	3301      	adds	r3, #1
 80041ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2256      	movs	r2, #86	; 0x56
 80041f2:	5a9b      	ldrh	r3, [r3, r2]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b299      	uxth	r1, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2256      	movs	r2, #86	; 0x56
 80041fe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2256      	movs	r2, #86	; 0x56
 8004204:	5a9b      	ldrh	r3, [r3, r2]
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1cc      	bne.n	80041a6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	0013      	movs	r3, r2
 8004216:	2200      	movs	r2, #0
 8004218:	2140      	movs	r1, #64	; 0x40
 800421a:	f000 fecf 	bl	8004fbc <UART_WaitOnFlagUntilTimeout>
 800421e:	1e03      	subs	r3, r0, #0
 8004220:	d001      	beq.n	8004226 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e006      	b.n	8004234 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2288      	movs	r2, #136	; 0x88
 800422a:	2120      	movs	r1, #32
 800422c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	e000      	b.n	8004234 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004232:	2302      	movs	r3, #2
  }
}
 8004234:	0018      	movs	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	b008      	add	sp, #32
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800423c:	b5b0      	push	{r4, r5, r7, lr}
 800423e:	b0aa      	sub	sp, #168	; 0xa8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	22a4      	movs	r2, #164	; 0xa4
 800424c:	18b9      	adds	r1, r7, r2
 800424e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	20a0      	movs	r0, #160	; 0xa0
 8004258:	1839      	adds	r1, r7, r0
 800425a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	249c      	movs	r4, #156	; 0x9c
 8004264:	1939      	adds	r1, r7, r4
 8004266:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004268:	0011      	movs	r1, r2
 800426a:	18bb      	adds	r3, r7, r2
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4aa2      	ldr	r2, [pc, #648]	; (80044f8 <HAL_UART_IRQHandler+0x2bc>)
 8004270:	4013      	ands	r3, r2
 8004272:	2298      	movs	r2, #152	; 0x98
 8004274:	18bd      	adds	r5, r7, r2
 8004276:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004278:	18bb      	adds	r3, r7, r2
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d11a      	bne.n	80042b6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004280:	187b      	adds	r3, r7, r1
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2220      	movs	r2, #32
 8004286:	4013      	ands	r3, r2
 8004288:	d015      	beq.n	80042b6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800428a:	183b      	adds	r3, r7, r0
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2220      	movs	r2, #32
 8004290:	4013      	ands	r3, r2
 8004292:	d105      	bne.n	80042a0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004294:	193b      	adds	r3, r7, r4
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	055b      	lsls	r3, r3, #21
 800429c:	4013      	ands	r3, r2
 800429e:	d00a      	beq.n	80042b6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d100      	bne.n	80042aa <HAL_UART_IRQHandler+0x6e>
 80042a8:	e2dc      	b.n	8004864 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	0010      	movs	r0, r2
 80042b2:	4798      	blx	r3
      }
      return;
 80042b4:	e2d6      	b.n	8004864 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80042b6:	2398      	movs	r3, #152	; 0x98
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d100      	bne.n	80042c2 <HAL_UART_IRQHandler+0x86>
 80042c0:	e122      	b.n	8004508 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80042c2:	239c      	movs	r3, #156	; 0x9c
 80042c4:	18fb      	adds	r3, r7, r3
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a8c      	ldr	r2, [pc, #560]	; (80044fc <HAL_UART_IRQHandler+0x2c0>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	d106      	bne.n	80042dc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80042ce:	23a0      	movs	r3, #160	; 0xa0
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a8a      	ldr	r2, [pc, #552]	; (8004500 <HAL_UART_IRQHandler+0x2c4>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	d100      	bne.n	80042dc <HAL_UART_IRQHandler+0xa0>
 80042da:	e115      	b.n	8004508 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042dc:	23a4      	movs	r3, #164	; 0xa4
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2201      	movs	r2, #1
 80042e4:	4013      	ands	r3, r2
 80042e6:	d012      	beq.n	800430e <HAL_UART_IRQHandler+0xd2>
 80042e8:	23a0      	movs	r3, #160	; 0xa0
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	4013      	ands	r3, r2
 80042f4:	d00b      	beq.n	800430e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2201      	movs	r2, #1
 80042fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2290      	movs	r2, #144	; 0x90
 8004302:	589b      	ldr	r3, [r3, r2]
 8004304:	2201      	movs	r2, #1
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2190      	movs	r1, #144	; 0x90
 800430c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800430e:	23a4      	movs	r3, #164	; 0xa4
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2202      	movs	r2, #2
 8004316:	4013      	ands	r3, r2
 8004318:	d011      	beq.n	800433e <HAL_UART_IRQHandler+0x102>
 800431a:	239c      	movs	r3, #156	; 0x9c
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2201      	movs	r2, #1
 8004322:	4013      	ands	r3, r2
 8004324:	d00b      	beq.n	800433e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2202      	movs	r2, #2
 800432c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2290      	movs	r2, #144	; 0x90
 8004332:	589b      	ldr	r3, [r3, r2]
 8004334:	2204      	movs	r2, #4
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2190      	movs	r1, #144	; 0x90
 800433c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800433e:	23a4      	movs	r3, #164	; 0xa4
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2204      	movs	r2, #4
 8004346:	4013      	ands	r3, r2
 8004348:	d011      	beq.n	800436e <HAL_UART_IRQHandler+0x132>
 800434a:	239c      	movs	r3, #156	; 0x9c
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2201      	movs	r2, #1
 8004352:	4013      	ands	r3, r2
 8004354:	d00b      	beq.n	800436e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2204      	movs	r2, #4
 800435c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2290      	movs	r2, #144	; 0x90
 8004362:	589b      	ldr	r3, [r3, r2]
 8004364:	2202      	movs	r2, #2
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2190      	movs	r1, #144	; 0x90
 800436c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800436e:	23a4      	movs	r3, #164	; 0xa4
 8004370:	18fb      	adds	r3, r7, r3
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2208      	movs	r2, #8
 8004376:	4013      	ands	r3, r2
 8004378:	d017      	beq.n	80043aa <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800437a:	23a0      	movs	r3, #160	; 0xa0
 800437c:	18fb      	adds	r3, r7, r3
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2220      	movs	r2, #32
 8004382:	4013      	ands	r3, r2
 8004384:	d105      	bne.n	8004392 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004386:	239c      	movs	r3, #156	; 0x9c
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a5b      	ldr	r2, [pc, #364]	; (80044fc <HAL_UART_IRQHandler+0x2c0>)
 800438e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004390:	d00b      	beq.n	80043aa <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2208      	movs	r2, #8
 8004398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2290      	movs	r2, #144	; 0x90
 800439e:	589b      	ldr	r3, [r3, r2]
 80043a0:	2208      	movs	r2, #8
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2190      	movs	r1, #144	; 0x90
 80043a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043aa:	23a4      	movs	r3, #164	; 0xa4
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	4013      	ands	r3, r2
 80043b6:	d013      	beq.n	80043e0 <HAL_UART_IRQHandler+0x1a4>
 80043b8:	23a0      	movs	r3, #160	; 0xa0
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	04db      	lsls	r3, r3, #19
 80043c2:	4013      	ands	r3, r2
 80043c4:	d00c      	beq.n	80043e0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2280      	movs	r2, #128	; 0x80
 80043cc:	0112      	lsls	r2, r2, #4
 80043ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2290      	movs	r2, #144	; 0x90
 80043d4:	589b      	ldr	r3, [r3, r2]
 80043d6:	2220      	movs	r2, #32
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2190      	movs	r1, #144	; 0x90
 80043de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2290      	movs	r2, #144	; 0x90
 80043e4:	589b      	ldr	r3, [r3, r2]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d100      	bne.n	80043ec <HAL_UART_IRQHandler+0x1b0>
 80043ea:	e23d      	b.n	8004868 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80043ec:	23a4      	movs	r3, #164	; 0xa4
 80043ee:	18fb      	adds	r3, r7, r3
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2220      	movs	r2, #32
 80043f4:	4013      	ands	r3, r2
 80043f6:	d015      	beq.n	8004424 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80043f8:	23a0      	movs	r3, #160	; 0xa0
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2220      	movs	r2, #32
 8004400:	4013      	ands	r3, r2
 8004402:	d106      	bne.n	8004412 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004404:	239c      	movs	r3, #156	; 0x9c
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	2380      	movs	r3, #128	; 0x80
 800440c:	055b      	lsls	r3, r3, #21
 800440e:	4013      	ands	r3, r2
 8004410:	d008      	beq.n	8004424 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	0010      	movs	r0, r2
 8004422:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2290      	movs	r2, #144	; 0x90
 8004428:	589b      	ldr	r3, [r3, r2]
 800442a:	2194      	movs	r1, #148	; 0x94
 800442c:	187a      	adds	r2, r7, r1
 800442e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2240      	movs	r2, #64	; 0x40
 8004438:	4013      	ands	r3, r2
 800443a:	2b40      	cmp	r3, #64	; 0x40
 800443c:	d004      	beq.n	8004448 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800443e:	187b      	adds	r3, r7, r1
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2228      	movs	r2, #40	; 0x28
 8004444:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004446:	d04c      	beq.n	80044e2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	0018      	movs	r0, r3
 800444c:	f000 ff64 	bl	8005318 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2240      	movs	r2, #64	; 0x40
 8004458:	4013      	ands	r3, r2
 800445a:	2b40      	cmp	r3, #64	; 0x40
 800445c:	d13c      	bne.n	80044d8 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800445e:	f3ef 8310 	mrs	r3, PRIMASK
 8004462:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004466:	2090      	movs	r0, #144	; 0x90
 8004468:	183a      	adds	r2, r7, r0
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	2301      	movs	r3, #1
 800446e:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004472:	f383 8810 	msr	PRIMASK, r3
}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2140      	movs	r1, #64	; 0x40
 8004484:	438a      	bics	r2, r1
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	183b      	adds	r3, r7, r0
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004490:	f383 8810 	msr	PRIMASK, r3
}
 8004494:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2280      	movs	r2, #128	; 0x80
 800449a:	589b      	ldr	r3, [r3, r2]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d016      	beq.n	80044ce <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2280      	movs	r2, #128	; 0x80
 80044a4:	589b      	ldr	r3, [r3, r2]
 80044a6:	4a17      	ldr	r2, [pc, #92]	; (8004504 <HAL_UART_IRQHandler+0x2c8>)
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2280      	movs	r2, #128	; 0x80
 80044ae:	589b      	ldr	r3, [r3, r2]
 80044b0:	0018      	movs	r0, r3
 80044b2:	f7fe f987 	bl	80027c4 <HAL_DMA_Abort_IT>
 80044b6:	1e03      	subs	r3, r0, #0
 80044b8:	d01c      	beq.n	80044f4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2280      	movs	r2, #128	; 0x80
 80044be:	589b      	ldr	r3, [r3, r2]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	2180      	movs	r1, #128	; 0x80
 80044c6:	5852      	ldr	r2, [r2, r1]
 80044c8:	0010      	movs	r0, r2
 80044ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	e012      	b.n	80044f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	0018      	movs	r0, r3
 80044d2:	f000 f9f1 	bl	80048b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d6:	e00d      	b.n	80044f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	0018      	movs	r0, r3
 80044dc:	f000 f9ec 	bl	80048b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e0:	e008      	b.n	80044f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f000 f9e7 	bl	80048b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2290      	movs	r2, #144	; 0x90
 80044ee:	2100      	movs	r1, #0
 80044f0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80044f2:	e1b9      	b.n	8004868 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f4:	46c0      	nop			; (mov r8, r8)
    return;
 80044f6:	e1b7      	b.n	8004868 <HAL_UART_IRQHandler+0x62c>
 80044f8:	0000080f 	.word	0x0000080f
 80044fc:	10000001 	.word	0x10000001
 8004500:	04000120 	.word	0x04000120
 8004504:	080055dd 	.word	0x080055dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d000      	beq.n	8004512 <HAL_UART_IRQHandler+0x2d6>
 8004510:	e13e      	b.n	8004790 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004512:	23a4      	movs	r3, #164	; 0xa4
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2210      	movs	r2, #16
 800451a:	4013      	ands	r3, r2
 800451c:	d100      	bne.n	8004520 <HAL_UART_IRQHandler+0x2e4>
 800451e:	e137      	b.n	8004790 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004520:	23a0      	movs	r3, #160	; 0xa0
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2210      	movs	r2, #16
 8004528:	4013      	ands	r3, r2
 800452a:	d100      	bne.n	800452e <HAL_UART_IRQHandler+0x2f2>
 800452c:	e130      	b.n	8004790 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2210      	movs	r2, #16
 8004534:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2240      	movs	r2, #64	; 0x40
 800453e:	4013      	ands	r3, r2
 8004540:	2b40      	cmp	r3, #64	; 0x40
 8004542:	d000      	beq.n	8004546 <HAL_UART_IRQHandler+0x30a>
 8004544:	e0a4      	b.n	8004690 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2280      	movs	r2, #128	; 0x80
 800454a:	589b      	ldr	r3, [r3, r2]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	217e      	movs	r1, #126	; 0x7e
 8004552:	187b      	adds	r3, r7, r1
 8004554:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004556:	187b      	adds	r3, r7, r1
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d100      	bne.n	8004560 <HAL_UART_IRQHandler+0x324>
 800455e:	e185      	b.n	800486c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	225c      	movs	r2, #92	; 0x5c
 8004564:	5a9b      	ldrh	r3, [r3, r2]
 8004566:	187a      	adds	r2, r7, r1
 8004568:	8812      	ldrh	r2, [r2, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d300      	bcc.n	8004570 <HAL_UART_IRQHandler+0x334>
 800456e:	e17d      	b.n	800486c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	187a      	adds	r2, r7, r1
 8004574:	215e      	movs	r1, #94	; 0x5e
 8004576:	8812      	ldrh	r2, [r2, #0]
 8004578:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	589b      	ldr	r3, [r3, r2]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2220      	movs	r2, #32
 8004586:	4013      	ands	r3, r2
 8004588:	d170      	bne.n	800466c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458a:	f3ef 8310 	mrs	r3, PRIMASK
 800458e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004592:	67bb      	str	r3, [r7, #120]	; 0x78
 8004594:	2301      	movs	r3, #1
 8004596:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459a:	f383 8810 	msr	PRIMASK, r3
}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	49b4      	ldr	r1, [pc, #720]	; (800487c <HAL_UART_IRQHandler+0x640>)
 80045ac:	400a      	ands	r2, r1
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b6:	f383 8810 	msr	PRIMASK, r3
}
 80045ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045bc:	f3ef 8310 	mrs	r3, PRIMASK
 80045c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80045c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c4:	677b      	str	r3, [r7, #116]	; 0x74
 80045c6:	2301      	movs	r3, #1
 80045c8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045cc:	f383 8810 	msr	PRIMASK, r3
}
 80045d0:	46c0      	nop			; (mov r8, r8)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2101      	movs	r1, #1
 80045de:	438a      	bics	r2, r1
 80045e0:	609a      	str	r2, [r3, #8]
 80045e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e8:	f383 8810 	msr	PRIMASK, r3
}
 80045ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ee:	f3ef 8310 	mrs	r3, PRIMASK
 80045f2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80045f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045f6:	673b      	str	r3, [r7, #112]	; 0x70
 80045f8:	2301      	movs	r3, #1
 80045fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fe:	f383 8810 	msr	PRIMASK, r3
}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2140      	movs	r1, #64	; 0x40
 8004610:	438a      	bics	r2, r1
 8004612:	609a      	str	r2, [r3, #8]
 8004614:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004616:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800461a:	f383 8810 	msr	PRIMASK, r3
}
 800461e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	228c      	movs	r2, #140	; 0x8c
 8004624:	2120      	movs	r1, #32
 8004626:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462e:	f3ef 8310 	mrs	r3, PRIMASK
 8004632:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004634:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004636:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004638:	2301      	movs	r3, #1
 800463a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800463e:	f383 8810 	msr	PRIMASK, r3
}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2110      	movs	r1, #16
 8004650:	438a      	bics	r2, r1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004656:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800465a:	f383 8810 	msr	PRIMASK, r3
}
 800465e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2280      	movs	r2, #128	; 0x80
 8004664:	589b      	ldr	r3, [r3, r2]
 8004666:	0018      	movs	r0, r3
 8004668:	f7fe f84a 	bl	8002700 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	225c      	movs	r2, #92	; 0x5c
 8004676:	5a9a      	ldrh	r2, [r3, r2]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	215e      	movs	r1, #94	; 0x5e
 800467c:	5a5b      	ldrh	r3, [r3, r1]
 800467e:	b29b      	uxth	r3, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	b29a      	uxth	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	0011      	movs	r1, r2
 8004688:	0018      	movs	r0, r3
 800468a:	f7fc f8fb 	bl	8000884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800468e:	e0ed      	b.n	800486c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	225c      	movs	r2, #92	; 0x5c
 8004694:	5a99      	ldrh	r1, [r3, r2]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	225e      	movs	r2, #94	; 0x5e
 800469a:	5a9b      	ldrh	r3, [r3, r2]
 800469c:	b29a      	uxth	r2, r3
 800469e:	208e      	movs	r0, #142	; 0x8e
 80046a0:	183b      	adds	r3, r7, r0
 80046a2:	1a8a      	subs	r2, r1, r2
 80046a4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	225e      	movs	r2, #94	; 0x5e
 80046aa:	5a9b      	ldrh	r3, [r3, r2]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d100      	bne.n	80046b4 <HAL_UART_IRQHandler+0x478>
 80046b2:	e0dd      	b.n	8004870 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80046b4:	183b      	adds	r3, r7, r0
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d100      	bne.n	80046be <HAL_UART_IRQHandler+0x482>
 80046bc:	e0d8      	b.n	8004870 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046be:	f3ef 8310 	mrs	r3, PRIMASK
 80046c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80046c4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046c6:	2488      	movs	r4, #136	; 0x88
 80046c8:	193a      	adds	r2, r7, r4
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	2301      	movs	r3, #1
 80046ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f383 8810 	msr	PRIMASK, r3
}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4967      	ldr	r1, [pc, #412]	; (8004880 <HAL_UART_IRQHandler+0x644>)
 80046e4:	400a      	ands	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	193b      	adds	r3, r7, r4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f383 8810 	msr	PRIMASK, r3
}
 80046f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f6:	f3ef 8310 	mrs	r3, PRIMASK
 80046fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80046fc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046fe:	2484      	movs	r4, #132	; 0x84
 8004700:	193a      	adds	r2, r7, r4
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	2301      	movs	r3, #1
 8004706:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f383 8810 	msr	PRIMASK, r3
}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	495a      	ldr	r1, [pc, #360]	; (8004884 <HAL_UART_IRQHandler+0x648>)
 800471c:	400a      	ands	r2, r1
 800471e:	609a      	str	r2, [r3, #8]
 8004720:	193b      	adds	r3, r7, r4
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	f383 8810 	msr	PRIMASK, r3
}
 800472c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	228c      	movs	r2, #140	; 0x8c
 8004732:	2120      	movs	r1, #32
 8004734:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004742:	f3ef 8310 	mrs	r3, PRIMASK
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800474a:	2480      	movs	r4, #128	; 0x80
 800474c:	193a      	adds	r2, r7, r4
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	2301      	movs	r3, #1
 8004752:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	f383 8810 	msr	PRIMASK, r3
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2110      	movs	r1, #16
 8004768:	438a      	bics	r2, r1
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	193b      	adds	r3, r7, r4
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004774:	f383 8810 	msr	PRIMASK, r3
}
 8004778:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004780:	183b      	adds	r3, r7, r0
 8004782:	881a      	ldrh	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	0011      	movs	r1, r2
 8004788:	0018      	movs	r0, r3
 800478a:	f7fc f87b 	bl	8000884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800478e:	e06f      	b.n	8004870 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004790:	23a4      	movs	r3, #164	; 0xa4
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	2380      	movs	r3, #128	; 0x80
 8004798:	035b      	lsls	r3, r3, #13
 800479a:	4013      	ands	r3, r2
 800479c:	d010      	beq.n	80047c0 <HAL_UART_IRQHandler+0x584>
 800479e:	239c      	movs	r3, #156	; 0x9c
 80047a0:	18fb      	adds	r3, r7, r3
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	2380      	movs	r3, #128	; 0x80
 80047a6:	03db      	lsls	r3, r3, #15
 80047a8:	4013      	ands	r3, r2
 80047aa:	d009      	beq.n	80047c0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2280      	movs	r2, #128	; 0x80
 80047b2:	0352      	lsls	r2, r2, #13
 80047b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f000 ff52 	bl	8005662 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047be:	e05a      	b.n	8004876 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80047c0:	23a4      	movs	r3, #164	; 0xa4
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2280      	movs	r2, #128	; 0x80
 80047c8:	4013      	ands	r3, r2
 80047ca:	d016      	beq.n	80047fa <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80047cc:	23a0      	movs	r3, #160	; 0xa0
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2280      	movs	r2, #128	; 0x80
 80047d4:	4013      	ands	r3, r2
 80047d6:	d106      	bne.n	80047e6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80047d8:	239c      	movs	r3, #156	; 0x9c
 80047da:	18fb      	adds	r3, r7, r3
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	2380      	movs	r3, #128	; 0x80
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	4013      	ands	r3, r2
 80047e4:	d009      	beq.n	80047fa <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d042      	beq.n	8004874 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	0010      	movs	r0, r2
 80047f6:	4798      	blx	r3
    }
    return;
 80047f8:	e03c      	b.n	8004874 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047fa:	23a4      	movs	r3, #164	; 0xa4
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2240      	movs	r2, #64	; 0x40
 8004802:	4013      	ands	r3, r2
 8004804:	d00a      	beq.n	800481c <HAL_UART_IRQHandler+0x5e0>
 8004806:	23a0      	movs	r3, #160	; 0xa0
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2240      	movs	r2, #64	; 0x40
 800480e:	4013      	ands	r3, r2
 8004810:	d004      	beq.n	800481c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	0018      	movs	r0, r3
 8004816:	f000 fef8 	bl	800560a <UART_EndTransmit_IT>
    return;
 800481a:	e02c      	b.n	8004876 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800481c:	23a4      	movs	r3, #164	; 0xa4
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	4013      	ands	r3, r2
 8004828:	d00b      	beq.n	8004842 <HAL_UART_IRQHandler+0x606>
 800482a:	23a0      	movs	r3, #160	; 0xa0
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	2380      	movs	r3, #128	; 0x80
 8004832:	05db      	lsls	r3, r3, #23
 8004834:	4013      	ands	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	0018      	movs	r0, r3
 800483c:	f000 ff21 	bl	8005682 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004840:	e019      	b.n	8004876 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004842:	23a4      	movs	r3, #164	; 0xa4
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	045b      	lsls	r3, r3, #17
 800484c:	4013      	ands	r3, r2
 800484e:	d012      	beq.n	8004876 <HAL_UART_IRQHandler+0x63a>
 8004850:	23a0      	movs	r3, #160	; 0xa0
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	da0d      	bge.n	8004876 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	0018      	movs	r0, r3
 800485e:	f000 ff08 	bl	8005672 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004862:	e008      	b.n	8004876 <HAL_UART_IRQHandler+0x63a>
      return;
 8004864:	46c0      	nop			; (mov r8, r8)
 8004866:	e006      	b.n	8004876 <HAL_UART_IRQHandler+0x63a>
    return;
 8004868:	46c0      	nop			; (mov r8, r8)
 800486a:	e004      	b.n	8004876 <HAL_UART_IRQHandler+0x63a>
      return;
 800486c:	46c0      	nop			; (mov r8, r8)
 800486e:	e002      	b.n	8004876 <HAL_UART_IRQHandler+0x63a>
      return;
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	e000      	b.n	8004876 <HAL_UART_IRQHandler+0x63a>
    return;
 8004874:	46c0      	nop			; (mov r8, r8)
  }
}
 8004876:	46bd      	mov	sp, r7
 8004878:	b02a      	add	sp, #168	; 0xa8
 800487a:	bdb0      	pop	{r4, r5, r7, pc}
 800487c:	fffffeff 	.word	0xfffffeff
 8004880:	fffffedf 	.word	0xfffffedf
 8004884:	effffffe 	.word	0xeffffffe

08004888 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004890:	46c0      	nop			; (mov r8, r8)
 8004892:	46bd      	mov	sp, r7
 8004894:	b002      	add	sp, #8
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80048a0:	46c0      	nop			; (mov r8, r8)
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b002      	add	sp, #8
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80048b0:	46c0      	nop			; (mov r8, r8)
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b002      	add	sp, #8
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b002      	add	sp, #8
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c8:	b5b0      	push	{r4, r5, r7, lr}
 80048ca:	b090      	sub	sp, #64	; 0x40
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048d0:	231a      	movs	r3, #26
 80048d2:	2220      	movs	r2, #32
 80048d4:	189b      	adds	r3, r3, r2
 80048d6:	19db      	adds	r3, r3, r7
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	431a      	orrs	r2, r3
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4ac4      	ldr	r2, [pc, #784]	; (8004c0c <UART_SetConfig+0x344>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	0019      	movs	r1, r3
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004906:	430b      	orrs	r3, r1
 8004908:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	4abf      	ldr	r2, [pc, #764]	; (8004c10 <UART_SetConfig+0x348>)
 8004912:	4013      	ands	r3, r2
 8004914:	0018      	movs	r0, r3
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	68d9      	ldr	r1, [r3, #12]
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	0003      	movs	r3, r0
 8004920:	430b      	orrs	r3, r1
 8004922:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4ab9      	ldr	r2, [pc, #740]	; (8004c14 <UART_SetConfig+0x34c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d004      	beq.n	800493e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800493a:	4313      	orrs	r3, r2
 800493c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4ab4      	ldr	r2, [pc, #720]	; (8004c18 <UART_SetConfig+0x350>)
 8004946:	4013      	ands	r3, r2
 8004948:	0019      	movs	r1, r3
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004950:	430b      	orrs	r3, r1
 8004952:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	220f      	movs	r2, #15
 800495c:	4393      	bics	r3, r2
 800495e:	0018      	movs	r0, r3
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	0003      	movs	r3, r0
 800496a:	430b      	orrs	r3, r1
 800496c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4aaa      	ldr	r2, [pc, #680]	; (8004c1c <UART_SetConfig+0x354>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d131      	bne.n	80049dc <UART_SetConfig+0x114>
 8004978:	4ba9      	ldr	r3, [pc, #676]	; (8004c20 <UART_SetConfig+0x358>)
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497c:	2203      	movs	r2, #3
 800497e:	4013      	ands	r3, r2
 8004980:	2b03      	cmp	r3, #3
 8004982:	d01d      	beq.n	80049c0 <UART_SetConfig+0xf8>
 8004984:	d823      	bhi.n	80049ce <UART_SetConfig+0x106>
 8004986:	2b02      	cmp	r3, #2
 8004988:	d00c      	beq.n	80049a4 <UART_SetConfig+0xdc>
 800498a:	d820      	bhi.n	80049ce <UART_SetConfig+0x106>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <UART_SetConfig+0xce>
 8004990:	2b01      	cmp	r3, #1
 8004992:	d00e      	beq.n	80049b2 <UART_SetConfig+0xea>
 8004994:	e01b      	b.n	80049ce <UART_SetConfig+0x106>
 8004996:	231b      	movs	r3, #27
 8004998:	2220      	movs	r2, #32
 800499a:	189b      	adds	r3, r3, r2
 800499c:	19db      	adds	r3, r3, r7
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	e071      	b.n	8004a88 <UART_SetConfig+0x1c0>
 80049a4:	231b      	movs	r3, #27
 80049a6:	2220      	movs	r2, #32
 80049a8:	189b      	adds	r3, r3, r2
 80049aa:	19db      	adds	r3, r3, r7
 80049ac:	2202      	movs	r2, #2
 80049ae:	701a      	strb	r2, [r3, #0]
 80049b0:	e06a      	b.n	8004a88 <UART_SetConfig+0x1c0>
 80049b2:	231b      	movs	r3, #27
 80049b4:	2220      	movs	r2, #32
 80049b6:	189b      	adds	r3, r3, r2
 80049b8:	19db      	adds	r3, r3, r7
 80049ba:	2204      	movs	r2, #4
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	e063      	b.n	8004a88 <UART_SetConfig+0x1c0>
 80049c0:	231b      	movs	r3, #27
 80049c2:	2220      	movs	r2, #32
 80049c4:	189b      	adds	r3, r3, r2
 80049c6:	19db      	adds	r3, r3, r7
 80049c8:	2208      	movs	r2, #8
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	e05c      	b.n	8004a88 <UART_SetConfig+0x1c0>
 80049ce:	231b      	movs	r3, #27
 80049d0:	2220      	movs	r2, #32
 80049d2:	189b      	adds	r3, r3, r2
 80049d4:	19db      	adds	r3, r3, r7
 80049d6:	2210      	movs	r2, #16
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	e055      	b.n	8004a88 <UART_SetConfig+0x1c0>
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a90      	ldr	r2, [pc, #576]	; (8004c24 <UART_SetConfig+0x35c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d106      	bne.n	80049f4 <UART_SetConfig+0x12c>
 80049e6:	231b      	movs	r3, #27
 80049e8:	2220      	movs	r2, #32
 80049ea:	189b      	adds	r3, r3, r2
 80049ec:	19db      	adds	r3, r3, r7
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	e049      	b.n	8004a88 <UART_SetConfig+0x1c0>
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a86      	ldr	r2, [pc, #536]	; (8004c14 <UART_SetConfig+0x34c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d13e      	bne.n	8004a7c <UART_SetConfig+0x1b4>
 80049fe:	4b88      	ldr	r3, [pc, #544]	; (8004c20 <UART_SetConfig+0x358>)
 8004a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a02:	23c0      	movs	r3, #192	; 0xc0
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	4013      	ands	r3, r2
 8004a08:	22c0      	movs	r2, #192	; 0xc0
 8004a0a:	0112      	lsls	r2, r2, #4
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d027      	beq.n	8004a60 <UART_SetConfig+0x198>
 8004a10:	22c0      	movs	r2, #192	; 0xc0
 8004a12:	0112      	lsls	r2, r2, #4
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d82a      	bhi.n	8004a6e <UART_SetConfig+0x1a6>
 8004a18:	2280      	movs	r2, #128	; 0x80
 8004a1a:	0112      	lsls	r2, r2, #4
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d011      	beq.n	8004a44 <UART_SetConfig+0x17c>
 8004a20:	2280      	movs	r2, #128	; 0x80
 8004a22:	0112      	lsls	r2, r2, #4
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d822      	bhi.n	8004a6e <UART_SetConfig+0x1a6>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <UART_SetConfig+0x16e>
 8004a2c:	2280      	movs	r2, #128	; 0x80
 8004a2e:	00d2      	lsls	r2, r2, #3
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00e      	beq.n	8004a52 <UART_SetConfig+0x18a>
 8004a34:	e01b      	b.n	8004a6e <UART_SetConfig+0x1a6>
 8004a36:	231b      	movs	r3, #27
 8004a38:	2220      	movs	r2, #32
 8004a3a:	189b      	adds	r3, r3, r2
 8004a3c:	19db      	adds	r3, r3, r7
 8004a3e:	2200      	movs	r2, #0
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	e021      	b.n	8004a88 <UART_SetConfig+0x1c0>
 8004a44:	231b      	movs	r3, #27
 8004a46:	2220      	movs	r2, #32
 8004a48:	189b      	adds	r3, r3, r2
 8004a4a:	19db      	adds	r3, r3, r7
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	e01a      	b.n	8004a88 <UART_SetConfig+0x1c0>
 8004a52:	231b      	movs	r3, #27
 8004a54:	2220      	movs	r2, #32
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	19db      	adds	r3, r3, r7
 8004a5a:	2204      	movs	r2, #4
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e013      	b.n	8004a88 <UART_SetConfig+0x1c0>
 8004a60:	231b      	movs	r3, #27
 8004a62:	2220      	movs	r2, #32
 8004a64:	189b      	adds	r3, r3, r2
 8004a66:	19db      	adds	r3, r3, r7
 8004a68:	2208      	movs	r2, #8
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	e00c      	b.n	8004a88 <UART_SetConfig+0x1c0>
 8004a6e:	231b      	movs	r3, #27
 8004a70:	2220      	movs	r2, #32
 8004a72:	189b      	adds	r3, r3, r2
 8004a74:	19db      	adds	r3, r3, r7
 8004a76:	2210      	movs	r2, #16
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	e005      	b.n	8004a88 <UART_SetConfig+0x1c0>
 8004a7c:	231b      	movs	r3, #27
 8004a7e:	2220      	movs	r2, #32
 8004a80:	189b      	adds	r3, r3, r2
 8004a82:	19db      	adds	r3, r3, r7
 8004a84:	2210      	movs	r2, #16
 8004a86:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a61      	ldr	r2, [pc, #388]	; (8004c14 <UART_SetConfig+0x34c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d000      	beq.n	8004a94 <UART_SetConfig+0x1cc>
 8004a92:	e092      	b.n	8004bba <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a94:	231b      	movs	r3, #27
 8004a96:	2220      	movs	r2, #32
 8004a98:	189b      	adds	r3, r3, r2
 8004a9a:	19db      	adds	r3, r3, r7
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d015      	beq.n	8004ace <UART_SetConfig+0x206>
 8004aa2:	dc18      	bgt.n	8004ad6 <UART_SetConfig+0x20e>
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d00d      	beq.n	8004ac4 <UART_SetConfig+0x1fc>
 8004aa8:	dc15      	bgt.n	8004ad6 <UART_SetConfig+0x20e>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <UART_SetConfig+0x1ec>
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d005      	beq.n	8004abe <UART_SetConfig+0x1f6>
 8004ab2:	e010      	b.n	8004ad6 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab4:	f7fe ffdc 	bl	8003a70 <HAL_RCC_GetPCLK1Freq>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004abc:	e014      	b.n	8004ae8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004abe:	4b5a      	ldr	r3, [pc, #360]	; (8004c28 <UART_SetConfig+0x360>)
 8004ac0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ac2:	e011      	b.n	8004ae8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ac4:	f7fe ff48 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004acc:	e00c      	b.n	8004ae8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ace:	2380      	movs	r3, #128	; 0x80
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ad4:	e008      	b.n	8004ae8 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004ada:	231a      	movs	r3, #26
 8004adc:	2220      	movs	r2, #32
 8004ade:	189b      	adds	r3, r3, r2
 8004ae0:	19db      	adds	r3, r3, r7
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]
        break;
 8004ae6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d100      	bne.n	8004af0 <UART_SetConfig+0x228>
 8004aee:	e147      	b.n	8004d80 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004af4:	4b4d      	ldr	r3, [pc, #308]	; (8004c2c <UART_SetConfig+0x364>)
 8004af6:	0052      	lsls	r2, r2, #1
 8004af8:	5ad3      	ldrh	r3, [r2, r3]
 8004afa:	0019      	movs	r1, r3
 8004afc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004afe:	f7fb faff 	bl	8000100 <__udivsi3>
 8004b02:	0003      	movs	r3, r0
 8004b04:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	0013      	movs	r3, r2
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d305      	bcc.n	8004b22 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d906      	bls.n	8004b30 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004b22:	231a      	movs	r3, #26
 8004b24:	2220      	movs	r2, #32
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	19db      	adds	r3, r3, r7
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	e127      	b.n	8004d80 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	2300      	movs	r3, #0
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3c:	4b3b      	ldr	r3, [pc, #236]	; (8004c2c <UART_SetConfig+0x364>)
 8004b3e:	0052      	lsls	r2, r2, #1
 8004b40:	5ad3      	ldrh	r3, [r2, r3]
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	69b8      	ldr	r0, [r7, #24]
 8004b4e:	69f9      	ldr	r1, [r7, #28]
 8004b50:	f7fb fc4c 	bl	80003ec <__aeabi_uldivmod>
 8004b54:	0002      	movs	r2, r0
 8004b56:	000b      	movs	r3, r1
 8004b58:	0e11      	lsrs	r1, r2, #24
 8004b5a:	021d      	lsls	r5, r3, #8
 8004b5c:	430d      	orrs	r5, r1
 8004b5e:	0214      	lsls	r4, r2, #8
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	68b8      	ldr	r0, [r7, #8]
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	1900      	adds	r0, r0, r4
 8004b72:	4169      	adcs	r1, r5
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f7fb fc33 	bl	80003ec <__aeabi_uldivmod>
 8004b86:	0002      	movs	r2, r0
 8004b88:	000b      	movs	r3, r1
 8004b8a:	0013      	movs	r3, r2
 8004b8c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b90:	23c0      	movs	r3, #192	; 0xc0
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d309      	bcc.n	8004bac <UART_SetConfig+0x2e4>
 8004b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b9a:	2380      	movs	r3, #128	; 0x80
 8004b9c:	035b      	lsls	r3, r3, #13
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d204      	bcs.n	8004bac <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba8:	60da      	str	r2, [r3, #12]
 8004baa:	e0e9      	b.n	8004d80 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004bac:	231a      	movs	r3, #26
 8004bae:	2220      	movs	r2, #32
 8004bb0:	189b      	adds	r3, r3, r2
 8004bb2:	19db      	adds	r3, r3, r7
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]
 8004bb8:	e0e2      	b.n	8004d80 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	69da      	ldr	r2, [r3, #28]
 8004bbe:	2380      	movs	r3, #128	; 0x80
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d000      	beq.n	8004bc8 <UART_SetConfig+0x300>
 8004bc6:	e083      	b.n	8004cd0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004bc8:	231b      	movs	r3, #27
 8004bca:	2220      	movs	r2, #32
 8004bcc:	189b      	adds	r3, r3, r2
 8004bce:	19db      	adds	r3, r3, r7
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d015      	beq.n	8004c02 <UART_SetConfig+0x33a>
 8004bd6:	dc2b      	bgt.n	8004c30 <UART_SetConfig+0x368>
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d00d      	beq.n	8004bf8 <UART_SetConfig+0x330>
 8004bdc:	dc28      	bgt.n	8004c30 <UART_SetConfig+0x368>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <UART_SetConfig+0x320>
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d005      	beq.n	8004bf2 <UART_SetConfig+0x32a>
 8004be6:	e023      	b.n	8004c30 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be8:	f7fe ff42 	bl	8003a70 <HAL_RCC_GetPCLK1Freq>
 8004bec:	0003      	movs	r3, r0
 8004bee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bf0:	e027      	b.n	8004c42 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <UART_SetConfig+0x360>)
 8004bf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bf6:	e024      	b.n	8004c42 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf8:	f7fe feae 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8004bfc:	0003      	movs	r3, r0
 8004bfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c00:	e01f      	b.n	8004c42 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c08:	e01b      	b.n	8004c42 <UART_SetConfig+0x37a>
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	cfff69f3 	.word	0xcfff69f3
 8004c10:	ffffcfff 	.word	0xffffcfff
 8004c14:	40008000 	.word	0x40008000
 8004c18:	11fff4ff 	.word	0x11fff4ff
 8004c1c:	40013800 	.word	0x40013800
 8004c20:	40021000 	.word	0x40021000
 8004c24:	40004400 	.word	0x40004400
 8004c28:	00f42400 	.word	0x00f42400
 8004c2c:	08005b40 	.word	0x08005b40
      default:
        pclk = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004c34:	231a      	movs	r3, #26
 8004c36:	2220      	movs	r2, #32
 8004c38:	189b      	adds	r3, r3, r2
 8004c3a:	19db      	adds	r3, r3, r7
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
        break;
 8004c40:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d100      	bne.n	8004c4a <UART_SetConfig+0x382>
 8004c48:	e09a      	b.n	8004d80 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c4e:	4b58      	ldr	r3, [pc, #352]	; (8004db0 <UART_SetConfig+0x4e8>)
 8004c50:	0052      	lsls	r2, r2, #1
 8004c52:	5ad3      	ldrh	r3, [r2, r3]
 8004c54:	0019      	movs	r1, r3
 8004c56:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c58:	f7fb fa52 	bl	8000100 <__udivsi3>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	005a      	lsls	r2, r3, #1
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	085b      	lsrs	r3, r3, #1
 8004c66:	18d2      	adds	r2, r2, r3
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	0019      	movs	r1, r3
 8004c6e:	0010      	movs	r0, r2
 8004c70:	f7fb fa46 	bl	8000100 <__udivsi3>
 8004c74:	0003      	movs	r3, r0
 8004c76:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7a:	2b0f      	cmp	r3, #15
 8004c7c:	d921      	bls.n	8004cc2 <UART_SetConfig+0x3fa>
 8004c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c80:	2380      	movs	r3, #128	; 0x80
 8004c82:	025b      	lsls	r3, r3, #9
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d21c      	bcs.n	8004cc2 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	200e      	movs	r0, #14
 8004c8e:	2420      	movs	r4, #32
 8004c90:	1903      	adds	r3, r0, r4
 8004c92:	19db      	adds	r3, r3, r7
 8004c94:	210f      	movs	r1, #15
 8004c96:	438a      	bics	r2, r1
 8004c98:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2207      	movs	r2, #7
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	b299      	uxth	r1, r3
 8004ca6:	1903      	adds	r3, r0, r4
 8004ca8:	19db      	adds	r3, r3, r7
 8004caa:	1902      	adds	r2, r0, r4
 8004cac:	19d2      	adds	r2, r2, r7
 8004cae:	8812      	ldrh	r2, [r2, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	1902      	adds	r2, r0, r4
 8004cba:	19d2      	adds	r2, r2, r7
 8004cbc:	8812      	ldrh	r2, [r2, #0]
 8004cbe:	60da      	str	r2, [r3, #12]
 8004cc0:	e05e      	b.n	8004d80 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004cc2:	231a      	movs	r3, #26
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	189b      	adds	r3, r3, r2
 8004cc8:	19db      	adds	r3, r3, r7
 8004cca:	2201      	movs	r2, #1
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e057      	b.n	8004d80 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cd0:	231b      	movs	r3, #27
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	189b      	adds	r3, r3, r2
 8004cd6:	19db      	adds	r3, r3, r7
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d015      	beq.n	8004d0a <UART_SetConfig+0x442>
 8004cde:	dc18      	bgt.n	8004d12 <UART_SetConfig+0x44a>
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d00d      	beq.n	8004d00 <UART_SetConfig+0x438>
 8004ce4:	dc15      	bgt.n	8004d12 <UART_SetConfig+0x44a>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <UART_SetConfig+0x428>
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d005      	beq.n	8004cfa <UART_SetConfig+0x432>
 8004cee:	e010      	b.n	8004d12 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f7fe febe 	bl	8003a70 <HAL_RCC_GetPCLK1Freq>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cf8:	e014      	b.n	8004d24 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cfa:	4b2e      	ldr	r3, [pc, #184]	; (8004db4 <UART_SetConfig+0x4ec>)
 8004cfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cfe:	e011      	b.n	8004d24 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d00:	f7fe fe2a 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8004d04:	0003      	movs	r3, r0
 8004d06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d08:	e00c      	b.n	8004d24 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0a:	2380      	movs	r3, #128	; 0x80
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d10:	e008      	b.n	8004d24 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004d16:	231a      	movs	r3, #26
 8004d18:	2220      	movs	r2, #32
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	19db      	adds	r3, r3, r7
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
        break;
 8004d22:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d02a      	beq.n	8004d80 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d2e:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <UART_SetConfig+0x4e8>)
 8004d30:	0052      	lsls	r2, r2, #1
 8004d32:	5ad3      	ldrh	r3, [r2, r3]
 8004d34:	0019      	movs	r1, r3
 8004d36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d38:	f7fb f9e2 	bl	8000100 <__udivsi3>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	001a      	movs	r2, r3
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	18d2      	adds	r2, r2, r3
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	0019      	movs	r1, r3
 8004d4e:	0010      	movs	r0, r2
 8004d50:	f7fb f9d6 	bl	8000100 <__udivsi3>
 8004d54:	0003      	movs	r3, r0
 8004d56:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	d90a      	bls.n	8004d74 <UART_SetConfig+0x4ac>
 8004d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	025b      	lsls	r3, r3, #9
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d205      	bcs.n	8004d74 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60da      	str	r2, [r3, #12]
 8004d72:	e005      	b.n	8004d80 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d74:	231a      	movs	r3, #26
 8004d76:	2220      	movs	r2, #32
 8004d78:	189b      	adds	r3, r3, r2
 8004d7a:	19db      	adds	r3, r3, r7
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	226a      	movs	r2, #106	; 0x6a
 8004d84:	2101      	movs	r1, #1
 8004d86:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	2268      	movs	r2, #104	; 0x68
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	2200      	movs	r2, #0
 8004d94:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	2200      	movs	r2, #0
 8004d9a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d9c:	231a      	movs	r3, #26
 8004d9e:	2220      	movs	r2, #32
 8004da0:	189b      	adds	r3, r3, r2
 8004da2:	19db      	adds	r3, r3, r7
 8004da4:	781b      	ldrb	r3, [r3, #0]
}
 8004da6:	0018      	movs	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b010      	add	sp, #64	; 0x40
 8004dac:	bdb0      	pop	{r4, r5, r7, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	08005b40 	.word	0x08005b40
 8004db4:	00f42400 	.word	0x00f42400

08004db8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d00b      	beq.n	8004de2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4a4a      	ldr	r2, [pc, #296]	; (8004efc <UART_AdvFeatureConfig+0x144>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	0019      	movs	r1, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	2202      	movs	r2, #2
 8004de8:	4013      	ands	r3, r2
 8004dea:	d00b      	beq.n	8004e04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	4a43      	ldr	r2, [pc, #268]	; (8004f00 <UART_AdvFeatureConfig+0x148>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	0019      	movs	r1, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	2204      	movs	r2, #4
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4a3b      	ldr	r2, [pc, #236]	; (8004f04 <UART_AdvFeatureConfig+0x14c>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	0019      	movs	r1, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	2208      	movs	r2, #8
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	d00b      	beq.n	8004e48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	4a34      	ldr	r2, [pc, #208]	; (8004f08 <UART_AdvFeatureConfig+0x150>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	0019      	movs	r1, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4c:	2210      	movs	r2, #16
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d00b      	beq.n	8004e6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	4a2c      	ldr	r2, [pc, #176]	; (8004f0c <UART_AdvFeatureConfig+0x154>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6e:	2220      	movs	r2, #32
 8004e70:	4013      	ands	r3, r2
 8004e72:	d00b      	beq.n	8004e8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	4a25      	ldr	r2, [pc, #148]	; (8004f10 <UART_AdvFeatureConfig+0x158>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	0019      	movs	r1, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	2240      	movs	r2, #64	; 0x40
 8004e92:	4013      	ands	r3, r2
 8004e94:	d01d      	beq.n	8004ed2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <UART_AdvFeatureConfig+0x15c>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	0019      	movs	r1, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	035b      	lsls	r3, r3, #13
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d10b      	bne.n	8004ed2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	4a15      	ldr	r2, [pc, #84]	; (8004f18 <UART_AdvFeatureConfig+0x160>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	0019      	movs	r1, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	2280      	movs	r2, #128	; 0x80
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4a0e      	ldr	r2, [pc, #56]	; (8004f1c <UART_AdvFeatureConfig+0x164>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	605a      	str	r2, [r3, #4]
  }
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b002      	add	sp, #8
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	fffdffff 	.word	0xfffdffff
 8004f00:	fffeffff 	.word	0xfffeffff
 8004f04:	fffbffff 	.word	0xfffbffff
 8004f08:	ffff7fff 	.word	0xffff7fff
 8004f0c:	ffffefff 	.word	0xffffefff
 8004f10:	ffffdfff 	.word	0xffffdfff
 8004f14:	ffefffff 	.word	0xffefffff
 8004f18:	ff9fffff 	.word	0xff9fffff
 8004f1c:	fff7ffff 	.word	0xfff7ffff

08004f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2290      	movs	r2, #144	; 0x90
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f30:	f7fc fd70 	bl	8001a14 <HAL_GetTick>
 8004f34:	0003      	movs	r3, r0
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2208      	movs	r2, #8
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d10c      	bne.n	8004f60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2280      	movs	r2, #128	; 0x80
 8004f4a:	0391      	lsls	r1, r2, #14
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	4a1a      	ldr	r2, [pc, #104]	; (8004fb8 <UART_CheckIdleState+0x98>)
 8004f50:	9200      	str	r2, [sp, #0]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f000 f832 	bl	8004fbc <UART_WaitOnFlagUntilTimeout>
 8004f58:	1e03      	subs	r3, r0, #0
 8004f5a:	d001      	beq.n	8004f60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e026      	b.n	8004fae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2204      	movs	r2, #4
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d10c      	bne.n	8004f88 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2280      	movs	r2, #128	; 0x80
 8004f72:	03d1      	lsls	r1, r2, #15
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	4a10      	ldr	r2, [pc, #64]	; (8004fb8 <UART_CheckIdleState+0x98>)
 8004f78:	9200      	str	r2, [sp, #0]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f000 f81e 	bl	8004fbc <UART_WaitOnFlagUntilTimeout>
 8004f80:	1e03      	subs	r3, r0, #0
 8004f82:	d001      	beq.n	8004f88 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e012      	b.n	8004fae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2288      	movs	r2, #136	; 0x88
 8004f8c:	2120      	movs	r1, #32
 8004f8e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	228c      	movs	r2, #140	; 0x8c
 8004f94:	2120      	movs	r1, #32
 8004f96:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2284      	movs	r2, #132	; 0x84
 8004fa8:	2100      	movs	r1, #0
 8004faa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	0018      	movs	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b004      	add	sp, #16
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	01ffffff 	.word	0x01ffffff

08004fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b094      	sub	sp, #80	; 0x50
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	1dfb      	adds	r3, r7, #7
 8004fca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fcc:	e0a7      	b.n	800511e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	d100      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004fd4:	e0a3      	b.n	800511e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd6:	f7fc fd1d 	bl	8001a14 <HAL_GetTick>
 8004fda:	0002      	movs	r2, r0
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d302      	bcc.n	8004fec <UART_WaitOnFlagUntilTimeout+0x30>
 8004fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d13f      	bne.n	800506c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fec:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	f383 8810 	msr	PRIMASK, r3
}
 8005000:	46c0      	nop			; (mov r8, r8)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	494e      	ldr	r1, [pc, #312]	; (8005148 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800500e:	400a      	ands	r2, r1
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005014:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	f383 8810 	msr	PRIMASK, r3
}
 800501c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800501e:	f3ef 8310 	mrs	r3, PRIMASK
 8005022:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005026:	643b      	str	r3, [r7, #64]	; 0x40
 8005028:	2301      	movs	r3, #1
 800502a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	f383 8810 	msr	PRIMASK, r3
}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2101      	movs	r1, #1
 8005040:	438a      	bics	r2, r1
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005046:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504a:	f383 8810 	msr	PRIMASK, r3
}
 800504e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2288      	movs	r2, #136	; 0x88
 8005054:	2120      	movs	r1, #32
 8005056:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	228c      	movs	r2, #140	; 0x8c
 800505c:	2120      	movs	r1, #32
 800505e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2284      	movs	r2, #132	; 0x84
 8005064:	2100      	movs	r1, #0
 8005066:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e069      	b.n	8005140 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2204      	movs	r2, #4
 8005074:	4013      	ands	r3, r2
 8005076:	d052      	beq.n	800511e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69da      	ldr	r2, [r3, #28]
 800507e:	2380      	movs	r3, #128	; 0x80
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	401a      	ands	r2, r3
 8005084:	2380      	movs	r3, #128	; 0x80
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	429a      	cmp	r2, r3
 800508a:	d148      	bne.n	800511e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2280      	movs	r2, #128	; 0x80
 8005092:	0112      	lsls	r2, r2, #4
 8005094:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005096:	f3ef 8310 	mrs	r3, PRIMASK
 800509a:	613b      	str	r3, [r7, #16]
  return(result);
 800509c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800509e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a0:	2301      	movs	r3, #1
 80050a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f383 8810 	msr	PRIMASK, r3
}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4924      	ldr	r1, [pc, #144]	; (8005148 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80050b8:	400a      	ands	r2, r1
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f383 8810 	msr	PRIMASK, r3
}
 80050c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c8:	f3ef 8310 	mrs	r3, PRIMASK
 80050cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80050ce:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80050d2:	2301      	movs	r3, #1
 80050d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	f383 8810 	msr	PRIMASK, r3
}
 80050dc:	46c0      	nop			; (mov r8, r8)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2101      	movs	r1, #1
 80050ea:	438a      	bics	r2, r1
 80050ec:	609a      	str	r2, [r3, #8]
 80050ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	f383 8810 	msr	PRIMASK, r3
}
 80050f8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2288      	movs	r2, #136	; 0x88
 80050fe:	2120      	movs	r1, #32
 8005100:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	228c      	movs	r2, #140	; 0x8c
 8005106:	2120      	movs	r1, #32
 8005108:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2290      	movs	r2, #144	; 0x90
 800510e:	2120      	movs	r1, #32
 8005110:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2284      	movs	r2, #132	; 0x84
 8005116:	2100      	movs	r1, #0
 8005118:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e010      	b.n	8005140 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	4013      	ands	r3, r2
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	425a      	negs	r2, r3
 800512e:	4153      	adcs	r3, r2
 8005130:	b2db      	uxtb	r3, r3
 8005132:	001a      	movs	r2, r3
 8005134:	1dfb      	adds	r3, r7, #7
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d100      	bne.n	800513e <UART_WaitOnFlagUntilTimeout+0x182>
 800513c:	e747      	b.n	8004fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	0018      	movs	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	b014      	add	sp, #80	; 0x50
 8005146:	bd80      	pop	{r7, pc}
 8005148:	fffffe5f 	.word	0xfffffe5f

0800514c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b090      	sub	sp, #64	; 0x40
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	1dbb      	adds	r3, r7, #6
 8005158:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	1dba      	adds	r2, r7, #6
 8005164:	215c      	movs	r1, #92	; 0x5c
 8005166:	8812      	ldrh	r2, [r2, #0]
 8005168:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2290      	movs	r2, #144	; 0x90
 800516e:	2100      	movs	r1, #0
 8005170:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	228c      	movs	r2, #140	; 0x8c
 8005176:	2122      	movs	r1, #34	; 0x22
 8005178:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2280      	movs	r2, #128	; 0x80
 800517e:	589b      	ldr	r3, [r3, r2]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d02d      	beq.n	80051e0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2280      	movs	r2, #128	; 0x80
 8005188:	589b      	ldr	r3, [r3, r2]
 800518a:	4a40      	ldr	r2, [pc, #256]	; (800528c <UART_Start_Receive_DMA+0x140>)
 800518c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2280      	movs	r2, #128	; 0x80
 8005192:	589b      	ldr	r3, [r3, r2]
 8005194:	4a3e      	ldr	r2, [pc, #248]	; (8005290 <UART_Start_Receive_DMA+0x144>)
 8005196:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2280      	movs	r2, #128	; 0x80
 800519c:	589b      	ldr	r3, [r3, r2]
 800519e:	4a3d      	ldr	r2, [pc, #244]	; (8005294 <UART_Start_Receive_DMA+0x148>)
 80051a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2280      	movs	r2, #128	; 0x80
 80051a6:	589b      	ldr	r3, [r3, r2]
 80051a8:	2200      	movs	r2, #0
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2280      	movs	r2, #128	; 0x80
 80051b0:	5898      	ldr	r0, [r3, r2]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3324      	adds	r3, #36	; 0x24
 80051b8:	0019      	movs	r1, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051be:	001a      	movs	r2, r3
 80051c0:	1dbb      	adds	r3, r7, #6
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	f7fd fa16 	bl	80025f4 <HAL_DMA_Start_IT>
 80051c8:	1e03      	subs	r3, r0, #0
 80051ca:	d009      	beq.n	80051e0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2290      	movs	r2, #144	; 0x90
 80051d0:	2110      	movs	r1, #16
 80051d2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	228c      	movs	r2, #140	; 0x8c
 80051d8:	2120      	movs	r1, #32
 80051da:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e050      	b.n	8005282 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d019      	beq.n	800521c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e8:	f3ef 8310 	mrs	r3, PRIMASK
 80051ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051f2:	2301      	movs	r3, #1
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	f383 8810 	msr	PRIMASK, r3
}
 80051fc:	46c0      	nop			; (mov r8, r8)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2180      	movs	r1, #128	; 0x80
 800520a:	0049      	lsls	r1, r1, #1
 800520c:	430a      	orrs	r2, r1
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005212:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	f383 8810 	msr	PRIMASK, r3
}
 800521a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521c:	f3ef 8310 	mrs	r3, PRIMASK
 8005220:	613b      	str	r3, [r7, #16]
  return(result);
 8005222:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005224:	63bb      	str	r3, [r7, #56]	; 0x38
 8005226:	2301      	movs	r3, #1
 8005228:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f383 8810 	msr	PRIMASK, r3
}
 8005230:	46c0      	nop			; (mov r8, r8)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2101      	movs	r1, #1
 800523e:	430a      	orrs	r2, r1
 8005240:	609a      	str	r2, [r3, #8]
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	f383 8810 	msr	PRIMASK, r3
}
 800524c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800524e:	f3ef 8310 	mrs	r3, PRIMASK
 8005252:	61fb      	str	r3, [r7, #28]
  return(result);
 8005254:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005256:	637b      	str	r3, [r7, #52]	; 0x34
 8005258:	2301      	movs	r3, #1
 800525a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	f383 8810 	msr	PRIMASK, r3
}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2140      	movs	r1, #64	; 0x40
 8005270:	430a      	orrs	r2, r1
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	f383 8810 	msr	PRIMASK, r3
}
 800527e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	0018      	movs	r0, r3
 8005284:	46bd      	mov	sp, r7
 8005286:	b010      	add	sp, #64	; 0x40
 8005288:	bd80      	pop	{r7, pc}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	080053e5 	.word	0x080053e5
 8005290:	08005515 	.word	0x08005515
 8005294:	08005557 	.word	0x08005557

08005298 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	; 0x28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a0:	f3ef 8310 	mrs	r3, PRIMASK
 80052a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80052a6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
 80052aa:	2301      	movs	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f383 8810 	msr	PRIMASK, r3
}
 80052b4:	46c0      	nop			; (mov r8, r8)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	21c0      	movs	r1, #192	; 0xc0
 80052c2:	438a      	bics	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f383 8810 	msr	PRIMASK, r3
}
 80052d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d2:	f3ef 8310 	mrs	r3, PRIMASK
 80052d6:	617b      	str	r3, [r7, #20]
  return(result);
 80052d8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80052da:	623b      	str	r3, [r7, #32]
 80052dc:	2301      	movs	r3, #1
 80052de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f383 8810 	msr	PRIMASK, r3
}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4908      	ldr	r1, [pc, #32]	; (8005314 <UART_EndTxTransfer+0x7c>)
 80052f4:	400a      	ands	r2, r1
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f383 8810 	msr	PRIMASK, r3
}
 8005302:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2288      	movs	r2, #136	; 0x88
 8005308:	2120      	movs	r1, #32
 800530a:	5099      	str	r1, [r3, r2]
}
 800530c:	46c0      	nop			; (mov r8, r8)
 800530e:	46bd      	mov	sp, r7
 8005310:	b00a      	add	sp, #40	; 0x28
 8005312:	bd80      	pop	{r7, pc}
 8005314:	ff7fffff 	.word	0xff7fffff

08005318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08e      	sub	sp, #56	; 0x38
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005320:	f3ef 8310 	mrs	r3, PRIMASK
 8005324:	617b      	str	r3, [r7, #20]
  return(result);
 8005326:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
 800532a:	2301      	movs	r3, #1
 800532c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	f383 8810 	msr	PRIMASK, r3
}
 8005334:	46c0      	nop			; (mov r8, r8)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4926      	ldr	r1, [pc, #152]	; (80053dc <UART_EndRxTransfer+0xc4>)
 8005342:	400a      	ands	r2, r1
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005348:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	f383 8810 	msr	PRIMASK, r3
}
 8005350:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005352:	f3ef 8310 	mrs	r3, PRIMASK
 8005356:	623b      	str	r3, [r7, #32]
  return(result);
 8005358:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800535a:	633b      	str	r3, [r7, #48]	; 0x30
 800535c:	2301      	movs	r3, #1
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	f383 8810 	msr	PRIMASK, r3
}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	491b      	ldr	r1, [pc, #108]	; (80053e0 <UART_EndRxTransfer+0xc8>)
 8005374:	400a      	ands	r2, r1
 8005376:	609a      	str	r2, [r3, #8]
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	f383 8810 	msr	PRIMASK, r3
}
 8005382:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d118      	bne.n	80053be <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538c:	f3ef 8310 	mrs	r3, PRIMASK
 8005390:	60bb      	str	r3, [r7, #8]
  return(result);
 8005392:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005396:	2301      	movs	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f383 8810 	msr	PRIMASK, r3
}
 80053a0:	46c0      	nop			; (mov r8, r8)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2110      	movs	r1, #16
 80053ae:	438a      	bics	r2, r1
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f383 8810 	msr	PRIMASK, r3
}
 80053bc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	228c      	movs	r2, #140	; 0x8c
 80053c2:	2120      	movs	r1, #32
 80053c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b00e      	add	sp, #56	; 0x38
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	fffffedf 	.word	0xfffffedf
 80053e0:	effffffe 	.word	0xeffffffe

080053e4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b094      	sub	sp, #80	; 0x50
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2220      	movs	r2, #32
 80053fa:	4013      	ands	r3, r2
 80053fc:	d16f      	bne.n	80054de <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80053fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005400:	225e      	movs	r2, #94	; 0x5e
 8005402:	2100      	movs	r1, #0
 8005404:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005406:	f3ef 8310 	mrs	r3, PRIMASK
 800540a:	61bb      	str	r3, [r7, #24]
  return(result);
 800540c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800540e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005410:	2301      	movs	r3, #1
 8005412:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f383 8810 	msr	PRIMASK, r3
}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	493a      	ldr	r1, [pc, #232]	; (8005510 <UART_DMAReceiveCplt+0x12c>)
 8005428:	400a      	ands	r2, r1
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800542e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	f383 8810 	msr	PRIMASK, r3
}
 8005436:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005438:	f3ef 8310 	mrs	r3, PRIMASK
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005440:	647b      	str	r3, [r7, #68]	; 0x44
 8005442:	2301      	movs	r3, #1
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	f383 8810 	msr	PRIMASK, r3
}
 800544c:	46c0      	nop			; (mov r8, r8)
 800544e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2101      	movs	r1, #1
 800545a:	438a      	bics	r2, r1
 800545c:	609a      	str	r2, [r3, #8]
 800545e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	f383 8810 	msr	PRIMASK, r3
}
 8005468:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800546a:	f3ef 8310 	mrs	r3, PRIMASK
 800546e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005472:	643b      	str	r3, [r7, #64]	; 0x40
 8005474:	2301      	movs	r3, #1
 8005476:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547a:	f383 8810 	msr	PRIMASK, r3
}
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2140      	movs	r1, #64	; 0x40
 800548c:	438a      	bics	r2, r1
 800548e:	609a      	str	r2, [r3, #8]
 8005490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005492:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	f383 8810 	msr	PRIMASK, r3
}
 800549a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800549c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549e:	228c      	movs	r2, #140	; 0x8c
 80054a0:	2120      	movs	r1, #32
 80054a2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d118      	bne.n	80054de <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ac:	f3ef 8310 	mrs	r3, PRIMASK
 80054b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80054b2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054b6:	2301      	movs	r3, #1
 80054b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f383 8810 	msr	PRIMASK, r3
}
 80054c0:	46c0      	nop			; (mov r8, r8)
 80054c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2110      	movs	r1, #16
 80054ce:	438a      	bics	r2, r1
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f383 8810 	msr	PRIMASK, r3
}
 80054dc:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e0:	2200      	movs	r2, #0
 80054e2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d108      	bne.n	80054fe <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ee:	225c      	movs	r2, #92	; 0x5c
 80054f0:	5a9a      	ldrh	r2, [r3, r2]
 80054f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f4:	0011      	movs	r1, r2
 80054f6:	0018      	movs	r0, r3
 80054f8:	f7fb f9c4 	bl	8000884 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054fc:	e003      	b.n	8005506 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80054fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005500:	0018      	movs	r0, r3
 8005502:	f7ff f9c9 	bl	8004898 <HAL_UART_RxCpltCallback>
}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	46bd      	mov	sp, r7
 800550a:	b014      	add	sp, #80	; 0x50
 800550c:	bd80      	pop	{r7, pc}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	fffffeff 	.word	0xfffffeff

08005514 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800552c:	2b01      	cmp	r3, #1
 800552e:	d10a      	bne.n	8005546 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	225c      	movs	r2, #92	; 0x5c
 8005534:	5a9b      	ldrh	r3, [r3, r2]
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	0011      	movs	r1, r2
 800553e:	0018      	movs	r0, r3
 8005540:	f7fb f9a0 	bl	8000884 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005544:	e003      	b.n	800554e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	0018      	movs	r0, r3
 800554a:	f7ff f9ad 	bl	80048a8 <HAL_UART_RxHalfCpltCallback>
}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	46bd      	mov	sp, r7
 8005552:	b004      	add	sp, #16
 8005554:	bd80      	pop	{r7, pc}

08005556 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b086      	sub	sp, #24
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005562:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2288      	movs	r2, #136	; 0x88
 8005568:	589b      	ldr	r3, [r3, r2]
 800556a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	228c      	movs	r2, #140	; 0x8c
 8005570:	589b      	ldr	r3, [r3, r2]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2280      	movs	r2, #128	; 0x80
 800557c:	4013      	ands	r3, r2
 800557e:	2b80      	cmp	r3, #128	; 0x80
 8005580:	d10a      	bne.n	8005598 <UART_DMAError+0x42>
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	2b21      	cmp	r3, #33	; 0x21
 8005586:	d107      	bne.n	8005598 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2256      	movs	r2, #86	; 0x56
 800558c:	2100      	movs	r1, #0
 800558e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	0018      	movs	r0, r3
 8005594:	f7ff fe80 	bl	8005298 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2240      	movs	r2, #64	; 0x40
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d10a      	bne.n	80055bc <UART_DMAError+0x66>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b22      	cmp	r3, #34	; 0x22
 80055aa:	d107      	bne.n	80055bc <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	225e      	movs	r2, #94	; 0x5e
 80055b0:	2100      	movs	r1, #0
 80055b2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	0018      	movs	r0, r3
 80055b8:	f7ff feae 	bl	8005318 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2290      	movs	r2, #144	; 0x90
 80055c0:	589b      	ldr	r3, [r3, r2]
 80055c2:	2210      	movs	r2, #16
 80055c4:	431a      	orrs	r2, r3
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2190      	movs	r1, #144	; 0x90
 80055ca:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	0018      	movs	r0, r3
 80055d0:	f7ff f972 	bl	80048b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d4:	46c0      	nop			; (mov r8, r8)
 80055d6:	46bd      	mov	sp, r7
 80055d8:	b006      	add	sp, #24
 80055da:	bd80      	pop	{r7, pc}

080055dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	225e      	movs	r2, #94	; 0x5e
 80055ee:	2100      	movs	r1, #0
 80055f0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2256      	movs	r2, #86	; 0x56
 80055f6:	2100      	movs	r1, #0
 80055f8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	0018      	movs	r0, r3
 80055fe:	f7ff f95b 	bl	80048b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	46bd      	mov	sp, r7
 8005606:	b004      	add	sp, #16
 8005608:	bd80      	pop	{r7, pc}

0800560a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b086      	sub	sp, #24
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005612:	f3ef 8310 	mrs	r3, PRIMASK
 8005616:	60bb      	str	r3, [r7, #8]
  return(result);
 8005618:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	2301      	movs	r3, #1
 800561e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f383 8810 	msr	PRIMASK, r3
}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2140      	movs	r1, #64	; 0x40
 8005634:	438a      	bics	r2, r1
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f383 8810 	msr	PRIMASK, r3
}
 8005642:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2288      	movs	r2, #136	; 0x88
 8005648:	2120      	movs	r1, #32
 800564a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	0018      	movs	r0, r3
 8005656:	f7ff f917 	bl	8004888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	46bd      	mov	sp, r7
 800565e:	b006      	add	sp, #24
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	46bd      	mov	sp, r7
 800566e:	b002      	add	sp, #8
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b002      	add	sp, #8
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	46bd      	mov	sp, r7
 800568e:	b002      	add	sp, #8
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2284      	movs	r2, #132	; 0x84
 80056a0:	5c9b      	ldrb	r3, [r3, r2]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_UARTEx_DisableFifoMode+0x16>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e027      	b.n	80056fa <HAL_UARTEx_DisableFifoMode+0x66>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2284      	movs	r2, #132	; 0x84
 80056ae:	2101      	movs	r1, #1
 80056b0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2288      	movs	r2, #136	; 0x88
 80056b6:	2124      	movs	r1, #36	; 0x24
 80056b8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2101      	movs	r1, #1
 80056ce:	438a      	bics	r2, r1
 80056d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a0b      	ldr	r2, [pc, #44]	; (8005704 <HAL_UARTEx_DisableFifoMode+0x70>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2288      	movs	r2, #136	; 0x88
 80056ec:	2120      	movs	r1, #32
 80056ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2284      	movs	r2, #132	; 0x84
 80056f4:	2100      	movs	r1, #0
 80056f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	0018      	movs	r0, r3
 80056fc:	46bd      	mov	sp, r7
 80056fe:	b004      	add	sp, #16
 8005700:	bd80      	pop	{r7, pc}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	dfffffff 	.word	0xdfffffff

08005708 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2284      	movs	r2, #132	; 0x84
 8005716:	5c9b      	ldrb	r3, [r3, r2]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800571c:	2302      	movs	r3, #2
 800571e:	e02e      	b.n	800577e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2284      	movs	r2, #132	; 0x84
 8005724:	2101      	movs	r1, #1
 8005726:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2288      	movs	r2, #136	; 0x88
 800572c:	2124      	movs	r1, #36	; 0x24
 800572e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2101      	movs	r1, #1
 8005744:	438a      	bics	r2, r1
 8005746:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	08d9      	lsrs	r1, r3, #3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	0018      	movs	r0, r3
 8005760:	f000 f8bc 	bl	80058dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2288      	movs	r2, #136	; 0x88
 8005770:	2120      	movs	r1, #32
 8005772:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2284      	movs	r2, #132	; 0x84
 8005778:	2100      	movs	r1, #0
 800577a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	0018      	movs	r0, r3
 8005780:	46bd      	mov	sp, r7
 8005782:	b004      	add	sp, #16
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2284      	movs	r2, #132	; 0x84
 8005796:	5c9b      	ldrb	r3, [r3, r2]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800579c:	2302      	movs	r3, #2
 800579e:	e02f      	b.n	8005800 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2284      	movs	r2, #132	; 0x84
 80057a4:	2101      	movs	r1, #1
 80057a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2288      	movs	r2, #136	; 0x88
 80057ac:	2124      	movs	r1, #36	; 0x24
 80057ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2101      	movs	r1, #1
 80057c4:	438a      	bics	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	4a0e      	ldr	r2, [pc, #56]	; (8005808 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	0019      	movs	r1, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	0018      	movs	r0, r3
 80057e2:	f000 f87b 	bl	80058dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2288      	movs	r2, #136	; 0x88
 80057f2:	2120      	movs	r1, #32
 80057f4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2284      	movs	r2, #132	; 0x84
 80057fa:	2100      	movs	r1, #0
 80057fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b004      	add	sp, #16
 8005806:	bd80      	pop	{r7, pc}
 8005808:	f1ffffff 	.word	0xf1ffffff

0800580c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800580c:	b5b0      	push	{r4, r5, r7, lr}
 800580e:	b08a      	sub	sp, #40	; 0x28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	1dbb      	adds	r3, r7, #6
 8005818:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	228c      	movs	r2, #140	; 0x8c
 800581e:	589b      	ldr	r3, [r3, r2]
 8005820:	2b20      	cmp	r3, #32
 8005822:	d156      	bne.n	80058d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800582a:	1dbb      	adds	r3, r7, #6
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e04e      	b.n	80058d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	2380      	movs	r3, #128	; 0x80
 800583c:	015b      	lsls	r3, r3, #5
 800583e:	429a      	cmp	r2, r3
 8005840:	d109      	bne.n	8005856 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d105      	bne.n	8005856 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2201      	movs	r2, #1
 800584e:	4013      	ands	r3, r2
 8005850:	d001      	beq.n	8005856 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e03e      	b.n	80058d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005862:	2527      	movs	r5, #39	; 0x27
 8005864:	197c      	adds	r4, r7, r5
 8005866:	1dbb      	adds	r3, r7, #6
 8005868:	881a      	ldrh	r2, [r3, #0]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	0018      	movs	r0, r3
 8005870:	f7ff fc6c 	bl	800514c <UART_Start_Receive_DMA>
 8005874:	0003      	movs	r3, r0
 8005876:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005878:	197b      	adds	r3, r7, r5
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d124      	bne.n	80058ca <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005884:	2b01      	cmp	r3, #1
 8005886:	d11c      	bne.n	80058c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2210      	movs	r2, #16
 800588e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005890:	f3ef 8310 	mrs	r3, PRIMASK
 8005894:	617b      	str	r3, [r7, #20]
  return(result);
 8005896:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005898:	623b      	str	r3, [r7, #32]
 800589a:	2301      	movs	r3, #1
 800589c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	f383 8810 	msr	PRIMASK, r3
}
 80058a4:	46c0      	nop			; (mov r8, r8)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2110      	movs	r1, #16
 80058b2:	430a      	orrs	r2, r1
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	f383 8810 	msr	PRIMASK, r3
}
 80058c0:	e003      	b.n	80058ca <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80058c2:	2327      	movs	r3, #39	; 0x27
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	2201      	movs	r2, #1
 80058c8:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80058ca:	2327      	movs	r3, #39	; 0x27
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	e000      	b.n	80058d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80058d2:	2302      	movs	r3, #2
  }
}
 80058d4:	0018      	movs	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b00a      	add	sp, #40	; 0x28
 80058da:	bdb0      	pop	{r4, r5, r7, pc}

080058dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d108      	bne.n	80058fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	226a      	movs	r2, #106	; 0x6a
 80058f0:	2101      	movs	r1, #1
 80058f2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2268      	movs	r2, #104	; 0x68
 80058f8:	2101      	movs	r1, #1
 80058fa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058fc:	e043      	b.n	8005986 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058fe:	260f      	movs	r6, #15
 8005900:	19bb      	adds	r3, r7, r6
 8005902:	2208      	movs	r2, #8
 8005904:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005906:	200e      	movs	r0, #14
 8005908:	183b      	adds	r3, r7, r0
 800590a:	2208      	movs	r2, #8
 800590c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	0e5b      	lsrs	r3, r3, #25
 8005916:	b2da      	uxtb	r2, r3
 8005918:	240d      	movs	r4, #13
 800591a:	193b      	adds	r3, r7, r4
 800591c:	2107      	movs	r1, #7
 800591e:	400a      	ands	r2, r1
 8005920:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	0f5b      	lsrs	r3, r3, #29
 800592a:	b2da      	uxtb	r2, r3
 800592c:	250c      	movs	r5, #12
 800592e:	197b      	adds	r3, r7, r5
 8005930:	2107      	movs	r1, #7
 8005932:	400a      	ands	r2, r1
 8005934:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005936:	183b      	adds	r3, r7, r0
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	197a      	adds	r2, r7, r5
 800593c:	7812      	ldrb	r2, [r2, #0]
 800593e:	4914      	ldr	r1, [pc, #80]	; (8005990 <UARTEx_SetNbDataToProcess+0xb4>)
 8005940:	5c8a      	ldrb	r2, [r1, r2]
 8005942:	435a      	muls	r2, r3
 8005944:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005946:	197b      	adds	r3, r7, r5
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	4a12      	ldr	r2, [pc, #72]	; (8005994 <UARTEx_SetNbDataToProcess+0xb8>)
 800594c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800594e:	0019      	movs	r1, r3
 8005950:	f7fa fc60 	bl	8000214 <__divsi3>
 8005954:	0003      	movs	r3, r0
 8005956:	b299      	uxth	r1, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	226a      	movs	r2, #106	; 0x6a
 800595c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800595e:	19bb      	adds	r3, r7, r6
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	193a      	adds	r2, r7, r4
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	490a      	ldr	r1, [pc, #40]	; (8005990 <UARTEx_SetNbDataToProcess+0xb4>)
 8005968:	5c8a      	ldrb	r2, [r1, r2]
 800596a:	435a      	muls	r2, r3
 800596c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800596e:	193b      	adds	r3, r7, r4
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	4a08      	ldr	r2, [pc, #32]	; (8005994 <UARTEx_SetNbDataToProcess+0xb8>)
 8005974:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005976:	0019      	movs	r1, r3
 8005978:	f7fa fc4c 	bl	8000214 <__divsi3>
 800597c:	0003      	movs	r3, r0
 800597e:	b299      	uxth	r1, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2268      	movs	r2, #104	; 0x68
 8005984:	5299      	strh	r1, [r3, r2]
}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	46bd      	mov	sp, r7
 800598a:	b005      	add	sp, #20
 800598c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	08005b58 	.word	0x08005b58
 8005994:	08005b60 	.word	0x08005b60

08005998 <__libc_init_array>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	2600      	movs	r6, #0
 800599c:	4d0c      	ldr	r5, [pc, #48]	; (80059d0 <__libc_init_array+0x38>)
 800599e:	4c0d      	ldr	r4, [pc, #52]	; (80059d4 <__libc_init_array+0x3c>)
 80059a0:	1b64      	subs	r4, r4, r5
 80059a2:	10a4      	asrs	r4, r4, #2
 80059a4:	42a6      	cmp	r6, r4
 80059a6:	d109      	bne.n	80059bc <__libc_init_array+0x24>
 80059a8:	2600      	movs	r6, #0
 80059aa:	f000 f88d 	bl	8005ac8 <_init>
 80059ae:	4d0a      	ldr	r5, [pc, #40]	; (80059d8 <__libc_init_array+0x40>)
 80059b0:	4c0a      	ldr	r4, [pc, #40]	; (80059dc <__libc_init_array+0x44>)
 80059b2:	1b64      	subs	r4, r4, r5
 80059b4:	10a4      	asrs	r4, r4, #2
 80059b6:	42a6      	cmp	r6, r4
 80059b8:	d105      	bne.n	80059c6 <__libc_init_array+0x2e>
 80059ba:	bd70      	pop	{r4, r5, r6, pc}
 80059bc:	00b3      	lsls	r3, r6, #2
 80059be:	58eb      	ldr	r3, [r5, r3]
 80059c0:	4798      	blx	r3
 80059c2:	3601      	adds	r6, #1
 80059c4:	e7ee      	b.n	80059a4 <__libc_init_array+0xc>
 80059c6:	00b3      	lsls	r3, r6, #2
 80059c8:	58eb      	ldr	r3, [r5, r3]
 80059ca:	4798      	blx	r3
 80059cc:	3601      	adds	r6, #1
 80059ce:	e7f2      	b.n	80059b6 <__libc_init_array+0x1e>
 80059d0:	08005b74 	.word	0x08005b74
 80059d4:	08005b74 	.word	0x08005b74
 80059d8:	08005b74 	.word	0x08005b74
 80059dc:	08005b7c 	.word	0x08005b7c

080059e0 <memset>:
 80059e0:	0003      	movs	r3, r0
 80059e2:	1882      	adds	r2, r0, r2
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d100      	bne.n	80059ea <memset+0xa>
 80059e8:	4770      	bx	lr
 80059ea:	7019      	strb	r1, [r3, #0]
 80059ec:	3301      	adds	r3, #1
 80059ee:	e7f9      	b.n	80059e4 <memset+0x4>

080059f0 <register_fini>:
 80059f0:	4b03      	ldr	r3, [pc, #12]	; (8005a00 <register_fini+0x10>)
 80059f2:	b510      	push	{r4, lr}
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <register_fini+0xe>
 80059f8:	4802      	ldr	r0, [pc, #8]	; (8005a04 <register_fini+0x14>)
 80059fa:	f000 f805 	bl	8005a08 <atexit>
 80059fe:	bd10      	pop	{r4, pc}
 8005a00:	00000000 	.word	0x00000000
 8005a04:	08005a19 	.word	0x08005a19

08005a08 <atexit>:
 8005a08:	2300      	movs	r3, #0
 8005a0a:	b510      	push	{r4, lr}
 8005a0c:	0001      	movs	r1, r0
 8005a0e:	001a      	movs	r2, r3
 8005a10:	0018      	movs	r0, r3
 8005a12:	f000 f817 	bl	8005a44 <__register_exitproc>
 8005a16:	bd10      	pop	{r4, pc}

08005a18 <__libc_fini_array>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	4d07      	ldr	r5, [pc, #28]	; (8005a38 <__libc_fini_array+0x20>)
 8005a1c:	4c07      	ldr	r4, [pc, #28]	; (8005a3c <__libc_fini_array+0x24>)
 8005a1e:	1b64      	subs	r4, r4, r5
 8005a20:	10a4      	asrs	r4, r4, #2
 8005a22:	2c00      	cmp	r4, #0
 8005a24:	d102      	bne.n	8005a2c <__libc_fini_array+0x14>
 8005a26:	f000 f855 	bl	8005ad4 <_fini>
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}
 8005a2c:	3c01      	subs	r4, #1
 8005a2e:	00a3      	lsls	r3, r4, #2
 8005a30:	58eb      	ldr	r3, [r5, r3]
 8005a32:	4798      	blx	r3
 8005a34:	e7f5      	b.n	8005a22 <__libc_fini_array+0xa>
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	08005b7c 	.word	0x08005b7c
 8005a3c:	08005b80 	.word	0x08005b80

08005a40 <__retarget_lock_acquire_recursive>:
 8005a40:	4770      	bx	lr

08005a42 <__retarget_lock_release_recursive>:
 8005a42:	4770      	bx	lr

08005a44 <__register_exitproc>:
 8005a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a46:	4f1e      	ldr	r7, [pc, #120]	; (8005ac0 <__register_exitproc+0x7c>)
 8005a48:	0004      	movs	r4, r0
 8005a4a:	6838      	ldr	r0, [r7, #0]
 8005a4c:	0016      	movs	r6, r2
 8005a4e:	9100      	str	r1, [sp, #0]
 8005a50:	9301      	str	r3, [sp, #4]
 8005a52:	f7ff fff5 	bl	8005a40 <__retarget_lock_acquire_recursive>
 8005a56:	4b1b      	ldr	r3, [pc, #108]	; (8005ac4 <__register_exitproc+0x80>)
 8005a58:	6819      	ldr	r1, [r3, #0]
 8005a5a:	000b      	movs	r3, r1
 8005a5c:	33fc      	adds	r3, #252	; 0xfc
 8005a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a60:	2a00      	cmp	r2, #0
 8005a62:	d103      	bne.n	8005a6c <__register_exitproc+0x28>
 8005a64:	000a      	movs	r2, r1
 8005a66:	324d      	adds	r2, #77	; 0x4d
 8005a68:	32ff      	adds	r2, #255	; 0xff
 8005a6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8005a6c:	6853      	ldr	r3, [r2, #4]
 8005a6e:	6838      	ldr	r0, [r7, #0]
 8005a70:	2b1f      	cmp	r3, #31
 8005a72:	dd04      	ble.n	8005a7e <__register_exitproc+0x3a>
 8005a74:	f7ff ffe5 	bl	8005a42 <__retarget_lock_release_recursive>
 8005a78:	2001      	movs	r0, #1
 8005a7a:	4240      	negs	r0, r0
 8005a7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a7e:	2c00      	cmp	r4, #0
 8005a80:	d014      	beq.n	8005aac <__register_exitproc+0x68>
 8005a82:	0099      	lsls	r1, r3, #2
 8005a84:	1851      	adds	r1, r2, r1
 8005a86:	000f      	movs	r7, r1
 8005a88:	3788      	adds	r7, #136	; 0x88
 8005a8a:	603e      	str	r6, [r7, #0]
 8005a8c:	2701      	movs	r7, #1
 8005a8e:	0016      	movs	r6, r2
 8005a90:	409f      	lsls	r7, r3
 8005a92:	3685      	adds	r6, #133	; 0x85
 8005a94:	36ff      	adds	r6, #255	; 0xff
 8005a96:	6875      	ldr	r5, [r6, #4]
 8005a98:	31fc      	adds	r1, #252	; 0xfc
 8005a9a:	433d      	orrs	r5, r7
 8005a9c:	6075      	str	r5, [r6, #4]
 8005a9e:	9d01      	ldr	r5, [sp, #4]
 8005aa0:	60cd      	str	r5, [r1, #12]
 8005aa2:	2c02      	cmp	r4, #2
 8005aa4:	d102      	bne.n	8005aac <__register_exitproc+0x68>
 8005aa6:	68b1      	ldr	r1, [r6, #8]
 8005aa8:	430f      	orrs	r7, r1
 8005aaa:	60b7      	str	r7, [r6, #8]
 8005aac:	1c59      	adds	r1, r3, #1
 8005aae:	6051      	str	r1, [r2, #4]
 8005ab0:	3302      	adds	r3, #2
 8005ab2:	9900      	ldr	r1, [sp, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	5099      	str	r1, [r3, r2]
 8005ab8:	f7ff ffc3 	bl	8005a42 <__retarget_lock_release_recursive>
 8005abc:	2000      	movs	r0, #0
 8005abe:	e7dd      	b.n	8005a7c <__register_exitproc+0x38>
 8005ac0:	200004a8 	.word	0x200004a8
 8005ac4:	08005b68 	.word	0x08005b68

08005ac8 <_init>:
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ace:	bc08      	pop	{r3}
 8005ad0:	469e      	mov	lr, r3
 8005ad2:	4770      	bx	lr

08005ad4 <_fini>:
 8005ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ada:	bc08      	pop	{r3}
 8005adc:	469e      	mov	lr, r3
 8005ade:	4770      	bx	lr
